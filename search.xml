<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>工作记录</title>
    <url>/2024/12/31/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="539dbe50b6b4297ee0bcfa6477b40cfc61c41c14c58c82ff51b6ace5b5111050"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">非礼勿视</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title>生活规范</title>
    <url>/2024/12/31/%E6%97%A5%E5%B8%B8%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="d7168f4012b5e8723cf666a43f2069137b1409accc39fd1454ec6d7e2731047d"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">非礼勿视</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title>工作规范</title>
    <url>/2024/12/31/%E5%B7%A5%E4%BD%9C%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c196941b39c568769accd20cd5d34259d137484a562d1208926c7c01122c8ed3">b3ce3877181dba7d2dc822c297e3a5e461a588a800d045df3c29113d12bf7cbbb7d0f7661783787c364a123d51c9fbf700082b8c18d8f9e529d57580720f57be8970ca695dc7fbf44a86a874ba1e45b1ee1c2e39ee3b3f5eef2eb21a2a574136ace8821ae5f04c462bc469942411a6763087c3520426f068d9b4d1e7a67aa8fd50cb8809d71a2895d47ddc2cef1ebc35a989bf96ceb363de24fe779f1e2e355d99d847884ed2f20d283657dc072bf44b0b5b3740a2d8277f69a855487eab439895752bdd95d5eb6a2ef7cdbce14358f282bca70036824c6b5cb8184876933158436c2b8743869095151ca6a5e11f3010cf6feb9b4678c5384f2d876b2ac2fc835d5de31ea61ebd621bcd09b7e500d2d5caaa125c31105c0278e172b7702f9d8fbf9c50d0b4d78122027ebd259221636266ee1ba065d4f6e436acb9dbcc6a178a914918d8b16a93fe162a56cf3fc348b01e6a473f150b219b6e4d14433f8f1358c54c23de3b68dda1834dec3a0117f854f0f4de2bf51def7e80962f94f503423c9ad22e0c003ce658084b5ce54d6c0d4abd7d3569a9f1c7467ce92875c747e042db3ca2f4b79c5560b79a19a480f360e1f7ed2a8a8c3aeb510bce68e4c7d48184528b2bc60b0dcbd01d0e50177f04084d2ff43d50ebcf569231e4bdb157f54310bd25d2d6e9905d3451384b4399253fceb77bdda31800f1f8c3f17f1413b580f62d72543244092b7276cc4c01eaeb4db02e0e3255477c2ec5da53f6afa3a3ced99fd3728a06e3f0b245477da804a3d8210d4b18de43167e671533910ecc81a432f1204edec7663b6f10c4a4f125251501cee64737cf4be73213d736eb484a3c050645013797fc03b4db55c40bafe2279bcf6579ccc506e6e536fab4a03ad012bb4e3393994ae2caa1e79e7a45fa848c042f71fb5ca456ce03b73a3e0c4ab6604dd51de0a7f241f0333099b6ec0ee1a3c5e81c228da75cb422ab8ec69dc8b7ccd4f42a29c8622c2b0ccb4008d169b17e0d247048db35a616b61f1c6c51094ca76f503dd174980a1057deb03453da4682db2396e08858f62bf147f5cfc6e3053437c74de88a876270d4847e1f4e23c6e0f621fa189b486bb0330397cbd4f4aa79f95cf5721c22f99fefc59518e4182408386d8508f3e5b4fa3c17f29726ce82ac4e884ad0d5beafd85c6a350eacc9f10c3e40a7ed0dca3fcea9876a0f3d2ddf069181f6834bcc73f96a3cf82ae53c6d5c5cd1ae78c6aa3aafc383f4fa17b3a2024c94495316d981fb78de11a6f6ac3ed72061460a698e4efde99eaff3bd2b71f014d84a21836e9874c0d41049153ebbe870815d83c82aa290f6f5f9972ffac432cb3fb0ef12c5007cc4850b9d6fd60f5ddfae95a58c8c8e59066a3670e0b5876efa0657b5c3c67f150facba04532623519da01d129c45a2b810b546155312bbb2209525294f1b0990f7fb9cfff8f0868b42ed1356361e727da24c00082104aa51efadd4e0cdd43e2072d9d5e020b8b7ce3df9f1eabfd6efa1094231a168157535858fbfcd9fc25d2243aa419ceb9feea056a05bb0aa7321749cb3c6700a3c0807c8b1debe7cdaf576c842fdbb5513748bc5</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">非礼勿视</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title>反思</title>
    <url>/2024/12/31/%E5%8F%8D%E6%80%9D/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="5a9b6cfec51851a386e5cb2e971f7b62c0e4c513366a4c0bc6302af70b537565"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">非礼勿视</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title>心流</title>
    <url>/2024/01/22/29%20%E5%BF%83%E6%B5%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​	在昨天巧合之下发现了一位宝藏up主，他讲解的心流正是目前我所探寻的，给了我很多的思考，现在我打算自己来读一下心流。</p>
<p>​	up的视频：</p>
<p>​	<a href="https://www.bilibili.com/video/BV1tD4y1r7HZ/?spm_id_from=333.788&amp;vd_source=f06237b57d9754575c93eaa6db881c53">心流1</a></p>
<p>​	<a href="https://www.bilibili.com/video/BV1uV4y1V7oL/?spm_id_from=333.788&amp;vd_source=f06237b57d9754575c93eaa6db881c53">心流2</a></p>
<p>​	<a href="https://www.bilibili.com/video/BV1BM411k7Vf/?spm_id_from=333.788&amp;vd_source=f06237b57d9754575c93eaa6db881c53">心流3</a></p>
<p>​	<a href="https://www.bilibili.com/video/BV1v84y1r7H7/?spm_id_from=333.337.search-card.all.click&amp;vd_source=f06237b57d9754575c93eaa6db881c53">心流4</a></p>
<p>​	up的文字稿：</p>
<p>​	<a href="https://www.bilibili.com/read/cv19345945">心流1</a></p>
<p>​	<a href="https://mp.weixin.qq.com/s?__biz=Mzg5OTk1Nzc1MQ==&amp;mid=2247490837&amp;idx=6&amp;sn=18550ff6cf581e0a8fb7f2f605221c80&amp;chksm=c04a0b8df73d829b5b31ae3d318a4d4b27d615e2a1dc3c3f5a5aa35d8a7058e76ff507a99b71&amp;token=938128463&amp;lang=zh_CN&amp;scene=21#wechat_redirect">心流2</a></p>
<p>​	<a href="https://mp.weixin.qq.com/s?__biz=Mzg5OTk1Nzc1MQ==&amp;mid=2247490837&amp;idx=7&amp;sn=c01f0248e37131e0684e31d4ddf5be69&amp;chksm=c04a0b8df73d829b52df8601dcbf480228cbc43b38f4d3282f8b7230afdd622528cffcf1202b&amp;token=938128463&amp;lang=zh_CN&amp;scene=21#wechat_redirect">心流3</a></p>
<p>​	<a href="https://mp.weixin.qq.com/s?__biz=Mzg5OTk1Nzc1MQ==&amp;mid=2247490837&amp;idx=8&amp;sn=51e34adeb18de51fa7c0fa47776c785a&amp;chksm=c04a0b8df73d829b5481c86542bdb1590605b31b11cc029d3fabfb01509fb05ca49665f0a0b5&amp;token=938128463&amp;lang=zh_CN&amp;scene=21#wechat_redirect">心流4</a></p>
<p>​</p>
<p>​	先来说一下我的目的，也就是我为什么会看到这个视频，或者为了这一系列的视频而请了一天假，在我之前的观念里，请假是让我所不齿的，无论什么事情，都应该是以上班为第一要义，并且之前我也确实挺喜欢上班的，当然我现在也喜欢上班，只是有点迷失方向了，人山人海里，起起伏伏，熙熙攘攘，真的让我很迷茫、很迷茫，无论是上班的过程，还是在家休息的过程，都让我感到很忧伤，我认为我能做到的不仅仅是这样，不是在公司一坐坐一天，更不是在摸鱼、偷懒中度过白天上班的那段时间，上班期待着下班，下班后将时间都堆砌在那些垃圾娱乐上，而那些垃圾娱乐带来的又会是什么呢，是在当下有了沉浸感，但是在后面没有满足感，在处于垃圾娱乐的那段时间里，无可否认你会是在心流里，但是心流的状态并不是永远保持的，当你从心流的状态退出之后，你又该如何呢？会陷入悔恨和自卑，因为唯有自己不会欺骗自己，有没有成为一个更好的自己，才是一个真正的评判标准。当你晚上在床上躺下，开始反思一天的生活，你是否能心安理得的说出，今天我过的很不错，假如明天给我再来一次的机会，我会很高兴的度过今天这一天，这就是我们真正要努力到达的。</p>
<p>​	然而，我仍旧有问题，上面说的是我的宏观感受，那具体到个人的行为呢？要如何进行改变呢？毕竟我真正要改变的是自己呀，上面这些东西虽然提高了我心灵上的境界，但是在实际行为上并没有给我带来很大的帮助，所以仍旧需要我自己去探索。</p>
<p>​	先来分析上班时影响我进入心流状态的一些事情，首先是技术支持，你永远不知道客户问的都是一些怎样的问题，而且因为在技术支持的时候有着一天一百块的奖金，事实上，即使没有这一百块的奖金，我也是会很努力的回答的，我认为这是我的职责，是我的应该要尽的责任，但也正是因为这一点，就导致了我不能将身心全部投入到具体的一件事情上，有必要写一个工作时的一个行为准则。</p>
<ol>
<li>
<p>技术支持进行切片，无论是谁的技术支持，每半个小时都要花费五分钟的时间来进行客户答疑，即每小时的前五分钟和半小时之后的时间进行技术支持，作为奖励可以在这五分钟内听听音乐，注意这时候只能看着qq，也不需要你去做其他的事情，如果仅仅只是 在一个小时浪费十分钟的时间，其余的五十分钟都能很好的利用那也是很高的利用率了。</p>
</li>
<li>
<p>关于传输相关的问题，很多时候都要远程服务器进行百度网盘的上传等等，要传输的地方太多了，nas、两个备份，这中间要经过的步骤都是很繁琐的，即使我现在已经有了编译脚本，但传输的速度仍旧是很慢的，而我又不能时时刻刻的看它，而且这个东西在上传的时候总会让我分神，就比如它是不是突然暂停了，等一系列其他原因的出现。本来我想的是在我的百度网盘里直接上传完，然后在那个电脑上只需要分享一下即可，后来发现这样还是不太行，之前的计算方法其实不对，虽然现在的上传速度相较于之前快了很多很多，但是除此之外还有文件的上传速度，也就是说一个文件的上传时间有两份，以后尽可能的将时间乘以二分之三，也就是1.5倍，在这段时间内，不需要去管它。</p>
</li>
<li>
<p>手机问题，本来是有打算带着另一个手机上班的，现在看来，就是在痴心妄想，甚至就算是这个手机我也不是很想要留在身边，上一周试了一下，手机不在身边效率真的是大大的提高了。</p>
</li>
<li>
<p>另一个是关于QQ的问题，是不是可以考虑离线的状态，也就是这四天的非技术支持的时间，QQ是不是可以在5分钟之外的其他时间保持离线的状态，这样也就不会有一直想看QQ的心理了。</p>
<hr />
<p>总结完了，你看看工作的时候其实要注意的也就只有这些，但是关于生活呢，要做的肯定远远不止这些，有很多的诱惑需要摒弃，有很多的细节需要追寻，有很多的心理也需要剖析。</p>
</li>
</ol>
<p>==我希望用一生的时间不断学习和深入电子计算机相关的一切知识， 并将其整理成网络，分享出来，与更多志同道合的朋友一起进步。==</p>
<p>​</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
  </entry>
  <entry>
    <title>必剪学习</title>
    <url>/2024/01/18/28_%E5%BF%85%E5%89%AA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1软件的下载和安装"><a class="markdownIt-Anchor" href="#1软件的下载和安装"></a> 1.软件的下载和安装</h1>
<p><a href="https://bcut.bilibili.cn/">必剪</a></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401172022927.png" alt="image-20240117202232865" /></p>
<p>​	安装完成之后打开，具体如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401172022957.png" alt="image-20240117202252915" /></p>
<p>​	至此，关于必剪的安装就完成了，然后开始进行下一个阶段的学习吧。</p>
<h1 id="2必剪使用流程"><a class="markdownIt-Anchor" href="#2必剪使用流程"></a> 2.必剪使用流程</h1>
<p>​	首先点击开始创作，具体如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401172024874.png" alt="image-20240117202434830" /></p>
<p>​	点击之后如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401172025359.png" alt="image-20240117202503291" /></p>
<h2 id="21-菜单栏"><a class="markdownIt-Anchor" href="#21-菜单栏"></a> 2.1 菜单栏</h2>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401172025789.png" alt="image-20240117202540774" /></p>
<p>​	必剪的左上方有着三个菜单栏，分别是文件、剪辑和帮助，并且必剪可以自动保存，这一点就很好。</p>
<h2 id="22-功能栏"><a class="markdownIt-Anchor" href="#22-功能栏"></a> 2.2 功能栏</h2>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401172035969.png" alt="image-20240117203550954" /></p>
<p>​	功能栏分为“本地素材”、“素材库”、“B站热梗”、“音频”、“文本”、“贴纸”、“特效”、“转场”、“一键三联”、“滤镜”、“调色”。</p>
<h3 id="221-本地素材"><a class="markdownIt-Anchor" href="#221-本地素材"></a> 2.2.1 本地素材</h3>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401172038506.png" alt="image-20240117203849494" /></p>
<p>​		可以分别导入视频、图片、音频三个本地素材。</p>
<h3 id="222-素材库"><a class="markdownIt-Anchor" href="#222-素材库"></a> 2.2.2 素材库</h3>
<p>​	这里存放着的是一些有用的素材，如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401172044566.png" alt="image-20240117204430534" /></p>
<p>​	可以在这里寻找一些有用的素材，一般情况下是用不到的。</p>
<h3 id="223-b站热梗"><a class="markdownIt-Anchor" href="#223-b站热梗"></a> 2.2.3 B站热梗</h3>
<p>​	一些好玩的B站热梗，不过一般情况下，我是用不到的。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401172054582.png" alt="image-20240117205420559" /></p>
<h3 id="224-音频"><a class="markdownIt-Anchor" href="#224-音频"></a> 2.2.4 音频</h3>
<p>​	用来存放一些音频</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401172054670.png" alt="image-20240117205437652" /></p>
<h3 id="225-文本"><a class="markdownIt-Anchor" href="#225-文本"></a> 2.2.5 文本</h3>
<p>​	这里可以添加一些文本，还可以自动识别字幕，如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401172057058.png" alt="image-20240117205738043" /></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401172058678.png" alt="image-20240117205836568" /></p>
<p>​	如果出现了一些问题，也可以根据右边的字幕列表来修改字幕。</p>
<h3 id="226-贴纸"><a class="markdownIt-Anchor" href="#226-贴纸"></a> 2.2.6 贴纸</h3>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401172100665.png" alt="image-20240117210014650" /></p>
<h3 id="227-特效"><a class="markdownIt-Anchor" href="#227-特效"></a> 2.2.7 特效</h3>
<p>​</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401172100620.png" alt="image-20240117210050588" /></p>
<h3 id="228-转场"><a class="markdownIt-Anchor" href="#228-转场"></a> 2.2.8 转场</h3>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401172101821.png" alt="image-20240117210141794" /></p>
<h3 id="229-一键三联"><a class="markdownIt-Anchor" href="#229-一键三联"></a> 2.2.9 一键三联</h3>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401172103908.png" alt="image-20240117210357894" /></p>
<p>​	哈哈，我感觉这个可以有。</p>
<h3 id="2210-滤镜"><a class="markdownIt-Anchor" href="#2210-滤镜"></a> 2.2.10 滤镜</h3>
<p>​</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401172104375.png" alt="image-20240117210424351" /></p>
<h3 id="2211-调色"><a class="markdownIt-Anchor" href="#2211-调色"></a> 2.2.11 调色</h3>
<p>​	这个无所谓了。</p>
<h2 id="23-时间线窗口"><a class="markdownIt-Anchor" href="#23-时间线窗口"></a> 2.3 时间线窗口</h2>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401172105602.png" alt="image-20240117210536566" /></p>
<h2 id="24-素材属性调整"><a class="markdownIt-Anchor" href="#24-素材属性调整"></a> 2.4 素材属性调整</h2>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401172114094.png" alt="image-20240117211406076" /></p>
<h2 id="25-快捷按键"><a class="markdownIt-Anchor" href="#25-快捷按键"></a> 2.5 快捷按键</h2>
<p>​	快速选择分割工具 C</p>
<p>​	快速选择工具V</p>
<p>​	分割状态下的单次分割为 X</p>
<p>​	放大轨道为 =</p>
<p>​	缩小隧道为 -</p>
<p>​	切换全屏 ctrl+`</p>
<h1 id="3进度条添加"><a class="markdownIt-Anchor" href="#3进度条添加"></a> 3.进度条添加</h1>
<p>白色和蓝色</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401172146002.png" alt="image-20240117214656976" /></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401172151087.png" alt="image-20240117215111035" /></p>
<p>最终效果</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401172157895.png" alt="image-20240117215754864" /></p>
]]></content>
      <categories>
        <category>剪辑</category>
      </categories>
  </entry>
  <entry>
    <title>C高级学习</title>
    <url>/2024/01/02/23%20%E5%B5%8C%E5%85%A5%E5%BC%8FC%E8%AF%AD%E8%A8%80%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​	先说一下前提条件，在五年前的大一下学期，我第一次系统的学习了C语言，但那也仅仅只是一个初步的入门，并且在学校中的学习呀，大家懂的都懂，没有深究、没有思考、一切呀都是为了考试，然而如今的我不一样了，相对而言，我更喜欢研究研究研究这些，或者在小说的世界里躲避一下生活，这些都是类似的，只不过研究研究这些更让我有成就感，晚上就慢慢的来吧。</p>
<h1 id="1计算机理论基石"><a class="markdownIt-Anchor" href="#1计算机理论基石"></a> 1.计算机理论基石</h1>
<p>​	前面的关于二极管、三极管以及cmos管的原理这里就不深究了，等我以后再更深层次的学习的时候再说，现在就直接从CPU直接的工作原理开始。</p>
<p>​	计算机的核心：==任何复杂的运算都可以分解为有限个的基本指令运算==。这句话其实我好久好久之前就听说过了，但其实呀一直不解其意这个原理被称为图灵完备性，它表明只要有足够的基本指令，就可以执行任何可计算的任务。</p>
<p>​	在现代计算机上，也是采用这个原理。计算机的中央处理器（CPU）通过执行一系列的基本指令来完成各种复杂的任务。这些基本指令包括算术操作（如加法、减法、乘法）、逻辑操作（如与、或、非）、条件分支（如if语句）和循环（如for循环）等。</p>
<p>​	下面是一个简单的例子，展示了如何使用基本指令来执行一个较复杂的任务，即计算一个整数的阶乘：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    result = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        result *= i</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(factorial(<span class="number">5</span>))  <span class="comment"># 输出 120</span></span><br></pre></td></tr></table></figure>
<p>​	在这个例子中，我们使用了基本的乘法和循环指令来计算给定整数的阶乘。通过多次执行乘法操作和循环迭代，实现了一个复杂的计算任务。</p>
<p>​	即使是电脑上的按键操作和视频播放这样的高级任务，也可以通过分解为基本指令运算来实现。</p>
<p>​	例如，当你在电脑上按下一个键时，操作系统会通过底层的指令来检测按键的状态。这可能涉及到读取硬件设备的输入状态、处理中断信号和执行相应的操作。这些底层指令可能包括读取寄存器、执行条件分支、更新内存等等。通过组合这些基本指令，操作系统可以捕捉到按键事件，并触发相应的操作，如打开应用程序、输入字符等。</p>
<p>​	类似地，视频播放也可以通过基本指令来实现。当你打开一个视频文件时，视频播放器会解码视频数据、渲染图像、播放音频等。这些操作涉及到复杂的算法和数据处理，但它们可以分解为基本指令的执行。例如，视频解码可能包括读取文件、解析视频编码、处理图像数据、渲染图像等。通过执行这些基本指令的组合，视频播放器可以实现流畅的视频播放。</p>
<p>​	因此，无论是按键操作还是视频播放，都可以通过将复杂的任务分解为基本指令运算来实现，并且现代计算机提供了这些基本指令的支持。</p>
<p>​	==电脑上的一切操作都可以分解为上面所说的算术操作、逻辑操作、条件分支等一系列基本指令==</p>
<p>​	当然你要懂得的肯定不止上面这些，还有一些跟深层次的分解，就比如复杂的操作是如何被分解为一个个基本指令的、CPU是如何识别这些基本指令的、CPU如何确定这条指令是否运行完成，以及这些基本指令是如何一条条的排序逐次运行的呢？</p>
<p>​	指令集：CPU的加减乘除、与或非、load、store等基本指令一般称之为指令集，任何复杂的运算都可以分解为指令集中的基本指令</p>
<p>​	程序：这种由基本指令组成的不同组合就称之程序。</p>
<p>​	汇编语言：为了变成方便，我们给每个二进制的指令起了一个别名，也可以称之为助记符，也就是我们常说的汇编指令。</p>
<p>​	高级语言：虽然汇编语言的出现给人们带来了极大的便利，人们不需要面对不懂含义的101010，但是当工程更为复杂的时候，汇编的维护也会变得极为艰难，所以为了迎合人们的开发和阅读，人们在汇编的基础上做了一系列的高级语言，就比如python、C、c++和java。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312112059025.png" alt="image-20231211205948001" /></p>
<p>​	然后用一个最简单的C语言程序和C++程序来验证</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="number">2</span> </span><br><span class="line"><span class="number">3</span> <span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">4 &#123;</span><br><span class="line"><span class="number">5</span>     <span class="built_in">printf</span>(<span class="string">&quot;hello world \r\n&quot;</span>);           </span><br><span class="line"><span class="number">6</span>     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="number">7</span> &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;                                    </span><br></pre></td></tr></table></figure>
<p>​	上面是两个最简单的C语言和C++语言的helloworld编程示例，而且最终的实现效果相同都是打印出来helloworld，如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312112103692.png" alt="image-20231211210339665" /></p>
<p>​	这个a.out是编译过后的可执行文件，中间的编译过程又是怎么样的呢？</p>
<p>​	就像上面图示绘制的那样，高级语言都有对应的编译器，C语言又gcc,C<ins>有g</ins>，如果只是通过下面的命令进行编译的话只会得到最后的可执行文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc test.c</span><br><span class="line">g++ test.cpp</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312112133800.png" alt="image-20231211213317748" /></p>
<p>​	当然因为上面两个命令生成的都是a.out所以就覆盖了，也可以通过-o命令进行执行生成的可执行文件名称</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc test.c -o test_c</span><br><span class="line">g++ test.cpp -o test_c++</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312112134585.png" alt="image-20231211213439536" /></p>
<p>一个高级语言编译成可执行文件，更详细的过程为预处理、编译、汇编、链接</p>
<p>(1)预处理指的是将头文件、函数、恒定义等都展开，可以通过-E参数来实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -E test.c</span><br><span class="line">g++ -E test.cpp</span><br></pre></td></tr></table></figure>
<p>(2)编译指的是通过编译器将高级语言编译为汇编语言，可以通过-S参数来完成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -S test.c -o test_c.s</span><br><span class="line">g++ -S test.cpp -o test_cpp.s</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312112140031.png" alt="image-20231211214028969" /></p>
<p>以s结尾的就是汇编文件，现在对于汇编语言的理解可以不用过深，以后再说。</p>
<p>(3)汇编指的是将汇编程序通过汇编器编译为二进制的.o文件，可以通过参数-c来完成。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -c test.c -o test_c.o</span><br><span class="line">g++ -c test.cpp -o test_cpp.o</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312112144517.png" alt="image-20231211214409461" /></p>
<p>(4)链接，可以将多个.o文件链接到一起从而生成可执行文件，没有命令，直接gcc编译即可。</p>
<p>​	==我这里有个疑问，我这个程序是最简单那的hello world，也没有多个文件，那他未什么要进行链接呢，我这个地方不是很懂，希望下面的学习能解答我这个疑惑==</p>
<h1 id="2cpu的频率指的是什么"><a class="markdownIt-Anchor" href="#2cpu的频率指的是什么"></a> 2.CPU的频率指的是什么</h1>
<p>​	我先说一下，这个我确实是不知道，我学了这么多年的计算机，我第一台电脑是18年大学，我爸给买的戴尔G3，那时候是一个8300的CPU，后来电脑烧了，我爸又给我买了一个洋垃圾台式机，CPU是2690,虽然现在知道了他是洋垃圾，但之前是不知道的呀，其实就也还好吧，每一段时间都有一段时间的感悟，再后来我工作了，自己花实习的一个月工资高了一台小主机，5900hx的CPU，一年之后没有笔记本，又搞了一台联想的笔记本，笔记本的CPU是6800hx，总体跟我的5900hx差不多，再后来不满足需求了，又因为我的4070ti显卡一直在闲置，我也不想卖掉，所以两个月前又买了一个13900kf的无核显主机，买了这么多电脑，终于是对电脑有了一些基本的认识，但是对于CPU的频率依然是一知半解，趁着这个机会学习一下。</p>
<p>​	<strong>频率的概念</strong></p>
<p>​	在CPU这个复杂的数字系统中，为了确保内部所有硬件单元能够协同快速工作，CPU架构工程师们往往会设计一套时钟信号与系统同步进行操作。时钟信号是由一系列的脉冲信号构成，并且总是按一定电压幅度、时间间隔连续发出的方波信号，它周期性地在0与1之间往复变化。在第一脉冲和第二个脉冲之间的时间间隔称之为周期，它的单位是秒（s）。但单位时间1s内所产生的脉冲个数称之为频率，频率的最基本计量单位就是赫兹Hz。</p>
<p>​	以Intel Core i3-8350k为例，它的默频是4GHz，意味着它内部时钟频率为4GHz，一秒钟可以产生40亿个脉冲信号，换句话说每一个脉冲信号仅仅用时0.25ns（时钟周期）。这是多么令人震惊的时钟，可以想象到CPU内部结构是多么精妙，可以处理如此之短的信号，整套系统协同有序地运行，所以才会说CPU是全人类智慧的结晶，极大地提升了我们的科技水平进步。</p>
<p>​	时钟周期作为CPU操作的最小时间单位，内部的所有操作都是以这个时钟周期作为基准。一般来说CPU都是以时钟脉冲的上升沿作为执行指令的基准，频率越高，CPU执行的指令数越多，工作速度越快。</p>
<p>​	那么CPU频率是由什么决定的呢？其实这个是一个非常复杂的问题，因为决定这个频率是一个系统学的东西，影响到频率高度的因素非常之多，诸如CPU的架构、流水线设计、内部寄存器设计、支持的指令甚至是功耗、温度这些物理因素，所以说CPU出厂频率就是综合多种考虑，以木桶效应下的最小值作为CPU的最高频率。</p>
<p>​	G是十的9次方也就是十亿，M是10的6次方也就是百万，K是10的3次方，</p>
<p><strong>外频</strong></p>
<p>​	CPU在诞生后不久，各大CPU巨头为了追求高性能，开启了频率大战（有没有效果这个我们先不提），但是这样一来，CPU虽然跑得更换了（主频更高），但是外部的主板芯片组、内存、外部接口（PCIe、Sata）可还是处于旧有标准，而且这些设备的运行频率早就固定下来了，并且远低于CPU工作频率。</p>
<p>​	这样一来CPU就无法很好与之交流，Intel就机智地提出了倍频的概念（下面讲述），并且提出了影响至今的一个CPU主频计算公式：主频=外频 X 倍频，外频的提出可以让主板外部的设备工作在较低的频率下，并且还能正确地CPU进行交流。</p>
<p>​	但总是有很多网友将前端总线频率和外频混为一谈，其实他们不太一样。在以前有北桥的时代，前端总线是CPU总线接口单元和北桥芯片之间的数据交换通道，曾经在AMD雷鸟系列、Intel奔腾 4处理器以前，前端总线与外频是一致的，但后来有了四倍数据传输率技术或者是八倍数据传输率技术，前端总线频率就极大地提高了。</p>
<p>​	举个例子，如果一个处理器的频率是2GHz，外频为100MHz，使用四倍数据传输率技术时，前端总线频率就变成400MHz；如果是八倍，那么就是800MHz。前端总线频率越大, 代表着CPU与北桥芯片之间的数据传输能力越大, 更能充分发挥出CPU的功能。<br />
目前处理器的默认外频基本上都是100MHz</p>
<p><strong>倍频</strong></p>
<p>​	目前的CPU设计的外频都相当低，只有100MHz，CPU要获得更快运算速度，我们就需要获得一个超高速的频率来支撑更快运算速度。而CPU通常就是在内部设计有一个锁相环频率发生器，对于输入的时钟信号进行分频处理，按照一定比例提高输入的外频频率，从而得到CPU的实际工作频率，这个比例就称之为倍频系数（简称倍频）。</p>
<p>​	利用倍频技术, 较为完美地解决了CPU和内存等数据中转站的异步运行问题。为CPU后来向更高频率方向发展打下了扎实的基础。</p>
<p>​	倍频系数是指CPU主频与外频之间的相对比例关系。在相同的外频下，倍频越高CPU的频率也越高。但实际上，在相同外频的前提下，高倍频的CPU本身意义并不大。这是因为CPU与系统之间数据传输速度是有限的，一味追求高主频而得到高倍频的CPU就会出现明显的“瓶颈”效应－CPU从系统中得到数据的极限速度不能够满足CPU运算的速度。</p>
<p>​	我有个问题，我的13900KF的CPU频率是5.8GHZ ,我的内存频率是6000M的DDR5内存，这么算的话我的内存比CPU频率高呀，但理论来说不是呀，那问题出在哪？</p>
<p>​	时间的单位是纳秒（ns，十亿分之一秒），毫秒（ms，千分之一秒），和秒（s）。吞吐量的单位是兆字节（MB）和千兆字节（GB）。让我们先从CPU和内存开始，下图是北桥部分：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312112227283.webp" alt="img" /></p>
<p>​	第一个令人惊叹的事实是：CPU快得离谱。在Core 2 3.0GHz上，大部分简单指令的执行只需要一个时钟周期，也就是<strong>1/3纳秒</strong>。即使是真空中传播的光，在这段时间内也只能走10厘米（约4英寸）。把上述事实记在心中是有好处的。当你要对程序做优化的时候就会想到，执行指令的开销对于当今的CPU而言是多么的微不足道。</p>
<p>​	当CPU运转起来以后，它便会通过L1 cache和L2 cache对系统中的主存进行读写访问。cache使用的是静态存储器(SRAM)。相对于系统主存中使用的动态存储器（DRAM），cache读写速度快得多、造价也高昂得多。cache一般被放置在CPU芯片的内部，加之使用昂贵高速的存储器，使其给CPU带来的延迟非常低。在指令层次上的优化（instruction-level optimization），其效果是与优化后代码的大小息息相关。由于使用了高速缓存技术（caching），那些能够整体放入L1/L2 cache中的代码，和那些在运行时需要不断调入/调出（marshall into/out of）cache的代码，在性能上会产生非常明显的差异。</p>
<p>​	正常情况下，当CPU操作一块内存区域时，其中的信息要么已经保存在L1/L2 cache，要么就需要将之从系统主存中调入cache，然后再处理。如果是后一种情况，我们就碰到了第一个瓶颈，一个大约250个时钟周期的延迟。在此期间如果CPU没有其他事情要做，则往往是处在停机状态的（stall）。为了给大家一个直观的印象，我们把CPU的一个时钟周期看作一秒。那么，从L1 cache读取信息就好像是拿起桌上的一张草稿纸（3秒）；从L2 cache读取信息则是从身边的书架上取出一本书（14秒）；而从主存中读取信息则相当于走到办公楼下去买个零食（4分钟）。</p>
<p>​	主存操作的准确延迟是不固定的，与具体的应用以及其他许多因素有关。比如，它依赖于列选通延迟(CAS)以及内存条的型号，它还依赖于CPU指令预取的成功率。指令预取可以根据当前执行的代码来猜测主存中哪些部分即将被使用，从而提前将这些信息载入cache。</p>
<p>看看L1/L2 cache的性能，再对比主存，就会发现：配置更大的cache或者编写能更好的利用cache的应用程序，会使系统的性能得到多么显著的提高。</p>
<p>​	人们通常把CPU与内存之间的瓶颈叫做<strong>冯·诺依曼瓶颈（von Neumann bottleneck）</strong>。当今系统的前端总线带宽约为10GB/s，看起来很令人满意。在这个速度下，你可以在1秒内从内存中读取8GB的信息，或者10纳秒内读取100字 节。遗憾的是，这个吞吐量只是理论最大值（图中其他数据为实际值），而且是根本不可能达到的，因为主存控制电路会引入延迟。在做内存访问时，会遇到很多零 散的等待周期。比如电平协议要求，在选通一行、选通一列、取到可靠的数据之前，需要有一定的信号稳定时间。由于主存中使用电容来存储信息，为了防止因自然 放电而导致的信息丢失，就需要周期性的刷新它所存储的内容，这也带来额外的等待时间。某些连续的内存访问方式可能会比较高效，但仍然具有延时。而那些随机 的内存访问则消耗更多时间。所以延迟是不可避免的。</p>
<p>图中下方的南桥连接了很多其他总线（如：PCI-E, USB）和外围设备：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312112229804.webp" alt="img" /></p>
<p>​	令人沮丧的是，南桥管理了一些反应相当迟钝的设备，比如硬盘。就算是缓慢的系统主存，和硬盘相比也可谓速度如飞了。继续拿办公室做比喻，等待硬盘寻道的时间相当于离开办公大楼并开始长达<strong>一年零三个月</strong>的环球旅行。这就解释了为何电脑的大部分工作都受制于磁盘I/O，以及为何数据库的性能在内存缓冲区被耗尽后会陡然下降。同时也解释了为何充足的RAM（用于缓冲）和高速的磁盘驱动器对系统的整体性能如此重要。</p>
<p>虽然磁盘的&quot;连续&quot;存取速度确实可以在实际使用中达到，但这并非故事的全部。真正令人头疼的瓶颈在于寻道操作，也就是在磁盘表面移动读写磁头到正确的磁道上，然后再等待磁盘旋转到正确的位置上，以便读取指定扇区内的信息。RPM（每分钟绕转次数）用来指示磁盘的旋转速度：RPM越大，耽误在寻道上的时间就越少，所以越高的RPM意味着越快的磁盘。</p>
<p>当 磁盘驱动器读取一个大的、连续存储的文件时会达到更高的持续读取速度，因为省去了寻道的时间。文件系统的碎片整理器就是用来把文件信息重组在连续的数据块 中，通过尽可能减少寻道来提高数据吞吐量。然而，说到计算机实际使用时的感受，磁盘的连续存取速度就不那么重要了，反而应该关注驱动器在单位时间内可以完 成的寻道和随机I/O操作的次数。对此，固态硬盘可以成为一个很棒的选择。</p>
<p>硬盘的cache也有助于改进性能。虽然16MB的cache只能覆盖整个磁盘容量的0.002%，可别看cache只有这么一点大，其效果十分明显。它可以把一组零散的写入操作合成一个，也就是使磁盘能够控制写入操作的顺序，从而减少寻道的次数。同样的，为了提高效率，一系列读取操作也可以被重组，而且操作系统和驱动器固件(firmware)都会参与到这类优化中来。</p>
<p>最后，图中还列出了网络和其他总线的实际数据吞吐量。火线(fireware)仅供参考，Intel X48芯片组并不直接支持火线。我们可以把Internet看作是计算机之间的总线。去访问那些速度很快的网站（比如<a href="https://link.zhihu.com/?target=http%3A//google.com">http://google.com</a>），延迟大约45毫秒，与硬盘驱动器带来的延迟相当。事实上，尽管硬盘比内存慢了5个数量级，它的速度与Internet是在同一数量级上的。目前，一般家用网络的带宽还是要落后于硬盘连续读取速度的，但&quot;网络就是计算机&quot;这句话可谓名符其实。如果将来Internet比硬盘还快了，那会是个什么景象呢？</p>
<p>==内存频率（6000 MHz）指的是内存模块的时钟速度，它表示内存模块每秒钟能够完成的数据传输次数。它通常用于衡量内存模块的性能，较高的内存频率可以提供更快的数据传输速度。==</p>
<p>==CPU频率（5.8 GHz）指的是中央处理器（CPU）的时钟速度，它表示CPU每秒钟执行指令的次数。CPU频率是衡量CPU性能的指标之一，较高的CPU频率通常表示更高的计算能力和处理速度。==</p>
<h1 id="3cache"><a class="markdownIt-Anchor" href="#3cache"></a> 3.cache</h1>
<p>​	cache是sram是静态随机存储器，而内存是sram是动态随机存储器，静态是比动态速度更快的，但是呢，更快意味着更贵。我之前一直对cache了解的不多，知道一级cache、二级cache、三级cache，但并不明白他们的作用，如今学习到这里了，就认识一下。找了一段cdsn大佬的讲解，很生动，这里记录一下。</p>
<p>对于没有接触过底层技术的朋友来说，或许从未听说过cache。毕竟cache的存在对程序员来说是透明的。在接触cache之前，先为你准备段code分析：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">10</span>][<span class="number">128</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">128</span>; j++)</span><br><span class="line">                arr[i][j] = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>如果你曾经学习过C/C++语言，这段code自然不会陌生。如此简单的将<code>arr</code><a href="https://so.csdn.net/so/search?q=%E6%95%B0%E7%BB%84&amp;spm=1001.2101.3001.7020">数组</a>所有元素置1。 你有没有想过这段code还有下面的一种写法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">10</span>][<span class="number">128</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">128</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">                arr[j][i] = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>​	功能完全一样，但是我们一直在重复着第一种写法（或许很多的书中也是建议这么编码），你是否想过这其中的缘由？文章的主角是cache，所以你一定猜到了答案。那么cache是如何影响这2段code的呢？</p>
<h2 id="为什么需要cache"><a class="markdownIt-Anchor" href="#为什么需要cache"></a> 为什么需要cache</h2>
<p>在思考为什么需要cache之前，我们首先先来思考另一个问题：我们的程序是如何运行起来的？</p>
<p>我们应该知道程序是运行在 <strong>RAM</strong>之中，RAM 就是我们常说的DDR（例如： <strong>DDR3、DDR4</strong>等）。我们称之为<strong>main memory（主存）</strong>。当我们需要运行一个进程的时候，首先会从<strong>磁盘设备</strong>（例如，eMMC、UFS、SSD等）中将可执行程序load到主存中，然后开始执行。在CPU内部存在一堆的<strong>通用寄存器（register）</strong>。如果CPU需要将一个变量（假设地址是A）加1，一般分为以下3个步骤：</p>
<ol>
<li>CPU 从主存中读取地址A的数据到内部通用寄存器 x0（ARM64架构的通用寄存器之一）</li>
<li>通用寄存器 x0 加1</li>
<li>CPU 将通用寄存器 x0 的值写入<strong>主存</strong></li>
</ol>
<p>我们将这个过程可以表示如下：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312112220988.png" alt="img" /></p>
<p>其实现实中，CPU<strong>通用寄存器的速度和主存之间存在着太大的差异</strong>。两者之间的速度大致如下关系：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312112220339.png" alt="img" /></p>
<p>​	CPU register的速度一般小于1ns，主存的速度一般是65ns左右。速度差异近百倍。因此，上面举例的3个步骤中，<strong>步骤1和步骤3实际上速度很慢</strong>。当CPU试图从主存中load/store 操作时，由于主存的速度限制，CPU不得不等待这漫长的65ns时间。如果我们可以提升主存的速度，那么系统将会获得很大的性能提升。如今的DDR存储设备，动不动就是几个GB，容量很大。如果我们采用更快材料制作更快速度的主存，并且拥有几乎差不多的容量。其成本将会大幅度上升。我们试图提升主存的速度和容量，又期望其成本很低，这就有点难为人了。因此，我们有一种折中的方法，那就是制作一块速度极快但是容量极小的存储设备。那么其成本也不会太高。这块存储设备我们称之为<strong>cache memory</strong>。在硬件上，我们<strong>将cache放置在CPU和主存之间</strong>，作为主存数据的缓存。 <strong>当CPU试图从主存中load/store数据的时候， CPU会首先从cache中查找对应地址的数据是否缓存在cache 中。如果其数据缓存在cache中，直接从cache中拿到数据并返回给CPU</strong>。当存在cache的时候，以上程序如何运行的例子的流程将会变成如下：</p>
<p><img src="https://img-blog.csdnimg.cn/20200830230817392.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JsZWF1Y2hhdA==,size_16,color_FFFFFF,t_70" alt="img" /></p>
<p>CPU和主存之间直接数据传输的方式转变成CPU和cache之间直接数据传输，cache负责和主存之间数据传输。</p>
<h2 id="多级cache存储结构"><a class="markdownIt-Anchor" href="#多级cache存储结构"></a> <strong>多级cache存储结构</strong></h2>
<p>cahe的速度在一定程度上同样影响着系统的性能。一般情况cache的速度可以达到1ns，几乎可以和CPU寄存器速度媲美。但是，这就满足人们对性能的追求了吗？并没有。当cache中没有缓存我们想要的数据的时候，依然需要漫长的等待从主存中load数据。为了进一步提升性能，引入多级cache。前面提到的cache，称之为<strong>L1 cache</strong>（第一级cache）。我们在L1 cache 后面连接<strong>L2 cache</strong>，在L2 cache 和主存之间连接<strong>L3 cache</strong>。等<strong>级越高，速度越慢，容量越大</strong>。但是速度相比较主存而言，依然很快。不同等级cache速度之间关系如下：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312120658651.png" alt="img" /></p>
<p>经过3级cache的缓冲，各级cache和主存之间的速度最萌差也逐级减小。在一个真实的系统上，各级cache之间硬件上是如何关联的呢？我们看下Cortex-A53架构上各级cache之间的硬件抽象框图如下：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312120659396.png" alt="img" /></p>
<p>​	在Cortex-A53架构上，<strong>L1 cache分为单独的instruction cache（ICache）和data cache（DCache），指令和数据分开</strong>。L1 cache是每个CPU私有的，<strong>每个CPU都有一个L1 cache</strong>。一个cluster 内的所有CPU共享一个L2 cache，<strong>L2 cache不区分指令和数据，都可以缓存</strong>。所有cluster之间共享L3 cache，L3 cache通过总线和主存相连</p>
<p>​	关于cache就学习到这里，如果想要学习更多相关的可以看这个<a href="https://blog.csdn.net/bleauchat/article/details/108312753?ops_request_misc=%7B%22request%5Fid%22%3A%22170230386216800225597418%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=170230386216800225597418&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-108312753-null-null.142%5Ev96%5Epc_search_result_base2&amp;utm_term=cache&amp;spm=1018.2226.3001.4187">博客</a>.</p>
<h1 id="4总线和地址"><a class="markdownIt-Anchor" href="#4总线和地址"></a> 4.总线和地址</h1>
<p>​	先来阐述一个疑惑<strong>32位的CPU和64位的CPU这里的32和64指的什么</strong>？</p>
<p>​	32位CPU：指的是处理器的寻址能力或数据总线宽度为32位。这意味着该处理器可以在单个时钟周期内处理32位（4字节）的数据或地址。它最大支持的物理内存容量通常限制在4GB左右。</p>
<p>​	64位CPU：指的是处理器的寻址能力或数据总线宽度为64位。这意味着该处理器可以在单个时钟周期内处理64位（8字节）的数据或地址。它的寻址能力更大，可以支持更大的物理内存容量，通常可以支持数TB（1TB = 1024GB）的内存。</p>
<p>​	因此，32位和64位CPU主要区别在于它们的寻址能力和数据总线宽度，这直接影响到它们在处理数据和内存方面的能力和限制。64位CPU相对于32位CPU具有更高的处理能力和更大的内存扩展性。</p>
<p>​	CPU和内存以及各种外部设备是通过总线连接在一起的，那CPU是如何访问内存或者控制各个外部设备的呢？在CPU内部，存在一系列的寄存器，这些寄存器是没有地址的，只需要寄存器的名称去访问即可，而内存以及各个外部设备就需要地址去访问了。那这里的地址是什么，这里的地址又是如何分配的呢？</p>
<p>​	地址的本质实际上就是由CPU管教发出的一组地址控制信号，因为这些信号是由CPU管教直接发出的，因此也被称之为物理地址。在带有MMU的CPU平台下 ，程序的运行一般使用的是虚拟地址，MMU会把虚拟地址转换为物理地址，然后通过CPU的管教发送出去。</p>
<p>​	所谓总线（Bus），是指计算机设备和设备之间传输信息的公共数据通道。总线是连接计算机硬件系统内多种设备的通信线路，它的一个重要特征是由总线上的所有设备共享，可以将计算机系统内的多种设备连接到总线上。如果是某两个设备或设备之间专用的信号连线，就不能称之为总线。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312120727706.png" alt="9bb1a43e2e0140128d3e1e35f1bf0096.png" /></p>
<p>​	一些总线标准：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312120726170.png" alt="770540885ce04b5a83ef5b49f5fc9546.png" /></p>
<h1 id="5指令集和微架构"><a class="markdownIt-Anchor" href="#5指令集和微架构"></a> 5.指令集和微架构</h1>
<p>​	在第一节提到过，任何一个复杂的程序都可以分解位=为有限个基本指令的组合，而这些是在CPU设计的时候就已经确定了的，他的内部只允许对应指令的完成，而不同架构的处理器，他们的指令是不一样的，哪怕是同样的指令，他们的内部电路实现也是不一样的，所以不同架构的可执行程序是不能混用的。ARM架构的处理器只能运行ARM架构的程序，X86架构的处理器只允许运行X86架构的程序。上面提到的这些指令的集合就被称之为指令集。</p>
<p>​	在芯片工程师设计CPU的时候，要根据指令集中规定的格式指令作为标准，实现那不同的译码电路来支持指令集各种指令的运行（==这里你不用管如何译码的，这里目前不需要深究==），指令集的最终实现就是微架构，也就是CPU内部的各种译码和执行电路。</p>
<p>​	就比如a7核心 a9核心等就是微架构，而RK3568的四核心A55就是指的微架构。</p>
<p>​	这里目前认识到这个程度就可以了，不做过多的深究，以及后面有需要再去学习了解一下汇编语言。</p>
<h1 id="6可执行文件的组成"><a class="markdownIt-Anchor" href="#6可执行文件的组成"></a> 6.可执行文件的组成</h1>
<p>​	在上面已经讲解过了，编译完成之后会生成一个二进制的可执行文件，这个可执行文件只能在对应架构的机器上才能运行，那这个可执行程序都是由什么组成的呢？这时候就要提到一个命令了，也就是readelf，从名字就可以看出他的作用是读取一个可执行文件，先来用file命令查看一下可执行程序，如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312122103556.png" alt="image-20231212210354485" /></p>
<ul>
<li>“test_c:”: 这是文件的名称。</li>
<li>“ELF 64-bit LSB shared object, x86-64”: 这是文件的类型和架构。它是一个64位的LSB（Linux Standard Base）共享对象，针对x86-64架构。</li>
<li>“version 1 (SYSV)”: 这是ELF文件的版本，采用SYSV格式。</li>
<li>“dynamically linked”: 这表示该文件是动态链接的，它依赖于其他共享库来提供其所需的功能。</li>
<li>“interpreter /lib64/ld-linux-x86-64.so.2”: 这是解释器路径，指示系统在执行该文件时使用的动态链接器。</li>
<li>“BuildID[sha1]=cad02772db45e07867103cc6069ae544863b9ebc”: 这是文件的构建ID，用于唯一标识该文件的构建版本。它是使用SHA1算法计算的哈希值。</li>
<li>“for GNU/Linux 3.2.0”: 这表示该文件是为GNU/Linux 3.2.0版本编译的。</li>
<li>“not stripped”: 这表示该文件没有被剥离（stripped），即没有从文件中移除调试信息和符号表。</li>
</ul>
<p>Executable and Linkable Format  可执行和可链接的格式。</p>
<p>可以通过readelf -h命令查看可执行文件的文件头（header）信息，例如查看上面编译的hellloworld文件，具体内容如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312122111923.png" alt="image-20231212211112738" /></p>
<p>​	这里了解到的信息其实并没有什么用，唯一有用的就是最下面的section header数量，section header用来主要用来描述可执行文件的section信息，一个可执行文件通常由不同的section来组成，包括代码段、数据段、BSS段、只读数据段，每个section由section header来描述。这里的文件头其实也就是指的文件最开始的那几个字节的信息，然后通过readelf -S 查看可执行文件的节头表（section header）。仍旧以helloworld为里，查看到的节头表内容如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312122118128.png" alt="image-20231212211818864" /></p>
<p>​	通过节头表的信息可以窥探到一个可执行文件的组成，上面我比较熟悉的其实并不多，其实也就知道代码段 text ，数据段 data，。bss段，其他知道的并不多，函数翻译成二级制指令放在代码段之中，初始化的全局变量和静态局部变量放在数据段之中，未初始化的全局变量和静态局部变量放在BSS段当中，其他就没了。</p>
<h1 id="7汇编过程"><a class="markdownIt-Anchor" href="#7汇编过程"></a> 7.汇编过程</h1>
<p>​	先说一下我的想法，本来我是不想学习这个的，后来我感觉这个东西与后面的链接、与动态库静态库有很深的联系，所以我还是回来看这个了。</p>
<p>​	预处理之后就是编译，汇编的过程就是将程序代码转换为一个个的汇编指令，再后面才是真正的汇编过程，汇编依靠汇编器，汇编器会将汇编语言转换为二进制语言。</p>
<p>​	每个重定位的目标文件都是以零地址为基地址进行的代码段的组装，但是后面的链接过程需要将好多个目标文件链接为一个可执行文件，而每个文件都是以零地址进行偏移的，所以在链接的时候需要更新目标文件中的变量或者函数的地址，这个被称之为重定义。那链接器如何知道哪些函数或者变量需要重定位呢？很简单将需要重定位的符号收集起来，生成一个重定位表，以section的形式保存到每个可重定位目标文件即可。</p>
<p>​	上面提到符号表和重定位表都是很重要的概念。符号表可以通过readelf -s命令来获取，注意这里是小s</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312122209612.png" alt="image-20231212220932369" /></p>
<p>使用readelf -r可以获得该重定位目标文件的重定位表，如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312122214971.png" alt="image-20231212221407848" /></p>
<h1 id="8静态链接库"><a class="markdownIt-Anchor" href="#8静态链接库"></a> 8.静态链接库</h1>
<p>​	仍旧先说一下我的理解和看法，无论是静态链接库还是动态链接库，他们实际上就是可重定位的目标文件，即汇编过程之后生成的文件，当然也不对，可以是由一个目标文件生成的库文件也可以是由好几个目标文件生成库文件。很多时候人们会将函数的实现给封装起来，我们只需要调用相应的函数即可，而很多不开源的项目，也会提供封装好的库，让人们只需要使用头文件中定义的相应函数即可。</p>
<p>​	静态库会在编译程序的时候将引用的函数代码或者变量链接到可执行文件里，和在可执行程序组装到一起，而动态库不会和可执行文件组装到一起，而是在程序运行的时候加载到内存参与链接。</p>
<p>​	所以静态库的本质就是一个可重定位的目标文件，与上面经过汇编编译出来的.o文件没什么不同，只是多了一个归档的过程。静态库的制作使用ar归档命令来实现，ar是一个用于创建和管理静态库（Archive）的命令行工具。它的名称是&quot;ar&quot;，代表&quot;archive&quot;，可以在Unix和Unix-like系统上使用。ar命令可以用于创建静态库、向静态库中添加对象文件、从静态库中提取对象文件以及执行其他与静态库相关的操作。下面是对ar命令的一些常见用法的详细解释：</p>
<p>1.创建静态库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ar -rcs libexample.a file1.o file2.o file3.o</span><br></pre></td></tr></table></figure>
<p>这个命令将创建一个名为&quot;libexample.a&quot;的静态库，并将文件&quot;file1.o&quot;、&quot;file2.o&quot;和&quot;file3.o&quot;添加到该库中。选项&quot;r&quot;表示替换库中的现有文件，选项&quot;c&quot;表示创建库，选项&quot;s&quot;用于在库中添加索引信息。</p>
<ul>
<li><code>-r</code>：将指定的文件插入或替换到归档文件中。</li>
<li><code>-s</code>：创建索引表。</li>
<li><code>-c</code>:   不在必须创建库的时候给出警告</li>
</ul>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312130724504.png" alt="" /></p>
<p>2.向静态库中添加对象文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ar -r libexample.a newfile.o</span><br></pre></td></tr></table></figure>
<p>这个命令将向现有的静态库&quot;libexample.a&quot;中添加新的对象文件&quot;newfile.o&quot;。选项&quot;r&quot;表示替换库中的现有文件。</p>
<p>3.从静态库中提取对象文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ar -x libexample.a newfile.o</span><br></pre></td></tr></table></figure>
<p>这个命令将从静态库&quot;libexample.a&quot;中提取出对象文件&quot;file1.o&quot;。选项&quot;x&quot;表示提取</p>
<p>4.列出静态库中的对象文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ar -t libexample.a</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312130727529.png" alt="image-20231213072726515" /></p>
<p>5.替换静态库中的对象文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ar -d libexample.a file1.o</span><br><span class="line">ar -r libexample.a newfile.o</span><br></pre></td></tr></table></figure>
<p>这两个命令分别用于从静态库中删除对象文件&quot;file1.o&quot;和向静态库中添加新的对象文件&quot;newfile.o&quot;。选项&quot;d&quot;表示删除。</p>
<p>​	编译器是以源文件为单位进行程序编译的，链接器在连接的过程中逐个对目标文件进行分解和组装，但这样很容易产生一个问题，如果一个源文件中我们定义了一百个函数，但是只使用了其中的一个，链接器在连接的过程中会将这一百个函数都组装到可执行文件中，这会让最终生成的可执行文件大大增加，那要如何解决这个问题呢，只需要将每一个函数单独使用一个源文件来实现，最终将多个目标文件打包即可。而我们最常用的libc库就是这样实现的，可以通过上面学习的ar -t命令来查看对象文件列表</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312130742069.png" alt="image-20231213074253042" /></p>
<p>​	可以看到libc将每个函数都搞成了一个目标文件，从而解决了上面提到的问题。这时候又出现了另一个问题，就比如我们经常用到printf进行字段的打印，可能很多个程序都调用了它，链接器在链接的时候就要将多个printf指令添加到多个可执行文件中，在一个多任务的环境中，多个进程并发运行的时候，你会发现内存中有大量重复的printf指令代码，从而浪费了很多的资源，那这个问题要如何解决呢，聪明的工程师们想出来了动态库的方法。</p>
<p>​	==今天就学习到这个地方了，其实上面的这些东西你都不配说难，因为已经有先人替你踩过坑了，也有更厉害的先人提出来了这些理论，并且用到了实践中，计算机当中的一切都不再属于新鲜事，我们已经站在了巨人的肩膀上，没有理由后人比前人笨，也没有道理学不会，学不会只能证明你没有用心==</p>
<h1 id="9动态链接库"><a class="markdownIt-Anchor" href="#9动态链接库"></a> 9.动态链接库</h1>
<p>​		在讲解静态链接库的最后面也提到了静态链接库现有的一些问题，所以人们就提出了动态链接库，动态链接库在程序运行时进行加载，而且不同的可执行文件可以共用动态链接库，所以可以极大的节省内存，动态链接库的编译方式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -fPIC -shared C文件 -o 库文件</span><br></pre></td></tr></table></figure>
<p>​		在Linux环境下，当我们运行一个程序时，操作系统首先会在给程序fork一个子进程，接着动态连接器加载到内存，操作系统将控制器权交给动态链接器，让动态链接器完成动态库的加载和重定位搞作，最后跳转到要运行的程序。动态链接器在C标准库中实现，是glibc的一部分，主要完成程序运行前的动态链接工作，在可执行文件的.interp段中存放的有动态链接器的加载路径，可以通过objdump命令查看。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">objdump -j .interp -s a.out</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312132058333.png" alt="" /></p>
<p><code>objdump</code>是一个用于分析目标文件（object file）的常用命令行工具。它在各种操作系统和编程环境中都有提供，例如Linux和Windows。</p>
<p><code>objdump</code>的主要作用是提供目标文件的反汇编、符号表、节（section）信息等相关信息。以下是一些常见的用途：</p>
<ol>
<li>反汇编目标文件：<code>objdump</code>可以将目标文件中的机器码转换为可读的汇编代码，以便进行代码分析、调试和优化。这对于理解代码的执行流程、查找问题和进行二进制分析非常有用。</li>
<li>显示符号表：<code>objdump</code>可以列出目标文件中的符号表，包括函数、变量和其他符号的信息。这对于了解代码的结构、查找特定符号、检查符号的可见性和解决符号冲突非常有帮助。</li>
<li>显示节信息：<code>objdump</code>可以显示目标文件中各个节（section）的信息，例如代码段、数据段、符号表、重定位表等。这对于了解目标文件的布局、存储的数据、链接信息和其他元数据非常有用。</li>
<li>检查目标文件的属性：<code>objdump</code>可以提供有关目标文件的一些属性，例如目标文件格式、目标架构、入口点等。这对于验证目标文件的正确性和兼容性非常有帮助。</li>
</ol>
<p>​		动态链接器本身也是一个动态库，即lib/ld-linux.so文件，动态链接器被加载到内存后，会首先给自己重定位，然后才能运行，像这种给自己重定位然后自动运行的行为，我们称之为自举，在嵌入式系统中Uboot也有自举功能，它在系统上电启动之后会完成代码的自我复制和重定位操作，然后加载到Linux内核镜像中运行。</p>
<p>​	动态链接器解析解析可执行文件中未确定的符号以及需要链接的动态库信息，将对应的动态库加载到内存，并进行重定位操作，这个过程其实和静态链接的重定位过程相同，只不过推迟到了运行阶段，重定位结束之后，程序中要引用的符号都有了地址和定义，动态链接器要将控制权交给可执行程序，跳转到该程序运行。</p>
<p>​	静态链接的可执行程序在运行时，一般加载地址等于链接地址，而且这个地址是固定的，可执行文件是操作系统帮我们创建一个子进程之后第一个被加载到内存空间的文件，此时进程的地址一马平川，还未被占用，所以不用考虑地址资源的问题，而动态链接库加载到内存的地址是随机的，因为每一个可执行文件的带线啊哦不同，所以加载到内存后剩余的地址空间也不相同，动态链接库的地址要根据进程地址空间的实际空间的情况随机分配。</p>
<p>​	so文件是在加载时进行的重定位，虽然解决了可执行文件中对绝对地址的引用问题，但也带来了另外的问题，那就是对于每个进行，动态库加载到内存的不同地址，只能被进程自身共享，无法再多个进程间共享，无法节约内存，但这也又违背了动态库设计的初衷，跟静态库是一样的效果，要如何解决这个问题呢。</p>
<p>​	如果想要让动态库放到内存的任何位置都可以运行，都可以被多个进行共享，那就是将动态库设计成与位置无关的代码，上面的gcc的-fPIC参数就是指与位置无关，最终的设计思路为，将指令中需要修改的部分分离出来，剩余的部分就与地址无关了，放在哪里都能执行，而且可以被多个进程共享，需要被修改的指令和数据在每个进行中都有一个副本，互不影响各自的运行。</p>
<p>​	对于同一个程序，我们很容易通过相对寻址来实现代码和地址无关，但是当动态库作为第三方模块被不同的应用程序引用的时候，库中的一些绝对地址符号，如何能做到同时被不同的应用程序引用的呢，解决这个问题的方法其实也很简单，那就是将应用程序引用的动态库符号收集起来，保存到一个表之中买这个表用来记录各个引用符号的地址，这个表被称之为全局偏移表。</p>
<p>​	现在大部分软件都是通过动态链接的方式开发的，不仅可以节省内存空间，升级维护也比较方便。动态链接器会在系统默认的路径下查找，即lib usr/lib，也回到系统指定的一些路径下查找，用户可以在/etc/ld.so.conf文件中添加自己的共享库路径，修改之后可以使用ldconbfig重新生成一个缓存的/etc/ld.so.chche，每次增加或者删除共享库的路径时，都需要使用ldconfig更新缓存。除此之外也可以使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export LD_LIBRARY_PATH=库的路径</span><br></pre></td></tr></table></figure>
<p>​	临时改变共享库的查找路径。</p>
<h1 id="10堆栈"><a class="markdownIt-Anchor" href="#10堆栈"></a> 10.堆栈</h1>
<p>​	在一个进程的地址空间中，代码段、数据段、BSS段在内存加载程序运行之后，地址就已经被确定了，在整个此程序的运行期间不在发生变化，这部分内存就被称之为静态内存，而在程序中使用malloc申请的内存、函数调用过程中的栈在程序运行期间是不断进行变化的，这部i分内存被称之为动态内存，用户使用malloc申请的内存一般被称之为堆内存，函数调用过程中使用的内存被称之为栈内存，</p>
<p>​	堆内存一般在BSS的后面，随着用户使用malloc申请的内存越来越多，堆空间并不断地往高地址增长。栈空间则紧挨着内核空间，arm使用的是满递减堆栈，栈指针会从用户空间的高地址向低地址不断增长。</p>
<p>​	栈是C语言运行的基础，一个函数内定义的局部变量、传递的实参都是保存在栈中，每个函数都会有专门的栈空间来保存这些数据，每个函数的栈空间都被称之为栈帧。</p>
<p>==只是感觉目前堆和栈对于我并没有什么作用，下次真的有需求再来吧。==</p>
<h1 id="11数据对齐"><a class="markdownIt-Anchor" href="#11数据对齐"></a> 11.数据对齐</h1>
<p>​	仍旧先来说一下我的看法，数据对齐其实我听过很多次了，无论是在NPU学习里接触到的数据对其，还是在这里遇到的数据对其，他们都说数据对齐可以极大的加速程序运行时间、我不知道这个说法是不是对的，但我还是比较奇怪，不是很懂，这样加速的原理，今天就来真正的理解一下。</p>
<p>​	为什么非要进行地址对齐呢，这是由CPU的硬件决定的，为了简化CPU的电路设计，有些CPU在设计师简化了地址的访问，只支持边界对齐的访问方式，就比如有0-7这八个地址，CPU只能读取0和4这俩，0-3、4-7为两组，如果有一个数据存储在了2-5，这四个地址，那么CPU就需要读取两次，而如果单独放在每个组里那也就只需要一次。</p>
<p>​	我可能知道为什么要用指针了，上面也说过了堆栈相关的东西，我之前还疑惑那些值传递和地址的传递，现在可能是懂得了，函数的形参和实参。</p>
<p>​	如果将一个很庞大的值传递到函数中，该函数会有一个专门的栈空间，而那些值同样也会重新复制一份，但是如果是地址的话，就不会如此，只需要传递相应的地址即可，省去了拷贝的步骤，从而大大提升运行的速度。</p>
<p>​</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
  </entry>
  <entry>
    <title>计算机眼里的C和C++</title>
    <url>/2024/01/02/27%20CPU%E9%87%8C%E7%9A%84C%E5%92%8CC++/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​		其实学完王老师的嵌入式C高级之后，我仍是有一些问题，但让我说具体是哪个地方抱歉我真的说不出来，而我在逛拼多多的时候，看到了这本书，也就是计算机里的C和C++，看目录倒是挺吸引我的，所以趁着晚上的时间学习一下。</p>
<h1 id="第一章-预备知识"><a class="markdownIt-Anchor" href="#第一章-预备知识"></a> 第一章 预备知识</h1>
<h2 id="11-工具介绍"><a class="markdownIt-Anchor" href="#11-工具介绍"></a> 1.1 工具介绍</h2>
<p><a href="https://godbolt.org/">compiler explorer</a></p>
<p>​	我是第一次听说这个工具，但本书的作者却说这是一个很好的工具，可视化的进行汇编语言和高级语言的对比，从而更利于人们的理解。</p>
<p>代码1：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​	进入该网址之后，界面如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401022108917.png" alt="image-20240102210858840" /></p>
<p>​	通过颜色可以进行代码关系的匹配，左边是源代码，而右边是CPU指令，也可以通过修改右侧output options选项来查看机器码，也就是二进制的机器指令，如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401022115284.png" alt="image-20240102211556230" />	除此之外，还支持切换不同的编译器，现在的编译器是X84-64架构的，也可以切换为arm或者aarch64相应的版本，具体如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401022119496.png" alt="image-20240102211912462" /></p>
<p>​	其余要注意的就不多了，先这样，有需要再回来学习。</p>
<h2 id="12-cpu眼里程序的运行"><a class="markdownIt-Anchor" href="#12-cpu眼里程序的运行"></a> 1.2 CPU眼里程序的运行</h2>
<p>​	代码2</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> a[] = <span class="string">&quot;password&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> *c = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="number">4</span>);</span><br><span class="line">    *c = <span class="number">0x11223344</span>;</span><br><span class="line">   	<span class="built_in">printf</span>(<span class="string">&quot;%p %p %p %p\n&quot;</span>, &amp;a, &amp;b, &amp;c, main);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​	在上面的示例中，定义了一个全局变量a，定义了一个局部变量b，然后申请了一段内存，并赋值为0x11223344，最后分别打印了a、b、c和main函数的内存地址，执行结果如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401022136235.png" alt="image-20240102213640112" /></p>
<p>​	内存地址由低到高分别存放这main函数的CPU指令，我们称之为代码段，随后的内存区域存放着全局变量a的值，我们称这个区域为数据段，经过更长的一段距离之后，来到.heap内存区域，在程序运行起来之后，会存储数值0x11223344，我们称这个区域为“堆”。</p>
<p>​	而在最上面的内存区域存放着变量b和c,也就是我们常说的栈，但是由于程序还没运行起来，所以变量b和c的值可能是随机的。</p>
<p>​	==前瞻知识就这样了，然后开始学习基础语法==</p>
<h1 id="第二章-基础语法"><a class="markdownIt-Anchor" href="#第二章-基础语法"></a> 第二章 基础语法</h1>
<h2 id="21-cpu眼里的main函数"><a class="markdownIt-Anchor" href="#21-cpu眼里的main函数"></a> 2.1 CPU眼里的main函数</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​	<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401022145747.png" alt="image-20240102214500667" /></p>
<p>​	左右对比可以看到，main函数和func函数翻译成汇编语言之后，除了函数名之外，其余的地方都相同，所以main函数能成为程序的起点，并不仅仅是因为名称的原因。</p>
<ul>
<li>CPU面前，函数没有主次之分，main函数的实现方法，跟普通函数完全相同。</li>
<li>main函数有是很多函数的起点，但是并非它不可，任何函数都可以被设置为函数的起点。</li>
</ul>
<h2 id="22-cpu眼里的变量"><a class="markdownIt-Anchor" href="#22-cpu眼里的变量"></a> 2.2 CPU眼里的变量</h2>
<p>​	无论是何种型号的内存，都必然分为数据信号线和地址信号线，这两大类重要的信号线，顾名思义，数据信号线用来在计算机和内存之间传递数据信息，而在读写数据之前，必须明确的告诉内存条，我们要在哪块内存读，哪块内存写，否则内存那么大，CPU又怎么会知道你要写哪个地方呢？所以内存地址是一切内存读和内存写的前提。</p>
<p>​	代码4：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">write</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401022158243.png" alt="image-20240102215800195" /></p>
<p>​	上面只有一条有用的指令，也就是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov    DWORD PTR [rip+0x2f00],0x1 </span><br></pre></td></tr></table></figure>
<p>​	很用以猜出这是将1放到变量a所在的地址，由于指令集的原因，CPU不能直接访问内存地址，需要寄存器来实现间接访问，而rip存放的是CPU吓一条指令的地址，所以变量a的地址就是</p>
<p>401114 + 0x2f00 = 404014</p>
<p>​	正如变量的定义所说，变量不过是内存地址的别名。</p>
<p>​	每一个变量都对应了一个内存地址，变量的类型则决定了它占用内存空间的长度。</p>
<h2 id="23-cpu眼里的指针变量"><a class="markdownIt-Anchor" href="#23-cpu眼里的指针变量"></a> 2.3 CPU眼里的指针变量</h2>
<p>代码5：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">func1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">long</span> a;</span><br><span class="line">    a = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> *a;</span><br><span class="line">    a = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func3</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">short</span> *a;</span><br><span class="line">    a = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func4</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> (*a)[<span class="number">3</span>];</span><br><span class="line">    a = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func5</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> **a;</span><br><span class="line">    a = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401022211757.png" alt="image-20240102221130668" /></p>
<p>​	func1定义了一个普通变量，并写入0；func2定义了一个char类型的指针变量，并写入0；func3定义了一个short类型的指针变量，并写入0；func4定义了一个数组类型的指针变量，并写入了0，fun4定义了一个数组类型的指针变量，并写入0，func5定义了一个指针类型的指针变量，并写入了0；</p>
<p>​	然后仔细对比可以得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func1():</span><br><span class="line"> push   rbp</span><br><span class="line"> mov    rbp,rsp</span><br><span class="line"> mov    QWORD PTR [rbp-0x8],0x0</span><br><span class="line"> nop</span><br><span class="line"> pop    rbp</span><br><span class="line"> ret</span><br><span class="line">func2():</span><br><span class="line"> push   rbp</span><br><span class="line"> mov    rbp,rsp</span><br><span class="line"> mov    QWORD PTR [rbp-0x8],0x0</span><br><span class="line"> nop</span><br><span class="line"> pop    rbp</span><br><span class="line"> ret</span><br><span class="line">func3():</span><br><span class="line"> push   rbp</span><br><span class="line"> mov    rbp,rsp</span><br><span class="line"> mov    QWORD PTR [rbp-0x8],0x0</span><br><span class="line"> nop</span><br><span class="line"> pop    rbp</span><br><span class="line"> ret</span><br><span class="line">func4():</span><br><span class="line"> push   rbp</span><br><span class="line"> mov    rbp,rsp</span><br><span class="line"> mov    QWORD PTR [rbp-0x8],0x0</span><br><span class="line"> nop</span><br><span class="line"> pop    rbp</span><br><span class="line"> ret</span><br><span class="line">func5():</span><br><span class="line"> push   rbp</span><br><span class="line"> mov    rbp,rsp</span><br><span class="line"> mov    QWORD PTR [rbp-0x8],0x0</span><br><span class="line"> nop</span><br><span class="line"> pop    rbp</span><br><span class="line"> ret</span><br><span class="line">main:</span><br></pre></td></tr></table></figure>
<p>​	五个函数的实现完全是相同的，无论是什么类型的指针变量，对指针变量的读写操作跟普通变量是没有任何区别的，而所谓的指向，仍旧是在描述指针变量的值是多少而已，跟描述普通变量的值没有什么两样，所以对于CPU来说，管你是多么复杂的变量，一级指针、二级指针，无外乎也是一个地址罢了。</p>
<p>​	不同的是，普通变量的值多用来进行数学运算，而指针变量的值，往往用来定位具体的内存地址，它可以是某个变量的地址，可以是常量地址、函数地址、CPU寄存器地址、也可以是受保护的地址空间。</p>
<h2 id="24-cpu眼里的指针本质"><a class="markdownIt-Anchor" href="#24-cpu眼里的指针本质"></a> 2.4 CPU眼里的指针本质</h2>
<p>​	指针的本质是内存地址，可无论是普通变量亦或者类还是成员变量，都是有地址的，那普通变量可以像指针变量那样进行指针操作吗，也就是*取地址和箭头指向操作。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> * p = &amp;a;</span><br><span class="line">    *p = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    *(<span class="type">int</span> *)&amp;a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func3</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401022227430.png" alt="image-20240102222727321" /></p>
<p>​	三个函数，最终的实现效果是相同的，都是将1赋值到a，只是实现的方法不一样，函数1使用的是指针的方法，函数2是华丽花哨的使用指针，，，函数3是使用变量名，而从最终翻译出来的汇编语言来看，函数二和函数三是相同的，所以一般不会华丽花哨强行使用指针，人都有变量名，你非要得到变量名的地址，再强制类型转换，这不是闲的没事干。</p>
<h2 id="25-cpu眼里的数组"><a class="markdownIt-Anchor" href="#25-cpu眼里的数组"></a> 2.5 CPU眼里的数组</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">func3</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> a[<span class="number">8</span>];</span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    a[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">    a[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line">    a[<span class="number">4</span>] = <span class="number">5</span>;</span><br><span class="line">    a[<span class="number">5</span>] = <span class="number">6</span>;</span><br><span class="line">    a[<span class="number">6</span>] = <span class="number">7</span>;</span><br><span class="line">    a[<span class="number">7</span>] = <span class="number">8</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401030742737.png" alt="image-20240103074224646" /></p>
<p>​	只要知道数组a的首地址和长度，就可以精确定位数组a的地址空间</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> a[<span class="number">2</span>])</span></span><br><span class="line">&#123;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func2</span><span class="params">(<span class="type">int</span> *a)</span></span><br><span class="line">&#123;</span><br><span class="line">    *a = <span class="number">1</span>;</span><br><span class="line">    *(a + <span class="number">1</span>) = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401030746049.png" alt="image-20240103074607944" /></p>
<p>​	上面的代码是用数组变量作为参数的函数和指针变量作为参数的函数，从左右两个对比可以看出，两个的汇编指令完全相同，所以在传递参数的时候，无论你的数组有多大，编译器都不会像传递普通变量那样，在堆栈中创建一个相同大小的临时数组变量，而是简单的传递一个数组的内存首地址，像传递一个指针变量一样，将内存的首地址传递给被调函数，从而对数组进行读写操作，就相当于指针的*操作。</p>
<ol>
<li>数组是一段连续的内存，除了常规的读写元素之外，也会用指针来表示数组，并用指针的*操作进行数组元素的读写</li>
<li>传递数组参数，本质上是传递指针，所以在函数内改变数组的值，也会改变函数外数组的值</li>
<li>多为数组的本质还是一维数组，只是索引方式不同</li>
</ol>
<h1 id="第三章-函数原理"><a class="markdownIt-Anchor" href="#第三章-函数原理"></a> 第三章 函数原理</h1>
<p>​	函数看上去人畜无害，但是实际上是深藏不漏，他是最普通最常见的程序代码，可以说我们编写的代码就是在编写函数，很多时候，我们的程序就是在不断的调用和运行各种函数而已，但你知道吗，实际上是一个非常成功的软件技术，他在占用很少内存的情况下，实现了程序的高效跳转并且原路返回，以及分配临时变量，也叫栈变量，在本章将探索隐藏在函数背后的秘密。</p>
<h2 id="31-cpu眼里的参数传递"><a class="markdownIt-Anchor" href="#31-cpu眼里的参数传递"></a> 3.1 CPU眼里的参数传递</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">func1</span><span class="params">(<span class="type">long</span> x, <span class="type">long</span> y, <span class="type">long</span> z)</span></span><br><span class="line">&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func2</span><span class="params">(<span class="type">long</span> *x, <span class="type">long</span> *y, <span class="type">long</span> *z)</span></span><br><span class="line">&#123;</span><br><span class="line">    *x = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">long</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="type">long</span> c = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    func1(a, b, c);</span><br><span class="line">    func2(&amp;a, &amp;b, &amp;c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401032049568.png" alt="image-20240103204953450" /></p>
<p>​	上面只是截图的func1和func2两个函数的汇编代码，可以看到无论是值还是指针，他们最终的实现是相同的，有一点点的区别，而这一点点的区别就决定了传值和传址的不同，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov    QWORD PTR [rbp-0x8],0x0</span><br><span class="line"></span><br><span class="line">mov    rax,QWORD PTR [rbp-0x8]</span><br><span class="line">mov    QWORD PTR [rax],0x0</span><br></pre></td></tr></table></figure>
<p>​	在函数1中，只是将rbp-0x8也就是函数调用后备份的参数进行了赋值，而原参数并没有，但是函数2呢，可并不是这样，rbp-0x8中是地址，将地址给了一个寄存器，然后第二条中引用该寄存器里存放的地址，给0，所以修改的是原参数的值。</p>
<p>然后来看下面main函数的截图：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401032051215.png" alt="image-20240103205158112" /></p>
<p>​	可以看到函数1需要将参数值1、2、3传递给函数func1，具体的传输方式就是mov指令，而后面的func2函数，需要把a、b、c、的指针传递非函数func2，通过mov指令将abc三个参数的内存地址进行了传递。</p>
<p>​	很显然，无论是传值还是传地址，他们的实现原理完全一致，都是将某个数值传递给寄存器，如果非要说有什么不同的话，那就是这些数值所要表达的信息不同。</p>
<h2 id="32cpu眼里的函数括号"><a class="markdownIt-Anchor" href="#32cpu眼里的函数括号"></a> 3.2CPU眼里的函数括号</h2>
<p>​	在你写过无数个函数之后，有没有考虑过这样一个问题，当你在函数中进行一顿操作之后，为什么函数返回一切之后还能恢复如初，那刚刚定义的那些临时环境变量最后回去哪些地方呢？本小节我们将从CPU的角度探究背后的秘密。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    func();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401032128408.png" alt="image-20240103212803325" /></p>
<p>​	从代码的颜色就能看出，正括号和反括号都有对应的汇编代码，分别是push和pop，也就是入栈和出栈的操作</p>
<h2 id="33-cpu眼里的函数指针"><a class="markdownIt-Anchor" href="#33-cpu眼里的函数指针"></a> 3.3 CPU眼里的函数指针</h2>
<p>​	函数指针真的让我感到头疼，那奇怪的调用呀，希望这个小节可以帮助我理解一下。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span><span class="params">(*foo)</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    foo func = &amp;test;</span><br><span class="line">    func(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> a = <span class="number">0x401106</span>;</span><br><span class="line">    ((foo)a)(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​	定义了一个最简单的函数指针类型和一个与之对应的test函数，然后写了一个简单的函数func1，做一个函数指针的赋值，会后写了一个更简单的函数func2，作为一个普通变量赋值。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401032138186.png" alt="image-20240103213828090" /></p>
<p>​	通过对比可以看出，函数1和函数2 的汇编程序是完全相同的，但他们并没有任何的相同点呀,从汇编的角度可以看看出，两个函数做的都是同一件事情，都是将0x401106放在了一个临时的“栈”变量里面，所以如你所见，函数指针和普通变量一样，它依然是变量，在CPU眼里对函数指针的赋值和对普通变量的赋值是没有区别的。</p>
<p>​	而401106是函数test的内存首地址，函数指针和指针变量一样，并不是来做加减运算的，而是用来存放内存地址的，只不过，指针变量往往用来存放某个变量的地址，而函数指针往往用来存放某个函数的首地址。而一旦知道了函数的首地址那这个函数就可以进行调用了。</p>
<p>​	但是仅仅是知道函数的首地址还是不够的，还需要知道被调函数的相关参数，那这里的参数是如何被告知的呢，其实就是第一行的typedef，他告诉当调用这个函数指针的时候，需要为他准备一个int类型的参数</p>
<h2 id="34-cpu眼里的堆和栈"><a class="markdownIt-Anchor" href="#34-cpu眼里的堆和栈"></a> 3.4 CPU眼里的堆和栈</h2>
<p>​	其实堆和栈并不是一个陌生的话题，但我好像从来没有真正里结果他们两个，今天研究看看。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">stack</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d, %p\n&quot;</span>,a ,&amp;a);</span><br><span class="line">    <span class="built_in">stack</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">stack</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202401032155259.png" alt="image-20240103215542199" /></p>
<p>​	可以看到随着函数的调用，变量a的值是没有变化的，一直是0，但是变量的地址确实在一直的降低，这也验证了栈的生长方向或者小号、申请方向是由高内存向低内存生长的，而且每个地址的间隔都是32个字节也就是0x20</p>
<p>而堆跟栈相同，也是系统送给我们的，但是堆的内存往往更大，可以用来存放超大的数据。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> *p = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    </span><br><span class="line">    p = (<span class="type">int</span> *)<span class="built_in">calloc</span>(<span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">realloc</span>(&amp;p, <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    </span><br><span class="line">    p = new <span class="type">int</span>(<span class="number">10</span>);</span><br><span class="line">    delete p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
  </entry>
  <entry>
    <title>ubuntu环境搭建</title>
    <url>/2023/12/25/25%20ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1ubuntu22环境搭建"><a class="markdownIt-Anchor" href="#1ubuntu22环境搭建"></a> 1.ubuntu22环境搭建</h1>
<h2 id="11-ubuntu22-镜像源下载"><a class="markdownIt-Anchor" href="#11-ubuntu22-镜像源下载"></a> 1.1 ubuntu22 镜像源下载</h2>
<p>​	清华源 <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/</a></p>
<p>​	中科大源 <a href="https://mirrors.ustc.edu.cn/ubuntu-releases/">https://mirrors.ustc.edu.cn/ubuntu-releases/</a></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312252052418.png" alt="image-20231225205248378" /></p>
<p>​	我这里就直接下载ubuntu22了，vmware虚拟机安装ubuntu22的步骤就不再多说，这里就根据步骤来进行就好了。</p>
<h2 id="2设置中文"><a class="markdownIt-Anchor" href="#2设置中文"></a> 2.设置中文</h2>
<p>​	对于一打印信息还是中文更加友好，所以这里将系统的环境更换为中文。首先来到设置，如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312252107402.png" alt="image-20231225210703377" /></p>
<p>​	找到Region and Language，点击语言管理：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312252108180.png" alt="image-20231225210811158" /></p>
<p>​	将汉语(中国)移动到最上面，移动完成如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312252109085.png" alt="image-20231225210931069" /></p>
<p>​	然后点击应用到系统：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312252109436.png" alt="image-20231225210958420" /></p>
<p>​	重启系统就是中文了。如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312252111623.png" alt="image-20231225211128599" /></p>
<h2 id="3设置不休眠"><a class="markdownIt-Anchor" href="#3设置不休眠"></a> 3.设置不休眠</h2>
<p>​	默认情况下都是五分钟休眠，这里时间太短了，所以需要在设置里的电源中改为无休眠。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312252112513.png" alt="image-20231225211252490" /></p>
<h2 id="4其他配置"><a class="markdownIt-Anchor" href="#4其他配置"></a> 4.其他配置</h2>
<p>​	安装一些软件和依赖，确保编译和一些工具能成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y uuid uuid-dev zlib1g-dev liblz-dev liblzo2-2 liblzo2-dev lzop \</span><br><span class="line">git curl u-boot-tools mtd-utils openjdk-8-jdk device-tree-compiler \</span><br><span class="line">gdisk m4 git gnupg flex bison gperf libsdl1.2-dev libesd-java \</span><br><span class="line">squashfs-tools build-essential zip libncurses5-dev pngcrush schedtool \</span><br><span class="line">libxml2 libxml2-utils xsltproc lzop libc6-dev g++-multilib lib32z1-dev \</span><br><span class="line">lib32ncurses-dev lib32readline-dev libswitch-perl libssl-dev unzip \</span><br><span class="line">liblz4-tool ssh make gcc libssl-dev vim expect \</span><br><span class="line">patchelf chrpath gawk texinfo diffstat binfmt-support \</span><br><span class="line">qemu-user-static live-build fakeroot cmake rsync subversion \</span><br><span class="line">sed binutils wget bzr cvs git mercurial \</span><br><span class="line">patch gzip bzip2 perl tar cpio file bc python3-pip \</span><br><span class="line">rsync android-sdk-libsparse-utils python2 net-tools vim</span><br></pre></td></tr></table></figure>
<p>​	然后禁止掉wayland，不禁掉不能正常拖动文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/gdm3/custom.conf</span><br></pre></td></tr></table></figure>
<p>打开WaylandEnable=false的注释，然后重启系统，果然修改了之后，可以直接拖动了，不错。然后修改一下虚拟机配置：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312252115362.png" alt="image-20231225105730434" /></p>
<p>​	上面的这三个没啥用，直接关掉，启动时连接也取消掉。然后备份一下系统，中文输入法也不用安装，反正一般都是用ssh来连接的。</p>
<p>​	重启之后先来设置ssh，我还是喜欢用ssh，设置的步骤如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使能root用户登录</span></span><br><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line">PermitRootLogin yes</span><br></pre></td></tr></table></figure>
<p>到这里该安装的就差不多了，剩下的就让tabby来，为了确保传输速度，先加一个nat的网卡：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312252115313.png" alt="image-20231225112113607" /></p>
<p>在编译内核的时候遇到了的第一个问题：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312252115336.png" alt="image-20231225134018868" />需要将python3链接到python，具体命令如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ln -s /usr/bin/python3 /usr/bin/python</span><br></pre></td></tr></table></figure>
<p>修改之后内核编译成功。编译recovery成功。编译文件系统成功、打包完整的update镜像成功，皆大欢喜，莫得问题，编译整体时间大约为两个小时，13：30开始编译，15：30编译结束时间.</p>
<p>随后又测试了安卓，同样可以编译成功。</p>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
  </entry>
  <entry>
    <title>vim学习</title>
    <url>/2023/12/25/26_vim%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​	所以，学习这东西就是一个不断重复的过程，两年之前我就学习过vim了，今天终于还是又来了，重新学习一下吧，增加效率，后面也会对vim进行讲解，就当为自己，为后面做铺垫吧。</p>
<h2 id="1-什么是vim"><a class="markdownIt-Anchor" href="#1-什么是vim"></a> 1、什么是VIM</h2>
<p>​	在说vim之前，先说下什么是vi。vi是visual interface的简称，是Linux中最经典的文本编辑器。vi的核心设计思想是：让程序员的手始终保持在键盘的核心区域就能够完成所有的编辑操作。而Vim又是从 vi 发展出来的一个文本编辑器，即vi improved,它在代码补全、编译及错误跳转等方便编程的功能上特别丰富，在程序员中被广泛使用。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312252027488.png" alt="image-20231225202718396" /></p>
<p>​	先说一下到底如何学习，其实vim已经给了我们一个学习资料，那就是vimtutor，vim安装之自动会带着一个教程，这个教程很不错，跟着这个教程来即可。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
  </entry>
  <entry>
    <title>VScode学习</title>
    <url>/2023/12/23/24%20VScode%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​	先说一下前提条件</p>
<h1 id="1vscode下载"><a class="markdownIt-Anchor" href="#1vscode下载"></a> 1.VScode下载</h1>
<p>[附上官网地址：Visual Studio Code - Code Editing. Redefined](</p>
<p>1)、C/C++，这个肯定是必须的。</p>
<p>2)、C/C++ Snippets，即 C/C++重用代码块。</p>
<p>3)、C/C++ Advanced Lint,即 C/C++静态检测 。</p>
<p>4)、Code Runner，即代码运行。</p>
<p>5)、Include AutoComplete，即自动头文件包含。</p>
<p>6)、Rainbow Brackets，彩虹花括号，有助于阅读代码。</p>
<p>7)、One Dark Pro，VSCode 的主题。</p>
<p>8)、GBKtoUTF8，将 GBK 转换为 UTF8。</p>
<p>9)、ARM，即支持 ARM 汇编语法高亮显示。</p>
<p>10)、Chinese(Simplified)，即中文环境。</p>
<p>11)、vscode-icons，VSCode 图标插件，主要是资源管理器下各个文件夹的图标。</p>
<p>12)、compareit，比较插件，可以用于比较两个文件的差异。</p>
<p>13)、DeviceTree，设备树语法插件。</p>
<p>14)、CMake Tools Cmake 工具</p>
<p>15)、Remote - SSH SSH远程连接</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
  </entry>
  <entry>
    <title>shell编程</title>
    <url>/2023/12/18/19%20shell%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​	先说一下前提条件，其实shell编程我好早之前就知道了，其实吧，这个就跟法师最后让我录制的课程是差不多的，只是一个叫做Ubuntu基础，一个叫做shell编程，这两个其实是一个东西，而我对于ubuntu中的一些命令其实并不熟悉，我也并不能独立写出来一个脚本，所以我并不反感法师让我去录课，我的基础其实并不牢固，要学习的东西真的太多了，而我这一星期的重点就是戒掉小说，学生shell。</p>
<p>==弱小和无知并不是生存的障碍，傲慢才是==</p>
<h1 id="1什么是shell和bash"><a class="markdownIt-Anchor" href="#1什么是shell和bash"></a> 1.什么是shell和bash</h1>
<p>​	近代以来，计算机操作系统都采用了某种形式的用户界面，借此指定需要操作系统执行的命令，但是很多操作系统当中命令是内建的，是同计算机交互的唯一方式，而shell无非也就是一个程序而已，这个程序的作用就是为用户执行其他程序，但他要做的并不只于此，一个只允许你输入命令的shell确实没有太大的意思，但如果你可以使用这些命令编程呢，是不是很酷。</p>
<p>​	Shell（壳层）是计算机科学中的一个概念。在操作系统中，Shell 是用户与操作系统内核之间的接口。它提供了一个命令行界面（CLI）或图形用户界面（GUI），使用户能够与操作系统进行交互、运行命令和访问系统资源。</p>
<p>​	bash也是一种shell，即命令解释器，bash的目的是让用户同计算机操作系统进行交互，从而完成想做的任务，当然这些任务可能是重复性的、要么非常的复杂，shell编程允许你对此任务进行自动化，以实现易用性、可靠性以及可重现性。</p>
<h1 id="2标准输出"><a class="markdownIt-Anchor" href="#2标准输出"></a> 2.标准输出</h1>
<h2 id="21-输出到终端"><a class="markdownIt-Anchor" href="#21-输出到终端"></a> 2.1 输出到终端</h2>
<p>​	使用内建命令echo，将命令行中的参数打印到屏幕上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo hello shell</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312182109865.png" alt="image-20231218210955820" /></p>
<p>​	echo是最简单的bash命令之一，该命令可以将参数输出到屏幕上，需要注意的是shell会接续echo的命令行参数，即在输出之前，shell自动完成赋值、替换、等一系列操作，除此之外参数之间的空白字符会忽略，无论多少个空白字符，都会是一个字符，具体示例如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo hello    shell !  !    !</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312182112259.png" alt="image-20231218211254225" /></p>
<p>​	但有些时候又需要空白字符，那要如何做呢？</p>
<h2 id="22-保留空白字符"><a class="markdownIt-Anchor" href="#22-保留空白字符"></a> 2.2 保留空白字符</h2>
<p>​	其实保留空白字符的方法十分简单，只需要在字符前后加上双引号或者单引号即可，具体示例如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;hello    shell !  !    !&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312182119526.png" alt="image-20231218211953490" /></p>
<p>​	通过单引号和双引号可以指定为字符串，而shell不会对字符串进行干涉，双引号和单引号也是有区别的,单引号明确告诉不要干涉，而双引号仍旧会执行一些替换操作，包括变量扩展、算数运算、波浪号扩展等</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312182135535.png" alt="image-20231218213521502" /></p>
<h2 id="23-在输出中加入更多的格式控制"><a class="markdownIt-Anchor" href="#23-在输出中加入更多的格式控制"></a> 2.3 在输出中加入更多的格式控制</h2>
<p>​	就跟C语言里面的相同，仍旧可以使用printf命令打印这些，具体示例如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">printf &quot;%s = %d\n&quot; lines $LINES</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312182138655.png" alt="image-20231218213848622" /></p>
<p>​	==我知道你想说，这个东西有什么用吗，没错我也是这样想的，但是你怎么知道你以后不用它呢，当你真的用的时候你还能想的起来吗==</p>
<h2 id="24-消除换行符"><a class="markdownIt-Anchor" href="#24-消除换行符"></a> 2.4 消除换行符</h2>
<p>​	认真观察的同学可能发现了，上面的echo命令自带换行，而printf命令默认不带换行，换行需要一个\n来完成，那echo如何不换行呢，其实可以加一个参数-n，具体示例如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo -n lines</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312182146056.png" alt="image-20231218214603028" /></p>
<p>除此之外还可以通过添加-e参数和\c转义序列来实现，具体示例如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo -e &#x27;lines\c&#x27;</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312182147836.png" alt="image-20231218214717809" /></p>
<h2 id="25-保存命令输出"><a class="markdownIt-Anchor" href="#25-保存命令输出"></a> 2.5 保存命令输出</h2>
<p>可以通过&gt;符号来告诉shell将输出重定向到文件中，具体示例如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo hello shell &gt; 01_helloshell</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312182149376.png" alt="image-20231218214925317" /></p>
<p>​	上面用到了cat命令进行文件夹内容的查看，当然cat并不仅仅是用来查看文件夹内容的，cat的英文原型是concatenation（拼接），该命令会将出现在命令行上的文件的输出拼接在一起。后面会有章节对cat进行学习，这里先了解这么多。</p>
<h2 id="26-追加输出"><a class="markdownIt-Anchor" href="#26-追加输出"></a> 2.6 追加输出</h2>
<p>​	上面使用单括号进行了输出重定向，使用两个单括号进行追加输出。具体示例如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo hello shell &gt; 02_helloshell</span><br><span class="line">echo hello shell too &gt;&gt; 02_helloshell</span><br><span class="line">cat 02_helloshell</span><br></pre></td></tr></table></figure>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20231218215813823.png" alt="image-20231218215813823" /></p>
<h2 id="27-获取文件的开始和结尾"><a class="markdownIt-Anchor" href="#27-获取文件的开始和结尾"></a> 2.7 获取文件的开始和结尾</h2>
<p>​	使用head和tail命令输出指定文件的开始和结尾前10行或者后10行的内容，也可以加入-number参数指定默认行数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">head -1 02_helloshell</span><br><span class="line">tail -1 02_helloshell</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312182201446.png" alt="image-20231218220159397" /></p>
<p>​	tail除了-number这一参数外，还可以有这样的格式 -n number，这样可以指定相对于文件末尾的行偏移。因此tail -n 10 file 会显示文件的最后10行，而如果以加号开头则表示文件起始的偏移数，例如tail -n +1 file会显示整个文件，tail -n +2 file会跳过第一行，以此类推。</p>
<h2 id="28-丢弃输出"><a class="markdownIt-Anchor" href="#28-丢弃输出"></a> 2.8 丢弃输出</h2>
<p>​	这个我还是很熟悉的，我前些日子搞了一下这个，通过将输出丢弃，从而起到了美化终端的作用。其实也挺简单的，就是输出重定向到/dev/null中。具体示例如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo hello shell too &gt; /dev/null</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312182220976.png" alt="image-20231218222037949" /></p>
<h2 id="29-将输出作为输入管道"><a class="markdownIt-Anchor" href="#29-将输出作为输入管道"></a> 2.9 将输出作为输入(管道)</h2>
<p>管道符 | ，可以将上一个命令的输出作为输入传给下一个命令，具体示例如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat 02_helloshell | grep too</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312182224603.png" alt="image-20231218222447569" /></p>
<p>tee可以保留输出前的副本，上面的管道可以省略步骤，但是呢，如果想要查看中间步骤的结果要怎么办呢，那就是tee命令了，tee可以将管道分成两个一模一样的流，一个用来写入文件，一个用来继续向下传递，具体示例如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat 02_helloshell | tee 03_tee | grep too</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312182230184.png" alt="image-20231218223034147" /></p>
<h2 id="210-以输出为参数连接两个程序"><a class="markdownIt-Anchor" href="#210-以输出为参数连接两个程序"></a> 2.10 以输出为参数连接两个程序</h2>
<p>​	<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312190736817.png" alt="image-20231219073617761" />	如上图所示，可以通过find命令查找上面的三个文件，那如何将这些输入引入rm 从而删除呢，rm只能以命令行参数的形式获取文件名，所以像下面这种方式是不对的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find -name &#x27;0*&#x27; | rm </span><br></pre></td></tr></table></figure>
<p>​	那应该如何操作呢，其实也不难，只需使用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mtext>即可，</mtext></mrow><annotation encoding="application/x-tex">()即可，</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mclose">)</span><span class="mord cjk_fallback">即</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">，</span></span></span></span>()会被替换成所包含的命令输出，具体示例如下所示</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $(find -name &#x27;0*&#x27;)</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312190742576.png" alt="image-20231219074243540" /></p>
<p>可以看到输出就变成了命令行参数，所以可以通过下面的命令来删除：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm $(find -name &#x27;0*&#x27;)</span><br></pre></td></tr></table></figure>
<h1 id="3-标准输入"><a class="markdownIt-Anchor" href="#3-标准输入"></a> 3 标准输入</h1>
<h2 id="31获取文件输入"><a class="markdownIt-Anchor" href="#31获取文件输入"></a> 3.1获取文件输入</h2>
<p>​	这个其实比较简单，标准输出的符号是&gt;，那相对的标准输入的符号肯定就是&lt;了，但是我目前并不理解这个&lt;的实际用法是什么，以后如果学习到了再来进行弥补。</p>
<h2 id="32-获得脚本输入"><a class="markdownIt-Anchor" href="#32-获得脚本输入"></a> 3.2 获得脚本输入</h2>
<p>​	使用&lt;&lt;两个箭头来从命令行，而非文件重定向输入文本，如果放在shell脚本中，可以同时包含数据和代码，一个具体示例如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep $1 &lt;&lt;EOF</span><br><span class="line">111 1</span><br><span class="line">222 2</span><br><span class="line">333 3</span><br><span class="line">444 4</span><br><span class="line">555 5</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312192029903.png" alt="image-20231219202905867" /></p>
<p>​		上面这个shell脚本有两个地方要注意的，第一个是$1。这个表示脚本输入的第一个参数，而后面的&lt;&lt;表示我们想要创建一个临时的输入源，==EOF是上面最重要的一个点，我之前一直以为他是开始和结束的标志，而实际上并不是，在&lt;&lt;后面可以是任意的字符串，只要最后的结束也是这个字符串即可==。</p>
<p>​	仍旧需要注意的是，在&lt;&lt;内部的这些内容，都是可以被解释的，例如如果内部输入了一个$1，那就会被转换为输入的第一个字符，那要如何避免这个情况呢，其实也很简单，那就是给EOF加上‘’单引号，表示不用执行扩展。</p>
<h2 id="33-获取用户输入"><a class="markdownIt-Anchor" href="#33-获取用户输入"></a> 3.3 获取用户输入</h2>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312192038960.png" alt="image-20231219203837889" /></p>
<p>​	可以通过read命令进行用户输入的获取，就比如上面的RPE变量，通过输入之后再读取出来。</p>
<h1 id="4-执行命令"><a class="markdownIt-Anchor" href="#4-执行命令"></a> 4 执行命令</h1>
<h2 id="41-运行程序"><a class="markdownIt-Anchor" href="#41-运行程序"></a> 4.1 运行程序</h2>
<p>​	bash的基本操作就是载入并运行程序，其他都是一些准备工作，除了shell的变量之外还有循环控制语句、判断以及各种控制输入和输出的方法，但是上面的这些描述仅仅只是锦上添花而已，所以这时候就应该想一些内容了，程序到底是从哪里开始运行的呢。</p>
<p>​	bash使用名为￥PATH的shell变量来定位这些可执行文件，￥PATH变量包含了一个目录列表，各个目录之间以冒号：进行分割，bash在这些目录中查找命令行上指定的可执行文件，目录的顺序很重要，会根据PATH变量中定义的顺序依次查找，选择所找到的第一个同名的可执行文件。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312210733311.png" alt="image-20231221073336242" /></p>
<p>​	赋予可执行权限的命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x name</span><br></pre></td></tr></table></figure>
<h2 id="42-执行多个命令"><a class="markdownIt-Anchor" href="#42-执行多个命令"></a> 4.2 执行多个命令</h2>
<p>​	方法一：不停的输入，Linux系统足够先进，在运行上一个命令的同时允许你继续输入，因此可以将命令依次输入进去即可。</p>
<p>​	方法二：将多个命令写入脚本中，运行这个脚本即可</p>
<p>​	方法三：依次执行这些命令，只需要使用分号将这些命令分隔开然后输入即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">long ; medium ; short</span><br></pre></td></tr></table></figure>
<p>​	这样无论前面的程序是否运行成功，都会继续执行后面的命令，如果想要确保前面的命令运行成功，可以用下面这种写法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">long &amp;&amp; medium &amp;&amp; short</span><br></pre></td></tr></table></figure>
<h2 id="43-同时执行多个命令"><a class="markdownIt-Anchor" href="#43-同时执行多个命令"></a> 4.3 同时执行多个命令</h2>
<p>​	可以在命令行的末尾加上一个&amp;符号，在后台运行起来，这样一来，就能够快速的同时执行三个命令了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">long &amp;</span><br><span class="line">medium &amp;</span><br><span class="line">short </span><br></pre></td></tr></table></figure>
<p>或者也可以将他们放在一个单行，具体如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">long &amp; medium &amp; short </span><br></pre></td></tr></table></figure>
<p>这里提一下bg命令,一个示例如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312210751415.png" alt="image-20231221075105359" /></p>
<p>​	这个脚本的作用很简单就是睡眠10秒钟，在睡眠的过程中使用ctrl+z暂停，需要注意的是这里是暂停，而不是中断或者停止，暂停是可以回复的，可以使用两个命令进行恢复命令，也就是fg和bg，这两个命令从名字就可以看出fg是放到前台，而bg是放到后台，但每个命令都能继续运行相应的脚本。</p>
<h2 id="44-了解命令是否成功运行"><a class="markdownIt-Anchor" href="#44-了解命令是否成功运行"></a> 4.4 了解命令是否成功运行</h2>
<p>​	shell变量中$?中保存着命令的退出状态，其取值范围为0-255，在编写shell脚本的时候，正确的做法是，如果一切正常，退出时候就会返回0，如果运行的过程中出错了，就会返回非0值，一个具体示例如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312210757591.png" alt="image-20231221075735514" /></p>
<p>​	可以看到睡眠十秒的程序被打断了，然后它的返回值为148，为非零值就表示没有正常退出，但要注意的是，退出状态的机会只有一次。</p>
<h2 id="45-无人值守下运行耗时作业"><a class="markdownIt-Anchor" href="#45-无人值守下运行耗时作业"></a> 4.5 无人值守下运行耗时作业</h2>
<p>​	这个很重要呀，就比如，我在我的电脑上运行服务器编译，当我的本地终端关掉之后，服务器的命令我想让他仍旧可以继续运行，放到后台当然也是一个很好的办法，但是终端关掉之后这个仍旧是退出了，所以本小节的nohup命令很是重要，nohup命令的效果只是设置子进程忽略hangup信号，但其仍旧可以被kail杀死，这当然是两回事。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup ./06_bg &amp;</span><br></pre></td></tr></table></figure>
<p>​	这样运行06进行睡眠，然后关掉终端，这个程序仍旧是在运行的。</p>
<h1 id="5-shell变量"><a class="markdownIt-Anchor" href="#5-shell变量"></a> 5 shell变量</h1>
<p>​	无论是什么编程语言，变量都是必不可少的一个，shell编程中也不例外，一般情况下，shell中的变量采用全大写的方式，变量不需要进行声明，直接使用即可，由于命令的区分困难，所以赋值语句前后都不能有空格，当然在文件名字中也不能出现=等于号。引用变量的时候要使用$美元符号，而赋值的时候不需要加上引用符。</p>
<h2 id="51-注释"><a class="markdownIt-Anchor" href="#51-注释"></a> 5.1 注释</h2>
<p>​	在shell中使用#作为注释，在#后面的一行不会被解释。</p>
<h2 id="52-提高脚本可读性"><a class="markdownIt-Anchor" href="#52-提高脚本可读性"></a> 5.2 提高脚本可读性</h2>
<ol>
<li>​	以四个空格为一个等级，不要使用tab指标符号。</li>
<li>尽可能的不要省略变量名称，利于后期的维护</li>
<li>每行的内容描述不完时可以使用\进行断行</li>
</ol>
<h2 id="53-变量的导出"><a class="markdownIt-Anchor" href="#53-变量的导出"></a> 5.3 变量的导出</h2>
<p>​	如果在一个脚本中定义了一个变量，其他脚本中是不能共享该变量的，如果想要共享这个变量需要使用export进行变量的导出。</p>
<h2 id="54查看所有的变量"><a class="markdownIt-Anchor" href="#54查看所有的变量"></a> 5.4查看所有的变量</h2>
<p>​	可以使用set或者env对变量进行查看，set可以查看定义的所有变量和值，而env是查看所有导出的变量。</p>
<h2 id="55在shell脚本中使用参数"><a class="markdownIt-Anchor" href="#55在shell脚本中使用参数"></a> 5.5在shell脚本中使用参数</h2>
<p>​	 使用$1 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mtext>来代替脚本中所使用的参数，当然要是有很多个，超过了十个以上的参数，那么需要用双括号引起来</mtext></mrow><annotation encoding="application/x-tex">2 来代替脚本中所使用的参数，当然要是有很多个，超过了十个以上的参数，那么需要用双括号引起来</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord cjk_fallback">来</span><span class="mord cjk_fallback">代</span><span class="mord cjk_fallback">替</span><span class="mord cjk_fallback">脚</span><span class="mord cjk_fallback">本</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">所</span><span class="mord cjk_fallback">使</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">参</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">当</span><span class="mord cjk_fallback">然</span><span class="mord cjk_fallback">要</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">很</span><span class="mord cjk_fallback">多</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">超</span><span class="mord cjk_fallback">过</span><span class="mord cjk_fallback">了</span><span class="mord cjk_fallback">十</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">上</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">参</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">那</span><span class="mord cjk_fallback">么</span><span class="mord cjk_fallback">需</span><span class="mord cjk_fallback">要</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">双</span><span class="mord cjk_fallback">括</span><span class="mord cjk_fallback">号</span><span class="mord cjk_fallback">引</span><span class="mord cjk_fallback">起</span><span class="mord cjk_fallback">来</span></span></span></span>{10}</p>
<h2 id="56-获取参数的数量"><a class="markdownIt-Anchor" href="#56-获取参数的数量"></a> 5.6 获取参数的数量</h2>
<p>​	使用$#来获取脚本输入的数量，在限定输入参数的一些脚本中有用。</p>
<h1 id="6-shell逻辑和运算"><a class="markdownIt-Anchor" href="#6-shell逻辑和运算"></a> 6 shell逻辑和运算</h1>
<h2 id="61-算数运算"><a class="markdownIt-Anchor" href="#61-算数运算"></a> 6.1 算数运算</h2>
<p>​	使用$(())或者let进行算数运算，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COUNT=$((COUNT + 5 + MAX * 2))</span><br><span class="line">let COUNT+=&#x27;5+MAX*2&#x27;</span><br></pre></td></tr></table></figure>
<p>​	需要注意等于号两边不能有任何的空格，举一个反面例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COUNT = $((COUNT + 5 + MAX * 2))</span><br></pre></td></tr></table></figure>
<p>​	那么shell会解析成COUNT这个命令第一个参数是等于号，后面是运算。</p>
<h2 id="62-分支条件"><a class="markdownIt-Anchor" href="#62-分支条件"></a> 6.2 分支条件</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if [$# -lt 3 ]</span><br><span class="line">then</span><br><span class="line">	printf &quot;xxx&quot;</span><br><span class="line">elif [$# &gt; 3 ]</span><br><span class="line">then </span><br><span class="line">	printf &quot;xxx&quot;</span><br><span class="line">else</span><br><span class="line">    printf &quot;xxx&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>上面使用的是换行符号，其实也可以使用分号来替代上面的换行符。</p>
<h2 id="63-测试文件特性"><a class="markdownIt-Anchor" href="#63-测试文件特性"></a> 6.3 测试文件特性</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-b # 块设备文件</span><br><span class="line">-c # 字符设备文件</span><br><span class="line">-d # 目录文件</span><br><span class="line">-e # 文件是否存在</span><br><span class="line">-f # 普通文件</span><br><span class="line">-h # 链接符号文件</span><br><span class="line">-r # 可读文件</span><br><span class="line">-s # 文件大小不为空</span><br><span class="line">-w # 可写文件</span><br><span class="line">-x # 可执行文件</span><br></pre></td></tr></table></figure>
<p>也可以使用-a或者-o参数在判断内进行逻辑判断的组合，-a表示逻辑与，-o表示逻辑或</p>
<h2 id="64-多路分支"><a class="markdownIt-Anchor" href="#64-多路分支"></a> 6.4 多路分支</h2>
<p>​	如果有多个比较，如果只是简单的使用if elif else 则会显得非常啰嗦和重复，而更好的解决办法是case，一个case的示例如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">case $FN in</span><br><span class="line">	1）xxx;;</span><br><span class="line">	2) xxx;;</span><br><span class="line">	3) xxx;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>
<p>​	case语句会扩展case和in之间的单词，然后依次匹配多种模式</p>
<h1 id="7-中级shell工具"><a class="markdownIt-Anchor" href="#7-中级shell工具"></a> 7 中级shell工具</h1>
<h2 id="71-在文件中查找字符串"><a class="markdownIt-Anchor" href="#71-在文件中查找字符串"></a> 7.1 在文件中查找字符串</h2>
<p>​	使用grep命令在文件中查找相关的字符串，一个具体示例如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep printf *.c</span><br></pre></td></tr></table></figure>
<p>​	这段shell代码的作用就是在本地的C程序中查找printf语句。</p>
<p>​	如果一个文件中出现了很多次的printtf，那会将这个文件打印很多遍，要如何只打印一遍呢，这个只需要-l参数即可，具体如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep -l printf *.c</span><br></pre></td></tr></table></figure>
<p>​	如果只是想知道在某个文件中是否有这个字符，只需要使用-q参数即可，该参数的作用是将输入结果丢弃到/dev/null，然后通过$?查看即可。</p>
<p>不区分大小写的话要使用-i参数，具体示例如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep -i printf *.c</span><br></pre></td></tr></table></figure>
<p>​	那如何在压缩文件中搜索呢，其实也只能搜索是不是有这个文件，但不能得到相应的信息，就比如下面这样</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312222132396.png" alt="image-20231222213204345" /></p>
<p>​	我还以为能有好东西了，原来只是简单的搜索。</p>
<h2 id="72-保留部分行"><a class="markdownIt-Anchor" href="#72-保留部分行"></a> 7.2 保留部分行</h2>
<p>​	使用awk命令从命令行上指定的文件中读取数据，例如默认情况下ls -l的打印如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312222137695.png" alt="image-20231222213709584" />	可以通过下面这个命令只打印第一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l | awk &#x27;&#123;print $1&#125;&#x27;</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312222137811.png" alt="image-20231222213756694" /></p>
<p>​	而现在得到的结果也并不好，因为并没有相应的文件名，上面的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mtext>是第一行，那文件名是第几行呢，是最后一行，我们并不知道最后一行是多少，不要着急，有内建命令，在</mtext><mi>a</mi><mi>w</mi><mi>k</mi><mtext>中</mtext></mrow><annotation encoding="application/x-tex">1是第一行，那文件名是第几行呢，是最后一行，我们并不知道最后一行是多少，不要着急，有内建命令，在awk中</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">第</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">那</span><span class="mord cjk_fallback">文</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">名</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">第</span><span class="mord cjk_fallback">几</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">呢</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">并</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">知</span><span class="mord cjk_fallback">道</span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">多</span><span class="mord cjk_fallback">少</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">要</span><span class="mord cjk_fallback">着</span><span class="mord cjk_fallback">急</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">内</span><span class="mord cjk_fallback">建</span><span class="mord cjk_fallback">命</span><span class="mord cjk_fallback">令</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">在</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord cjk_fallback">中</span></span></span></span>NF表示最后一行的元素。所以这个命令可以这样写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l | awk &#x27;&#123;print $1,$NF&#125;&#x27;</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312222142312.png" alt="image-20231222214203181" /></p>
<h2 id="73-压缩文件"><a class="markdownIt-Anchor" href="#73-压缩文件"></a> 7.3 压缩文件</h2>
<p>tar这个命令我用过很多次了，但好像我一直都不解其意，tar的英文全程是tape archive翻译成中文也就是磁带归档。</p>
<h2 id="74-find"><a class="markdownIt-Anchor" href="#74-find"></a> 7.4 find</h2>
<p>好像find并不是我想象中的那么简单，一个具体的示例如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -name *gz -print -exec mv &#x27;&#123;&#125;&#x27; /home/topeet/ \;</span><br></pre></td></tr></table></figure>
<p>​	上面这句脚本前面很用以理解，那就是查找以gz结尾的文件，后面是print是必须要有的，打印正确，而-exec是找到文件之后要执行的命令，这里是mv，而后面的‘{}’就表示前面查找到的内容，再后面是移动到的位置，最后是\；这个不能缺少</p>
<p>​	可如果是软链接或者硬链接呢，上面的find查找到的只是文件名，并没有找到文件的根本位置，其实也很见到那，只需要加入一个-L参数即可，具体示例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find -L . -name *gz -print -exec mv &#x27;&#123;&#125;&#x27; /home/topeet/ \;</span><br></pre></td></tr></table></figure>
<p>​	那如何不区分大小写进行查找呢，其实也简单只需要将上面的-name 换位-iname即可，具体示例如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find -L . -iname *gz -print -exec mv &#x27;&#123;&#125;&#x27; /home/topeet/ \;</span><br></pre></td></tr></table></figure>
<h2 id="75-函数"><a class="markdownIt-Anchor" href="#75-函数"></a> 7.5 函数</h2>
<p>​	三种不同的函数编写方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function usage ()</span><br><span class="line">&#123;</span><br><span class="line">	printf xxx</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function usage &#123;</span><br><span class="line">	printf xxx</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">usage ()</span><br><span class="line">&#123;</span><br><span class="line">	printf xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​	可以注意到保留字function或者（）必须出现，如果使用了function，那么（）就是可选的，一般情况下都使用第一种情况</p>
<h2 id="76-别名"><a class="markdownIt-Anchor" href="#76-别名"></a> 7.6 别名</h2>
<p>​	可以通过alias对一些常用命令进行重命名，默认情况下其实已经有一些别名了，如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312230714153.png" alt="image-20231223071432992" /></p>
<p>​	一个具体的示例如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias h=’ls -’</span><br></pre></td></tr></table></figure>
<h2 id="77-计算时间"><a class="markdownIt-Anchor" href="#77-计算时间"></a> 7.7 计算时间</h2>
<p>​	不建议使用time，建议使用bash内建的SECONDS变量，可以记录时间，具体如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312230726458.png" alt="image-20231223072615391" /></p>
<h1 id="8-简单的图形界面"><a class="markdownIt-Anchor" href="#8-简单的图形界面"></a> 8 简单的图形界面</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">/bin/bash</span> </span><br><span class="line">titlestr=&quot;选择一个选项&quot;  # 标题字符串</span><br><span class="line">backtitle=&quot;iTOP-RK3568构建脚本，http://www.topeet.com&quot;  # 返回标题，网站链接</span><br><span class="line">menustr=&quot;Compile image | uboot| kernel| recovery| buildroot | debian | yocto | all&quot;  # 菜单字符串</span><br><span class="line">TTY_X=$(($(stty size | awk &#x27;&#123;print $2&#125;&#x27;)-6))                    # 确定终端宽度</span><br><span class="line">TTY_Y=$(($(stty size | awk &#x27;&#123;print $1&#125;&#x27;)-6))                    # 确定终端高度</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选项数组，包含选项和对应的函数名</span></span><br><span class="line">choose+=(&quot;uboot&quot; &quot;build_uboot&quot;)</span><br><span class="line">choose+=(&quot;kernel&quot; &quot;build_kernel&quot;)</span><br><span class="line">choose+=(&quot;recovery&quot; &quot;build_recovery&quot;)</span><br><span class="line">choose+=(&quot;buildroot&quot; &quot;build_rootfs buildroot&quot;)</span><br><span class="line">choose+=(&quot;debian&quot; &quot;build_rootfs debian&quot;)</span><br><span class="line">choose+=(&quot;yocto&quot; &quot;build_rootfs yocto&quot;)</span><br><span class="line">choose+=(&quot;save&quot; &quot;build_save&quot;)</span><br><span class="line">choose+=(&quot;all&quot; &quot;build_all&quot;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用whiptail创建菜单，保存用户选择的选项到变量OPTIONS中</span></span><br><span class="line">OPTIONS=$(whiptail --title &quot;$&#123;titlestr&#125;&quot; --backtitle &quot;$&#123;backtitle&#125;&quot; --notags \</span><br><span class="line">                            --menu &quot;$&#123;menustr&#125;&quot; &quot;$&#123;TTY_Y&#125;&quot; &quot;$&#123;TTY_X&#125;&quot; $((TTY_Y - 8))  \</span><br><span class="line">                            --cancel-button Exit --ok-button Select &quot;$&#123;choose[@]&#125;&quot; \</span><br><span class="line">                            3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)</span><br><span class="line">echo $OPTIONS</span><br></pre></td></tr></table></figure>
<p>​	图像示例如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312250734246.png" alt="image-20231225073426133" />	然后进行简单的修改将脚本修改为两页。具体脚本内容如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">/bin/bash</span> </span><br><span class="line">titlestr=&quot;选择一个选项&quot;  # 标题字符串</span><br><span class="line">backtitle=&quot;iTOP-RK3568构建脚本，http://www.topeet.com&quot;  # 返回标题，网站链接</span><br><span class="line">menustr=&quot;Compile image | uboot| kernel| recovery| buildroot | debian | yocto | all&quot;  # 菜单字符串</span><br><span class="line">TTY_X=$(($(stty size | awk &#x27;&#123;print $2&#125;&#x27;)-6))                    # 确定终端宽度</span><br><span class="line">TTY_Y=$(($(stty size | awk &#x27;&#123;print $1&#125;&#x27;)-6))                    # 确定终端高度</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第一页选项数组，包含选项和对应的函数名</span></span><br><span class="line">choose_page1+=(&quot;uboot&quot; &quot;build_uboot&quot;)</span><br><span class="line">choose_page1+=(&quot;kernel&quot; &quot;build_kernel&quot;)</span><br><span class="line">choose_page1+=(&quot;recovery&quot; &quot;build_recovery&quot;)</span><br><span class="line">choose_page1+=(&quot;save&quot; &quot;build_save&quot;)</span><br><span class="line">choose_page1+=(&quot;all&quot; &quot;build_all&quot;)</span><br><span class="line">choose_page1+=(&quot;rootfs&quot; &quot;build_rootfs&quot;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第二页选项数组，包含选项和对应的函数名</span></span><br><span class="line">choose_page2+=(&quot;buildroot&quot; &quot;build_rootfs buildroot&quot;)</span><br><span class="line">choose_page2+=(&quot;debian&quot; &quot;build_rootfs debian&quot;)</span><br><span class="line">choose_page2+=(&quot;yocto&quot; &quot;build_rootfs yocto&quot;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用whiptail创建第一页菜单，保存用户选择的选项到变量OPTIONS中</span></span><br><span class="line">OPTIONS=$(whiptail --title &quot;$&#123;titlestr&#125;&quot; --backtitle &quot;$&#123;backtitle&#125;&quot; --notags \</span><br><span class="line">                    --menu &quot;$&#123;menustr&#125;&quot; &quot;$&#123;TTY_Y&#125;&quot; &quot;$&#123;TTY_X&#125;&quot; $((TTY_Y - 8))  \</span><br><span class="line">                    --cancel-button Exit --ok-button Select &quot;$&#123;choose_page1[@]&#125;&quot; \</span><br><span class="line">                    3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据用户选择的选项，判断是否需要显示第二页菜单</span></span><br><span class="line">if [[ $OPTIONS == &quot;rootfs&quot; ]]; then</span><br><span class="line">    # 使用whiptail创建第二页菜单，保存用户选择的选项到变量OPTIONS中</span><br><span class="line">    OPTIONS=$(whiptail --title &quot;$&#123;titlestr&#125;&quot; --backtitle &quot;$&#123;backtitle&#125;&quot; --notags \</span><br><span class="line">                        --menu &quot;$&#123;menustr&#125;&quot; &quot;$&#123;TTY_Y&#125;&quot; &quot;$&#123;TTY_X&#125;&quot; $((TTY_Y - 8))  \</span><br><span class="line">                        --cancel-button Exit --ok-button Select &quot;$&#123;choose_page2[@]&#125;&quot; \</span><br><span class="line">                        3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo $OPTIONS</span><br></pre></td></tr></table></figure>
<p>这是第一页的内容：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312250743408.png" alt="image-20231225074324294" />	这是第二页的内容：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312250744974.png" alt="image-20231225074424898" />	还有许多要改的内容，就比如上面的标题，然后那个提示文字等等，这些都需要改，慢慢来吧，最后对该命令的介绍进行总结：当我们需要在终端界面中创建交互式的对话框和菜单时，Whiptail是一个非常有用的命令行工具。它提供了一种简单的方式来创建和显示对话框、消息框、输入框、菜单等，并且可以捕获用户的选择和输入。下面我将详细介绍Whiptail命令及其使用方法。</p>
<p>Whiptail命令的基本语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whiptail [选项] [标题] [高度] [宽度] [默认值]</span><br></pre></td></tr></table></figure>
<p>选项可以用来配置对话框的外观和行为，标题是对话框的标题栏文本，高度和宽度指定对话框的尺寸，而默认值是可选的，用于设置输入框的默认值。</p>
<p>下面是Whiptail命令中常用的选项：</p>
<ul>
<li><code>--title &lt;文本&gt;</code>：设置对话框的标题。</li>
<li><code>--backtitle &lt;文本&gt;</code>：设置对话框的返回标题，通常用来显示相关的信息或链接。</li>
<li><code>--yesno &lt;文本&gt; &lt;高度&gt; &lt;宽度&gt;</code>：显示一个简单的是/否对话框，用户可以选择是或否。</li>
<li><code>--msgbox &lt;文本&gt; &lt;高度&gt; &lt;宽度&gt;</code>：显示一个简单的消息框，只用于显示信息，没有用户选择。</li>
<li><code>--inputbox &lt;文本&gt; &lt;高度&gt; &lt;宽度&gt; [默认值]</code>：显示一个输入框，用户可以输入文本。</li>
<li><code>--passwordbox &lt;文本&gt; &lt;高度&gt; &lt;宽度&gt;</code>：显示一个密码输入框，用户输入的内容会被隐藏。</li>
<li><code>--menu &lt;文本&gt; &lt;高度&gt; &lt;宽度&gt; &lt;菜单项1&gt; &lt;菜单项2&gt; ...</code>：显示一个菜单，用户可以从选项中选择一个。</li>
<li><code>--checklist &lt;文本&gt; &lt;高度&gt; &lt;宽度&gt; &lt;菜单项1&gt; &lt;菜单项2&gt; ...</code>：显示一个复选框菜单，用户可以选择多个选项。</li>
<li><code>--radiolist &lt;文本&gt; &lt;高度&gt; &lt;宽度&gt; &lt;菜单项1&gt; &lt;菜单项2&gt; ...</code>：显示一个单选框菜单，用户可以从选项中选择一个。</li>
<li><code>--textbox &lt;文件&gt; &lt;高度&gt; &lt;宽度&gt;</code>：显示一个只读文本框，用于显示文件中的内容。</li>
</ul>
<p>除了上述选项之外，Whiptail还提供了其他一些选项和功能，例如<code>--yes-button</code>、<code>--no-button</code>、<code>--defaultno</code>、<code>--nocancel</code>等，用于自定义对话框的按钮和默认行为。</p>
<p>使用Whiptail命令创建对话框时，用户的选择和输入可以通过标准输出返回，可以使用命令替换或重定向来捕获这些值。例如，可以将用户选择的选项保存到变量中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OPTIONS=$(whiptail --menu &quot;请选择一个选项&quot; 10 40 3 \</span><br><span class="line">           &quot;1&quot; &quot;选项1&quot; \</span><br><span class="line">           &quot;2&quot; &quot;选项2&quot; \</span><br><span class="line">           &quot;3&quot; &quot;选项3&quot; \</span><br><span class="line">           3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)</span><br></pre></td></tr></table></figure>
<p>在上面的例子中，用户选择的选项将保存在变量<code>OPTIONS</code>中。使用<code>3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3</code>的重定向语法可以将标准输出和标准错误输出互换，这样可以将用户的选择输出到标准输出。</p>
<p>Whiptail还提供了一些辅助功能，例如获取终端的尺寸可以使用<code>stty size</code>命令，并结合算术运算来动态计算对话框的尺寸。这对于使对话框在不同终端上具有良好的可移植性非常有用。</p>
<p>总结一下，Whiptail是一个功能强大的命令行工具，用于创建交互式的对话框和菜单。它提供了当我们需要在终端界面中创建交互式的对话框和菜单时，Whiptail是一个非常有用的命令行工具。它提供了一种简单的方式来创建和显示对话框、消息框、输入框、菜单等，并且可以捕获用户的选择和输入。下面我将详细介绍Whiptail命令及其使用方法。</p>
<h1 id="9-实战"><a class="markdownIt-Anchor" href="#9-实战"></a> 9 实战</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> tabstop=4 <span class="string">&quot;设置tab按键为四个字符</span></span><br><span class="line"><span class="string">set shiftwidth=4 &quot;</span>设置缩进为四个字符</span><br></pre></td></tr></table></figure>
<h2 id="91-在path-中查找程序"><a class="markdownIt-Anchor" href="#91-在path-中查找程序"></a> 9.1 在PATH 中查找程序</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">in_path 函数用于检查给定命令是否在指定路径中可执行</span></span><br><span class="line">in_path()</span><br><span class="line">&#123;</span><br><span class="line">    cmd=$1 ourpath=$2 result=1</span><br><span class="line">    oldIFS=$IFS IFS=&quot;:&quot;</span><br><span class="line">    for directory in $ourpath</span><br><span class="line">    do</span><br><span class="line">        if [ -x $directory/$cmd ] ; then</span><br><span class="line">            result=0</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">    IFS=$oldIFS</span><br><span class="line">    return $result</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">checkForCmdInPath 函数用于检查指定命令是否在环境变量 PATH 中可执行</span></span><br><span class="line">checkForCmdInPath()</span><br><span class="line">&#123;</span><br><span class="line">    var=$1</span><br><span class="line">    if [ &quot;$var&quot; != &quot;&quot; ] ; then</span><br><span class="line">        if [ &quot;$&#123;var:0:1&#125;&quot; = &quot;/&quot; ] ; then</span><br><span class="line">            if [ ! -x $var ] ; then</span><br><span class="line">                return 1</span><br><span class="line">            fi</span><br><span class="line">        elif ! in_path $var &quot;$PATH&quot; ; then</span><br><span class="line">            return 2</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查参数数量是否正确</span></span><br><span class="line">if [ $# -ne 1 ] ; then</span><br><span class="line">    echo &quot;使用方法: $0 命令&quot; &gt;&amp;2</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调用 checkForCmdInPath 函数检查命令是否在 PATH 中</span></span><br><span class="line">checkForCmdInPath &quot;$1&quot;</span><br><span class="line">case $? in</span><br><span class="line">    0 ) echo &quot;$1 在 PATH 中找到&quot; ;;</span><br><span class="line">    1 ) echo &quot;$1 未找到或不可执行&quot; ;;</span><br><span class="line">    2 ) echo &quot;$1 未在 PATH 中找到&quot; ;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>
<p>​	<strong>知识点1：$用法</strong></p>
<ol>
<li><code>$1</code>：表示脚本中的第一个参数。在这个脚本中，<code>$1</code> 用于获取传递给脚本的命令参数。</li>
<li><code>$2</code>：表示脚本中的第二个参数。在 <code>in_path</code> 函数中，<code>$2</code> 用于获取传递给该函数的第二个参数，即路径。</li>
<li><code>$IFS</code>：表示内部字段分隔符（Internal Field Separator）。在脚本中，<code>$IFS</code> 用于保存原始的字段分隔符，并在后续代码中修改为 <code>:</code>，以便在路径中进行分隔。</li>
<li><code>$&#123;var:0:1&#125;</code>：表示对变量 <code>var</code> 进行字符串截取。<code>$&#123;var:0:1&#125;</code> 表示从字符串的第一个字符开始，截取长度为 1 的子字符串。在脚本中，<code>$&#123;var:0:1&#125;</code> 用于检查给定的命令是否是以 <code>/</code> 开头。</li>
<li><code>&quot;$var&quot;</code>：表示对变量进行引用。在脚本中，<code>&quot;$var&quot;</code> 用于将变量 <code>var</code> 的值作为字符串进行引用，以便在条件语句中进行判断。</li>
<li><code>$?</code>：表示上一个命令的退出状态。在脚本中，<code>$?</code> 用于获取 <code>checkForCmdInPath</code> 函数的返回值，即命令是否在 PATH 中可执行的状态。</li>
<li><code>$#</code> ：表示传递给脚本的参数数量。</li>
</ol>
<p>​	<strong>知识点2：if语法</strong></p>
<p>​		在Shell脚本中，<code>if</code>语句是用于执行条件判断的控制结构。它的基本语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ condition ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># 执行条件为真时的代码块</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment"># 执行条件为假时的代码块</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p><code>if</code>语句的工作原理如下：</p>
<ol>
<li>首先，<code>if</code>关键字标识条件语句的开始。</li>
<li>紧接着是一个条件表达式，用于判断条件的真假。条件表达式通常使用方括号 <code>[ ]</code> 来包裹，且表达式与方括号之间需要有空格。</li>
<li>如果条件表达式的结果为真（非零），则执行<code>then</code>关键字后面的代码块。代码块可以是单行命令或多行代码块，可以包含任何Shell支持的命令。</li>
<li>如果条件表达式的结果为假（零），则跳过<code>then</code>代码块，执行<code>else</code>关键字后面的代码块（可选）。如果没有<code>else</code>部分，整个<code>if</code>语句结束。</li>
<li>最后，通过<code>fi</code>关键字结束整个<code>if</code>语句块。</li>
</ol>
<p>在条件表达式中，可以使用各种条件判断运算符和Shell的内置命令来进行条件判断。常用的条件判断运算符包括：</p>
<ul>
<li><code>-eq</code>：等于</li>
<li><code>-ne</code>：不等于</li>
<li><code>-gt</code>：大于</li>
<li><code>-lt</code>：小于</li>
<li><code>-ge</code>：大于等于</li>
<li><code>-le</code>：小于等于</li>
<li><code>-z</code>：判断字符串是否为空</li>
<li><code>-n</code>：判断字符串是否非空</li>
<li><code>-f</code>：判断文件是否存在且为普通文件</li>
<li><code>-d</code>：判断路径是否存在且为目录</li>
<li><code>-x</code>：判断文件或路径是否可执行</li>
</ul>
<p><strong>知识点3：case语句</strong></p>
<p>在Shell脚本中，<code>case</code>语句是一种用于多重条件判断的控制结构。它的基本语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> expression <span class="keyword">in</span></span><br><span class="line">    pattern1)</span><br><span class="line">        <span class="comment"># 匹配 pattern1 执行的代码块</span></span><br><span class="line">        ;;</span><br><span class="line">    pattern2)</span><br><span class="line">        <span class="comment"># 匹配 pattern2 执行的代码块</span></span><br><span class="line">        ;;</span><br><span class="line">    pattern3)</span><br><span class="line">        <span class="comment"># 匹配 pattern3 执行的代码块</span></span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="comment"># 默认情况（即未匹配任何模式）执行的代码块</span></span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>
<p><code>case</code>语句的工作原理如下：</p>
<ol>
<li>首先，<code>case</code>关键字标识多重条件语句的开始。</li>
<li><code>expression</code>是要进行匹配的表达式或变量。通常，<code>expression</code>是一个变量，你希望根据其值进行多重条件判断。</li>
<li>接下来，使用<code>in</code>关键字表示要开始进行模式匹配。</li>
<li>然后，每个模式使用圆括号<code>()</code>包括起来，并在每个模式后面加上<code>)</code>。</li>
<li>对于每个模式，如果<code>expression</code>的值与模式相匹配，则执行与该模式对应的代码块。代码块可以是单行命令或多行代码块，可以包含任何Shell支持的命令。</li>
<li>每个代码块的结尾需要使用两个分号<code>;;</code>表示结束。</li>
<li>如果<code>expression</code>的值未匹配任何模式，则执行<code>*)</code>后面的代码块（即默认情况）。这部分代码块是可选的。</li>
<li>最后，通过<code>esac</code>关键字结束整个<code>case</code>语句块。</li>
</ol>
<p>以下是一个具体的示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">fruit=<span class="string">&quot;apple&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$fruit</span> <span class="keyword">in</span></span><br><span class="line">    <span class="string">&quot;apple&quot;</span>)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;这是一个苹果&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="string">&quot;orange&quot;</span>)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;这是一个橘子&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="string">&quot;banana&quot;</span>)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;这是一个香蕉&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;未知的水果&quot;</span></span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>
<p>在上述示例中，我们使用变量<code>fruit</code>作为匹配表达式。根据<code>$fruit</code>的值，<code>case</code>语句会依次进行模式匹配。如果<code>$fruit</code>的值匹配到某个模式（例如，“apple”），则执行与该模式对应的代码块（输出&quot;这是一个苹果&quot;）。如果<code>$fruit</code>的值未匹配到任何模式，则执行默认情况下的代码块（输出&quot;未知的水果&quot;）。</p>
<h2 id="92-验证输入仅限字母和数字"><a class="markdownIt-Anchor" href="#92-验证输入仅限字母和数字"></a> 9.2 验证输入：仅限字母和数字</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义函数，用于验证字符串是否仅由字母和数字组成</span></span><br><span class="line"><span class="function"><span class="title">volidAlphaNum</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"># 通过sed命令将输入的字符串中的非字母和数字字符替换为空字符串</span></span><br><span class="line">    validchars=<span class="string">&quot;<span class="subst">$(echo $1 | sed &#x27;s/[^[:alnum:]]//g&#x27;)</span>&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 比较替换后的字符串与原始输入的字符串是否相等</span></span><br><span class="line">    <span class="comment"># 如果相等，说明输入的字符串仅由字母和数字组成，返回0</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$validchars</span>&quot;</span> = <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ] ; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment"># 如果不相等，说明输入的字符串包含非字母和数字字符，返回1</span></span><br><span class="line">        <span class="built_in">return</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出提示并读取用户输入</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;请输入输入内容:&quot;</span></span><br><span class="line"><span class="built_in">read</span> input</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用验证函数检查输入的内容是否仅由字母和数字组成</span></span><br><span class="line"><span class="keyword">if</span> ! volidAlphaNum <span class="string">&quot;<span class="variable">$input</span>&quot;</span> ; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># 如果验证函数返回非0，说明输入的内容包含非字母和数字字符</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;错误：输入内容必须仅包含字母和数字&quot;</span> &gt;&amp;2</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment"># 如果验证函数返回0，说明输入的内容仅由字母和数字组成</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;输入内容有效&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 脚本正常结束，退出状态码为0</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>
<p><strong>知识点</strong>1 <strong>read</strong></p>
<p>在Shell脚本中，<code>read</code> 是一个用于读取用户输入的命令。它允许脚本暂停执行，等待用户从标准输入（通常是键盘）输入一行文本，并将输入的内容保存到一个或多个变量中。</p>
<p><code>read</code> 命令的基本语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">read</span> [options] [variable ...]</span><br></pre></td></tr></table></figure>
<p>其中，<code>options</code> 是一些可选的参数，用于控制 <code>read</code> 命令的行为。<code>variable</code> 是一个或多个变量名，用于保存用户输入的值。</p>
<p>以下是一些常用的 <code>read</code> 命令选项：</p>
<ul>
<li><code>-p prompt</code>：显示一个提示符，提示用户输入。<code>prompt</code> 是要显示的提示信息，可以是字符串或变量。示例：<code>read -p &quot;Enter your name: &quot; name</code></li>
<li><code>-s</code>：静默模式，用户输入内容时不回显在终端上，适用于输入密码等敏感信息。示例：<code>read -s password</code></li>
<li><code>-n num</code>：读取指定数量的字符后立即返回，而不需要等待用户按下回车键。<code>num</code> 是要读取的字符数。示例：<code>read -n 1 key</code> 读取一个字符。</li>
<li><code>-t timeout</code>：设置等待用户输入的超时时间（秒），如果超过指定时间没有输入，则 <code>read</code> 命令返回一个非零的退出状态码。示例：<code>read -t 5 input</code> 设置等待时间为5秒。</li>
</ul>
<p><strong>知识点2 sed</strong></p>
<p>​	在Shell脚本中，<code>sed</code>（Stream Editor）是一种流式文本编辑器，用于处理和转换文本流。它可以读取输入流中的文本，根据指定的编辑命令对文本进行修改，并将结果输出到标准输出流。</p>
<p><code>sed</code> 命令的基本语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed [options] <span class="string">&#x27;command&#x27;</span> file</span><br></pre></td></tr></table></figure>
<p>其中，<code>options</code> 是一些可选的参数，用于控制 <code>sed</code> 命令的行为。<code>'command'</code> 是一个或多个编辑命令，用于指定要对文本进行的操作。<code>file</code> 是要处理的输入文件。</p>
<p>以下是一些常用的 <code>sed</code> 命令选项：</p>
<ul>
<li><code>-n</code>：禁止默认输出，只输出经过编辑处理后的结果。如果没有使用 <code>-n</code>，则 <code>sed</code> 会默认将每一行的结果输出到标准输出。</li>
<li><code>-e script</code>：指定要执行的编辑命令。可以在一个 <code>sed</code> 命令中指定多个编辑命令，使用 <code>-e</code> 分隔它们。</li>
<li><code>-i</code>：原地编辑，直接修改输入文件，而不是将结果输出到标准输出。使用 <code>-i</code> 选项时可以指定备份文件的扩展名，备份文件会保留原始文件的副本。</li>
<li><code>-r</code>（或 <code>-E</code>）：启用扩展的正则表达式语法，可以使用更强大的正则表达式功能。</li>
</ul>
<p><code>sed</code> 命令的编辑命令由一个或多个操作组成，每个操作由一个地址和一个命令组成。地址指定了要应用命令的行范围，命令指定了要对行执行的操作。</p>
<p>以下是一些常用的 <code>sed</code> 命令操作：</p>
<ul>
<li><code>s/regexp/replacement/</code>：替换操作，将与正则表达式 <code>regexp</code> 匹配的文本替换为 <code>replacement</code>。例如：<code>sed 's/apple/orange/' file</code> 将文件中的 “apple” 替换为 “orange”。</li>
<li><code>p</code>：打印操作，输出指定范围内的行。例如：<code>sed -n '1,10p' file</code> 打印文件中的前10行。</li>
<li><code>d</code>：删除操作，删除指定范围内的行。例如：<code>sed '5,10d' file</code> 删除文件中的第5到第10行。</li>
<li><code>i\text</code>：插入操作，向指定行之前插入文本。例如：<code>sed '3i\This is a new line.' file</code> 在文件的第3行之前插入一行文本。</li>
<li><code>a\text</code>：追加操作，向指定行之后追加文本。例如：<code>sed '3a\This is a new line.' file</code> 在文件的第3行之后追加一行文本。</li>
</ul>
<p><code>sed 's/[^[:alnum:]]//g'</code>：这是 <code>sed</code> 命令的一部分，用于对输入的文本进行替换操作。</p>
<ol>
<li><code>s/[^[:alnum:]]//g</code> 是一个替换命令，用于将输入中的非字母数字字符替换为空字符串。</li>
<li><code>[^[:alnum:]]</code> 是一个正则表达式，表示匹配任何非字母数字字符。</li>
<li><code>//</code> 是替换命令的分隔符，用于指定要替换的文本为空字符串。</li>
<li><code>g</code> 是替换命令的标志，表示要替换所有匹配项，而不是只替换第一个匹配项。</li>
</ol>
<h2 id="93-规范日期格式"><a class="markdownIt-Anchor" href="#93-规范日期格式"></a> 9.3 规范日期格式</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">mounthNumToName</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">        1 ) month=<span class="string">&quot;Jan&quot;</span>;; 2 ) month=<span class="string">&quot;Feb&quot;</span> ;;</span><br><span class="line">        3 ) month=<span class="string">&quot;Mar&quot;</span>;; 4 ) month=<span class="string">&quot;Apr&quot;</span>;;</span><br><span class="line">        5 ) month=<span class="string">&quot;May&quot;</span>;; 6 ) month=<span class="string">&quot;Jun&quot;</span>;;</span><br><span class="line">        7 ) month=<span class="string">&quot;Jul&quot;</span>;; 8 ) month=<span class="string">&quot;Aug&quot;</span>;;</span><br><span class="line">        9 ) month=<span class="string">&quot;Sep&quot;</span>;; 10 ) month=<span class="string">&quot;Oct&quot;</span>;;</span><br><span class="line">        11 ) month=<span class="string">&quot;Nov&quot;</span>;; 12 ) month=<span class="string">&quot;Dec&quot;</span>;;</span><br><span class="line">        * ) <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$0</span>: 未知的月份数值 <span class="variable">$1</span>&quot;</span> &gt;&amp;2</span><br><span class="line">            <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查参数数量是否正确</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -ne 3 ] ; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;用法: <span class="variable">$0</span> 月份 日  年份&quot;</span> &gt;&amp;2</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查年份是否为4位数字</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$3</span> -le 99 ] ; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$0</span>: 预期为4位数字的年份&quot;</span> &gt;&amp;2</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查月份是否为纯数字</span></span><br><span class="line"><span class="keyword">if</span> [ -z $(<span class="built_in">echo</span> <span class="variable">$1</span>|sed <span class="string">&#x27;s/[[:digit:]]//g&#x27;</span>) ] ; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># 如果是纯数字，则调用函数将月份转换为对应的名称</span></span><br><span class="line">    mounthNumToName <span class="variable">$1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment"># 如果不是纯数字，则将首字母大写，后续字母小写</span></span><br><span class="line">    month=<span class="string">&quot;<span class="subst">$(echo $1| cut -c1|tr &#x27;[:lower:]&#x27; &#x27;[:upper:]&#x27;)</span>&quot;</span></span><br><span class="line">    month=<span class="string">&quot;$month<span class="subst">$(echo $1|cut -c2-3 | tr &#x27;[:upper:]&#x27; &#x27;[:lower:]&#x27;)</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$month</span> <span class="variable">$2</span> <span class="variable">$3</span></span><br></pre></td></tr></table></figure>
<h2 id="94-美化多位数字"><a class="markdownIt-Anchor" href="#94-美化多位数字"></a> 9.4 美化多位数字</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nicenumber--给定一个数字，以逗号分隔的形式显示它。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  需要DD（小数点分隔符）和TD（千位分隔符）被实例化。如果指定了第二个参数，</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  则将输出回显到标准输出。</span></span><br><span class="line"></span><br><span class="line">nicenumber()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">注意，我们假设“.”是此脚本输入值中的小数分隔符。</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">输出值中的小数分隔符是“.”，除非用户使用-d标志指定。</span></span><br><span class="line"></span><br><span class="line">  integer=$(echo $1 | cut -d. -f1)        # 小数点左边</span><br><span class="line">  decimal=$(echo $1 | cut -d. -f2)        # 小数点右边</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">检查我们的数字是否除了整数部分之外还有其他部分。</span></span><br><span class="line">  if [ &quot;$decimal&quot; != &quot;$1&quot; ]; then</span><br><span class="line">    # 存在小数部分，因此将其包含在内。</span><br><span class="line">    result=&quot;$&#123;DD:= &#x27;.&#x27;&#125;$decimal&quot;</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  thousands=$integer</span><br><span class="line"></span><br><span class="line">  while [ $thousands -gt 999 ]; do</span><br><span class="line">    remainder=$(($thousands % 1000))    # 三个最低有效位</span><br><span class="line">    </span><br><span class="line">    # 我们需要“remainder”是三位数。我们需要添加零吗？</span><br><span class="line">    while [ $&#123;#remainder&#125; -lt 3 ] ; do  # 强制前导零</span><br><span class="line">      remainder=&quot;0$remainder&quot;</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">    result=&quot;$&#123;TD:=&quot;,&quot;&#125;$&#123;remainder&#125;$&#123;result&#125;&quot;    # 从右向左构建</span><br><span class="line">    thousands=$(($thousands / 1000))    # 如果有余数，则向左移动</span><br><span class="line">  done</span><br><span class="line"></span><br><span class="line">  nicenum=&quot;$&#123;thousands&#125;$&#123;result&#125;&quot;</span><br><span class="line">  if [ ! -z $2 ] ; then</span><br><span class="line">    echo $nicenum</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DD=&quot;.&quot;  # 小数点分隔符，用于分隔整数和小数部分</span><br><span class="line">TD=&quot;,&quot;  # 千位分隔符，用于每三位数分隔</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开始主脚本</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">=================</span></span><br><span class="line"></span><br><span class="line">while getopts &quot;d:t:&quot; opt; do</span><br><span class="line">  case $opt in</span><br><span class="line">    d ) DD=&quot;$OPTARG&quot;    ;;</span><br><span class="line">    t ) TD=&quot;$OPTARG&quot;    ;;</span><br><span class="line">  esac</span><br><span class="line">done</span><br><span class="line">shift $(($OPTIND - 1))</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入验证</span></span><br><span class="line">if [ $# -eq 0 ] ; then</span><br><span class="line">  echo &quot;Usage: $(basename $0) [-d c] [-t c] numeric_value&quot;</span><br><span class="line">  echo &quot;  -d 指定小数点分隔符（默认为&#x27;.&#x27;）&quot;</span><br><span class="line">  echo &quot;  -t 指定千位分隔符（默认为&#x27;,&#x27;）&quot;</span><br><span class="line">  exit 0</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">nicenumber $1 1         # 第二个参数强制nicenumber将输出回显。</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>
<p><strong>重点1：</strong><br />
<code>getopts</code> 是一个用于处理命令行选项的 Bash 内置命令。它可以帮助你解析和处理脚本或命令的命令行参数。<code>getopts</code> 在循环中使用，每次循环处理一个选项，并将其与相应的参数关联起来。</p>
<p><code>getopts</code> 命令的语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">getopts</span> optstring variable [args]</span><br></pre></td></tr></table></figure>
<ul>
<li><code>optstring</code>：定义了脚本支持的选项列表，每个选项由一个字母表示。如果选项后面带有冒号（<code>:</code>），则表示该选项需要附加参数。</li>
<li><code>variable</code>：用于存储当前解析的选项的变量名。</li>
<li><code>args</code>：可选参数，用于指定要解析的命令行参数列表。如果省略，则默认使用脚本的命令行参数。</li>
</ul>
<p>在使用 <code>getopts</code> 时，你需要在脚本中使用一个 <code>while</code> 循环来处理每个选项。在循环中，<code>getopts</code> 会将当前解析的选项存储在 <code>variable</code> 变量中，并将附加的参数存储在特殊变量 <code>OPTARG</code> 中。</p>
<p>以下是一个简单的示例，展示了如何使用 <code>getopts</code> 处理命令行选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> <span class="string">&quot;a:b:&quot;</span> opt; <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$opt</span> <span class="keyword">in</span></span><br><span class="line">    a)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;选项 -a，参数为 <span class="variable">$OPTARG</span>&quot;</span></span><br><span class="line">      ;;</span><br><span class="line">    b)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;选项 -b，参数为 <span class="variable">$OPTARG</span>&quot;</span></span><br><span class="line">      ;;</span><br><span class="line">    \?)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;无效的选项： -<span class="variable">$OPTARG</span>&quot;</span></span><br><span class="line">      ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行脚本并传递选项和参数</span></span><br><span class="line"><span class="comment"># ./script.sh -a value1 -b value2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># 选项 -a，参数为 value1</span></span><br><span class="line"><span class="comment"># 选项 -b，参数为 value2</span></span><br></pre></td></tr></table></figure>
<p>在这个示例中，脚本使用 <code>getopts</code> 解析了两个选项 <code>-a</code> 和 <code>-b</code>，并将它们的参数打印出来。如果脚本遇到无效的选项，则会打印出错误信息。</p>
<p>总之，<code>getopts</code> 命令是一个用于处理命令行选项的工具，可以帮助你编写更灵活和可配置的脚本。</p>
<p><strong>重点2：</strong></p>
<ul>
<li><code>-z string</code>：判断给定的字符串是否为空。如果字符串为空，则条件为真。</li>
<li><code>-n string</code>：判断给定的字符串是否非空。如果字符串非空，则条件为真。</li>
<li><code>string1 = string2</code>：判断两个字符串是否相等。如果相等，则条件为真。</li>
<li><code>string1 != string2</code>：判断两个字符串是否不相等。如果不相等，则条件为真。</li>
<li><code>file1 -eq file2</code>：判断两个文件是否具有相同的设备号和 inode 号。如果相同，则条件为真。</li>
<li><code>file1 -nt file2</code>：判断文件 1 是否比文件 2 更新（修改时间更晚）。如果是，则条件为真。</li>
<li><code>file1 -ot file2</code>：判断文件 1 是否比文件 2 更旧（修改时间更早）。如果是，则条件为真。</li>
<li><code>num1 -eq num2</code>：判断两个数字是否相等。如果相等，则条件为真。</li>
<li><code>num1 -ne num2</code>：判断两个数字是否不相等。如果不相等，则条件为真。</li>
<li><code>num1 -lt num2</code>：判断 num1 是否小于 num2。如果是，则条件为真。</li>
<li><code>num1 -le num2</code>：判断 num1 是否小于等于 num2。如果是，则条件为真。</li>
<li><code>num1 -gt num2</code>：判断 num1 是否大于 num2。如果是，则条件为真。</li>
<li><code>num1 -ge num2</code>：判断 num1 是否大于等于 num2。如果是，则条件为真。</li>
</ul>
<h2 id="95-验证整数输入"><a class="markdownIt-Anchor" href="#95-验证整数输入"></a> 9.5 验证整数输入</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">validint--验证整数输入，允许负数。</span></span><br><span class="line"></span><br><span class="line">validint()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">验证第一个字段，并将其与提供的最小值 <span class="variable">$2</span> 和/或最大值 <span class="variable">$3</span> 进行比较：</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">如果值不在范围内或不仅由数字组成，则失败。</span></span><br><span class="line"></span><br><span class="line">  number=&quot;$1&quot;;      min=&quot;$2&quot;;      max=&quot;$3&quot;</span><br><span class="line"></span><br><span class="line">  if [ -z $number ] ; then</span><br><span class="line">    echo &quot;您未输入任何内容。请输入一个数字。&quot; &gt;&amp;2 ; return 1</span><br><span class="line">  fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">第一个字符是否为 <span class="string">&#x27;-&#x27;</span> 符号？</span></span><br><span class="line">  if [ &quot;$&#123;number%$&#123;number#?&#125;&#125;&quot; = &quot;-&quot; ] ; then</span><br><span class="line">    testvalue=&quot;$&#123;number#?&#125;&quot; # 提取除第一个字符外的所有字符进行测试。</span><br><span class="line">  else</span><br><span class="line">    testvalue=&quot;$number&quot;</span><br><span class="line">  fi</span><br><span class="line">  </span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">创建一个没有数字的版本，用于测试。</span></span><br><span class="line">  nodigits=&quot;$(echo $testvalue | sed &#x27;s/[[:digit:]]//g&#x27;)&quot;</span><br><span class="line">  </span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">检查是否存在非数字字符。</span></span><br><span class="line">  if [ ! -z $nodigits ] ; then</span><br><span class="line">    echo &quot;无效的数字格式！只允许数字，不允许逗号、空格等。&quot; &gt;&amp;2</span><br><span class="line">    return 1</span><br><span class="line">  fi</span><br><span class="line">  </span><br><span class="line">  if [ ! -z $min ] ; then</span><br><span class="line">    # 输入值是否小于最小值？</span><br><span class="line">    if [ &quot;$number&quot; -lt &quot;$min&quot; ] ; then</span><br><span class="line">      echo &quot;$number 太小了：最小可接受值为 $min&quot; &gt;&amp;2</span><br><span class="line">      return 1</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line">  if [ ! -z $max ] ; then</span><br><span class="line">    # 输入值是否大于最大值？</span><br><span class="line">    if [ &quot;$number&quot; -gt &quot;$max&quot; ] ; then</span><br><span class="line">      echo &quot;您的值太大了：最大可接受值为 $max&quot; &gt;&amp;2</span><br><span class="line">      return 1</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line">  return 0</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入验证</span></span><br><span class="line">if validint &quot;$1&quot; &quot;$2&quot; &quot;$3&quot; ; then</span><br><span class="line">  echo &quot;输入是一个在您约束条件内的有效整数&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<h2 id="96-验证浮点数输入"><a class="markdownIt-Anchor" href="#96-验证浮点数输入"></a> 9.6 验证浮点数输入</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">validfloat--检测一个数字是否是有效的浮点数。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  注意，此脚本无法接受科学计数法（1.304e5）表示的浮点数。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为了测试输入值是否是有效的浮点数，我们需要将该值拆分为两部分：整数部分和小数部分。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我们可以测试第一部分，看它是否是有效的整数，然后再测试第二部分是否是有效的 &gt;=0 整数。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">因此，-30.5 被认为是有效的，但 -30.-8 不是。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">要在此脚本中包含另一个 shell 脚本作为一部分，可以使用 <span class="string">&quot;.&quot;</span> 来源符号。非常简单。</span></span><br><span class="line"></span><br><span class="line">. validint   # Bourne shell 的方式，引入 validint 函数</span><br><span class="line"></span><br><span class="line">validfloat()</span><br><span class="line">&#123;</span><br><span class="line">  fvalue=&quot;$1&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">检查输入的数字是否有小数点。</span></span><br><span class="line">  if [ ! -z $(echo $fvalue | sed &#x27;s/[^.]//g&#x27;) ] ; then</span><br><span class="line"></span><br><span class="line">    # 提取小数点前的部分（比如 &#x27;3.14&#x27; 中的 &#x27;3&#x27;）。</span><br><span class="line">    decimalPart=&quot;$(echo $fvalue | cut -d. -f1)&quot;</span><br><span class="line"></span><br><span class="line">    # 提取小数点后的数字部分（比如 &#x27;3.14&#x27; 中的 &#x27;14&#x27;）。</span><br><span class="line">    fractionalPart=&quot;$&#123;fvalue#*\.&#125;&quot;</span><br><span class="line"></span><br><span class="line">    # 首先测试小数部分，即小数点左边的部分。</span><br><span class="line"></span><br><span class="line">    if [ ! -z $decimalPart ] ; then</span><br><span class="line">      # &quot;!&quot; 反转了测试逻辑，所以下面的条件表示 &quot;如果不是有效的整数&quot;</span><br><span class="line">      if ! validint &quot;$decimalPart&quot; &quot;&quot; &quot;&quot; ; then</span><br><span class="line">        return 1</span><br><span class="line">      fi </span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 现在测试小数部分（小数点右边的值）。</span><br><span class="line">    # 首先，小数点后面不能有负号，比如 33.-11，所以我们要检查小数部分是否包含负号。</span><br><span class="line">    if [ &quot;$&#123;fractionalPart%$&#123;fractionalPart#?&#125;&#125;&quot; = &quot;-&quot; ] ; then</span><br><span class="line">      echo &quot;无效的浮点数：小数点后面不允许有负号&quot; &gt;&amp;2  # &gt;&amp;2 将输出发送到 stderr。</span><br><span class="line">      return 1</span><br><span class="line">    fi </span><br><span class="line">    if [ &quot;$fractionalPart&quot; != &quot;&quot; ] ; then </span><br><span class="line">      # 如果小数部分不是有效的整数...</span><br><span class="line">      if ! validint &quot;$fractionalPart&quot; &quot;0&quot; &quot;&quot; ; then</span><br><span class="line">        return 1</span><br><span class="line">      fi</span><br><span class="line">    fi</span><br><span class="line">  else </span><br><span class="line">    # 如果整个值只是 &quot;-&quot;，也是不允许的。</span><br><span class="line">    if [ &quot;$fvalue&quot; = &quot;-&quot; ] ; then</span><br><span class="line">      echo &quot;无效的浮点格式。&quot; &gt;&amp;2 ; return 1</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 最后，检查剩余的数字是否是有效的整数。</span><br><span class="line">    if ! validint &quot;$fvalue&quot; &quot;&quot; &quot;&quot; ; then</span><br><span class="line">      return 1</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  return 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if validfloat $1 ; then</span><br><span class="line">  echo &quot;$1 是一个有效的浮点数&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
  </entry>
  <entry>
    <title>tabby的使用</title>
    <url>/2023/12/10/22%20tabby%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​	先说一下前提条件，本来我其实挺不爱用终端的，就算使用终端也是用mobaxterm，只能说这个软件很是强大，但是并没有给我一种给经验的感觉，当然肯定比之前的超级终端强得多，但还是不能给我一个十分想用的感觉，而这个tabby的软件就不一样，简洁而且看起来很好用，他的分屏、颜色、背景插件等等一系列的操作都让我很是喜欢，所以下面就简单的讲解一下tabby的使用。</p>
<h1 id="1tabby简介"><a class="markdownIt-Anchor" href="#1tabby简介"></a> 1.Tabby简介</h1>
<p>🍀 Tabby是一个无限可定制的跨平台终端应用程序，适用于local shells、serial、SSH和Telnet的连接。<br />
🍁 Tabby是基于TypeScript开发的终端模拟器，可用于Linux、Windows和Mac OS系统。</p>
<p>🌺 Tabby (前身是 Terminus) 是一个可高度配置的终端模拟器和 SSH 或串口客户端，支持 Windows，macOS 和 Linux</p>
<ul>
<li>集成 SSH，Telnet 客户端和连接管理器</li>
<li>集成串行终端</li>
<li>定制主题和配色方案</li>
<li>完全可配置的快捷键和多键快捷键</li>
<li>分体式窗格</li>
<li>自动保存标签页</li>
<li>支持 PowerShell（和 PS Core）、WSL、Git-Bash、Cygwin、MSYS2、Cmder 和 CMD</li>
<li>在 SSH 会话中通过 Zmodem 进行直接文件传输</li>
<li>完整的 Unicode 支持，包括双角字符</li>
<li>不会因快速的输出而卡住</li>
<li>Windows 上舒适的 shell 体验，包括 tab 自动补全（通过 Clink）</li>
<li>为 SSH secrets 和设置集成了加密容器</li>
<li>SSH、SFTP 和 Telnet 客户端可用作 Web 应用（也可托管）</li>
</ul>
<h1 id="2tabby的安装"><a class="markdownIt-Anchor" href="#2tabby的安装"></a> 2.tabby的安装</h1>
<p>下载地址：<a href="https://github.com/Eugeny/tabby/releases/tag/v1.0.205">https://github.com/Eugeny/tabby/releases/tag/v1.0.205</a></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101539329.png" alt="image-20231210153958212" /></p>
<p>​	有windows macos和linux多种类型的安装包，当然也包括多种架构的，我这里要在windows上进行使用，所以下载了windowd的exe文件，也就是这个<a href="https://github.com/Eugeny/tabby/releases/download/v1.0.205/tabby-1.0.205-setup-x64.exe">tabby-1.0.205-setup-x64.exe</a>，下载完成之后进行安装。安装完成之后打开该软件</p>
<p>​	由于我要写markdown，所以我把之前下载的删掉了，但是它仍旧保存了我之前的配置，所以除了删掉软件之外还需要去删掉C盘的配置文件：C:\Users\Administrator\AppData\Roaming。</p>
<p>​	第一次启动如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101557259.png" alt="image-20231210155713230" /></p>
<p>​	这里的语言可以选择中文，选择之后如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101557342.png" alt="image-20231210155753314" /></p>
<p>​	而且我比较喜欢黑色的终端，所以就保持默认的黑色的配色方案了。关闭退出之后进入软件界面如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101558826.png" alt="image-20231210155851798" /></p>
<p>​	至此，关于tabby的安装就完成了。</p>
<h1 id="3tabby快捷键的修改"><a class="markdownIt-Anchor" href="#3tabby快捷键的修改"></a> 3.tabby快捷键的修改</h1>
<p>删除显示配置选择器 ctrl+shift+e，因为我想要让该快捷键改为向右分割窗格。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101601528.png" alt="image-20231210160101515" /></p>
<p>然后将ctrl+shift的快捷按键也删除掉，</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101602643.png" alt="image-20231210160223634" /></p>
<p>这里的关闭标签为ctrl+shift+w，我认为不方便，由于我经常将该快捷按键设置为关闭单一的窗格，所以这里也删除掉</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101605559.png" alt="image-20231210160540547" /></p>
<p>将向右拆分窗格设置为ctrl+shift+e，将向下拆分窗格设置为ctrl+shift+o</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101607090.png" alt="image-20231210160745073" /></p>
<p>将关闭已聚焦的窗格设置为ctrl+shift+w</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101608034.png" alt="image-20231210160817023" /></p>
<p>最后在写几个好用的快捷按键</p>
<p>1.ctrl+shift+左右按键可以切换不同的==标签页==</p>
<p>2.alt+数字按键也可以切换不同的==标签页==</p>
<p>3.ctrl+alt +上下左右可以切换不同的==窗格==</p>
<p>==上面这些确实不错可以让我解放双手，不需要懂鼠标，只需要键盘即可==</p>
<p>4.当窗格进行拆分之后，可以通过ctrl+alt+回车最大化当前的==窗格==</p>
<p>5.ctrl+alt+t 可以切换当前==窗格==的配置（==本来不知道是做啥的后来才知道，但还挺好用==）</p>
<p>6.ctrl+shift+. 可以将当前的窗格修改为单独的==标签页==</p>
<p>7.ctrl+shift+， 将所有的==标签页==合并到当前页</p>
<p>可以看到跟ctrl+shift有关的都是标签页，而跟窗格有关的都是ctrl+alt，反正ctrl是不能少的，而是窗格还是标签就要根据shift和alt来决定了。</p>
<h1 id="4串口的连接"><a class="markdownIt-Anchor" href="#4串口的连接"></a> 4.串口的连接</h1>
<p>​	点击右上角的齿轮按钮或者标签页右侧的按钮都可以进行配置。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101634986.png" alt="image-20231210163447978" /></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101634116.png" alt="image-20231210163454106" /></p>
<p>​	我这里是串口5，点击之后可以选择波特率，我这里选择115200，如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101635089.png" alt="image-20231210163551067" /></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101636546.png" alt="image-20231210163634527" /></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101636210.png" alt="image-20231210163642195" /></p>
<p>如果是从齿轮设置打开，则需要先点击配置和连接，再选择串口5，如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101637283.png" alt="image-20231210163734239" /></p>
<h1 id="5ssh的连接"><a class="markdownIt-Anchor" href="#5ssh的连接"></a> 5.ssh的连接</h1>
<p>​	如果仅仅只是上面的串口功能，还并不能吸引我，更重要的是这个ssh功能，ssh功能因为要配置IP和密码，所以不能直接点击，需要从配置和连接中，点击ssh右侧小箭头中的克隆，如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101640012.png" alt="image-20231210163959998" /></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101640130.png" alt="image-20231210164012101" /></p>
<p>​	然后以此输入名称，连接的主机ip即可，我这里连接的是ip为192.168.1.84的ubuntu20，我们一般情况下加载普通用户，就不要使用root用户了，设置完成如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101642173.png" alt="image-20231210164206146" /></p>
<p>​	而ssh的色彩我更喜欢这个名叫Argonaut的，看着还挺好的。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101653467.png" alt="image-20231210165346454" /></p>
<p>​	然后点击保存，可以发现刚刚配置的ssh已经在未命名的组内了：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101642152.png" alt="image-20231210164253114" /></p>
<p>​	然后点击箭头进行连接即可，连接成功如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101646500.png" alt="image-20231210164609480" /></p>
<h1 id="6字体设置"><a class="markdownIt-Anchor" href="#6字体设置"></a> 6.字体设置</h1>
<p>​	现在的字体特别小，而且颜色也并不是很好看，可以通过设置中的外观进行修改，进入之后如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101648741.png" alt="image-20231210164841697" /></p>
<p>这里的字体我喜欢设置为Cascadia Code SemiBold，而字体大小设置为20即可</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101656358.png" alt="image-20231210165607329" /></p>
<p>​	最后的效果如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101656926.png" alt="image-20231210165653910" /></p>
<p>​	对比度鲜艳，让人看着就赏心悦目，工作更加有动力，哈哈。</p>
<h1 id="7好用的插件"><a class="markdownIt-Anchor" href="#7好用的插件"></a> 7.好用的插件</h1>
<h2 id="71-background"><a class="markdownIt-Anchor" href="#71-background"></a> 7.1 background</h2>
<p>​	重点来了，这个是我最最最最推荐的一个插件了，当你的终端背后是一个小姐姐的时候，你是不是想要多看会儿，这样你连摸鱼的时间都会少很多，而且还能适当的放松一下，极大的提高到了工作效率。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101659617.png" alt="image-20231210165947584" /></p>
<p>​	获取之后需要重启软件，在菜单中会多出一个背景，如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101700953.png" alt="image-20231210170052921" /></p>
<p>​	首先启用背景，如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101701772.png" alt="image-20231210170120756" /></p>
<p>​	然后选择一个你喜欢的图片，我这里当然是神里凌华了==我是神里凌华的狗==，修改完之后是这个样子</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101702859.png" alt="image-20231210170251409" /></p>
<p>​	但这也太招摇了，这时候下面的选项就有用了，将背景不透明度设置为6或者7这个样子，我测试最为合适，如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101704726.png" alt="image-20231210170443701" /></p>
<p>​	最后的效果如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101705347.png" alt="image-20231210170508231" /></p>
<p>​	==嘿嘿是不是感觉还不错==</p>
<p>我发现每次重新启动tabby的时候都会自动打开一个 windows的tabby，我感觉好烦，可以在菜单栏中找到终端如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101709443.png" alt="image-20231210170926400" /></p>
<p>然后取消下面的这个即可</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101709459.png" alt="image-20231210170905398" /></p>
<h2 id="72trzsz"><a class="markdownIt-Anchor" href="#72trzsz"></a> 7.2.trzsz</h2>
<p>​	默认情况下可以通过这里右上角的sftp进行文件的传输，但是这里有个问题，只能上传文件，但是不能上传文件夹：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101712233.png" alt="image-20231210171255099" /></p>
<p>​	而trzsz插件可以解决这个问题</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101713340.png" alt="image-20231210171347327" /></p>
<p>安装之后重启tabby，测试发现仍旧不行，但我看github有人说这个问题呀，就很奇怪，算了传输文件不行还能接受，就先这样吧。</p>
<h2 id="73-highlight"><a class="markdownIt-Anchor" href="#73-highlight"></a> 7.3 highlight</h2>
<p>从名字可以看出这是一个高亮的插件，有时候的一些错误信息是需要查看的，或者调试的时候需要捕获到一些特殊字符，所以这个高亮插件还是很重要的。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101719770.png" alt="image-20231210171941753" /></p>
<p>安装完成重启，可以看到多出来了一个高亮的图标如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101720547.png" alt="image-20231210172013491" /></p>
<p>然后点击启动即可：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101720063.png" alt="image-20231210172048815" /></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101720552.png" alt="image-20231210172058507" /></p>
<p>​	默认已经给你写好了一些关键字，自己也可以根据需求进行添加。</p>
<h2 id="74-save-output"><a class="markdownIt-Anchor" href="#74-save-output"></a> 7.4 save-output</h2>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101723396.png" alt="image-20231210172326381" /></p>
<p>​	有时候需要保存终端的输出，默认情况下该终端软件是没有保存的功能的，所以需要安装一个名为save-output的插件。</p>
<p>​	安装完成之后会在菜单栏中多出来一个名为save-output的按钮如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101726132.png" alt="image-20231210172632938" /></p>
<p>​	设置为on之后设置要存储的路径即可。然后随意打开一个终端。按右键之后可以发现会有一个save-output to file的选项</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101727627.png" alt="image-20231210172727612" /></p>
<p>点击保存即可</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101728088.png" alt="image-20231210172814048" /></p>
<p>在对应的文件中可以看到打印信息，如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101728121.png" alt="image-20231210172857106" /></p>
<p>​	到这里，关于tabby的简单设置和使用就介绍完成了，下面说一下感受吧，我之前其实并不是很喜欢这些华丽花哨的东西，感觉简简单单能用就好了，但随着时间的推移，发现有些东西并不是你想的那样的，一个好用的工具确实能给人带来不一样的体验，最后祝看到这里的小伙伴，事事顺心。</p>
<p>​	为了方便我的后续使用，我将相应的配置进行了打包，以后如果换电脑了只需要将下面网盘的资料放到C:\Users\Administrator\AppData\Roaming目录下解压即可。</p>
<p>链接：<a href="https://pan.baidu.com/s/1EBBtEmSY9SCBeIlB5YVoWQ">https://pan.baidu.com/s/1EBBtEmSY9SCBeIlB5YVoWQ</a><br />
提取码：bs5v<br />
–来自百度网盘超级会员V6的分享</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
  </entry>
  <entry>
    <title>git的学习</title>
    <url>/2023/12/10/22%20git%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​	前提条件，先来说一下未什么要学习git吧，目前先不考虑远程git和github，我目前只是想要在Linux环境下进行git的使用，说一个最简单的目的，我想让我的Linux目录用到什么就显示什么，而且其他的文件也会进行存档，当我需要这个项目的时候就切换到这个分支进行开发，而不是像我现在这个样子，还要保存，删除等等，这样我也能知道我都做了哪些的修改，目前的需求就这样，学习去。</p>
<h1 id="1git的安装"><a class="markdownIt-Anchor" href="#1git的安装"></a> 1.git的安装</h1>
<p>​	关于git的介绍就不再多说了，linus的丰功伟绩，一直是我的指路明灯，也是我为之不断努力的方向， 过多的就不再多说。</p>
<p>安装需要的插件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev git</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101036140.png" alt="image-20231210103658547" /></p>
<p>安装完成之后查看git的版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101038851.png" alt="image-20231210103828814" /></p>
<h1 id="2-git的配置"><a class="markdownIt-Anchor" href="#2-git的配置"></a> 2. git的配置</h1>
<p>配置个人的用户名和电子邮箱</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;chai&quot;</span><br><span class="line">git config --global user.email &quot;1361382269@qq.com&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101040420.png" alt="image-20231210104002380" /></p>
<p>查看配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --list --global</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101040757.png" alt="image-20231210104018710" /></p>
<p>配置也可以在 ~/.gitconfig 或 /etc/gitconfig 看到这里加上 --global 是全局的配置， 如果想要在某个特定的配置中使用单独的配置就将–global去掉</p>
<p>设置颜色差异：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global color.ui true</span><br></pre></td></tr></table></figure>
<p>设置git命令补全</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/markgandolfo/git-bash-completion/blob/master/git-completion.bash</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101105829.png" alt="image-20231210110546532" /></p>
<p>​	然后将</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mv git-completion.bash /usr/bin/</span><br><span class="line">sudo echo source /usr/bin/git-completion.bash &gt;&gt; /home/topeet/.bashrc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root的配置文件需要权限，sudo不顶用，所以要换到root用户</span></span><br><span class="line">sudo echo source /usr/bin/git-completion.bash &gt;&gt; /root/.bashrc</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101110920.png" alt="image-20231210111049872" /></p>
<p>现在git就可以正常的进行命令的提示了，如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101111447.png" alt="image-20231210111136282" /></p>
<p>==默认情况下ssh连接是不能翻墙的，原因是一些环境变量的问题，所以就需要手动导入一下下面的上网的环境变量==</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export ftp_proxy=http://127.0.0.1:8889/</span><br><span class="line">export https_proxy=http://127.0.0.1:8889/</span><br><span class="line">export FTP_PROXY=http://127.0.0.1:8889/</span><br><span class="line">export HTTPS_PROXY=http://127.0.0.1:8889/</span><br><span class="line">export HTTP_PROXY=http://127.0.0.1:8889/</span><br><span class="line">export http_proxy=http://127.0.0.1:8889/</span><br></pre></td></tr></table></figure>
<p>目前还不想用码云和github所以这里的ssh配置就先不配置</p>
<p>==另一个方法，更简单，使用自带的即可==</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo echo source /usr/share/bash-completion/completions/git &gt;&gt; /home/topeet/.bashrc</span><br><span class="line">sudo echo source /usr/share/bash-completion/completions/git  &gt;&gt; /home/topeet/.bashrc</span><br></pre></td></tr></table></figure>
<h1 id="3git-基础理论"><a class="markdownIt-Anchor" href="#3git-基础理论"></a> 3.git 基础理论</h1>
<p>​	我其实早就学习过了一遍git了，但是一直没有用起来，关于理论这里也算是学习过了，而git的核心命令也就在这个地方。我这里就不复制了，凭借我的记忆复述一下。</p>
<p>​	git有三个工作区域，分别为工作目录（working directory）、暂存区（stage/index）和资源库（repository），而原创git仓库这里先不管，以后再说，大概是长这个样子：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101117006.png" alt="image-20231210111712990" /></p>
<p>加上各种命令的切换，长这个样子：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101117699.png" alt="在这里插入图片描述" /></p>
<p>Workspace:工作区，就是平时存放项目代码的地方</p>
<p>Index/Stage:暂存区，用于临时存放你的改动，事实上它是一个文件，保存即将提交的列表信息</p>
<p>local Repository:仓库区（或本地仓库），就是安全存放数据的位置，这里有你提交到所有版本的数据，其中HEAD指向最新放入仓库的版本</p>
<p>Remote Repository:远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</p>
<h1 id="4git工作流程"><a class="markdownIt-Anchor" href="#4git工作流程"></a> 4.git工作流程</h1>
<p>git的工作流程一般是这样的：</p>
<ol>
<li>
<p>在工作中添加，修改文件</p>
</li>
<li>
<p>将需要进行的版本管理的文件放入暂存区域</p>
</li>
<li>
<p>将暂存区域文件提交到git仓库</p>
<p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交（committed）</p>
</li>
</ol>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101131377.png" alt="在这里插入图片描述" /></p>
<h1 id="5git项目搭建"><a class="markdownIt-Anchor" href="#5git项目搭建"></a> 5.Git项目搭建</h1>
<p>工作目录（WorkSpace）一般就是你希望Git帮助你管理的文件夹，可以是你的项目目录，也可以是空目录，建议不要有中文。</p>
<p>日常使用只需要记住下图6个命令：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101137263.png" alt="在这里插入图片描述" /></p>
<p>建立一个git仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101139420.png" alt="image-20231210113938373" /></p>
<p>执行万命令后可以看到，仅仅在项目目录多出了一个.git目录（注意这个默认是隐藏的文件夹，需要手动在查看选项里面去掉隐藏的文件才能显示），关于版本等所有信息都在这个目录里面</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101140306.png" alt="image-20231210114003052" /></p>
<p>git文件操作</p>
<p>版本控制就是对文件的版本控制，要对文件进行修改，提交等操作，首先要知道文件当前什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p>
<p>​	(1):Untracked:未跟踪，此文件在文件夹中，但并没有加入到git仓库，不参与版本控制.通过git add 状态变为Staged.</p>
<p>​	(2):Unmodify:文件已经入库，未修改，即版本库中的文件快照内容与文件夹完全一致.这种类型的文件有两种去处，如果它被修改，而变为Modified.如果使用git rm 移出版本库，则成为Untracked文件.</p>
<p>​	(3):Modified:文件已修改，仅仅是修改，并没有进行其他的操作.这个文件也有两个去处，通过git add可进入暂存staged状态，使用git</p>
<p>checkout，则丢弃修改过，返回unmodify状态，这个git checkout即从库中取出文件，覆盖当前修改！</p>
<p>​	(4):Staged：暂存状态，执行git commit则将修改同步到库中，这时库中的文件和本地文件又变为一致，文件为Unmodify状态.执行git</p>
<p>reset</p>
<p>查看制定文件状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git status [文件名]</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101145780.png" alt="image-20231210114548647" /></p>
<p>查看所有文件状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101146553.png" alt="image-20231210114602428" /></p>
<p>添加所有文件到暂存区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add . </span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101147341.png" alt="image-20231210114733202" /></p>
<p>​	这里也仅仅只是将工作区上传到了暂存区，可以看到status已经变为了绿色。</p>
<p>提交暂存区中的内容到本地仓库 -m:提交的信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;信息&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101148098.png" alt="image-20231210114849962" /></p>
<p>可以看到git status的状态也已经更新了，如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101149264.png" alt="image-20231210114917210" /></p>
<h1 id="6忽略文件"><a class="markdownIt-Anchor" href="#6忽略文件"></a> 6.忽略文件</h1>
<p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p>
<p>在主目录下建立“.gitignore”文件，此文件有如下规则：</p>
<p>1.忽略文件中的空行或以井号（# ）开始的行将会被忽略。</p>
<p>2.可以使用Linux通配符。例如∶星号(*)代表任意多个字符，问号(﹖)代表一个字符，方括号([abc] )代表可选字符范围，大括号( {string1,string2……})代表可选的字符串等。</p>
<p>3.如果名称的最前面有一个感叹号( !)，表示例外规则，将不被忽略。</p>
<p>4.如果名称的最前面是一个路径分隔符(/ )，表示要忽略的文件在此目录下，而子目录中的文件不忽略。</p>
<p>5.如果名称的最后面是一个路径分隔符(/ )，表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</p>
<p>例如以下这些实例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*.txt   #忽略所有的.txt结尾的文件</span><br><span class="line">！lib.txt  #但lib.txt除外</span><br><span class="line">/temp  #进忽略项目根目录下的TODO文件，不包括其他目录temp</span><br><span class="line">bulid/  #忽略bulid目录下的所有文件</span><br><span class="line">doc/*.txt #会忽略doc/notes.txt 但是不包括doc/sever/arch.txt</span><br></pre></td></tr></table></figure>
<h1 id="7查看日志以及恢复版本"><a class="markdownIt-Anchor" href="#7查看日志以及恢复版本"></a> 7.查看日志以及恢复版本</h1>
<p>在第5小节已经进行了第一次的提交，然后我进行第二次的提交</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101153879.png" alt="image-20231210115334834" /></p>
<p>上面是进行的修改，接下来进行提交，如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101154938.png" alt="image-20231210115438817" /></p>
<p>然后进行提交的查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101155808.png" alt="image-20231210115527651" /></p>
<p>可以看到这是两个提交，现在指向的是第二次提交，而目前的情况是这样的，这一次的提交是错误的我不想要了，我想回退到第一次的提交，可以使用git reset进行回复</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset [哈希值]</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101157577.png" alt="image-20231210115707464" /></p>
<p>然后查看提交的状态如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101158910.png" alt="image-20231210115820807" /></p>
<p>但是仍旧需要手动删除才行，如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101159755.png" alt="image-20231210115912689" /></p>
<h1 id="8分支操作"><a class="markdownIt-Anchor" href="#8分支操作"></a> 8.分支操作</h1>
<p>分支是Git使用过程中非常重要的概念。使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。同一个仓库可以有多个分支,各个分支相互独立,互不干扰。通过git init命令创建本地仓库时默认会创建- -个master分支。</p>
<p>​	==之前还是不懂，对于分支有了不一样的想法，分支并不是一个新的，而是一个当前内容的分支==</p>
<p>查看分支：</p>
<p>（1）列出所有本地分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101201065.png" alt="image-20231210120127025" /></p>
<p>列出所有远程分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure>
<p>列出所有本地分支和远程分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>
<p>我这里并没有涉及到远程分支，所以也就先不用管。</p>
<p>（2）创建分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch name</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101205974.png" alt="image-20231210120516908" /></p>
<p>（3）删除分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d name</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101205187.png" alt="image-20231210120535123" /></p>
<p>（4）分支切换</p>
<p>首先在主分支创建了一个markdown测试文件，并且提交</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101210757.png" alt="image-20231210121055669" /></p>
<p>然后创建另一个分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch test</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101212631.png" alt="image-20231210121207568" /></p>
<p>切换到新创建的分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout name</span><br></pre></td></tr></table></figure>
<p>这里关于分支的还是不太懂，这里应该是要看一看视频。现在懂了，分支的名称才真正的懂得了。</p>
<p>（5）分支合并</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101501055.png" alt="image-20231210150127690" /></p>
<p>可以看到目前head领先了master一个提交，使用下面的命令进行分支合并，将分支上的修改进行合并</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git merge test</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312101502556.png" alt="image-20231210150257210" />					可以看到head和master已经是同一个分支了。</p>
<p>9.scp命令的学习</p>
<p><code>scp</code>（Secure Copy）命令用于在本地主机和远程主机之间进行文件传输。它使用SSH协议进行安全的文件传输。</p>
<p><code>scp</code>命令的基本语法如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp [选项] 源文件 目标文件</span><br></pre></td></tr></table></figure>
<p>其中，<code>源文件</code>是要传输的文件或目录的路径，<code>目标文件</code>是传输到的目标位置的路径。</p>
<p>以下是一些常用的<code>scp</code>命令选项：</p>
<ul>
<li><code>-r</code>：递归复制整个目录。</li>
<li><code>-P &lt;port&gt;</code>：指定SSH端口号。</li>
<li><code>-i &lt;identity_file&gt;</code>：指定用于身份验证的私钥文件。</li>
<li><code>-v</code>：显示详细的调试信息。</li>
<li><code>-C</code>：开启压缩传输。</li>
</ul>
<p>下面是几个示例，演示了如何使用<code>scp</code>命令：</p>
<ol>
<li>
<p>从本地主机复制文件到远程主机：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp /path/to/local/file user@remote:/path/to/destination/</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>从远程主机复制文件到本地主机：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp user@remote:/path/to/remote/file /path/to/destination/</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>从本地主机复制整个目录到远程主机：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r /path/to/local/directory user@remote:/path/to/destination/</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>从远程主机复制整个目录到本地主机：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r user@remote:/path/to/remote/directory /path/to/destination/</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>这些示例中的<code>user</code>是远程主机上的用户名，<code>remote</code>是远程主机的地址（可以是IP地址或域名），<code>/path/to/</code>是文件或目录的路径。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
  </entry>
  <entry>
    <title>opencv的学习</title>
    <url>/2023/12/09/11-opencv%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>==多好的周日呀，玩了一半总要学习一半，你说对吧==</p>
<p>RGA是我总想要要学习的一个东西，只是一直没有机会，好吧，还是我自己的问题~</p>
<p>RGA是一个硬件，他是用来加速2d的，也就是说对于画线等2d操作有很好的加速作用，而我是在哪些时候见到的RGA的呢，是在opencv里面，具体RK是怎样用的呢，我忘记了，所以这里先来重新学习一下opencv，也不用多学，只需要学习windows和Linux里面opencv的配置即可。</p>
<h1 id="1-windows-opencv的配置"><a class="markdownIt-Anchor" href="#1-windows-opencv的配置"></a> 1 windows opencv的配置</h1>
<p><a href="https://blog.csdn.net/qq_45022687/article/details/120241068?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170117660416800222888362%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=170117660416800222888362&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-120241068-null-null.142%5Ev96%5Epc_search_result_base2&amp;utm_term=vscode%20opencv&amp;spm=1018.2226.3001.4187">看样子最好的一个链接</a><br />
下面是我根据教程来构建的步骤。</p>
<h2 id="11-软件准备"><a class="markdownIt-Anchor" href="#11-软件准备"></a> 1.1 软件准备</h2>
<p><a href="https://so.csdn.net/so/search?q=MinGw&amp;spm=1001.2101.3001.7020">MinGw</a>：版本：8.1.0-release-posix-seh-rt_v6-rev0</p>
<p>Cmake：版本：3.20.2</p>
<p><a href="https://so.csdn.net/so/search?q=Opencv&amp;spm=1001.2101.3001.7020">Opencv</a>：版本：4.5.2</p>
<p>其中Cmake和opencv我当然知道是什么，cmake是用来编译oepcnv的，而mingw是什么呢？</p>
<p>MinGW（Minimalist GNU for Windows）是一个用于在Windows操作系统上进行开发的开源软件开发工具集合。它提供了一组GNU工具和库，包括GCC编译器、GNU调试器（GDB）、GNU构建工具（Make）等，使开发者能够在Windows环境下编译和运行C、C++等程序。</p>
<p>MinGW的目标是为Windows提供一个简洁、轻量级的开发环境，以便开发者能够在Windows上进行基于GNU工具的软件开发，而无需依赖于Microsoft Visual Studio等大型开发工具。</p>
<p>MinGW基于GNU工具链，因此它支持标准的GNU编程工具和库，使开发者能够编写和构建跨平台的应用程序。通过MinGW，开发者可以使用GCC编译器在Windows上编译和构建命令行程序、库文件或者跨平台的应用程序。</p>
<p>此外，MinGW还有一个变种版本叫做MinGW-w64，它提供了对64位Windows系统的支持，并且在一些方面进行了改进和扩展。</p>
<p>==上面是人工智能得到的，我目前就简单的将它理解为在windows上的一个GCC工具链吧==</p>
<h2 id="12-软件的下载"><a class="markdownIt-Anchor" href="#12-软件的下载"></a> 1.2 软件的下载</h2>
<h3 id="121-mingw下载"><a class="markdownIt-Anchor" href="#121-mingw下载"></a> 1.2.1 MinGw下载</h3>
<p><a href="https://sourceforge.net/projects/mingw-w64/files/mingw-w64/">mingw</a></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311282124974.png" alt="image-20231128212412942" /></p>
<ul>
<li><code>x86_64</code>: 表示64位x86架构。</li>
<li><code>i686</code>: 表示32位x86架构（也称为x86或IA-32）。</li>
<li><code>posix</code>: 表示采用POSIX标准的操作系统接口。</li>
<li><code>win32</code>: 表示基于Windows操作系统的接口。</li>
</ul>
<p>对于异常处理（Exception Handling）方式：</p>
<ul>
<li><code>sjlj</code>（Set Jump/Long Jump）：使用基于setjmp/longjmp函数的异常处理机制。</li>
<li><code>seh</code>（Structured Exception Handling）：使用Windows结构化异常处理机制。</li>
</ul>
<p>对于调试信息（Debug Information）方式：</p>
<ul>
<li><code>dwarf</code>：使用DWARF调试格式。</li>
<li><code>sjlj</code> 和 <code>seh</code> 不涉及调试信息。</li>
</ul>
<p>解压该软件包之后得到ming64的文件夹，我将它放到了D盘的根目录</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311282142004.png" alt="image-20231128214221986" /></p>
<p>随后将“==D:\mingw64\bin==”这个地址加入环境变量，注：win+q 搜索环境变量可以快速打开环境配置，对Path进行配置即可，之前这里对我还挺困难的，如果现在还不懂，那就是你的问题了。最后通过“==g++ -v==”来进行验证，验证成功如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311282153126.png" alt="image-20231128215324105" /></p>
<h3 id="122-cmake下载"><a class="markdownIt-Anchor" href="#122-cmake下载"></a> 1.2.2 Cmake下载</h3>
<p><a href="https://cmake.org/files/">cmake下载地址</a></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311282133808.png" alt="image-20231128213309747" /></p>
<p>这里直接选用最新的版本<a href="https://cmake.org/files/v3.28/">3.28</a>，同理跟上面的mingw一样，以同样的方法设置cmake，解压之后的名字为cmake-3.28.0-rc5-windows-x86_64，也放到D盘下，如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311282155794.png" alt="image-20231128215506778" /></p>
<p>具体要添加的路径为D:\cmake-3.28.0-rc5-windows-x86_64\bin，也要加入Path，然后测试如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmake --version</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311282156434.png" alt="image-20231128215641421" /></p>
<h3 id="123-opencv下载"><a class="markdownIt-Anchor" href="#123-opencv下载"></a> 1.2.3 Opencv下载</h3>
<p><a href="https://opencv.org/releases/">opencv</a></p>
<p>这里也直接下windows的最新版4.8</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311282139382.png" alt="image-20231128213946356" /></p>
<p>opencv也是一样的，opencv虽然是一个exe文件，实际也是解包的一个过程，解包完成如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311282158637.png" alt="image-20231128215855620" /></p>
<h2 id="13-编译"><a class="markdownIt-Anchor" href="#13-编译"></a> 1.3 编译</h2>
<p>OpenCV是一个广泛使用的计算机视觉库，它提供了各种图像和视频处理功能，用于开发计算机视觉应用程序。在Windows操作系统上，原生支持Visual Studio（VS）作为开发环境，可以直接在VS中使用OpenCV。</p>
<p>然而，Visual Studio过于庞大和笨重，不太方便使用。相比之下，Visual Studio Code（VSCode）是一个轻量级的代码编辑器，具有良好的可定制性和扩展性。因此，他们选择使用VSCode作为开发环境来配置OpenCV。</p>
<p>在使用VSCode配置OpenCV时，有一个重要的前提，那就是我们需要将OpenCV的源代码进行编译。编译是将源代码转换为可执行程序或库的过程。在这里，我们使用CMake作为构建工具来管理编译过程。</p>
<h3 id="131-cmake-gui"><a class="markdownIt-Anchor" href="#131-cmake-gui"></a> 1.3.1、cmake-gui</h3>
<p>找到cmake文件夹下的bin里的cmake-gui 文件，启动。<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311282204857.png" alt="image-20231128220416838" /></p>
<p>Where is the source code: 这里使用opencv目录下的source目录</p>
<p>Where to build the binaries: 这里是编译后的文件的放置目录</p>
<p>配置完成如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311282205939.png" alt="image-20231128220536920" /></p>
<p>点击configure之后一点不能选错，选择如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311282206498.png" alt="image-20231128220629482" /></p>
<p>接下来编译器的选择，分别选择gcc和g++，选择完成如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311282207767.png" alt="image-20231128220726753" /></p>
<p>然后开始配置，等待配置完成：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311282207571.png" alt="image-20231128220750554" /></p>
<p>在执行完后，把关于python的都给取消勾选。勾选BUILD_opencv_world，WITH_OPENGL和BUILD_EXAMPLES，不勾选WITH_IPP、WITH_MSMF和ENABLE_PRECOMPILED_HEADERS（如果有的话），CPU_DISPATCH选空，然后继续General。</p>
<p>配置完成如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311282224674.png" alt="image-20231128222444655" /></p>
<p>到这里，该配置的也都完成了，需要去用编译生成。</p>
<h3 id="132-编译"><a class="markdownIt-Anchor" href="#132-编译"></a> 1.3.2 编译</h3>
<p>D:\opencv\build\x64\mingw<br />
执行命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">minGW32-make -j 32</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311282226079.png" alt="image-20231128222621959" /></p>
<p>问题1：</p>
<p>去掉WITH_DIRECTX,WITH_OPENCL_D3D11_NV选项-代表了windows下directx的使用以及d3d功能，编译会出错，应该是需要windows相关支持</p>
<p>问题2：<br />
去掉 test java python</p>
<p>问题3：<br />
去掉OPENCV_GENERATE_SETUPVARS</p>
<p>至此，编译成功：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311282242616.png" alt="image-20231128224242594" /></p>
<h3 id="133-安装"><a class="markdownIt-Anchor" href="#133-安装"></a> 1.3.3 安装</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">minGW32-make install</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311290724934.png" alt="image-20231129072435906" /></p>
<p>然后我们继续添加两个环境变量：<br />
第一个path是：D:\opencv\build\x64\vc16\bin<br />
第二个path是：D:\opencv\build\x64\mingw\bin</p>
<p>然后随便打开一个shell终端，输入以下命令测试即可。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311290727554.png" alt="image-20231129072736532" /></p>
<h2 id="14-vscode配置"><a class="markdownIt-Anchor" href="#14-vscode配置"></a> 1.4 vscode配置</h2>
<p>最终效果</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311292053680.png" alt="image-20231129205332655" /></p>
<p>launch.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;opencv debuge&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;\\Debugger\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="comment">//上面这个Debugger是我自己定义的，为了方便放置生成的exe文件</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">//这里如果为 false，则说明调试直接运行。（反之则停止）</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//是否调用外部cmd</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\mingw64\\bin\\gdb.exe&quot;</span><span class="punctuation">,</span><span class="comment">//自己进行设置</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为 gdb 启用整齐打印&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;opencv3.5.2&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>c_cpp_properties.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;win&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;D:/opencv/build/x64/mingw/install/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;D:/opencv/build/x64/mingw/install/include/opencv2&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;compilerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:/mingw64/bin/g++.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c11&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cppStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c++17&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;default&#125;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>tasks.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;opencv3.5.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:/mingw64/bin/g++.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;\\Debugger\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="comment">//上面这个Debugger是我自己定义的，为了方便放置生成的exe文件</span></span><br><span class="line">                <span class="string">&quot;D:/opencv/build/x64/mingw/bin/libopencv_world480.dll&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-I&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;D:/opencv/build/x64/mingw/install/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-I&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;D:/opencv/build/x64/mingw/install/include/opencv2&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:/mingw64/bin&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;$gcc&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>测试例程</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">VideoCapture <span class="title">cap</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    Mat img;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cap &gt;&gt; img;</span><br><span class="line">        <span class="keyword">if</span> (img.<span class="built_in">empty</span>())</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">namedWindow</span>(<span class="string">&quot;img&quot;</span>, WINDOW_NORMAL);</span><br><span class="line">        <span class="built_in">imshow</span>(<span class="string">&quot;img&quot;</span>, img);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">27</span> == <span class="built_in">waitKey</span>(<span class="number">20</span>))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="2-vs-opencv的配置"><a class="markdownIt-Anchor" href="#2-vs-opencv的配置"></a> 2 VS opencv的配置</h1>
<h2 id="21-安装vs"><a class="markdownIt-Anchor" href="#21-安装vs"></a> 2.1 安装vs</h2>
<p>​	上面是VS code配置opencv事实上，可以直接通过vs来配置，上面也算是走了弯路了。</p>
<p><a href="https://visualstudio.microsoft.com/zh-hans/">VS 官网</a></p>
<p>​	等待安装完成：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311292102072.png" alt="image-20231129210245054" /></p>
<p>安装程序下载安装验证完毕，将会提示进入这个界面</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311292106854.png" alt="image-20231129210632825" /></p>
<p>选择C++的桌面开发和Visual Studio 扩展开发，然后更改安装位置。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311292108111.png" alt="image-20231129210813082" /></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311292108494.png" alt="image-20231129210828463" /></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311292107884.png" alt="image-20231129210742854" /></p>
<h2 id="22-安装opencv"><a class="markdownIt-Anchor" href="#22-安装opencv"></a> 2.2 安装opencv</h2>
<p>​	在第一小节已经讲解过，就不再讲了</p>
<h2 id="23-配置vscode"><a class="markdownIt-Anchor" href="#23-配置vscode"></a> 2.3 配置VSCODE</h2>
<p>​	其实也就那几步，没啥好写的，我留个<a href="https://blog.csdn.net/weixin_54583016/article/details/121424060?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170126271516800186526751%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=170126271516800186526751&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-121424060-null-null.142%5Ev96%5Epc_search_result_base2&amp;utm_term=vs%20opencv&amp;spm=1018.2226.3001.4187">链接</a>吧</p>
<p>测试完成如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311292150244.png" alt="image-20231129215026178" /></p>
<p>​	既然opencv中已经在ubuntu提供的库中了，那为什么人们更多的还是自己编译opencv再使用呢，就比如下面这个例子：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312042116812.png" alt="image-20231017205544904" /></p>
<p>想用一些库，然而发现ubuntu自带的opencv是没有开启的，这时候就要自己编译opencv了。</p>
<h1 id="3-oepncv源码的编译linux"><a class="markdownIt-Anchor" href="#3-oepncv源码的编译linux"></a> 3 oepncv源码的编译（Linux）</h1>
<h2 id="1拉取opencv源码"><a class="markdownIt-Anchor" href="#1拉取opencv源码"></a> 1.拉取opencv源码</h2>
<p>opencv地址 <strong><a href="https://opencv.org/releases/">https://opencv.org/releases/</a></strong></p>
<p><a href="https://github.com/opencv/opencv">https://github.com/opencv/opencv</a></p>
<p>opencv-contrib 链接<a href="https://github.com/opencv/opencv_contrib">https://github.com/opencv/opencv_contrib</a></p>
<p>OpenCV (Open Source Computer Vision Library) 是一个开源计算机视觉和图像处理库，提供了一系列用于处理图像和视频的函数和工具。OpenCV-contrib（OpenCV contributions）是对OpenCV的扩展和补充，包含了一些额外的模块和功能，以增强OpenCV的功能和应用范围。</p>
<p>OpenCV-contrib模块是由OpenCV社区的开发人员和贡献者创建和维护的，它提供了许多实用的功能、算法和工具，用于计算机视觉、图像处理、目标检测、机器学习等领域的应用。</p>
<p>以下是一些常见的OpenCV-contrib模块及其功能：</p>
<ol>
<li><strong>aruco</strong>：提供了用于检测和跟踪ArUco标记的函数和类。ArUco标记是一种用于增强现实和相机姿态估计的二维条码。</li>
<li><strong>bgsegm</strong>：包含了一些背景分割算法的实现，用于从视频中提取前景对象。这些算法可以用于运动检测、目标跟踪等任务。</li>
<li><strong>bioinspired</strong>：实现了一些生物启发式的图像处理算法，包括视网膜模型、光流估计等。这些算法受到生物视觉系统的启发，用于模拟人眼的感知机制。</li>
<li><strong>dnn</strong>：提供了深度学习的支持，包括加载和运行基于深度学习模型的图像分类、目标检测和图像分割等任务。</li>
<li><strong>face</strong>：包含了人脸检测、人脸识别和人脸特征点检测等相关功能。这些功能可以用于人脸分析、人脸识别和表情识别等应用。</li>
<li><strong>text</strong>：提供了文本检测和识别的功能，可以用于场景文本检测、OCR（光学字符识别）等任务。</li>
<li><strong>xfeatures2d</strong>：扩展了OpenCV的特征检测和描述子模块，提供了一些额外的特征检测算法和描述子算法，如SURF、SIFT等。</li>
</ol>
<p>除了上述模块，OpenCV-contrib还包括其他一些模块和功能，如光学流、结构光、三维重建、图像分割等。这些模块和功能可以通过下载和编译OpenCV-contrib库来使用。</p>
<p>在这里就只是编译opencv源码了，也就不再添加opencv-contrib，目前是用不到的。</p>
<p>克隆opencv源码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/opencv/opencv</span><br></pre></td></tr></table></figure>
<p>github的仓库源码太大了，还是直接从官网下载吧~，这里下载最新的opencv4.8 ，拷贝到ubuntu之上然后解压：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312042116816.png" alt="image-20231017210921130" /></p>
<p>在编译之前还需要先安装一些依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential </span><br><span class="line"></span><br><span class="line">sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line"></span><br><span class="line">sudo apt-get install python-dev-is-python2 python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev  libdc1394-22-dev</span><br><span class="line"></span><br><span class="line">pip3 install numpy</span><br><span class="line"> </span><br><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 100</span><br><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 150</span><br></pre></td></tr></table></figure>
<h2 id="2源码编译pc"><a class="markdownIt-Anchor" href="#2源码编译pc"></a> 2.源码编译（PC）</h2>
<p>然后在opencv源码目录下创建一个build目录进行工程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir build</span><br><span class="line">cd build</span><br></pre></td></tr></table></figure>
<p>构建命令如下所示：</p>
<p>(1) 构建静态库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmake -D  CMAKE_INSTALL_PREFIX=/usr/local \</span><br><span class="line">-D CMAKE_BUILD_TYPE=Release \</span><br><span class="line">-D OPENCV_GENERATE_PKGCONFIG=ON \</span><br><span class="line">-D WITH_QUIRC=ON  \</span><br><span class="line">-D OPENCV_ENABLE_NONFREE=True \</span><br><span class="line">-D OPENCV_GENERATE_PKGCONFIG=YES \</span><br><span class="line">-D WITH_OPENGL=ON \</span><br><span class="line">-D ENABLE_CXX11=1 \</span><br><span class="line">-D WITH_OPENMP=ON \</span><br><span class="line">-D WITH_1394=OFF \</span><br><span class="line">-D INSTALL_C_EXAMPLES=OFF \</span><br><span class="line">-D BUILD_EXAMPLES=OFF \</span><br><span class="line">-D PYTHON_DEFAULT_EXECUTABLE=/usr/bin/python3 \</span><br><span class="line">-D BUILD_opencv_python3=yes \</span><br><span class="line">-D BUILD_opencv_python2=no \</span><br><span class="line">-D PYTHON3_EXECUTABLE=/usr/bin/python3 \</span><br><span class="line">-D PYTHON3_INCLUDE_DIR=/usr/include/python3.8 \</span><br><span class="line">-D PYTHON3_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.8.so \</span><br><span class="line">-D PYTHON3_NUMPY_INCLUDE_DIRS=/usr/local/lib/python3.8/dist-packages/numpy/core/include/ \</span><br><span class="line">-D BUILD_SHARED_LIBS=OFF \</span><br><span class="line">..</span><br></pre></td></tr></table></figure>
<p>(2)构建动态库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmake -D CMAKE_INSTALL_PREFIX=/usr/local \</span><br><span class="line">-D CMAKE_BUILD_TYPE=Release \</span><br><span class="line">-D OPENCV_GENERATE_PKGCONFIG=ON \</span><br><span class="line">-D WITH_QUIRC=ON  \</span><br><span class="line">-D OPENCV_ENABLE_NONFREE=True \</span><br><span class="line">-D OPENCV_GENERATE_PKGCONFIG=YES \</span><br><span class="line">-D WITH_OPENGL=ON \</span><br><span class="line">-D ENABLE_CXX11=1 \</span><br><span class="line">-D WITH_OPENMP=ON \</span><br><span class="line">-D WITH_1394=OFF \</span><br><span class="line">-D INSTALL_C_EXAMPLES=OFF \</span><br><span class="line">-D BUILD_EXAMPLES=OFF \</span><br><span class="line">-D PYTHON_DEFAULT_EXECUTABLE=/usr/bin/python3 \</span><br><span class="line">-D BUILD_opencv_python3=yes \</span><br><span class="line">-D BUILD_opencv_python2=no \</span><br><span class="line">-D PYTHON3_EXECUTABLE=/usr/bin/python3 \</span><br><span class="line">-D PYTHON3_INCLUDE_DIR=/usr/include/python3.8 \</span><br><span class="line">-D PYTHON3_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.8.so \</span><br><span class="line">-D PYTHON3_NUMPY_INCLUDE_DIRS=/usr/local/lib/python3.8/dist-packages/numpy/core/include/ \</span><br><span class="line">..</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-D CMAKE_INSTALL_PREFIX=/usr/local</code>: 指定安装目录为<code>/usr/local</code>，生成的库和可执行文件将安装到该目录下。</li>
<li><code>-D CMAKE_BUILD_TYPE=Release</code>: 指定构建类型为&quot;Release&quot;，这意味着生成的库将进行优化，并且不包含调试信息。</li>
<li><code>-D OPENCV_GENERATE_PKGCONFIG=ON</code>: 生成用于<code>pkg-config</code>的OpenCV配置文件，这样其他程序可以使用<code>pkg-config</code>来查找和链接OpenCV库。</li>
<li><code>-D WITH_QUIRC=ON</code>: 启用QUIRC支持，QUIRC是用于解码二维条码（如QR码）的库。通过这个参数，编译生成的OpenCV库将包含QUIRC功能。</li>
<li><code>-D OPENCV_ENABLE_NONFREE=True</code>: 启用非免费模块，这些模块可能包含受限制的功能，需要购买或获取许可证才能使用。</li>
<li><code>-D OPENCV_GENERATE_PKGCONFIG=YES</code>: 生成用于<code>pkg-config</code>的OpenCV配置文件，这样其他程序可以使用<code>pkg-config</code>来查找和链接OpenCV库。</li>
<li><code>-D WITH_OPENGL=ON</code>: 启用OpenGL支持，用于与OpenGL相关的功能。</li>
<li><code>-D ENABLE_CXX11=1</code>: 启用C++11标准支持。</li>
<li><code>-D WITH_OPENMP=ON</code>: 启用OpenMP多线程支持。</li>
<li><code>-D WITH_1394=OFF</code>: 禁用IEEE 1394（FireWire）支持。</li>
<li><code>-D INSTALL_C_EXAMPLES=OFF</code>: 禁用C语言示例的安装。</li>
<li><code>-D BUILD_EXAMPLES=OFF</code>: 禁用构建示例程序。</li>
<li><code>-D PYTHON_DEFAULT_EXECUTABLE=/usr/bin/python3</code>: 指定默认的Python解释器路径为<code>/usr/bin/python3</code>，这将用于与Python相关的构建和安装操作</li>
<li><code>-D BUILD_opencv_python3=yes</code>: 启用构建OpenCV的Python 3绑定。</li>
<li><code>-D BUILD_opencv_python2=no</code>: 禁用构建OpenCV的Python 2绑定。</li>
<li><code>-D PYTHON3_EXECUTABLE=/usr/bin/python3</code>: 指定Python 3解释器的路径为<code>/usr/bin/python3</code>。</li>
<li><code>-D PYTHON3_INCLUDE_DIR=/usr/include/python3.8</code>: 指定Python 3的头文件目录的路径为<code>/usr/include/python3.8</code>，这里需要提供Python 3的开发包路径，具体版本号可能会有所不同。</li>
<li><code>-D PYTHON3_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.8.so</code>: 指定Python 3的库文件路径为<code>/usr/lib/x86_64-linux-gnu/libpython3.8.so</code>，这里需要提供Python 3的动态链接库文件路径，具体路径和文件名可能会有所不同。</li>
<li><code>-D PYTHON_DEFAULT_EXECUTABLE=/usr/bin/python3</code>: 指定默认的Python解释器路径为<code>/usr/bin/python3</code>，这将用于与Python相关的构建和安装操作。<code>-D PYTHON_DEFAULT_EXECUTABLE=/usr/bin/python3</code>: 指定默认的Python解释器路径为<code>/usr/bin/python3</code>，这将用于与Python相关的构建和安装操作。</li>
</ul>
<p>==注意：在CMake中，使用-D参数来定义变量。每个参数开头的-D表示要定义一个CMake变量，并为其赋予特定的值==</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312042116804.png" alt="image-20231017221820208" /></p>
<p>然后进行编译安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make -j32</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p>我这电脑还是很快的，两分钟吧也就，还是家里的电脑好呀</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312042116859.png" alt="image-20231017212507239" /></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312042116801.png" alt="image-20231017221754400" /></p>
<p>​	最后拷贝和链接python库（==这一步必须做，否则在使用的时候会找不到cv2这个模块==）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp lib/python3/cv2.cpython-38-x86_64-linux-gnu.so /usr/local/lib/python3.8/dist-packages/</span><br><span class="line">sudo ln -s  /usr/local/lib/python3.8/dist-packages/cv2.cpython-38-x86_64-linux-gnu.so  /usr/lib/python3/dist-packages/cv2.so</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312042116808.png" alt="image-20231017222605454" /></p>
<p>然后进行简单的测试：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">cv2.__version__</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312042116273.png" alt="image-20231017222821948" /></p>
<p>然后测试一个opencv的C++程序</p>
<p>首先创建三个目录build  install  src</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p build  install  src</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312042116304.png" alt="image-20231017225840415" /></p>
<p>然后在src目录下创建测试例程demo.cpp,然后向该文件中添加以下程序：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;opencv2/core/core.hpp&quot;</span>                                                                               </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;opencv2/highgui/highgui.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;opencv2/imgproc/imgproc.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">VideoCapture <span class="title">capture</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!capture.<span class="built_in">isOpened</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果无法打开摄像头，则输出提示信息</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;无法打开摄像头&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> time0 = <span class="built_in">static_cast</span>&lt;<span class="type">double</span>&gt;(<span class="built_in">getTickCount</span>()); <span class="comment">// 获取开始时间</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 从摄像头捕获帧</span></span><br><span class="line">        Mat frame;</span><br><span class="line">        capture &gt;&gt; frame;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果捕获到帧，则显示它</span></span><br><span class="line">        <span class="keyword">if</span> (!frame.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cvtColor</span>(frame, frame, COLOR_RGB2BGR);</span><br><span class="line">            <span class="type">double</span> time1 = <span class="built_in">static_cast</span>&lt;<span class="type">double</span>&gt;(<span class="built_in">getTickCount</span>()); <span class="comment">// 获取结束时间</span></span><br><span class="line">            <span class="type">double</span> fps = <span class="built_in">getTickFrequency</span>() / (time1 - time0); <span class="comment">// 计算实时帧率</span></span><br><span class="line">            time0 = time1; <span class="comment">// 更新开始时间</span></span><br><span class="line">            <span class="built_in">putText</span>(frame, <span class="string">&quot;FPS: &quot;</span> + <span class="built_in">to_string</span>(fps), <span class="built_in">Point</span>(<span class="number">10</span>, <span class="number">30</span>), FONT_HERSHEY_SIMPLEX, <span class="number">1</span>, <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>); <span class="comment">// 在图像上显示帧率</span></span><br><span class="line">            <span class="built_in">imshow</span>(<span class="string">&quot;MIPI Camera&quot;</span>, frame);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按下&#x27;q&#x27;键退出循环</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">waitKey</span>(<span class="number">1</span>) == <span class="string">&#x27;q&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放资源并关闭窗口</span></span><br><span class="line">    capture.<span class="built_in">release</span>();</span><br><span class="line">    <span class="built_in">destroyAllWindows</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后创建cmake的配置文件CMakeLists.txt，添加内容如下所示：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.4</span>.<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置项目名称为 opencv_demo</span></span><br><span class="line"><span class="keyword">project</span>(opencv_demo)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 C++ 标准为 11，并且要求编译器支持该标准</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="keyword">ON</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找并引入 OpenCV</span></span><br><span class="line"><span class="keyword">find_package</span>(OpenCV REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加可执行文件 opencv_demo，源文件为 src/demo.cpp</span></span><br><span class="line"><span class="keyword">add_executable</span>(opencv_demo</span><br><span class="line">        src/demo.cpp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接 OpenCV 库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(opencv_demo</span><br><span class="line">  <span class="variable">$&#123;OpenCV_LIBS&#125;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置安装目录为 ./install/操作系统名</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_INSTALL_PREFIX <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/<span class="keyword">install</span>/<span class="variable">$&#123;CMAKE_SYSTEM_NAME&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装可执行文件 opencv_demo 到指定目录</span></span><br><span class="line"><span class="keyword">install</span>(TARGETS opencv_demo DESTINATION ./)</span><br></pre></td></tr></table></figure>
<p>然后进入build目录，执行以下命令，进行配置、编译和安装三个步骤：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd build/</span><br><span class="line">cmake ../</span><br><span class="line">make </span><br><span class="line">make install </span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312042116295.png" alt="image-20231017230355394" /></p>
<p>在install/Linux目录下就生成了测试APP opencv_demo<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312042116215.png" alt="image-20231017230415584" /></p>
<p>然后接一个摄像头进行测试，测试功能正常：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312042116448.png" alt="image-20231017231044428" /></p>
<p>至此，opencv在PC机的编译就完成了。</p>
<h2 id="3交叉编译qemu"><a class="markdownIt-Anchor" href="#3交叉编译qemu"></a> 3.交叉编译（qemu）</h2>
<p>上面编译的其实都是在X86上编译的一些个版本，而这里将编译开发板的版本，本来想的是交叉编译呀，可是后来我一想，我有qemu呀，我还交叉编译啥呀，完全不需要呀，完全忘记了qemu还有这个~。</p>
<p>首先解压一下开发板ubuntu20的源码，解压完成如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312042116328.png" alt="image-20231018220418904" /></p>
<p>​	然后创建一个名为mount.sh的挂载脚本，该脚本的作用是挂载ubuntu并qemu</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">function mnt() &#123;</span><br><span class="line">    echo &quot;MOUNTING&quot;</span><br><span class="line">    sudo mount -t proc /proc $&#123;2&#125;proc</span><br><span class="line">    sudo mount -t sysfs /sys $&#123;2&#125;sys</span><br><span class="line">    sudo mount -o bind /dev $&#123;2&#125;dev</span><br><span class="line">    sudo mount -B /dev/pts $&#123;2&#125;dev/pts</span><br><span class="line"></span><br><span class="line">    sudo chroot $&#123;2&#125; /bin/sh</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function umnt() &#123;</span><br><span class="line">    echo &quot;UNMOUNTING&quot;</span><br><span class="line">    sudo umount $&#123;2&#125;proc</span><br><span class="line">    sudo umount $&#123;2&#125;sys</span><br><span class="line">    sudo umount $&#123;2&#125;dev/pts</span><br><span class="line">    sudo umount $&#123;2&#125;dev</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if [ &quot;$1&quot; == &quot;-m&quot; ] &amp;&amp; [ -n &quot;$2&quot; ] ;</span><br><span class="line">then</span><br><span class="line">    mnt $1 $2</span><br><span class="line">elif [ &quot;$1&quot; == &quot;-u&quot; ] &amp;&amp; [ -n &quot;$2&quot; ];</span><br><span class="line">then</span><br><span class="line">    umnt $1 $2</span><br><span class="line">else</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line">    echo &quot;Either 1&#x27;st, 2&#x27;nd or both parameters were missing&quot;</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line">    echo &quot;1&#x27;st parameter can be one of these: -m(mount) OR -u(umount)&quot;</span><br><span class="line">    echo &quot;2&#x27;nd parameter is the full path of rootfs directory(with trailing &#x27;/&#x27;)&quot;</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line">    echo &quot;For example: ch-mount -m /media/sdcard/&quot;</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line">    echo 1st parameter : $&#123;1&#125;</span><br><span class="line">    echo 2nd parameter : $&#123;2&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312042116667.png" alt="image-20231018220519930" /></p>
<p>然后这样进行挂载：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./mount.sh -m ubuntu/</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312042116729.png" alt="image-20231018220618193" /></p>
<p>我这里首先更新了一下软件源，然后就是安装一些依赖，就跟上面在PC上安装依赖的方法相同。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential </span><br><span class="line"></span><br><span class="line">sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line"></span><br><span class="line">sudo apt-get install python-dev-is-python2 python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev  libdc1394-22-dev</span><br><span class="line"></span><br><span class="line">pip3 install numpy</span><br><span class="line"> </span><br><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 100</span><br><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 150</span><br></pre></td></tr></table></figure>
<p>然后将opencv源码拷贝到qumu的uubntu目录下，如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312042116797.png" alt="image-20231018220935063" /></p>
<p>然后进行opencv源码的解压：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip opencv-4.8.0.zip</span><br></pre></td></tr></table></figure>
<p>然后在opencv源码目录下创建一个build目录进行工程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir build</span><br><span class="line">cd build</span><br></pre></td></tr></table></figure>
<p>构建命令如下所示：</p>
<p>(1) 构建静态库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmake -D  CMAKE_INSTALL_PREFIX=../install \</span><br><span class="line">-D CMAKE_BUILD_TYPE=Release \</span><br><span class="line">-D OPENCV_GENERATE_PKGCONFIG=ON \</span><br><span class="line">-D WITH_QUIRC=ON  \</span><br><span class="line">-D OPENCV_ENABLE_NONFREE=True \</span><br><span class="line">-D OPENCV_GENERATE_PKGCONFIG=YES \</span><br><span class="line">-D WITH_OPENGL=ON \</span><br><span class="line">-D ENABLE_CXX11=1 \</span><br><span class="line">-D WITH_OPENMP=ON \</span><br><span class="line">-D WITH_1394=OFF \</span><br><span class="line">-D INSTALL_C_EXAMPLES=OFF \</span><br><span class="line">-D BUILD_EXAMPLES=OFF \</span><br><span class="line">-D PYTHON_DEFAULT_EXECUTABLE=/usr/bin/python3 \</span><br><span class="line">-D BUILD_opencv_python3=yes \</span><br><span class="line">-D BUILD_opencv_python2=no \</span><br><span class="line">-D PYTHON3_EXECUTABLE=/usr/bin/python3 \</span><br><span class="line">-D PYTHON3_INCLUDE_DIR=/usr/include/python3.8 \</span><br><span class="line">-D PYTHON3_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.8.so \</span><br><span class="line">-D PYTHON3_NUMPY_INCLUDE_DIRS=/usr/local/lib/python3.8/dist-packages/numpy/core/include/ \</span><br><span class="line">-D BUILD_SHARED_LIBS=OFF \</span><br><span class="line">..</span><br></pre></td></tr></table></figure>
<p>由于这里只是想要得到他的库，所以这里就不安装到usr/local目录下了</p>
<p>(2)构建动态库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmake -D CMAKE_INSTALL_PREFIX=../install \</span><br><span class="line">-D CMAKE_BUILD_TYPE=Release \</span><br><span class="line">-D OPENCV_GENERATE_PKGCONFIG=ON \</span><br><span class="line">-D WITH_QUIRC=ON  \</span><br><span class="line">-D OPENCV_ENABLE_NONFREE=True \</span><br><span class="line">-D OPENCV_GENERATE_PKGCONFIG=YES \</span><br><span class="line">-D WITH_OPENGL=ON \</span><br><span class="line">-D ENABLE_CXX11=1 \</span><br><span class="line">-D WITH_OPENMP=ON \</span><br><span class="line">-D WITH_1394=OFF \</span><br><span class="line">-D INSTALL_C_EXAMPLES=OFF \</span><br><span class="line">-D BUILD_EXAMPLES=OFF \</span><br><span class="line">-D PYTHON_DEFAULT_EXECUTABLE=/usr/bin/python3 \</span><br><span class="line">-D BUILD_opencv_python3=yes \</span><br><span class="line">-D BUILD_opencv_python2=no \</span><br><span class="line">-D PYTHON3_EXECUTABLE=/usr/bin/python3 \</span><br><span class="line">-D PYTHON3_INCLUDE_DIR=/usr/include/python3.8 \</span><br><span class="line">-D PYTHON3_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.8.so \</span><br><span class="line">-D PYTHON3_NUMPY_INCLUDE_DIRS=/usr/local/lib/python3.8/dist-packages/numpy/core/include/ \</span><br><span class="line">..</span><br></pre></td></tr></table></figure>
<p>由于这里只是想要得到他的库，所以这里就不安装到usr/local目录下了</p>
<ul>
<li><code>-D CMAKE_INSTALL_PREFIX=/usr/local</code>: 指定安装目录为<code>/usr/local</code>，生成的库和可执行文件将安装到该目录下。</li>
<li><code>-D CMAKE_BUILD_TYPE=Release</code>: 指定构建类型为&quot;Release&quot;，这意味着生成的库将进行优化，并且不包含调试信息。</li>
<li><code>-D OPENCV_GENERATE_PKGCONFIG=ON</code>: 生成用于<code>pkg-config</code>的OpenCV配置文件，这样其他程序可以使用<code>pkg-config</code>来查找和链接OpenCV库。</li>
<li><code>-D WITH_QUIRC=ON</code>: 启用QUIRC支持，QUIRC是用于解码二维条码（如QR码）的库。通过这个参数，编译生成的OpenCV库将包含QUIRC功能。</li>
<li><code>-D OPENCV_ENABLE_NONFREE=True</code>: 启用非免费模块，这些模块可能包含受限制的功能，需要购买或获取许可证才能使用。</li>
<li><code>-D OPENCV_GENERATE_PKGCONFIG=YES</code>: 生成用于<code>pkg-config</code>的OpenCV配置文件，这样其他程序可以使用<code>pkg-config</code>来查找和链接OpenCV库。</li>
<li><code>-D WITH_OPENGL=ON</code>: 启用OpenGL支持，用于与OpenGL相关的功能。</li>
<li><code>-D ENABLE_CXX11=1</code>: 启用C++11标准支持。</li>
<li><code>-D WITH_OPENMP=ON</code>: 启用OpenMP多线程支持。</li>
<li><code>-D WITH_1394=OFF</code>: 禁用IEEE 1394（FireWire）支持。</li>
<li><code>-D INSTALL_C_EXAMPLES=OFF</code>: 禁用C语言示例的安装。</li>
<li><code>-D BUILD_EXAMPLES=OFF</code>: 禁用构建示例程序。</li>
<li><code>-D PYTHON_DEFAULT_EXECUTABLE=/usr/bin/python3</code>: 指定默认的Python解释器路径为<code>/usr/bin/python3</code>，这将用于与Python相关的构建和安装操作</li>
<li><code>-D BUILD_opencv_python3=yes</code>: 启用构建OpenCV的Python 3绑定。</li>
<li><code>-D BUILD_opencv_python2=no</code>: 禁用构建OpenCV的Python 2绑定。</li>
<li><code>-D PYTHON3_EXECUTABLE=/usr/bin/python3</code>: 指定Python 3解释器的路径为<code>/usr/bin/python3</code>。</li>
<li><code>-D PYTHON3_INCLUDE_DIR=/usr/include/python3.8</code>: 指定Python 3的头文件目录的路径为<code>/usr/include/python3.8</code>，这里需要提供Python 3的开发包路径，具体版本号可能会有所不同。</li>
<li><code>-D PYTHON3_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.8.so</code>: 指定Python 3的库文件路径为<code>/usr/lib/x86_64-linux-gnu/libpython3.8.so</code>，这里需要提供Python 3的动态链接库文件路径，具体路径和文件名可能会有所不同。</li>
<li><code>-D PYTHON_DEFAULT_EXECUTABLE=/usr/bin/python3</code>: 指定默认的Python解释器路径为<code>/usr/bin/python3</code>，这将用于与Python相关的构建和安装操作。<code>-D PYTHON_DEFAULT_EXECUTABLE=/usr/bin/python3</code>: 指定默认的Python解释器路径为<code>/usr/bin/python3</code>，这将用于与Python相关的构建和安装操作。</li>
</ul>
<p>==注意：在CMake中，使用-D参数来定义变量。每个参数开头的-D表示要定义一个CMake变量，并为其赋予特定的值==</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312042116906.png" alt="image-20231018221553413" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make -j32</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p>虽然是qemu，但是用的仍旧是PC的CPU，但是这个速度是真的慢呀，但我看CPU都跑满了呀~~竟然搞了三十分钟~</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312042116875.png" alt="image-20231018225750952" /></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312042116200.png" alt="image-20231018225848736" /></p>
<p>​	最后拷贝和链接python库（==这一步必须做，否则在使用的时候会找不到cv2这个模块==）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp lib/python3/cv2.cpython-38-aarch64-linux-gnu.so ../install/lib/python3.8/site-packages/</span><br><span class="line">ln -s  /usr/local/lib/python3.8/dist-packages/cv2.cpython-38-aarch64-linux-gnu.so  /usr/lib/python3/dist-packages/cv2.so</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312042116808.png" alt="image-20231017222605454" /></p>
<p>然后进行简单的测试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line"></span><br><span class="line">import cv2</span><br><span class="line">cv2.__version__</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312042116273.png" alt="image-20231017222821948" /></p>
<p>然后测试一个opencv的C++程序</p>
<p>首先创建三个目录build  install  src</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p build  install  src</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312042116304.png" alt="image-20231017225840415" /></p>
<p>然后在src目录下创建测试例程demo.cpp,然后向该文件中添加以下程序：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;opencv2/core/core.hpp&quot;</span>                                                                               </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;opencv2/highgui/highgui.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;opencv2/imgproc/imgproc.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">VideoCapture <span class="title">capture</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!capture.<span class="built_in">isOpened</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果无法打开摄像头，则输出提示信息</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;无法打开摄像头&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> time0 = <span class="built_in">static_cast</span>&lt;<span class="type">double</span>&gt;(<span class="built_in">getTickCount</span>()); <span class="comment">// 获取开始时间</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 从摄像头捕获帧</span></span><br><span class="line">        Mat frame;</span><br><span class="line">        capture &gt;&gt; frame;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果捕获到帧，则显示它</span></span><br><span class="line">        <span class="keyword">if</span> (!frame.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cvtColor</span>(frame, frame, COLOR_RGB2BGR);</span><br><span class="line">            <span class="type">double</span> time1 = <span class="built_in">static_cast</span>&lt;<span class="type">double</span>&gt;(<span class="built_in">getTickCount</span>()); <span class="comment">// 获取结束时间</span></span><br><span class="line">            <span class="type">double</span> fps = <span class="built_in">getTickFrequency</span>() / (time1 - time0); <span class="comment">// 计算实时帧率</span></span><br><span class="line">            time0 = time1; <span class="comment">// 更新开始时间</span></span><br><span class="line">            <span class="built_in">putText</span>(frame, <span class="string">&quot;FPS: &quot;</span> + <span class="built_in">to_string</span>(fps), <span class="built_in">Point</span>(<span class="number">10</span>, <span class="number">30</span>), FONT_HERSHEY_SIMPLEX, <span class="number">1</span>, <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>); <span class="comment">// 在图像上显示帧率</span></span><br><span class="line">            <span class="built_in">imshow</span>(<span class="string">&quot;MIPI Camera&quot;</span>, frame);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按下&#x27;q&#x27;键退出循环</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">waitKey</span>(<span class="number">1</span>) == <span class="string">&#x27;q&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放资源并关闭窗口</span></span><br><span class="line">    capture.<span class="built_in">release</span>();</span><br><span class="line">    <span class="built_in">destroyAllWindows</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后创建cmake的配置文件CMakeLists.txt，添加内容如下所示：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.4</span>.<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置项目名称为 opencv_demo</span></span><br><span class="line"><span class="keyword">project</span>(opencv_demo)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 C++ 标准为 11，并且要求编译器支持该标准</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="keyword">ON</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找并引入 OpenCV</span></span><br><span class="line"><span class="keyword">find_package</span>(OpenCV REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加可执行文件 opencv_demo，源文件为 src/demo.cpp</span></span><br><span class="line"><span class="keyword">add_executable</span>(opencv_demo</span><br><span class="line">        src/demo.cpp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接 OpenCV 库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(opencv_demo</span><br><span class="line">  <span class="variable">$&#123;OpenCV_LIBS&#125;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置安装目录为 ./install/操作系统名</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_INSTALL_PREFIX <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/<span class="keyword">install</span>/<span class="variable">$&#123;CMAKE_SYSTEM_NAME&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装可执行文件 opencv_demo 到指定目录</span></span><br><span class="line"><span class="keyword">install</span>(TARGETS opencv_demo DESTINATION ./)</span><br></pre></td></tr></table></figure>
<p>然后进入build目录，执行以下命令，进行配置、编译和安装三个步骤（==这里由于我是将opencv的库和头文件等放到了上一级的install目录，所以这里可能要修改一下CmakeLists，但也还好==）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd build/</span><br><span class="line">cmake ../</span><br><span class="line">make </span><br><span class="line">make install </span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312042116295.png" alt="image-20231017230355394" /></p>
<p>至此，opencv qemu编译就完成了。</p>
<h1 id="4vscode-配置python"><a class="markdownIt-Anchor" href="#4vscode-配置python"></a> 4.vscode 配置python</h1>
<h2 id="41下载vscode"><a class="markdownIt-Anchor" href="#41下载vscode"></a> 4.1.下载VScode</h2>
<p><a href="https://code.visualstudio.com/">附上官网地址：Visual Studio Code - Code Editing. Redefined</a></p>
<h2 id="42在vs安装python插件"><a class="markdownIt-Anchor" href="#42在vs安装python插件"></a> 4.2.在<a href="https://so.csdn.net/so/search?q=vs%E5%AE%89%E8%A3%85&amp;spm=1001.2101.3001.7020">vs安装</a>python插件</h2>
<p>这个很简单，我就不再截图了。</p>
<h2 id="43配置python环境"><a class="markdownIt-Anchor" href="#43配置python环境"></a> 4.3.配置python环境</h2>
<p><a href="https://www.python.org/">python官网：Welcome to Python.org</a></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312050734569.png" alt="image-20231205073415526" /></p>
<p>虽然已经到了3.12的版本，但这个随意了，我认为无所谓。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312050739764.png" alt="image-20231205073900729" /></p>
<p>然后打开一个shell终端，发现运行python之后没什么问题，如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312050739725.png" alt="image-20231205073953699" /></p>
<p>然后安装两个包：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install flake8 yapf -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>
<p>flake8会检查编写代码时的不规范的地方和语法错误。</p>
<p>yapf是一个代码格式化工具，可以一键美化代码。<strong>Shift + Alt + F一键美化代码</strong></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312050743881.png" alt="image-20231205074300847" /></p>
<p>一定要在python目录下才可以，难道我需要再添加一下路径吗，很奇怪反正~~。</p>
<h3 id="44选择python解释器"><a class="markdownIt-Anchor" href="#44选择python解释器"></a> 4.4选择python解释器</h3>
<p>打开VScode，点击左上角，文件-&gt;首选项-&gt;设置</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312052129421.png" alt="image-20231205212927391" /></p>
<p>然后打开界面右上角的箭头纸张这就是json设置</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312052131657.png" alt="image-20231205213107628" /></p>
<p>然后将下面代码替换里面的内容，第一行即为python所在路径。记得在路径多加 \</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;python.PYTHONPATH&quot;</span><span class="punctuation">:</span><span class="string">&quot;D:\\Python\\Python312&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;python.linting.flake8Enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;python.formatting.provider&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yapf&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;python.formatting.yapfArgs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;--style=&#123;based_on_style: pep8, indent_width: 4&#125;&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;python.linting.flake8Args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;--max-line-length=248&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;python.linting.pylintEnabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;explorer.confirmDelete&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[python]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.formatOnType&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>之后保存即可，就可以在python文件中使用<strong>Shift + Alt + F</strong>来格式化你的代码啦。</p>
<p>测试可用：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312052135998.png" alt="image-20231205213520975" /></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312052135954.png" alt="image-20231205213527919" /></p>
<h1 id="5-windows-c环境的配置"><a class="markdownIt-Anchor" href="#5-windows-c环境的配置"></a> 5 windows c++环境的配置</h1>
<h2 id="51-visual-studio-code相关信息"><a class="markdownIt-Anchor" href="#51-visual-studio-code相关信息"></a> 5.1 Visual Studio Code相关信息</h2>
<ul>
<li>Visual Studio Code 下载地址：<a href="https://code.visualstudio.com/download">https://code.visualstudio.com/download</a></li>
<li>VS Code建议安装插件列表：
<ul>
<li>中文菜单：
<ul>
<li>MS-CEINTL.vscode-language-pack-zh-hans</li>
</ul>
</li>
<li>SSH远程开发：
<ul>
<li>ms-vscode-remote.remote-ssh</li>
<li>ms-vscode-remote.remote-ssh-edit</li>
<li>ms-vscode.remote-explorer</li>
</ul>
</li>
<li>C++开发
<ul>
<li>ms-vscode.cpptools</li>
</ul>
</li>
<li>代码补全
<ul>
<li>TabNine.tabnine-vscode</li>
<li>GitHub.copilot</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="52下载安装g"><a class="markdownIt-Anchor" href="#52下载安装g"></a> 5.2下载安装g++</h2>
<p>==具体可以看1.2.1小节==</p>
<h2 id="53配置调试功能"><a class="markdownIt-Anchor" href="#53配置调试功能"></a> 5.3配置调试功能</h2>
<p>首先大家在一个你希望的位置建一个文件夹，随意起名就可以（注意不可以用中文！），以后的C/C++代码文件都要放在这个文件夹里才可以正常调试。</p>
<p>然后进入VSCode,点击Open Folder或者点击左上角File -&gt; Open Folder，然后打开刚刚建的文件夹，选择信任父级文件夹点击这个图标新建一个文件夹，命名为.vscode（注意必须是这个名字！）</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312052146527.png" alt="image-20231205214658480" /></p>
<p>创建完成后再点击这个图标新建四个文件，文件名分别是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//c_cpp_properties.json</span><br><span class="line">//launch.json</span><br><span class="line">//settings.json</span><br><span class="line">//tasks.json</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312052148993.png" alt="image-20231205214844970" /></p>
<p>接下来复制粘贴这四个文件的内容</p>
<p>首先是c_cpp_properties.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Win64&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;_DEBUG&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;UNICODE&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;_UNICODE&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;windowsSdkVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.0.18362.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;compilerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:/mingw64/bin/gcc.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c17&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cppStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c++17&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc-x64&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>注意compilerPath这一项要把路径改成刚才g<ins>的安装路径：找到刚刚的安装文件夹-&gt;MinGW-&gt;bin-&gt;g</ins>,exe ,然后复制或者手动把g++.exe的路径敲上去，格式要跟上面代码段一样</p>
<p>然后是launch.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(gdb) Launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\mingw64\\bin\\gdb.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g++&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Enable pretty-printing for gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>注意miDebuggerPath这一项也要把路径改成刚才g++的安装路径：找到刚刚的安装文件夹-&gt;MinGW-&gt;bin-&gt;gdb,exe ,然后复制或者手动把gdb.exe的路径敲上去，格式要跟上面代码段一样</p>
<p>接下来是settings.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;files.associations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;*.py&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;iostream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;*.tcc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;string&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;unordered_map&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ostream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;new&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typeinfo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deque&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;initializer_list&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;iosfwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fstream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sstream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;map&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;stdio.h&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;algorithm&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;atomic&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cctype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;clocale&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cmath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;compare&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;concepts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cstddef&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cstdint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cstdio&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cstdlib&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cstring&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ctime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cwchar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;exception&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ios&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;istream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;iterator&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;limits&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;memory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;random&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;set&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;stack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;stdexcept&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;streambuf&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;system_error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tuple&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type_traits&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;utility&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xfacet&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xiosbase&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xlocale&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xlocinfo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xlocnum&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xmemory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xstddef&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xstring&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xtr1common&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xtree&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xutility&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;stdlib.h&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;string.h&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.suggest.snippetsPreventQuickSuggestions&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aiXcoder.showTrayIcon&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>最后是tasks.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g++&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g++&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;owner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fileLocation&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;relative&quot;</span><span class="punctuation">,</span> <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pattern&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;regexp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;line&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;severity&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span> </span><br></pre></td></tr></table></figure>
<p>保存这四个文件就配置完成了！</p>
<p>再次强调：以后的C/C++代码文件必须放在这个Code文件夹里，或者说有.vscode文件夹的文件夹里，如果调试放在其他位置的代码文件会报错！</p>
<p>测试完成如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312052214005.png" alt="image-20231205221434929" /></p>
<h1 id="6opencv的学习"><a class="markdownIt-Anchor" href="#6opencv的学习"></a> 6.opencv的学习</h1>
<h2 id="61-读取图片并显示"><a class="markdownIt-Anchor" href="#61-读取图片并显示"></a> 6.1 读取图片并显示</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图片的读取和显示</span></span><br><span class="line"><span class="comment">// 导入opencv头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;opencv2/opencv.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 读取图片，mat是matrix的缩写，是一个矩阵，类似与numpy ndarray</span></span><br><span class="line">    cv::Mat image = cv::<span class="built_in">imread</span>(<span class="string">&quot;E:\\05_opencv\\work\\src\\cat.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">// 判断是否读取成功</span></span><br><span class="line">    <span class="keyword">if</span> (image.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;无法读取图片 &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印图片高度和宽度</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;图片高度: &quot;</span> &lt;&lt; image.rows &lt;&lt; <span class="string">&quot; 宽度: &quot;</span> &lt;&lt; image.cols &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印图片data</span></span><br><span class="line">    <span class="comment">// 以Numpy的方式打印</span></span><br><span class="line">    <span class="comment">// std::cout &lt;&lt; &quot;图片data: &quot; &lt;&lt; cv::format(image, cv::Formatter::FMT_NUMPY) &lt;&lt; std::endl;</span></span><br><span class="line">    <span class="comment">// 以python list的方式打印</span></span><br><span class="line">    <span class="comment">// std::cout &lt;&lt; &quot;图片data: &quot; &lt;&lt; cv::format(image, cv::Formatter::FMT_PYTHON) &lt;&lt; std::endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个灰度图</span></span><br><span class="line">    cv::Mat gray;</span><br><span class="line">    <span class="comment">// 转换为灰度图</span></span><br><span class="line">    cv::<span class="built_in">cvtColor</span>(image, gray, cv::COLOR_BGR2GRAY);</span><br><span class="line">    <span class="comment">// 保存</span></span><br><span class="line">    cv::<span class="built_in">imwrite</span>(<span class="string">&quot;gray.jpg&quot;</span>, gray);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示</span></span><br><span class="line">    cv::<span class="built_in">imshow</span>(<span class="string">&quot;原图&quot;</span>, image);</span><br><span class="line">    cv::<span class="built_in">imshow</span>(<span class="string">&quot;灰度图&quot;</span>, gray);</span><br><span class="line">    <span class="comment">// 等待按键</span></span><br><span class="line">    cv::<span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>遇到的第一个问题，第9行的路径问题，在windows目录下必须要使用两个\不知道这是为啥</p>
<p>在Windows目录中，反斜杠 <code>\</code> 是用作路径分隔符。然而，反斜杠在C++中被用作转义字符，用于表示特殊字符序列。因此，如果您想在字符串中使用反斜杠作为路径分隔符，您需要使用双反斜杠 <code>\\</code> 来表示一个单独的反斜杠。</p>
<p>这是因为一个反斜杠 <code>\</code> 表示一个转义字符的开始，例如 <code>\n</code> 表示换行符。为了在字符串中表示一个反斜杠字符本身，您需要使用两个连续的反斜杠 <code>\\</code> 来转义它，告诉编译器它是一个普通的反斜杠字符。</p>
<p>没有自动补全，重新确定一下插件：<br />
1)、C/C++，这个肯定是必须的。</p>
<p>2)、C/C++ Snippets，即 C/C++重用代码块。</p>
<p>3)、C/C++ Advanced Lint,即 C/C++静态检测 。</p>
<p>4)、Code Runner，即代码运行。</p>
<p>5)、Include AutoComplete，即自动头文件包含。</p>
<p>6)、Rainbow Brackets，彩虹花括号，有助于阅读代码。</p>
<p>7)、One Dark Pro，VSCode 的主题。</p>
<p>8)、GBKtoUTF8，将 GBK 转换为 UTF8。</p>
<p>9)、ARM，即支持 ARM 汇编语法高亮显示。</p>
<p>10)、Chinese(Simplified)，即中文环境。</p>
<p>11)、vscode-icons，VSCode 图标插件，主要是资源管理器下各个文件夹的图标。</p>
<p>12)、compareit，比较插件，可以用于比较两个文件的差异。</p>
<p>13)、DeviceTree，设备树语法插件。</p>
<p>14)、CMake Tools Cmake 工具</p>
<p>==还是不能补全，不知道为啥windows的环境会这样，这样下去可不行，问题该解决的当然还是要解决的，遇到问题解决问题==</p>
<p>上面这个案例有以下几个重点我来回顾一下</p>
<ol>
<li>头文件</li>
</ol>
<p>一般情况下使用c++和opencv都会包含上面提到的两个头文件，也就是&lt;opencv2/opencv.hpp&gt;和<iostream>这两个头文件。</p>
<p>&lt;opencv/opencv.hpp&gt;中包含了一些opencv中的常用函数，就比如imread、imwrite、imshow、waitkey、cvtColor等等，而<iostream>中存放的是c++中的一些常用函数，就比如cout输出等等。</p>
<ol start="2">
<li>工作区using namespace</li>
</ol>
<p>如果是我一般写C语言的话，我都会写上工作区，但是老师给的这些示例代码并没有，而是直接使用的就比如cv::imread() std::cout这些，都是在前加上工作去，然后再引用的，这样的好处应该是防止混乱引用，目前我还没遇到这个情况，这个以后再说。</p>
<ol start="3">
<li>
<p>opencv图像的格式Mat</p>
<p>没记错的话这个Mat格式用来存放的是RGB三原色每个像素的值</p>
</li>
<li>
<p>相关函数的使用</p>
</li>
</ol>
<p>cv::imread 两个参数，第一个参数为要读取图片的路径、第二个参数为flag标志位我记得是0 1 -1，这三个最常用，其中0代表灰度值，1代表彩色。</p>
<p>cv::imwrite 这个是用来写入的，其实跟读取的使用方法一样，也是两个参数，其中第一个参数为要保存的图片名称，第二个参数为图片的数据，没有数据你只保存名字那肯定不行呀。</p>
<p>cv::imshow 从名字可以看出来这是图片的展示，有两个参数，第一个参数为展示图片的框的名称，第二个参数为图片数据，同理，你只显示框的名称，但是没有数据拿什么也显示不出来呀，我说的对吗.</p>
<p>cv::cvtColor 这个函数是用来进行颜色通道转换的，就比如从RGB转换为BGR等等，你可以思考一下应该有几个参数，你看要转换肯定要有一个原始数据对吧，然后肯定有一个输出数据对吧，最后必然要有一个如何转换对吧，所以必要填写的是三个参数。</p>
<p>最后是cv::waitKey(0)这个函数的意义是让图片一直显示，直到按下一个按键。</p>
<h2 id="62-读取视频并显示"><a class="markdownIt-Anchor" href="#62-读取视频并显示"></a> 6.2 读取视频并显示</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入opencv 库</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">// 导入gflags 库</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gflags/gflags.h&gt;</span></span></span><br><span class="line"><span class="comment">// 定义命令行参数</span></span><br><span class="line"><span class="built_in">DEFINE_string</span>(video, <span class="string">&quot;./media/dog.mp4&quot;</span>, <span class="string">&quot;Input video&quot;</span>); <span class="comment">// 视频路径</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 解析命令行参数</span></span><br><span class="line">    gflags::<span class="built_in">ParseCommandLineFlags</span>(&amp;argc, &amp;argv, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 读取视频：创建了一个VideoCapture对象，参数为视频路径</span></span><br><span class="line">    <span class="function">cv::VideoCapture <span class="title">capture</span><span class="params">(FLAGS_video)</span></span>;</span><br><span class="line">    <span class="comment">// 判断视频是否读取成功，返回true表示成功</span></span><br><span class="line">    <span class="keyword">if</span> (!capture.<span class="built_in">isOpened</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;无法读取视频: &quot;</span> &lt;&lt; FLAGS_video &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 读取视频帧，使用Mat类型的frame存储返回的帧</span></span><br><span class="line">    cv::Mat frame;</span><br><span class="line">    <span class="comment">// 灰度图</span></span><br><span class="line">    cv::Mat gray_frame;</span><br><span class="line">    <span class="comment">// 循环读取视频帧</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 读取视频帧，使用 &gt;&gt; 运算符或者read()函数，他的参数是返回的帧</span></span><br><span class="line">        capture.<span class="built_in">read</span>(frame);</span><br><span class="line">        <span class="comment">// capture &gt;&gt; frame;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否读取成功</span></span><br><span class="line">        <span class="keyword">if</span> (frame.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;文件读取完毕&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 转成灰度图</span></span><br><span class="line">        cv::<span class="built_in">cvtColor</span>(frame, gray_frame, cv::COLOR_BGR2GRAY);</span><br><span class="line">        <span class="comment">// 显示视频帧</span></span><br><span class="line">        cv::<span class="built_in">imshow</span>(<span class="string">&quot;raw frame&quot;</span>, frame);</span><br><span class="line">        cv::<span class="built_in">imshow</span>(<span class="string">&quot;gray frame&quot;</span>, gray_frame);</span><br><span class="line">        <span class="comment">// 等待按键，延迟30ms，否则视频播放太快</span></span><br><span class="line">        <span class="type">int</span> k = cv::<span class="built_in">waitKey</span>(<span class="number">30</span>);</span><br><span class="line">        <span class="comment">// 按下ESC键退出</span></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">27</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;退出&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重点1：VideoCapture类</p>
<p>​	就跟上一个小节讲解的Mat一样，可以看到VideoCapture的第一个字母也大写了，所以他也是一个opencv中的类型，用来存放捕获到的视频，<code>cv::VideoCapture</code> 类的构造函数可以接受不同的参数来指定要打开的视频源：</p>
<p>1.通过设备索引：您可以传递一个整数值作为设备索引来指定要打开的摄像头设备。例如，<code>0</code> 表示默认的摄像头设备，<code>1</code> 表示第二个摄像头设备，以此类推。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cv::VideoCapture cap(0); // 打开默认的摄像头设备</span><br></pre></td></tr></table></figure>
<p>2.通过视频文件路径：您可以传递一个字符串参数，表示要打开的视频文件的路径。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cv::VideoCapture cap(&quot;video.mp4&quot;); // 打开名为 &quot;video.mp4&quot; 的视频文件</span><br></pre></td></tr></table></figure>
<p>一旦创建了 <code>cv::VideoCapture</code> 对象，您可以使用 <code>read()</code> 方法来连续读取视频帧。<code>read()</code> 方法将返回一个布尔值，指示是否成功读取了一帧图像。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::Mat frame;</span><br><span class="line"><span class="keyword">while</span> (cap.<span class="built_in">read</span>(frame)) &#123;</span><br><span class="line">    <span class="comment">// 处理当前帧</span></span><br><span class="line">    cv::<span class="built_in">imshow</span>(<span class="string">&quot;Video&quot;</span>, frame);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待按键退出</span></span><br><span class="line">    <span class="keyword">if</span> (cv::<span class="built_in">waitKey</span>(<span class="number">1</span>) == <span class="string">&#x27;q&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
  </entry>
  <entry>
    <title>ubuntu和debian源</title>
    <url>/2023/12/03/20%20ubuntu%E5%92%8Cdebian%E6%BA%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>ubuntu20</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb https://repo.huaweicloud.com/ubuntu-ports/ focal main restricted universe multiverse</span><br><span class="line">deb-src https://repo.huaweicloud.com/ubuntu-ports/ focal main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https://repo.huaweicloud.com/ubuntu-ports/ focal-security main restricted universe multiverse</span><br><span class="line">deb-src https://repo.huaweicloud.com/ubuntu-ports/ focal-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https://repo.huaweicloud.com/ubuntu-ports/ focal-updates main restricted universe multiverse</span><br><span class="line">deb-src https://repo.huaweicloud.com/ubuntu-ports/ focal-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https://repo.huaweicloud.com/ubuntu-ports/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src https://repo.huaweicloud.com/ubuntu-ports/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Not recommended</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb https://repo.huaweicloud.com/ubuntu-ports/ focal-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://repo.huaweicloud.com/ubuntu-ports/ focal-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure>
<p>ubuntu22</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb https://repo.huaweicloud.com/ubuntu-ports/ jammy main restricted universe multiverse</span><br><span class="line">deb-src https://repo.huaweicloud.com/ubuntu-ports/ jammy main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https://repo.huaweicloud.com/ubuntu-ports/ jammy-updates main restricted universe multiverse</span><br><span class="line">deb-src https://repo.huaweicloud.com/ubuntu-ports/ jammy-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https://repo.huaweicloud.com/ubuntu-ports/ jammy-backports main restricted universe multiverse</span><br><span class="line">deb-src https://repo.huaweicloud.com/ubuntu-ports/ jammy-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https://repo.huaweicloud.com/ubuntu-ports/ jammy-security main restricted universe multiverse</span><br><span class="line">deb-src https://repo.huaweicloud.com/ubuntu-ports/ jammy-security main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> Not recommended</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb http://ports.ubuntu.com/ubuntu-ports/ jammy-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src http://ports.ubuntu.com/ubuntu-ports/ jammy-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure>
<p>debian10</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.huaweicloud.com/repository/debian/ buster main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free</span><br><span class="line">deb https://mirrors.huaweicloud.com/repository/debian/ buster-updates main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free</span><br><span class="line">deb https://mirrors.huaweicloud.com/repository/debian/ buster-backports main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free</span><br><span class="line">deb https://mirrors.huaweicloud.com/repository/debian-security buster/updates main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free</span><br></pre></td></tr></table></figure>
<p>debian11</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.huaweicloud.com/debian/ bullseye main non-free contrib</span><br><span class="line">deb-src https://mirrors.huaweicloud.com/debian/ bullseye main non-free contrib</span><br><span class="line">deb https://mirrors.huaweicloud.com/debian-security/ bullseye-security main</span><br><span class="line">deb-src https://mirrors.huaweicloud.com/debian-security/ bullseye-security main</span><br><span class="line">deb https://mirrors.huaweicloud.com/debian/ bullseye-updates main non-free contrib</span><br><span class="line">deb-src https://mirrors.huaweicloud.com/debian/ bullseye-updates main non-free contrib</span><br><span class="line">deb https://mirrors.huaweicloud.com/debian/ bullseye-backports main non-free contrib</span><br><span class="line">deb-src https://mirrors.huaweicloud.com/debian/ bullseye-backports main non-free contrib</span><br></pre></td></tr></table></figure>
<p>debian12</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.huaweicloud.com/debian/ bookworm main non-free non-free-firmware contrib </span><br><span class="line">deb-src https://mirrors.huaweicloud.com/debian/ bookworm main non-free non-free-firmware contrib</span><br><span class="line">deb https://mirrors.huaweicloud.com/debian-security/ bookworm-security main </span><br><span class="line">deb-src https://mirrors.huaweicloud.com/debian-security/ bookworm-security main </span><br><span class="line">deb https://mirrors.huaweicloud.com/debian/ bookworm-updates main non-free non-free-firmware contrib </span><br><span class="line">deb-src https://mirrors.huaweicloud.com/debian/ bookworm-updates main non-free non-free-firmware contrib </span><br><span class="line">deb https://mirrors.huaweicloud.com/debian/ bookworm-backports main non-free non-free-firmware contrib </span><br><span class="line">deb-src https://mirrors.huaweicloud.com/debian/ bookworm-backports main non-free non-free-firmware contrib </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>瑞芯微</category>
      </categories>
  </entry>
  <entry>
    <title>香橙派文件系统构建脚本分析</title>
    <url>/2023/12/02/16-%E9%A6%99%E6%A9%99%E6%B4%BE%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%9E%84%E5%BB%BA%E8%84%9A%E6%9C%AC%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>怎么说呢，好容易能静下心来来分析一下，倒感觉也是不错的，这三个月来也算是又学习到了很多东西，希望重新来一遍能让我有所收获。</p>
<h1 id="1buildsh"><a class="markdownIt-Anchor" href="#1buildsh"></a> <a href="http://1.build.sh">1.build.sh</a> 分析</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根目录地址</span></span><br><span class="line">SRC=&quot;$(dirname &quot;$(realpath &quot;$&#123;BASH_SOURCE[0]&#125;&quot;)&quot;)&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">check <span class="keyword">for</span> whitespace <span class="keyword">in</span> <span class="variable">$&#123;SRC&#125;</span> and <span class="built_in">exit</span> <span class="keyword">for</span> safety reasons</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查变量 <span class="variable">$&#123;SRC&#125;</span> 是否包含空白字符</span></span><br><span class="line">grep -q &quot;[[:space:]]&quot; &lt;&lt;&lt;&quot;$&#123;SRC&#125;&quot; &amp;&amp; &#123; echo &quot;\&quot;$&#123;SRC&#125;\&quot; contains whitespace. Not supported. Aborting.&quot; &gt;&amp;2 ; exit 1 ; &#125;</span><br><span class="line"></span><br><span class="line">cd &quot;$&#123;SRC&#125;&quot; || exit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这个变量没有，所以不会进入</span></span><br><span class="line">if [[ &quot;$&#123;ORANGEPI_ENABLE_CALL_TRACING&#125;&quot; == &quot;yes&quot; ]]; then</span><br><span class="line">	set -T # inherit return/debug traps</span><br><span class="line">	mkdir -p &quot;$&#123;SRC&#125;&quot;/output/debug</span><br><span class="line">	echo -n &quot;&quot; &gt; &quot;$&#123;SRC&#125;&quot;/output/debug/calls.txt</span><br><span class="line">	trap &#x27;echo &quot;$&#123;BASH_LINENO[@]&#125;|$&#123;BASH_SOURCE[@]&#125;|$&#123;FUNCNAME[@]&#125;&quot; &gt;&gt; $&#123;SRC&#125;/output/debug/calls.txt ;&#x27; RETURN</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这个general.sh 脚本是有的，所以会执行，下一个小节就是他的讲解，关于这个文件只是定义了一些函数，实际上没有要执行的</span></span><br><span class="line">if [[ -f &quot;$&#123;SRC&#125;&quot;/scripts/general.sh ]]; then</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">shellcheck <span class="built_in">source</span>=scripts/general.sh</span></span><br><span class="line">	source &quot;$&#123;SRC&#125;&quot;/scripts/general.sh</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line"></span><br><span class="line">	echo &quot;Error: missing build directory structure&quot;</span><br><span class="line">	echo &quot;Please clone the full repository by https://github.com/orangepi-xunlong/orangepi-build&quot;</span><br><span class="line">	exit 255</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> Add the variables needed at the beginning of the path</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查传入的参数并设置相应的变量，我这里并没有传入变量，而是直接的build.sh</span></span><br><span class="line">check_args ()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">for p in &quot;$@&quot;; do</span><br><span class="line"></span><br><span class="line">	case &quot;$&#123;p%=*&#125;&quot; in</span><br><span class="line">		LIB_TAG)</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">Take a variable <span class="keyword">if</span> the branch exists locally</span></span><br><span class="line">			if [ &quot;$&#123;p#*=&#125;&quot; == &quot;$(git branch | \</span><br><span class="line">				gawk -v b=&quot;$&#123;p#*=&#125;&quot; &#x27;&#123;if ( $NF == b ) &#123;print $NF&#125;&#125;&#x27;)&quot; ]; then</span><br><span class="line">				echo -e &quot;[\e[0;35m warn \x1B[0m] Setting $p&quot;</span><br><span class="line">				eval &quot;$p&quot;</span><br><span class="line">			else</span><br><span class="line">				echo -e &quot;[\e[0;35m warn \x1B[0m] Skip $p setting as LIB_TAG=\&quot;\&quot;&quot;</span><br><span class="line">				eval LIB_TAG=&quot;&quot;</span><br><span class="line">			fi</span><br><span class="line">			;;</span><br><span class="line">	esac</span><br><span class="line"></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所以这里并没有值</span></span><br><span class="line">check_args &quot;$@&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新源代码，不用理解</span></span><br><span class="line">update_src() &#123;</span><br><span class="line"></span><br><span class="line">	cd &quot;$&#123;SRC&#125;&quot; || exit</span><br><span class="line">	if [[ ! -f &quot;$&#123;SRC&#125;&quot;/.ignore_changes ]]; then</span><br><span class="line">		echo -e &quot;[\e[0;32m o.k. \x1B[0m] This script will try to update&quot;</span><br><span class="line"></span><br><span class="line">		CHANGED_FILES=$(git diff --name-only)</span><br><span class="line">		if [[ -n &quot;$&#123;CHANGED_FILES&#125;&quot; ]]; then</span><br><span class="line">			echo -e &quot;[\e[0;35m warn \x1B[0m] Can&#x27;t update since you made changes to: \e[0;32m\n$&#123;CHANGED_FILES&#125;\x1B[0m&quot;</span><br><span class="line">			while true; do</span><br><span class="line">				echo -e &quot;Press \e[0;33m&lt;Ctrl-C&gt;\x1B[0m or \e[0;33mexit\x1B[0m to abort compilation&quot;\</span><br><span class="line">				&quot;, \e[0;33m&lt;Enter&gt;\x1B[0m to ignore and continue, \e[0;33mdiff\x1B[0m to display changes&quot;</span><br><span class="line">				read -r</span><br><span class="line">				if [[ &quot;$&#123;REPLY&#125;&quot; == &quot;diff&quot; ]]; then</span><br><span class="line">					git diff</span><br><span class="line">				elif [[ &quot;$&#123;REPLY&#125;&quot; == &quot;exit&quot; ]]; then</span><br><span class="line">					exit 1</span><br><span class="line">				elif [[ &quot;$&#123;REPLY&#125;&quot; == &quot;&quot; ]]; then</span><br><span class="line">					break</span><br><span class="line">				else</span><br><span class="line">					echo &quot;Unknown command!&quot;</span><br><span class="line">				fi</span><br><span class="line">			done</span><br><span class="line">		elif [[ $(git branch | grep &quot;*&quot; | awk &#x27;&#123;print $2&#125;&#x27;) != &quot;$&#123;LIB_TAG&#125;&quot; &amp;&amp; -n &quot;$&#123;LIB_TAG&#125;&quot; ]]; then</span><br><span class="line">			git checkout &quot;$&#123;LIB_TAG:-master&#125;&quot;</span><br><span class="line">			git pull</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个临时文件,重定向</span></span><br><span class="line">TMPFILE=$(mktemp)</span><br><span class="line">chmod 644 &quot;$&#123;TMPFILE&#125;&quot;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	echo SRC=&quot;$SRC&quot;</span><br><span class="line">	echo LIB_TAG=&quot;$LIB_TAG&quot;</span><br><span class="line">	declare -f update_src</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;update_src&quot;</span></span></span><br><span class="line"></span><br><span class="line">&#125;  &gt; &quot;$TMPFILE&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">do</span> not update/checkout git with root privileges to messup files onwership.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">due to <span class="keyword">in</span> docker/VM, we can<span class="string">&#x27;t su to a normal user, so do not update/checkout git.</span></span></span><br><span class="line">if [[ $(systemd-detect-virt) == &#x27;none&#x27; ]]; then</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$&#123;EUID&#125;&quot; == &quot;0&quot; ]]; then</span><br><span class="line">		su &quot;$(stat --format=%U &quot;$&#123;SRC&#125;&quot;/.git)&quot; -c &quot;bash $&#123;TMPFILE&#125;&quot;</span><br><span class="line">	else</span><br><span class="line">		bash &quot;$&#123;TMPFILE&#125;&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rm &quot;$&#123;TMPFILE&#125;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [[ &quot;$&#123;EUID&#125;&quot; == &quot;0&quot; ]] || [[ &quot;$&#123;1&#125;&quot; == &quot;vagrant&quot; ]]; then</span><br><span class="line">	:</span><br><span class="line">elif [[ &quot;$&#123;1&#125;&quot; == docker || &quot;$&#123;1&#125;&quot; == dockerpurge || &quot;$&#123;1&#125;&quot; == docker-shell ]] &amp;&amp; grep -q &quot;$(whoami)&quot; &lt;(getent group docker); then</span><br><span class="line">	:</span><br><span class="line">else</span><br><span class="line">	display_alert &quot;This script requires root privileges, trying to use sudo&quot; &quot;&quot; &quot;wrn&quot;</span><br><span class="line">	sudo &quot;$&#123;SRC&#125;/build.sh&quot; &quot;$@&quot;</span><br><span class="line">	exit $?</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;$OFFLINE_WORK&quot; == &quot;yes&quot; ]; then</span><br><span class="line"></span><br><span class="line">	echo -e &quot;\n&quot;</span><br><span class="line">	display_alert &quot;* &quot; &quot;You are working offline.&quot;</span><br><span class="line">	display_alert &quot;* &quot; &quot;Sources, time and host will not be checked&quot;</span><br><span class="line">	echo -e &quot;\n&quot;</span><br><span class="line">	sleep 3s</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">check and install the basic utilities here</span></span></span><br><span class="line">	prepare_host_basic</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Check for Vagrant</span></span></span><br><span class="line">if [[ &quot;$&#123;1&#125;&quot; == vagrant &amp;&amp; -z &quot;$(command -v vagrant)&quot; ]]; then</span><br><span class="line">	display_alert &quot;Vagrant not installed.&quot; &quot;Installing&quot;</span><br><span class="line">	sudo apt-get update</span><br><span class="line">	sudo apt-get install -y vagrant virtualbox</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Purge Orange Pi Docker images</span></span></span><br><span class="line">if [[ &quot;$&#123;1&#125;&quot; == dockerpurge &amp;&amp; -f /etc/debian_version ]]; then</span><br><span class="line">	display_alert &quot;Purging Orange Pi Docker containers&quot; &quot;&quot; &quot;wrn&quot;</span><br><span class="line">	docker container ls -a | grep orangepi | awk &#x27;&#123;print $1&#125;&#x27; | xargs docker container rm &amp;&gt; /dev/null</span><br><span class="line">	docker image ls | grep orangepi | awk &#x27;&#123;print $3&#125;&#x27; | xargs docker image rm &amp;&gt; /dev/null</span><br><span class="line">	shift</span><br><span class="line">	set -- &quot;docker&quot; &quot;$@&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Docker shell</span></span></span><br><span class="line">if [[ &quot;$&#123;1&#125;&quot; == docker-shell ]]; then</span><br><span class="line">	shift</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">shellcheck disable=SC2034</span></span></span><br><span class="line">	SHELL_ONLY=yes</span><br><span class="line">	set -- &quot;docker&quot; &quot;$@&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Install Docker if not there but wanted. We cover only Debian based distro install. On other distros, manual Docker install is needed</span></span></span><br><span class="line">if [[ &quot;$&#123;1&#125;&quot; == docker &amp;&amp; -f /etc/debian_version &amp;&amp; -z &quot;$(command -v docker)&quot; ]]; then</span><br><span class="line"></span><br><span class="line">	DOCKER_BINARY=&quot;docker-ce&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">add exception for Ubuntu Focal until Docker provides dedicated binary</span></span></span><br><span class="line">	codename=$(cat /etc/os-release | grep VERSION_CODENAME | cut -d&quot;=&quot; -f2)</span><br><span class="line">	codeid=$(cat /etc/os-release | grep ^NAME | cut -d&quot;=&quot; -f2 | awk &#x27;&#123;print tolower($0)&#125;&#x27; | tr -d &#x27;&quot;&#x27; | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">	[[ &quot;$&#123;codename&#125;&quot; == &quot;debbie&quot; ]] &amp;&amp; codename=&quot;buster&quot; &amp;&amp; codeid=&quot;debian&quot;</span><br><span class="line">	[[ &quot;$&#123;codename&#125;&quot; == &quot;ulyana&quot; || &quot;$&#123;codename&#125;&quot; == &quot;jammy&quot; ]] &amp;&amp; codename=&quot;focal&quot; &amp;&amp; codeid=&quot;ubuntu&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">different binaries for some. TBD. Need to check for all others</span></span></span><br><span class="line">	[[ &quot;$&#123;codename&#125;&quot; =~ focal|hirsute ]] &amp;&amp; DOCKER_BINARY=&quot;docker containerd docker.io&quot;</span><br><span class="line"></span><br><span class="line">	display_alert &quot;Docker not installed.&quot; &quot;Installing&quot; &quot;Info&quot;</span><br><span class="line">	sudo bash -c &quot;echo \&quot;deb [arch=$(dpkg --print-architecture)] https://download.docker.com/linux/$&#123;codeid&#125; $&#123;codename&#125; stable\&quot; &gt; /etc/apt/sources.list.d/docker.list&quot;</span><br><span class="line"></span><br><span class="line">	sudo bash -c &quot;curl -fsSL \&quot;https://download.docker.com/linux/$&#123;codeid&#125;/gpg\&quot; | apt-key add -qq - &gt; /dev/null 2&gt;&amp;1 &quot;</span><br><span class="line">	export DEBIAN_FRONTEND=noninteractive</span><br><span class="line">	sudo apt-get update</span><br><span class="line">	sudo apt-get install -y -qq --no-install-recommends $&#123;DOCKER_BINARY&#125;</span><br><span class="line">	display_alert &quot;Add yourself to docker group to avoid root privileges&quot; &quot;&quot; &quot;wrn&quot;</span><br><span class="line">	&quot;$&#123;SRC&#125;/build.sh&quot; &quot;$@&quot;</span><br><span class="line">	exit $?</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">上面都是关于docker的，可以先不用理解</span></span></span><br><span class="line"></span><br><span class="line">EXTER=&quot;$&#123;SRC&#125;/external&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Create userpatches directory if not exists</span></span></span><br><span class="line">mkdir -p &quot;$&#123;SRC&#125;&quot;/userpatches</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Create example configs if none found in userpatches</span></span></span><br><span class="line">if ! ls &quot;$&#123;SRC&#125;&quot;/userpatches/&#123;config-example.conf,config-docker.conf,config-vagrant.conf&#125; 1&gt; /dev/null 2&gt;&amp;1; then</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Migrate old configs</span></span></span><br><span class="line">	if ls &quot;$&#123;SRC&#125;&quot;/*.conf 1&gt; /dev/null 2&gt;&amp;1; then</span><br><span class="line">		display_alert &quot;Migrate config files to userpatches directory&quot; &quot;all *.conf&quot; &quot;info&quot;</span><br><span class="line">                cp &quot;$&#123;SRC&#125;&quot;/*.conf &quot;$&#123;SRC&#125;&quot;/userpatches  || exit 1</span><br><span class="line">		rm &quot;$&#123;SRC&#125;&quot;/*.conf</span><br><span class="line">		[[ ! -L &quot;$&#123;SRC&#125;&quot;/userpatches/config-example.conf ]] &amp;&amp; ln -fs config-example.conf &quot;$&#123;SRC&#125;&quot;/userpatches/config-default.conf || exit 1</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	display_alert &quot;Create example config file using template&quot; &quot;config-default.conf&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Create example config</span></span></span><br><span class="line">	if [[ ! -f &quot;$&#123;SRC&#125;&quot;/userpatches/config-example.conf ]]; then</span><br><span class="line">		cp &quot;$&#123;EXTER&#125;&quot;/config/templates/config-example.conf &quot;$&#123;SRC&#125;&quot;/userpatches/config-example.conf || exit 1</span><br><span class="line">                ln -fs config-example.conf &quot;$&#123;SRC&#125;&quot;/userpatches/config-default.conf || exit 1</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Create Docker config</span></span></span><br><span class="line">	if [[ ! -f &quot;$&#123;SRC&#125;&quot;/userpatches/config-docker.conf ]]; then</span><br><span class="line">		cp &quot;$&#123;EXTER&#125;&quot;/config/templates/config-docker.conf &quot;$&#123;SRC&#125;&quot;/userpatches/config-docker.conf || exit 1</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Create Docker file</span></span></span><br><span class="line">        if [[ ! -f &quot;$&#123;SRC&#125;&quot;/userpatches/Dockerfile ]]; then</span><br><span class="line">                cp &quot;$&#123;EXTER&#125;&quot;/config/templates/Dockerfile &quot;$&#123;SRC&#125;&quot;/userpatches/Dockerfile || exit 1</span><br><span class="line">        fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Create Vagrant config</span></span></span><br><span class="line">	if [[ ! -f &quot;$&#123;SRC&#125;&quot;/userpatches/config-vagrant.conf ]]; then</span><br><span class="line">	        cp &quot;$&#123;EXTER&#125;&quot;/config/templates/config-vagrant.conf &quot;$&#123;SRC&#125;&quot;/userpatches/config-vagrant.conf || exit 1</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Create Vagrant file</span></span></span><br><span class="line">	if [[ ! -f &quot;$&#123;SRC&#125;&quot;/userpatches/Vagrantfile ]]; then</span><br><span class="line">		cp &quot;$&#123;EXTER&#125;&quot;/config/templates/Vagrantfile &quot;$&#123;SRC&#125;&quot;/userpatches/Vagrantfile || exit 1</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ -z &quot;$&#123;CONFIG&#125;&quot; &amp;&amp; -n &quot;$1&quot; &amp;&amp; -f &quot;$&#123;SRC&#125;/userpatches/config-$1.conf&quot; ]]; then</span><br><span class="line">	CONFIG=&quot;userpatches/config-$1.conf&quot;</span><br><span class="line">	shift</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">usind default if custom not found</span></span></span><br><span class="line">if [[ -z &quot;$&#123;CONFIG&#125;&quot; &amp;&amp; -f &quot;$&#123;SRC&#125;/userpatches/config-default.conf&quot; ]]; then</span><br><span class="line">	CONFIG=&quot;userpatches/config-default.conf&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">source build configuration file</span></span></span><br><span class="line">CONFIG_FILE=&quot;$(realpath &quot;$&#123;CONFIG&#125;&quot;)&quot;</span><br><span class="line"></span><br><span class="line">if [[ ! -f &quot;$&#123;CONFIG_FILE&#125;&quot; ]]; then</span><br><span class="line">	display_alert &quot;Config file does not exist&quot; &quot;$&#123;CONFIG&#125;&quot; &quot;error&quot;</span><br><span class="line">	exit 254</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">CONFIG_PATH=$(dirname &quot;$&#123;CONFIG_FILE&#125;&quot;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Source the extensions manager library at this point, before sourcing the config.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">This allows early calls to enable_extension(), but initialization proper is done later.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">shellcheck source=scripts/extensions.sh</span></span></span><br><span class="line">source &quot;$&#123;SRC&#125;&quot;/scripts/extensions.sh</span><br><span class="line"></span><br><span class="line">display_alert &quot;Using config file&quot; &quot;$&#123;CONFIG_FILE&#125;&quot; &quot;info&quot;</span><br><span class="line">pushd &quot;$&#123;CONFIG_PATH&#125;&quot; &gt; /dev/null || exit</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">shellcheck source=/dev/null</span></span></span><br><span class="line">source &quot;$&#123;CONFIG_FILE&#125;&quot;</span><br><span class="line">popd &gt; /dev/null || exit</span><br><span class="line"></span><br><span class="line">[[ -z &quot;$&#123;USERPATCHES_PATH&#125;&quot; ]] &amp;&amp; USERPATCHES_PATH=&quot;$&#123;CONFIG_PATH&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Script parameters handling</span></span></span><br><span class="line">while [[ &quot;$&#123;1&#125;&quot; == *=* ]]; do</span><br><span class="line"></span><br><span class="line">	parameter=$&#123;1%%=*&#125;</span><br><span class="line">	value=$&#123;1##*=&#125;</span><br><span class="line">	shift</span><br><span class="line">	display_alert &quot;Command line: setting $parameter to&quot; &quot;$&#123;value:-(empty)&#125;&quot; &quot;info&quot;</span><br><span class="line">	eval &quot;$parameter=\&quot;$value\&quot;&quot;</span><br><span class="line"></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [[ &quot;$&#123;BUILD_ALL&#125;&quot; == &quot;yes&quot; || &quot;$&#123;BUILD_ALL&#125;&quot; == &quot;demo&quot; ]]; then</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">shellcheck source=scripts/build-all-ng.sh</span></span></span><br><span class="line">	source &quot;$&#123;SRC&#125;&quot;/scripts/build-all-ng.sh</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">shellcheck source=scripts/main.sh</span></span></span><br><span class="line">	source &quot;$&#123;SRC&#125;&quot;/scripts/main.sh</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a href="http://xn--general-fw3kvyv3vf83ai5a3u417d19nugd490g8dfqr6p.xn--shmain-j76jn44j500c.sh">其实上面对我有用的也就是general.sh脚本和main.sh</a>，general脚本是一些用于的函数，而main,sh是最重要的，在第三个章节会进行讲解。</p>
<h1 id="2generalsh分析"><a class="markdownIt-Anchor" href="#2generalsh分析"></a> 2.general.sh分析</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Functions:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cleaning 清理操作</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">exit_with_error 输出错误并退出</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">get_package_list_hash 获取软件包列表的哈希值。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">create_sources_list 创建源列表</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">clean_up_git 清理 Git 相关操作</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">waiter_local_git 等待本地 Git 操作完成</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">fetch_from_repo 。从仓库获取文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">improved_git改进的 Git 操作。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">display_alert 显示警告。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">fingerprint_image 生成图像指纹</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">distro_menu 显示发行版菜单</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">addtorepo 将软件包添加到仓库</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">repo-remove-old-packages 从仓库中移除旧的软件包</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">wait_for_package_manager 等待软件包管理器完成操作</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">install_pkg_deb 安装 deb 软件包</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prepare_host_basic 准备基本主机环境</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prepare_host 准备主机环境</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">webseed 使用 Webseed 下载文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">download_and_verify 下载并验证文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">show_developer_warning 显示开发者警告信息</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">show_checklist_variables 显示清单变量</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Copyright (c) 2015 Igor Pecovnik, igor.pecovnik@gma**.com</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This file is licensed under the terms of the GNU General Public</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">License version 2. This program is licensed <span class="string">&quot;as is&quot;</span> without any</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">warranty of any kind, whether express or implied.</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Functions:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cleaning 清理操作</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">exit_with_error 输出错误并退出</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">get_package_list_hash 获取软件包列表的哈希值。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">create_sources_list 创建源列表</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">clean_up_git 清理 Git 相关操作</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">waiter_local_git 等待本地 Git 操作完成</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">fetch_from_repo 。从仓库获取文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">improved_git改进的 Git 操作。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">display_alert 显示警告。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">fingerprint_image 生成图像指纹</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">distro_menu 显示发行版菜单</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">addtorepo 将软件包添加到仓库</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">repo-remove-old-packages 从仓库中移除旧的软件包</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">wait_for_package_manager 等待软件包管理器完成操作</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">install_pkg_deb 安装 deb 软件包</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prepare_host_basic 准备基本主机环境</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prepare_host 准备主机环境</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">webseed 使用 Webseed 下载文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">download_and_verify 下载并验证文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">show_developer_warning 显示开发者警告信息</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">show_checklist_variables 显示清单变量</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cleaning &lt;target&gt;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># target: what to clean</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;make&quot;</span> - <span class="string">&quot;make clean&quot;</span> <span class="keyword">for</span> selected kernel and u-boot</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;debs&quot;</span> - delete output/debs <span class="keyword">for</span> board&amp;branch</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;ubootdebs&quot;</span> - delete output/debs <span class="keyword">for</span> uboot&amp;board&amp;branch</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;alldebs&quot;</span> - delete output/debs</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;cache&quot;</span> - delete output/cache</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;oldcache&quot;</span> - remove old output/cache</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;images&quot;</span> - delete output/images</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;sources&quot;</span> - delete output/sources</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"></span></span><br><span class="line">cleaning()</span><br><span class="line">&#123;</span><br><span class="line">	case $1 in</span><br><span class="line">		debs) # delete $&#123;DEB_STORAGE&#125; for current branch and family</span><br><span class="line">		if [[ -d &quot;$&#123;DEB_STORAGE&#125;&quot; ]]; then</span><br><span class="line">			display_alert &quot;Cleaning $&#123;DEB_STORAGE&#125; for&quot; &quot;$BOARD $BRANCH&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">easier than dealing with variable expansion and escaping dashes <span class="keyword">in</span> file names</span></span><br><span class="line">			find &quot;$&#123;DEB_STORAGE&#125;&quot; -name &quot;$&#123;CHOSEN_UBOOT&#125;_*.deb&quot; -delete</span><br><span class="line">			find &quot;$&#123;DEB_STORAGE&#125;&quot; \( -name &quot;$&#123;CHOSEN_KERNEL&#125;_*.deb&quot; -o \</span><br><span class="line">				-name &quot;orangepi-*.deb&quot; -o \</span><br><span class="line">				-name &quot;plymouth-theme-orangepi_*.deb&quot; -o \</span><br><span class="line">				-name &quot;$&#123;CHOSEN_KERNEL/image/dtb&#125;_*.deb&quot; -o \</span><br><span class="line">				-name &quot;$&#123;CHOSEN_KERNEL/image/headers&#125;_*.deb&quot; -o \</span><br><span class="line">				-name &quot;$&#123;CHOSEN_KERNEL/image/source&#125;_*.deb&quot; -o \</span><br><span class="line">				-name &quot;$&#123;CHOSEN_KERNEL/image/firmware-image&#125;_*.deb&quot; \) -delete</span><br><span class="line">			[[ -n $RELEASE ]] &amp;&amp; rm -f &quot;$&#123;DEB_STORAGE&#125;/$&#123;RELEASE&#125;/$&#123;CHOSEN_ROOTFS&#125;&quot;_*.deb</span><br><span class="line">			[[ -n $RELEASE ]] &amp;&amp; rm -f &quot;$&#123;DEB_STORAGE&#125;/$&#123;RELEASE&#125;/orangepi-desktop-$&#123;RELEASE&#125;&quot;_*.deb</span><br><span class="line">		fi</span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">		ubootdebs) # delete $&#123;DEB_STORAGE&#125; for uboot, current branch and family</span><br><span class="line">		if [[ -d &quot;$&#123;DEB_STORAGE&#125;&quot; ]]; then</span><br><span class="line">			display_alert &quot;Cleaning $&#123;DEB_STORAGE&#125; for u-boot&quot; &quot;$BOARD $BRANCH&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">easier than dealing with variable expansion and escaping dashes <span class="keyword">in</span> file names</span></span><br><span class="line">			find &quot;$&#123;DEB_STORAGE&#125;&quot; -name &quot;$&#123;CHOSEN_UBOOT&#125;_*.deb&quot; -delete</span><br><span class="line">		fi</span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">		extras) # delete $&#123;DEB_STORAGE&#125;/extra/$RELEASE for all architectures</span><br><span class="line">		if [[ -n $RELEASE &amp;&amp; -d $&#123;DEB_STORAGE&#125;/extra/$RELEASE ]]; then</span><br><span class="line">			display_alert &quot;Cleaning $&#123;DEB_STORAGE&#125;/extra for&quot; &quot;$RELEASE&quot; &quot;info&quot;</span><br><span class="line">			rm -rf &quot;$&#123;DEB_STORAGE&#125;/extra/$&#123;RELEASE&#125;&quot;</span><br><span class="line">		fi</span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">		alldebs) # delete output/debs</span><br><span class="line">		[[ -d &quot;$&#123;DEB_STORAGE&#125;&quot; ]] &amp;&amp; display_alert &quot;Cleaning&quot; &quot;$&#123;DEB_STORAGE&#125;&quot; &quot;info&quot; &amp;&amp; rm -rf &quot;$&#123;DEB_STORAGE&#125;&quot;/*</span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">		cache) # delete output/cache</span><br><span class="line">		[[ -d $EXTER/cache/rootfs ]] &amp;&amp; display_alert &quot;Cleaning&quot; &quot;rootfs cache (all)&quot; &quot;info&quot; &amp;&amp; find $EXTER/cache/rootfs -type f -delete</span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">		images) # delete output/images</span><br><span class="line">		[[ -d &quot;$&#123;DEST&#125;&quot;/images ]] &amp;&amp; display_alert &quot;Cleaning&quot; &quot;output/images&quot; &quot;info&quot; &amp;&amp; rm -rf &quot;$&#123;DEST&#125;&quot;/images/*</span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">		sources) # delete output/sources and output/buildpkg</span><br><span class="line">		[[ -d $EXTER/cache/sources ]] &amp;&amp; display_alert &quot;Cleaning&quot; &quot;sources&quot; &quot;info&quot; &amp;&amp; rm -rf $EXTER/cache/sources/* &quot;$&#123;DEST&#125;&quot;/buildpkg/*</span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">		oldcache) # remove old `cache/rootfs` except for the newest 8 files</span><br><span class="line">		if [[ -d $EXTER/cache/rootfs &amp;&amp; $(ls -1 $EXTER/cache/rootfs/*.lz4 2&gt; /dev/null | wc -l) -gt &quot;$&#123;ROOTFS_CACHE_MAX&#125;&quot; ]]; then</span><br><span class="line">			display_alert &quot;Cleaning&quot; &quot;rootfs cache (old)&quot; &quot;info&quot;</span><br><span class="line">			(cd $EXTER/cache/rootfs; ls -t *.lz4 | sed -e &quot;1,$&#123;ROOTFS_CACHE_MAX&#125;d&quot; | xargs -d &#x27;\n&#x27; rm -f)</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">Remove signatures <span class="keyword">if</span> they are present. We use them <span class="keyword">for</span> internal purpose</span></span><br><span class="line">			(cd $EXTER/cache/rootfs; ls -t *.asc | sed -e &quot;1,$&#123;ROOTFS_CACHE_MAX&#125;d&quot; | xargs -d &#x27;\n&#x27; rm -f)</span><br><span class="line">		fi</span><br><span class="line">		;;</span><br><span class="line">	esac</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">exit_with_error &lt;message&gt; &lt;highlight&gt;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># a way to terminate build process</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">with verbose error message</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"></span></span><br><span class="line">exit_with_error()</span><br><span class="line">&#123;</span><br><span class="line">	local _file</span><br><span class="line">	local _line=$&#123;BASH_LINENO[0]&#125;</span><br><span class="line">	local _function=$&#123;FUNCNAME[1]&#125;</span><br><span class="line">	local _description=$1</span><br><span class="line">	local _highlight=$2</span><br><span class="line">	_file=$(basename &quot;$&#123;BASH_SOURCE[1]&#125;&quot;)</span><br><span class="line">	local stacktrace=&quot;$(get_extension_hook_stracktrace &quot;$&#123;BASH_SOURCE[*]&#125;&quot; &quot;$&#123;BASH_LINENO[*]&#125;&quot;)&quot;</span><br><span class="line"></span><br><span class="line">	display_alert &quot;ERROR in function $_function&quot; &quot;$stacktrace&quot; &quot;err&quot;</span><br><span class="line">	display_alert &quot;$_description&quot; &quot;$_highlight&quot; &quot;err&quot;</span><br><span class="line">	display_alert &quot;Process terminated&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$&#123;ERROR_DEBUG_SHELL&#125;&quot; == &quot;yes&quot; ]]; then</span><br><span class="line">		display_alert &quot;MOUNT&quot; &quot;$&#123;MOUNT&#125;&quot; &quot;err&quot;</span><br><span class="line">		display_alert &quot;SDCARD&quot; &quot;$&#123;SDCARD&#125;&quot; &quot;err&quot;</span><br><span class="line">		display_alert &quot;Here&#x27;s a shell.&quot; &quot;debug it&quot; &quot;err&quot;</span><br><span class="line">		bash &lt; /dev/tty || true</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">TODO: execute run_after_build here?</span></span><br><span class="line">	overlayfs_wrapper &quot;cleanup&quot;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">unlock loop device access <span class="keyword">in</span> <span class="keyword">case</span> of starvation</span></span><br><span class="line">	exec &#123;FD&#125;&gt;/var/lock/orangepi-debootstrap-losetup</span><br><span class="line">	flock -u &quot;$&#123;FD&#125;&quot;</span><br><span class="line"></span><br><span class="line">	exit 255</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">get_package_list_hash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># returns md5 hash for current package list and rootfs cache version</span></span></span><br><span class="line"></span><br><span class="line">get_package_list_hash()</span><br><span class="line">&#123;</span><br><span class="line">	local package_arr exclude_arr</span><br><span class="line">	local list_content</span><br><span class="line">	read -ra package_arr &lt;&lt;&lt; &quot;$&#123;DEBOOTSTRAP_LIST&#125; $&#123;PACKAGE_LIST&#125;&quot;</span><br><span class="line">	read -ra exclude_arr &lt;&lt;&lt; &quot;$&#123;PACKAGE_LIST_EXCLUDE&#125;&quot;</span><br><span class="line">	( ( printf &quot;%s\n&quot; &quot;$&#123;package_arr[@]&#125;&quot;; printf -- &quot;-%s\n&quot; &quot;$&#123;exclude_arr[@]&#125;&quot; ) | sort -u; echo &quot;$&#123;1&#125;&quot; ) \</span><br><span class="line">		| md5sum | cut -d&#x27; &#x27; -f 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">create_sources_list &lt;release&gt; &lt;basedir&gt;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># &lt;release&gt;: buster|bullseye|bookworm|bionic|focal|jammy|hirsute|sid</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;basedir&gt;: path to root directory</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">create_sources_list()</span></span><br><span class="line">&#123;</span><br><span class="line">	local release=$1</span><br><span class="line">	local basedir=$2</span><br><span class="line">	[[ -z $basedir ]] &amp;&amp; exit_with_error &quot;No basedir passed to create_sources_list&quot;</span><br><span class="line"></span><br><span class="line">	case $release in</span><br><span class="line">	stretch|buster)</span><br><span class="line">	cat &lt;&lt;-EOF &gt; &quot;$&#123;basedir&#125;&quot;/etc/apt/sources.list</span><br><span class="line">	deb http://$&#123;DEBIAN_MIRROR&#125; $release main contrib non-free</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;DEBIAN_MIRROR&#125;</span> <span class="variable">$release</span> main contrib non-free</span></span><br><span class="line"></span><br><span class="line">	deb http://$&#123;DEBIAN_MIRROR&#125; $&#123;release&#125;-updates main contrib non-free</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;DEBIAN_MIRROR&#125;</span> <span class="variable">$&#123;release&#125;</span>-updates main contrib non-free</span></span><br><span class="line"></span><br><span class="line">	deb http://$&#123;DEBIAN_MIRROR&#125; $&#123;release&#125;-backports main contrib non-free</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;DEBIAN_MIRROR&#125;</span> <span class="variable">$&#123;release&#125;</span>-backports main contrib non-free</span></span><br><span class="line"></span><br><span class="line">	deb http://$&#123;DEBIAN_SECURTY&#125; $&#123;release&#125;/updates main contrib non-free</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;DEBIAN_SECURTY&#125;</span> <span class="variable">$&#123;release&#125;</span>/updates main contrib non-free</span></span><br><span class="line">	EOF</span><br><span class="line">	;;</span><br><span class="line"></span><br><span class="line">	bullseye)</span><br><span class="line">	cat &lt;&lt;-EOF &gt; &quot;$&#123;basedir&#125;&quot;/etc/apt/sources.list</span><br><span class="line">	deb https://$&#123;DEBIAN_MIRROR&#125; $release main contrib non-free</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src https://<span class="variable">$&#123;DEBIAN_MIRROR&#125;</span> <span class="variable">$release</span> main contrib non-free</span></span><br><span class="line"></span><br><span class="line">	deb https://$&#123;DEBIAN_MIRROR&#125; $&#123;release&#125;-updates main contrib non-free</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src https://<span class="variable">$&#123;DEBIAN_MIRROR&#125;</span> <span class="variable">$&#123;release&#125;</span>-updates main contrib non-free</span></span><br><span class="line"></span><br><span class="line">	deb https://$&#123;DEBIAN_MIRROR&#125; $&#123;release&#125;-backports main contrib non-free</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src https://<span class="variable">$&#123;DEBIAN_MIRROR&#125;</span> <span class="variable">$&#123;release&#125;</span>-backports main contrib non-free</span></span><br><span class="line"></span><br><span class="line">	deb https://$&#123;DEBIAN_SECURTY&#125; $&#123;release&#125;-security main contrib non-free</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src https://<span class="variable">$&#123;DEBIAN_SECURTY&#125;</span> <span class="variable">$&#123;release&#125;</span>-security main contrib non-free</span></span><br><span class="line">	EOF</span><br><span class="line">	;;</span><br><span class="line"></span><br><span class="line">	bookworm)</span><br><span class="line">	cat &lt;&lt;- EOF &gt; &quot;$&#123;basedir&#125;&quot;/etc/apt/sources.list</span><br><span class="line">	deb http://$&#123;DEBIAN_MIRROR&#125; $release main contrib non-free non-free-firmware</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;DEBIAN_MIRROR&#125;</span> <span class="variable">$release</span> main contrib non-free non-free-firmware</span></span><br><span class="line"></span><br><span class="line">	deb http://$&#123;DEBIAN_MIRROR&#125; $&#123;release&#125;-updates main contrib non-free non-free-firmware</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;DEBIAN_MIRROR&#125;</span> <span class="variable">$&#123;release&#125;</span>-updates main contrib non-free non-free-firmware</span></span><br><span class="line"></span><br><span class="line">	deb http://$&#123;DEBIAN_MIRROR&#125; $&#123;release&#125;-backports main contrib non-free non-free-firmware</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;DEBIAN_MIRROR&#125;</span> <span class="variable">$&#123;release&#125;</span>-backports main contrib non-free non-free-firmware</span></span><br><span class="line"></span><br><span class="line">	deb http://$&#123;DEBIAN_SECURTY&#125; $&#123;release&#125;-security main contrib non-free non-free-firmware</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;DEBIAN_SECURTY&#125;</span> <span class="variable">$&#123;release&#125;</span>-security main contrib non-free non-free-firmware</span></span><br><span class="line">	EOF</span><br><span class="line">	;;</span><br><span class="line"></span><br><span class="line">	sid) # sid is permanent unstable development and has no such thing as updates or security</span><br><span class="line">	cat &lt;&lt;- EOF &gt; &quot;$&#123;basedir&#125;&quot;/etc/apt/sources.list</span><br><span class="line">	deb http://$&#123;DEBIAN_MIRROR&#125; $release main contrib non-free non-free-firmware</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;DEBIAN_MIRROR&#125;</span> <span class="variable">$release</span> main contrib non-free non-free-firmware</span></span><br><span class="line"></span><br><span class="line">	deb http://$&#123;DEBIAN_MIRROR&#125; unstable main contrib non-free non-free-firmware</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;DEBIAN_MIRROR&#125;</span> unstable main contrib non-free non-free-firmware</span></span><br><span class="line">	EOF</span><br><span class="line">	;;</span><br><span class="line"></span><br><span class="line">	xenial|bionic|focal|hirsute|impish|jammy)</span><br><span class="line">	cat &lt;&lt;-EOF &gt; &quot;$&#123;basedir&#125;&quot;/etc/apt/sources.list</span><br><span class="line">	deb http://$&#123;UBUNTU_MIRROR&#125; $release main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;UBUNTU_MIRROR&#125;</span> <span class="variable">$release</span> main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line">	deb http://$&#123;UBUNTU_MIRROR&#125; $&#123;release&#125;-security main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;UBUNTU_MIRROR&#125;</span> <span class="variable">$&#123;release&#125;</span>-security main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line">	deb http://$&#123;UBUNTU_MIRROR&#125; $&#123;release&#125;-updates main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;UBUNTU_MIRROR&#125;</span> <span class="variable">$&#123;release&#125;</span>-updates main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line">	deb http://$&#123;UBUNTU_MIRROR&#125; $&#123;release&#125;-backports main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;UBUNTU_MIRROR&#125;</span> <span class="variable">$&#123;release&#125;</span>-backports main restricted universe multiverse</span></span><br><span class="line">	EOF</span><br><span class="line">	;;</span><br><span class="line"></span><br><span class="line">	raspi)</span><br><span class="line">	cat &lt;&lt;-EOF &gt; &quot;$&#123;basedir&#125;&quot;/etc/apt/sources.list</span><br><span class="line">	deb http://$&#123;DEBIAN_MIRROR&#125; bullseye main contrib non-free</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;DEBIAN_MIRROR&#125;</span> bullseye main contrib non-free</span></span><br><span class="line"></span><br><span class="line">	deb http://$&#123;DEBIAN_MIRROR&#125; bullseye-updates main contrib non-free</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;DEBIAN_MIRROR&#125;</span> bullseye-updates main contrib non-free</span></span><br><span class="line"></span><br><span class="line">	deb http://$&#123;DEBIAN_MIRROR&#125; bullseye-backports main contrib non-free</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;DEBIAN_MIRROR&#125;</span> bullseye-backports main contrib non-free</span></span><br><span class="line"></span><br><span class="line">	deb http://$&#123;DEBIAN_SECURTY&#125; bullseye-security main contrib non-free</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;DEBIAN_SECURTY&#125;</span> bullseye-security main contrib non-free</span></span><br><span class="line">	EOF</span><br><span class="line"></span><br><span class="line">	cat &lt;&lt;-EOF &gt; &quot;$&#123;basedir&#125;&quot;/etc/apt/sources.list.d/raspi.list</span><br><span class="line">	deb http://$&#123;RASPI_MIRROR&#125; bullseye main</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Uncomment line below <span class="keyword">then</span> <span class="string">&#x27;apt-get update&#x27;</span> to <span class="built_in">enable</span> <span class="string">&#x27;apt-get source&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://archive.raspberrypi.org/debian/ bullseye main</span></span><br><span class="line">	EOF</span><br><span class="line"></span><br><span class="line">	if [ -n &quot;$APT_PROXY&quot; ]; then</span><br><span class="line">		install -m 644 files/51cache &quot;$&#123;APT_PROXY&#125;/etc/apt/apt.conf.d/51cache&quot;</span><br><span class="line">		sed &quot;$&#123;basedir&#125;/etc/apt/apt.conf.d/51cache&quot; -i -e &quot;s|APT_PROXY|$&#123;APT_PROXY&#125;|&quot;</span><br><span class="line">	else</span><br><span class="line">		rm -f &quot;$&#123;basedir&#125;/etc/apt/apt.conf.d/51cache&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	cat $&#123;EXTER&#125;/packages/raspi/stage0/00-configure-apt/files/raspberrypi.gpg.key | gpg --dearmor &gt; &quot;$&#123;basedir&#125;/raspberrypi-archive-stable.gpg&quot;</span><br><span class="line">	install -m 644 &quot;$&#123;basedir&#125;/raspberrypi-archive-stable.gpg&quot; &quot;$&#123;basedir&#125;/etc/apt/trusted.gpg.d/&quot;</span><br><span class="line">	;;</span><br><span class="line">	esac</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">stage: add armbian repository and install key</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="keyword">if</span> [[ <span class="variable">$DOWNLOAD_MIRROR</span> == <span class="string">&quot;china&quot;</span> ]]; <span class="keyword">then</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">	<span class="built_in">echo</span> <span class="string">&quot;deb https://mirrors.tuna.tsinghua.edu.cn/armbian <span class="variable">$RELEASE</span> main <span class="variable">$&#123;RELEASE&#125;</span>-utils <span class="variable">$&#123;RELEASE&#125;</span>-desktop&quot;</span> &gt; <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/etc/apt/sources.list.d/armbian.list</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="keyword">elif</span> [[ <span class="variable">$DOWNLOAD_MIRROR</span> == <span class="string">&quot;bfsu&quot;</span> ]]; <span class="keyword">then</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">   <span class="built_in">echo</span> <span class="string">&quot;deb http://mirrors.bfsu.edu.cn/armbian <span class="variable">$RELEASE</span> main <span class="variable">$&#123;RELEASE&#125;</span>-utils <span class="variable">$&#123;RELEASE&#125;</span>-desktop&quot;</span> &gt; <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/etc/apt/sources.list.d/armbian.list</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="keyword">else</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">	<span class="built_in">echo</span> <span class="string">&quot;deb http://&quot;</span>$([[ <span class="variable">$BETA</span> == <span class="built_in">yes</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;beta&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;apt&quot;</span> )<span class="string">&quot;.armbian.com <span class="variable">$RELEASE</span> main <span class="variable">$&#123;RELEASE&#125;</span>-utils <span class="variable">$&#123;RELEASE&#125;</span>-desktop&quot;</span> &gt; <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/etc/apt/sources.list.d/armbian.list</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="keyword">fi</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">replace <span class="built_in">local</span> package server <span class="keyword">if</span> defined. Suitable <span class="keyword">for</span> development</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">[[ -n <span class="variable">$LOCAL_MIRROR</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;deb http://<span class="variable">$LOCAL_MIRROR</span> <span class="variable">$RELEASE</span> main <span class="variable">$&#123;RELEASE&#125;</span>-utils <span class="variable">$&#123;RELEASE&#125;</span>-desktop&quot;</span> &gt; <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/etc/apt/sources.list.d/armbian.list</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">display_alert <span class="string">&quot;Adding Armbian repository and authentication key&quot;</span> <span class="string">&quot;/etc/apt/sources.list.d/armbian.list&quot;</span> <span class="string">&quot;info&quot;</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">cp</span> <span class="string">&quot;<span class="variable">$&#123;EXTER&#125;</span>&quot;</span>/config/armbian.key <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">chroot</span> <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span> /bin/bash -c <span class="string">&quot;cat armbian.key | apt-key add - &gt; /dev/null 2&gt;&amp;1&quot;</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">rm</span> <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/armbian.key</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This function retries Git operations to avoid failure in case remote is borked</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">If the git team needs to call a remote server, use this <span class="keyword">function</span>.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">improved_git()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	local realgit=$(command -v git)</span><br><span class="line">	local retries=3</span><br><span class="line">	local delay=10</span><br><span class="line">	local count=1</span><br><span class="line">	while [ $count -lt $retries ]; do</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">realgit <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span></span><br><span class="line">		if [[ $? -eq 0 || -f .git/index.lock ]]; then</span><br><span class="line">			retries=0</span><br><span class="line">			break</span><br><span class="line">		fi</span><br><span class="line">	let count=$count+1</span><br><span class="line">	sleep $delay</span><br><span class="line">	done</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clean_up_git ()</span><br><span class="line">&#123;</span><br><span class="line">	local target_dir=$1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Files that are not tracked by git and were added</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">when the patch was applied must be removed.</span></span><br><span class="line">	git -C $target_dir clean -qdf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Return the files that are tracked by git to the initial state.</span></span><br><span class="line">	git -C $target_dir checkout -qf HEAD</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">used : waiter_local_git arg1=<span class="string">&#x27;value&#x27;</span> arg2:<span class="string">&#x27;value&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">		 waiter_local_git \</span></span><br><span class="line"><span class="language-bash"><span class="comment">#			url=&#x27;https://github.com/megous/linux&#x27; \</span></span></span><br><span class="line"><span class="language-bash"><span class="comment">#			name=&#x27;megous&#x27; \</span></span></span><br><span class="line"><span class="language-bash"><span class="comment">#			dir=&#x27;linux-mainline/5.14&#x27; \</span></span></span><br><span class="line"><span class="language-bash"><span class="comment">#			branch=&#x27;orange-pi-5.14&#x27; \</span></span></span><br><span class="line"><span class="language-bash"><span class="comment">#			obj=&lt;tag|commit&gt; or tag:$tag ...</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">An optional parameter <span class="keyword">for</span> switching to a git object such as a tag, commit,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or a specific branch. The object must exist <span class="keyword">in</span> the <span class="built_in">local</span> repository.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This optional parameter takes precedence. If it is specified, <span class="keyword">then</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the commit state corresponding to the specified git object will be extracted</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">to the working directory. Otherwise, the commit corresponding to the top of</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the branch will be extracted.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The settings <span class="keyword">for</span> the kernel variables of the original kernel</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VAR_SHALLOW_ORIGINAL=var_origin_kernel must be <span class="keyword">in</span> the main script</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">before calling the <span class="keyword">function</span></span></span><br><span class="line">waiter_local_git ()</span><br><span class="line">&#123;</span><br><span class="line">	for arg in $@;do</span><br><span class="line"></span><br><span class="line">		case $arg in</span><br><span class="line">			url=*|https://*|git://*)	eval &quot;local url=$&#123;arg/url=/&#125;&quot;</span><br><span class="line">				;;</span><br><span class="line">			dir=*|/*/*/*)	eval &quot;local dir=$&#123;arg/dir=/&#125;&quot;</span><br><span class="line">				;;</span><br><span class="line">			*=*|*:*)	eval &quot;local $&#123;arg/:/=&#125;&quot;</span><br><span class="line">				;;</span><br><span class="line">		esac</span><br><span class="line"></span><br><span class="line">	done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Required variables cannot be empty.</span></span><br><span class="line">	for var in url name dir branch; do</span><br><span class="line">		[ &quot;$&#123;var#*=&#125;&quot; == &quot;&quot; ] &amp;&amp; exit_with_error &quot;Error in configuration&quot;</span><br><span class="line">	done</span><br><span class="line"></span><br><span class="line">	local reachability</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">The <span class="string">&#x27;offline&#x27;</span> variable must always be <span class="built_in">set</span> to <span class="string">&#x27;true&#x27;</span> or <span class="string">&#x27;false&#x27;</span></span></span><br><span class="line">	if [ &quot;$OFFLINE_WORK&quot; == &quot;yes&quot; ]; then</span><br><span class="line">		local offline=true</span><br><span class="line">	else</span><br><span class="line">		local offline=false</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	local work_dir=&quot;$(realpath $&#123;EXTER&#125;/cache/sources)/$dir&quot;</span><br><span class="line">	mkdir -p $work_dir</span><br><span class="line">	cd $work_dir || exit_with_error</span><br><span class="line"></span><br><span class="line">	display_alert &quot;Checking git sources&quot; &quot;$dir $url$name/$branch&quot; &quot;info&quot;</span><br><span class="line"></span><br><span class="line">	if [ &quot;$(git rev-parse --git-dir 2&gt;/dev/null)&quot; != &quot;.git&quot; ]; then</span><br><span class="line">		git init -q .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">Run <span class="keyword">in</span> the sub shell to avoid mixing environment variables.</span></span><br><span class="line">		if [ -n &quot;$VAR_SHALLOW_ORIGINAL&quot; ]; then</span><br><span class="line">			(</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">VAR_SHALLOW_ORIGINAL</span></span><br><span class="line"></span><br><span class="line">			display_alert &quot;Add original git sources&quot; &quot;$dir $name/$branch&quot; &quot;info&quot;</span><br><span class="line">			if [ &quot;$(improved_git ls-remote -h $url $branch | \</span><br><span class="line">				awk -F&#x27;/&#x27; &#x27;&#123;if (NR == 1) print $NF&#125;&#x27;)&quot; != &quot;$branch&quot; ];then</span><br><span class="line">				display_alert &quot;Bad $branch for $url in $VAR_SHALLOW_ORIGINAL&quot;</span><br><span class="line">				exit 177</span><br><span class="line">			fi</span><br><span class="line"></span><br><span class="line">			git remote add -t $branch $name $url</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">Handle an exception <span class="keyword">if</span> the initial tag is the top of the branch</span></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">As v5.16 == HEAD</span></span><br><span class="line">			if [ &quot;$&#123;start_tag&#125;.1&quot; == &quot;$(improved_git ls-remote -t $url $&#123;start_tag&#125;.1 | \</span><br><span class="line">					awk -F&#x27;/&#x27; &#x27;&#123; print $NF &#125;&#x27;)&quot; ]</span><br><span class="line">			then</span><br><span class="line">				improved_git fetch --shallow-exclude=$start_tag $name</span><br><span class="line">			else</span><br><span class="line">				improved_git fetch --depth 1 $name</span><br><span class="line">			fi</span><br><span class="line">			improved_git fetch --deepen=1 $name</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">For a shallow <span class="built_in">clone</span>, this works quickly and saves space.</span></span><br><span class="line">			git gc</span><br><span class="line">			)</span><br><span class="line"></span><br><span class="line">			[ &quot;$?&quot; == &quot;177&quot; ] &amp;&amp; exit</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	files_for_clean=&quot;$(git status -s | wc -l)&quot;</span><br><span class="line">	if [ &quot;$files_for_clean&quot; != &quot;0&quot; ];then</span><br><span class="line">		display_alert &quot; Cleaning .... &quot; &quot;$files_for_clean files&quot;</span><br><span class="line">		clean_up_git $work_dir</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [ &quot;$name&quot; != &quot;$(git remote show | grep $name)&quot; ];then</span><br><span class="line">		git remote add -t $branch $name $url</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if ! $offline; then</span><br><span class="line">		for t_name in $(git remote show);do</span><br><span class="line">			improved_git fetch $t_name</span><br><span class="line">		done</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">When switching, we use the concept of only <span class="string">&quot;detached branch&quot;</span>. Therefore,</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">we extract the <span class="built_in">hash</span> from the tag, the branch name, or from the <span class="built_in">hash</span> itself.</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">This serves as a check of the reachability of the extraction.</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">We <span class="keyword">do</span> not use variables that characterize the current state of the git,</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">such as `HEAD` and `FETCH_HEAD`.</span></span><br><span class="line">	reachability=false</span><br><span class="line">	for var in obj tag commit branch;do</span><br><span class="line">		eval pval=\$$var</span><br><span class="line"></span><br><span class="line">		if [ -n &quot;$pval&quot; ] &amp;&amp; [ &quot;$pval&quot; != *HEAD ]; then</span><br><span class="line">			case $var in</span><br><span class="line">				obj|tag|commit) obj=$pval ;;</span><br><span class="line">				branch) obj=$&#123;name&#125;/$branch ;;</span><br><span class="line">			esac</span><br><span class="line"></span><br><span class="line">			if  t_hash=$(git rev-parse $obj 2&gt;/dev/null);then</span><br><span class="line">				reachability=true</span><br><span class="line">				break</span><br><span class="line">			else</span><br><span class="line">				display_alert &quot;Variable $var=$obj unreachable for extraction&quot;</span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line">	done</span><br><span class="line"></span><br><span class="line">	if $reachability &amp;&amp; [ &quot;$t_hash&quot; != &quot;$(git rev-parse @ 2&gt;/dev/null)&quot; ];then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">Switch <span class="string">&quot;detached branch&quot;</span> as <span class="built_in">hash</span></span></span><br><span class="line">		display_alert &quot;Switch $obj = $t_hash&quot;</span><br><span class="line">		git checkout -qf $t_hash</span><br><span class="line">	else</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">the working directory corresponds to the target commit,</span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">nothing needs to be <span class="keyword">done</span></span></span><br><span class="line">		display_alert &quot;Up to date&quot;</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">fetch_from_repo &lt;url&gt; &lt;directory&gt; &lt;ref&gt; &lt;ref_subdir&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;url&gt;: remote repository URL</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;directory&gt;: <span class="built_in">local</span> directory; subdir <span class="keyword">for</span> branch/tag will be created</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;ref&gt;:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">	branch:name</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">	tag:name</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">	<span class="built_in">head</span>(*)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">	commit:<span class="built_in">hash</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># *: Implies ref_subdir=no</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># &lt;ref_subdir&gt;: &quot;yes&quot; to create subdirectory for tag or branch name</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">fetch_from_repo()</span></span><br><span class="line">&#123;</span><br><span class="line">	local url=$1</span><br><span class="line">	local dir=$2</span><br><span class="line">	local ref=$3</span><br><span class="line">	local ref_subdir=$4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Set GitHub mirror before anything <span class="keyword">else</span> touches <span class="variable">$url</span></span></span><br><span class="line">	url=$&#123;url//&#x27;https://github.com/&#x27;/$GITHUB_SOURCE&#x27;/&#x27;&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">The <span class="string">&#x27;offline&#x27;</span> variable must always be <span class="built_in">set</span> to <span class="string">&#x27;true&#x27;</span> or <span class="string">&#x27;false&#x27;</span></span></span><br><span class="line">	if [ &quot;$OFFLINE_WORK&quot; == &quot;yes&quot; ]; then</span><br><span class="line">		local offline=true</span><br><span class="line">	else</span><br><span class="line">		local offline=false</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	[[ -z $ref || ( $ref != tag:* &amp;&amp; $ref != branch:* &amp;&amp; $ref != head &amp;&amp; $ref != commit:* ) ]] &amp;&amp; exit_with_error &quot;Error in configuration&quot;</span><br><span class="line">	local ref_type=$&#123;ref%%:*&#125;</span><br><span class="line">	if [[ $ref_type == head ]]; then</span><br><span class="line">		local ref_name=HEAD</span><br><span class="line">	else</span><br><span class="line">		local ref_name=$&#123;ref##*:&#125;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	display_alert &quot;Checking git sources&quot; &quot;$dir $ref_name&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">get default remote branch name without cloning</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="built_in">local</span> ref_name=$(git ls-remote --symref <span class="variable">$url</span> HEAD | grep -o <span class="string">&#x27;refs/heads/\S*&#x27;</span> | sed <span class="string">&#x27;s%refs/heads/%%&#x27;</span>)</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="keyword">for</span> git:// protocol comparing hashes of <span class="string">&quot;git ls-remote -h <span class="variable">$url</span>&quot;</span> and <span class="string">&quot;git ls-remote --symref <span class="variable">$url</span> HEAD&quot;</span> is needed</span></span><br><span class="line"></span><br><span class="line">	if [[ $ref_subdir == yes ]]; then</span><br><span class="line">		local workdir=$dir/$ref_name</span><br><span class="line">	else</span><br><span class="line">		local workdir=$dir</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	mkdir -p &quot;$&#123;workdir&#125;&quot; 2&gt;/dev/null || \</span><br><span class="line">		exit_with_error &quot;No path or no write permission&quot; &quot;$&#123;workdir&#125;&quot;</span><br><span class="line"></span><br><span class="line">	cd &quot;$&#123;workdir&#125;&quot; || exit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">check <span class="keyword">if</span> existing remote URL <span class="keyword">for</span> the repo or branch does not match current one</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">may not be supported by older git versions</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"> Check the folder as a git repository.</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"> Then the target URL matches the <span class="built_in">local</span> URL.</span></span><br><span class="line"></span><br><span class="line">	if [[ &quot;$(git rev-parse --git-dir 2&gt;/dev/null)&quot; == &quot;.git&quot; &amp;&amp; \</span><br><span class="line">		  &quot;$url&quot; != *&quot;$(git remote get-url origin | sed &#x27;s/^.*@//&#x27; | sed &#x27;s/^.*\/\///&#x27; 2&gt;/dev/null)&quot; ]]; then</span><br><span class="line">		display_alert &quot;Remote URL does not match, removing existing local copy&quot;</span><br><span class="line">		rm -rf .git ./*</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$(git rev-parse --git-dir 2&gt;/dev/null)&quot; != &quot;.git&quot; ]]; then</span><br><span class="line">		display_alert &quot;Creating local copy&quot;</span><br><span class="line">		git init -q .</span><br><span class="line">		git remote add origin &quot;$&#123;url&#125;&quot;</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">Here you need to upload from a new address</span></span><br><span class="line">		offline=false</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	local changed=false</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">when we work offline we simply <span class="built_in">return</span> the sources to their original state</span></span><br><span class="line">	if ! $offline; then</span><br><span class="line">		local local_hash</span><br><span class="line">		local_hash=$(git rev-parse @ 2&gt;/dev/null)</span><br><span class="line"></span><br><span class="line">		case $ref_type in</span><br><span class="line">			branch)</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">TODO: grep refs/heads/<span class="variable">$name</span></span></span><br><span class="line">			local remote_hash</span><br><span class="line">			remote_hash=$(improved_git ls-remote -h &quot;$&#123;url&#125;&quot; &quot;$ref_name&quot; | head -1 | cut -f1)</span><br><span class="line">			[[ -z $local_hash || &quot;$&#123;local_hash&#125;&quot; != &quot;$&#123;remote_hash&#125;&quot; ]] &amp;&amp; changed=true</span><br><span class="line">			;;</span><br><span class="line"></span><br><span class="line">			tag)</span><br><span class="line">			local remote_hash</span><br><span class="line">			remote_hash=$(improved_git ls-remote -t &quot;$&#123;url&#125;&quot; &quot;$ref_name&quot; | cut -f1)</span><br><span class="line">			if [[ -z $local_hash || &quot;$&#123;local_hash&#125;&quot; != &quot;$&#123;remote_hash&#125;&quot; ]]; then</span><br><span class="line">				remote_hash=$(improved_git ls-remote -t &quot;$&#123;url&#125;&quot; &quot;$ref_name^&#123;&#125;&quot; | cut -f1)</span><br><span class="line">				[[ -z $remote_hash || &quot;$&#123;local_hash&#125;&quot; != &quot;$&#123;remote_hash&#125;&quot; ]] &amp;&amp; changed=true</span><br><span class="line">			fi</span><br><span class="line">			;;</span><br><span class="line"></span><br><span class="line">			head)</span><br><span class="line">			local remote_hash</span><br><span class="line">			remote_hash=$(improved_git ls-remote &quot;$&#123;url&#125;&quot; HEAD | cut -f1)</span><br><span class="line">			[[ -z $local_hash || &quot;$&#123;local_hash&#125;&quot; != &quot;$&#123;remote_hash&#125;&quot; ]] &amp;&amp; changed=true</span><br><span class="line">			;;</span><br><span class="line"></span><br><span class="line">			commit)</span><br><span class="line">			[[ -z $local_hash || $local_hash == &quot;@&quot; ]] &amp;&amp; changed=true</span><br><span class="line">			;;</span><br><span class="line">		esac</span><br><span class="line"></span><br><span class="line">	fi # offline</span><br><span class="line"></span><br><span class="line">	if [[ $changed == true ]]; then</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">remote was updated, fetch and check out updates</span></span><br><span class="line">		display_alert &quot;Fetching updates&quot;</span><br><span class="line">		case $ref_type in</span><br><span class="line">			branch) improved_git fetch --depth 200 origin &quot;$&#123;ref_name&#125;&quot; ;;</span><br><span class="line">			tag) improved_git fetch --depth 200 origin tags/&quot;$&#123;ref_name&#125;&quot; ;;</span><br><span class="line">			head) improved_git fetch --depth 200 origin HEAD ;;</span><br><span class="line">		esac</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">commit <span class="built_in">type</span> needs support <span class="keyword">for</span> older git servers that doesn<span class="string">&#x27;t support fetching id directly</span></span></span><br><span class="line">		if [[ $ref_type == commit ]]; then</span><br><span class="line"></span><br><span class="line">			improved_git fetch --depth 200 origin &quot;$&#123;ref_name&#125;&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">cover old type</span></span></span><br><span class="line">			if [[ $? -ne 0 ]]; then</span><br><span class="line"></span><br><span class="line">				display_alert &quot;Commit checkout not supported on this repository. Doing full clone.&quot; &quot;&quot; &quot;wrn&quot;</span><br><span class="line">				improved_git pull</span><br><span class="line">				git checkout -fq &quot;$&#123;ref_name&#125;&quot;</span><br><span class="line">				display_alert &quot;Checkout out to&quot; &quot;$(git --no-pager log -2 --pretty=format:&quot;$ad%s [%an]&quot; | head -1)&quot; &quot;info&quot;</span><br><span class="line"></span><br><span class="line">			else</span><br><span class="line"></span><br><span class="line">				display_alert &quot;Checking out&quot;</span><br><span class="line">				git checkout -f -q FETCH_HEAD</span><br><span class="line">				git clean -qdf</span><br><span class="line"></span><br><span class="line">			fi</span><br><span class="line">		else</span><br><span class="line"></span><br><span class="line">			display_alert &quot;Checking out&quot;</span><br><span class="line">			git checkout -f -q FETCH_HEAD</span><br><span class="line">			git clean -qdf</span><br><span class="line"></span><br><span class="line">		fi</span><br><span class="line">	elif [[ -n $(git status -uno --porcelain --ignore-submodules=all) ]]; then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">working directory is not clean</span></span></span><br><span class="line">		display_alert &quot; Cleaning .... &quot; &quot;$(git status -s | wc -l) files&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">Return the files that are tracked by git to the initial state.</span></span></span><br><span class="line">		git checkout -f -q HEAD</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">Files that are not tracked by git and were added</span></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">when the patch was applied must be removed.</span></span></span><br><span class="line">		git clean -qdf</span><br><span class="line">	else</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">working directory is clean, nothing to do</span></span></span><br><span class="line">		display_alert &quot;Up to date&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ -f .gitmodules ]]; then</span><br><span class="line">		display_alert &quot;Updating submodules&quot; &quot;&quot; &quot;ext&quot;</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">FML: http://stackoverflow.com/a/17692710</span></span></span><br><span class="line">		for i in $(git config -f .gitmodules --get-regexp path | awk &#x27;&#123; print $2 &#125;&#x27;); do</span><br><span class="line">			cd &quot;$&#123;workdir&#125;&quot; || exit</span><br><span class="line">			local surl sref</span><br><span class="line">			surl=$(git config -f .gitmodules --get &quot;submodule.$i.url&quot;)</span><br><span class="line">			sref=$(git config -f .gitmodules --get &quot;submodule.$i.branch&quot;)</span><br><span class="line">			if [[ -n $sref ]]; then</span><br><span class="line">				sref=&quot;branch:$sref&quot;</span><br><span class="line">			else</span><br><span class="line">				sref=&quot;head&quot;</span><br><span class="line">			fi</span><br><span class="line">			fetch_from_repo &quot;$surl&quot; &quot;$workdir/$i&quot; &quot;$sref&quot;</span><br><span class="line">		done</span><br><span class="line">	fi</span><br><span class="line">&#125; #############################################################################</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">--------------------------------------------------------------------------------------------------------------------------------</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Let&#x27;</span>s have unique way of displaying alerts</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line">display_alert()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="built_in">log</span> <span class="keyword">function</span> parameters to install.log</span></span><br><span class="line">	[[ -n &quot;$&#123;DEST&#125;&quot; ]] &amp;&amp; echo &quot;Displaying message: $@&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/output.log</span><br><span class="line"></span><br><span class="line">	local tmp=&quot;&quot;</span><br><span class="line">	[[ -n $2 ]] &amp;&amp; tmp=&quot;[\e[0;33m $2 \x1B[0m]&quot;</span><br><span class="line"></span><br><span class="line">	case $3 in</span><br><span class="line">		err)</span><br><span class="line">		echo -e &quot;[\e[0;31m error \x1B[0m] $1 $tmp&quot;</span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">		wrn)</span><br><span class="line">		echo -e &quot;[\e[0;35m warn \x1B[0m] $1 $tmp&quot;</span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">		ext)</span><br><span class="line">		echo -e &quot;[\e[0;32m o.k. \x1B[0m] \e[1;32m$1\x1B[0m $tmp&quot;</span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">		info)</span><br><span class="line">		echo -e &quot;[\e[0;32m o.k. \x1B[0m] $1 $tmp&quot;</span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">		*)</span><br><span class="line">		echo -e &quot;[\e[0;32m .... \x1B[0m] $1 $tmp&quot;</span><br><span class="line">		;;</span><br><span class="line">	esac</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">fingerprint_image &lt;out_txt_file&gt; [image_filename]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Saving build summary to the image</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line">fingerprint_image()</span><br><span class="line">&#123;</span><br><span class="line">	cat &lt;&lt;-EOF &gt; &quot;$&#123;1&#125;&quot;</span><br><span class="line">	--------------------------------------------------------------------------------</span><br><span class="line">	Title:			$&#123;VENDOR&#125; $REVISION $&#123;BOARD^&#125; $DISTRIBUTION $RELEASE $BRANCH</span><br><span class="line">	Kernel:			Linux $VER</span><br><span class="line">	Build date:		$(date +&#x27;%d.%m.%Y&#x27;)</span><br><span class="line">	Maintainer:		$MAINTAINER &lt;$MAINTAINERMAIL&gt;</span><br><span class="line">	Sources: 		https://github.com/orangepi-xunlong/orangepi-build</span><br><span class="line">	Support: 		http://www.orangepi.org/</span><br><span class="line">	EOF</span><br><span class="line"></span><br><span class="line">	if [ -n &quot;$2&quot; ]; then</span><br><span class="line">		cat &lt;&lt;-EOF &gt;&gt; &quot;$&#123;1&#125;&quot;</span><br><span class="line">		--------------------------------------------------------------------------------</span><br><span class="line">		Partitioning configuration: $IMAGE_PARTITION_TABLE offset: $OFFSET</span><br><span class="line">		Boot partition type: $&#123;BOOTFS_TYPE:-(none)&#125; $&#123;BOOTSIZE:+&quot;($&#123;BOOTSIZE&#125; MB)&quot;&#125;</span><br><span class="line">		Root partition type: $ROOTFS_TYPE $&#123;FIXED_IMAGE_SIZE:+&quot;($&#123;FIXED_IMAGE_SIZE&#125; MB)&quot;&#125;</span><br><span class="line"></span><br><span class="line">		CPU configuration: $CPUMIN - $CPUMAX with $GOVERNOR</span><br><span class="line">		--------------------------------------------------------------------------------</span><br><span class="line">		Verify GPG signature:</span><br><span class="line">		gpg --verify $2.img.asc</span><br><span class="line"></span><br><span class="line">		Verify image file integrity:</span><br><span class="line">		sha256sum --check $2.img.sha</span><br><span class="line"></span><br><span class="line">		Prepare SD card (four methodes):</span><br><span class="line">		zcat $2.img.gz | pv | dd of=/dev/sdX bs=1M</span><br><span class="line">		dd if=$2.img of=/dev/sdX bs=1M</span><br><span class="line">		balena-etcher $2.img.gz -d /dev/sdX</span><br><span class="line">		balena-etcher $2.img -d /dev/sdX</span><br><span class="line">		EOF</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	cat &lt;&lt;-EOF &gt;&gt; &quot;$&#123;1&#125;&quot;</span><br><span class="line">	--------------------------------------------------------------------------------</span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">(<span class="built_in">cat</span> <span class="string">&quot;<span class="variable">$&#123;SRC&#125;</span>&quot;</span>/LICENSE)</span></span><br><span class="line">	--------------------------------------------------------------------------------</span><br><span class="line">	EOF</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Create kernel boot logo from packages/blobs/splash/logo.png and packages/blobs/splash/spinner.gif (animated)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">and place to the file /lib/firmware/bootsplash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line">function boot_logo ()</span><br><span class="line">&#123;</span><br><span class="line">display_alert &quot;Building kernel splash logo&quot; &quot;$RELEASE&quot; &quot;info&quot;</span><br><span class="line"></span><br><span class="line">	LOGO=$&#123;EXTER&#125;/packages/blobs/splash/logo.png</span><br><span class="line">	LOGO_WIDTH=$(identify $LOGO | cut -d &quot; &quot; -f 3 | cut -d x -f 1)</span><br><span class="line">	LOGO_HEIGHT=$(identify $LOGO | cut -d &quot; &quot; -f 3 | cut -d x -f 2)</span><br><span class="line">	THROBBER=$&#123;EXTER&#125;/packages/blobs/splash/spinner.gif</span><br><span class="line">	THROBBER_WIDTH=$(identify $THROBBER | head -1 | cut -d &quot; &quot; -f 3 | cut -d x -f 1)</span><br><span class="line">	THROBBER_HEIGHT=$(identify $THROBBER | head -1 | cut -d &quot; &quot; -f 3 | cut -d x -f 2)</span><br><span class="line">	convert -alpha remove -background &quot;#000000&quot;	$LOGO &quot;$&#123;SDCARD&#125;&quot;/tmp/logo.rgb</span><br><span class="line">	convert -alpha remove -background &quot;#000000&quot; $THROBBER &quot;$&#123;SDCARD&#125;&quot;/tmp/throbber%02d.rgb</span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">&#123;EXTER&#125;/packages/blobs/splash/bootsplash-packer \</span></span><br><span class="line"><span class="language-bash">	--bg_red 0x00 \</span></span><br><span class="line"><span class="language-bash">	--bg_green 0x00 \</span></span><br><span class="line"><span class="language-bash">	--bg_blue 0x00 \</span></span><br><span class="line"><span class="language-bash">	--frame_ms 48 \</span></span><br><span class="line"><span class="language-bash">	--picture \</span></span><br><span class="line"><span class="language-bash">	--pic_width <span class="variable">$LOGO_WIDTH</span> \</span></span><br><span class="line"><span class="language-bash">	--pic_height <span class="variable">$LOGO_HEIGHT</span> \</span></span><br><span class="line"><span class="language-bash">	--pic_position 0 \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/logo.rgb \</span></span><br><span class="line"><span class="language-bash">	--picture \</span></span><br><span class="line"><span class="language-bash">	--pic_width <span class="variable">$THROBBER_WIDTH</span> \</span></span><br><span class="line"><span class="language-bash">	--pic_height <span class="variable">$THROBBER_HEIGHT</span> \</span></span><br><span class="line"><span class="language-bash">	--pic_position 0x05 \</span></span><br><span class="line"><span class="language-bash">	--pic_position_offset 200 \</span></span><br><span class="line"><span class="language-bash">	--pic_anim_type 1 \</span></span><br><span class="line"><span class="language-bash">	--pic_anim_loop 0 \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber00.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber01.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber02.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber03.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber04.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber05.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber06.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber07.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber08.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber09.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber10.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber11.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber12.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber13.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber14.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber15.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber16.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber17.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber18.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber19.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber20.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber21.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber22.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber23.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber24.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber25.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber26.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber27.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber28.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber29.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber30.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber31.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber32.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber33.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber34.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber35.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber36.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber37.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber38.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber39.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber40.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber41.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber42.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber43.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber44.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber45.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber46.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber47.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber48.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber49.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber50.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber51.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber52.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber53.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber54.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber55.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber56.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber57.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber58.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber59.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber60.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber61.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber62.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber63.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber64.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber65.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber66.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber67.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber68.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber69.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber70.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber71.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber72.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber73.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber74.rgb \</span></span><br><span class="line"><span class="language-bash">	<span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/lib/firmware/bootsplash.orangepi &gt;/dev/null 2&gt;&amp;1</span></span><br><span class="line">	if [[ $BOOT_LOGO == yes || $BOOT_LOGO == desktop &amp;&amp; $BUILD_DESKTOP == yes &amp;&amp; $RELEASE != buster ]]; then</span><br><span class="line">		[[ -f &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt ]] &amp;&amp;	grep -q &#x27;^bootlogo&#x27; &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt &amp;&amp; \</span><br><span class="line">		sed -i &#x27;s/^bootlogo.*/bootlogo=true/&#x27; &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt || echo &#x27;bootlogo=true&#x27; &gt;&gt; &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt</span><br><span class="line">		[[ -f &quot;$&#123;SDCARD&#125;&quot;/boot/boot.ini ]] &amp;&amp;	sed -i &#x27;s/^setenv bootlogo.*/setenv bootlogo &quot;true&quot;/&#x27; &quot;$&#123;SDCARD&#125;&quot;/boot/boot.ini</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="built_in">enable</span> additional services</span></span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl --no-reload enable bootsplash-ask-password-console.path &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl --no-reload enable bootsplash-hide-when-booted.service &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl --no-reload enable bootsplash-show-on-shutdown.service &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DISTRIBUTIONS_DESC_DIR=&quot;external/config/distributions&quot;</span><br><span class="line"></span><br><span class="line">function distro_menu ()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">create a <span class="keyword">select</span> menu <span class="keyword">for</span> choosing a distribution based EXPERT status</span></span><br><span class="line"></span><br><span class="line">	local distrib_dir=&quot;$&#123;1&#125;&quot;</span><br><span class="line"></span><br><span class="line">	if [[ -d &quot;$&#123;distrib_dir&#125;&quot; &amp;&amp; -f &quot;$&#123;distrib_dir&#125;/support&quot; ]]; then</span><br><span class="line">		local support_level=&quot;$(cat &quot;$&#123;distrib_dir&#125;/support&quot;)&quot;</span><br><span class="line">		if [[ &quot;$&#123;support_level&#125;&quot; != &quot;supported&quot; &amp;&amp; $EXPERT != &quot;yes&quot; ]]; then</span><br><span class="line">			:</span><br><span class="line">		else</span><br><span class="line">			local distro_codename=&quot;$(basename &quot;$&#123;distrib_dir&#125;&quot;)&quot;</span><br><span class="line">			local distro_fullname=&quot;$(cat &quot;$&#123;distrib_dir&#125;/name&quot;)&quot;</span><br><span class="line">			local expert_infos=&quot;&quot;</span><br><span class="line">			[[ $EXPERT == &quot;yes&quot; ]] &amp;&amp; expert_infos=&quot;($&#123;support_level&#125;)&quot;</span><br><span class="line"></span><br><span class="line">			if [[ &quot;$&#123;BRANCH&#125;&quot; == &quot;legacy&quot; ]]; then</span><br><span class="line">				DISTRIB_TYPE=&quot;$&#123;DISTRIB_TYPE_LEGACY&#125;&quot;</span><br><span class="line">				[[ -z &quot;$&#123;DISTRIB_TYPE_LEGACY&#125;&quot; ]] &amp;&amp; DISTRIB_TYPE=&quot;buster bionic focal&quot;</span><br><span class="line">			elif [[ &quot;$&#123;BRANCH&#125;&quot; == &quot;current&quot; ]]; then</span><br><span class="line">				DISTRIB_TYPE=&quot;$&#123;DISTRIB_TYPE_CURRENT&#125;&quot;</span><br><span class="line">				[[ -z &quot;$&#123;DISTRIB_TYPE_CURRENT&#125;&quot; ]] &amp;&amp; DISTRIB_TYPE=&quot;bullseye bookworm focal jammy&quot;</span><br><span class="line">			elif [[ &quot;$&#123;BRANCH&#125;&quot; == &quot;next&quot; ]]; then</span><br><span class="line">				if [[ -n &quot;$&#123;DISTRIB_TYPE_NEXT&#125;&quot; ]]; then</span><br><span class="line">					DISTRIB_TYPE=&quot;$&#123;DISTRIB_TYPE_NEXT&#125;&quot;</span><br><span class="line">				else</span><br><span class="line">					DISTRIB_TYPE=&quot;$&#123;DISTRIB_TYPE_CURRENT&#125;&quot;</span><br><span class="line">					[[ -z &quot;$&#123;DISTRIB_TYPE_CURRENT&#125;&quot; ]] &amp;&amp; DISTRIB_TYPE=&quot;bullseye bookworm focal jammy&quot;</span><br><span class="line">				fi</span><br><span class="line">			fi</span><br><span class="line"></span><br><span class="line">			if [[ &quot;$&#123;DISTRIB_TYPE&#125;&quot; =~ &quot;$&#123;distro_codename&#125;&quot; ]]; then</span><br><span class="line">				options+=(&quot;$&#123;distro_codename&#125;&quot; &quot;$&#123;distro_fullname&#125; $&#123;expert_infos&#125;&quot;)</span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function distros_options() &#123;</span><br><span class="line">	for distrib_dir in &quot;$&#123;DISTRIBUTIONS_DESC_DIR&#125;/&quot;*; do</span><br><span class="line">		distro_menu &quot;$&#123;distrib_dir&#125;&quot;</span><br><span class="line">	done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function set_distribution_status() &#123;</span><br><span class="line"></span><br><span class="line">	local distro_support_desc_filepath=&quot;$&#123;SRC&#125;/$&#123;DISTRIBUTIONS_DESC_DIR&#125;/$&#123;RELEASE&#125;/support&quot;</span><br><span class="line">	if [[ ! -f &quot;$&#123;distro_support_desc_filepath&#125;&quot; ]]; then</span><br><span class="line">		exit_with_error &quot;Distribution $&#123;distribution_name&#125; does not exist&quot;</span><br><span class="line">	else</span><br><span class="line">		DISTRIBUTION_STATUS=&quot;$(cat &quot;$&#123;distro_support_desc_filepath&#125;&quot;)&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	[[ &quot;$&#123;DISTRIBUTION_STATUS&#125;&quot; != &quot;supported&quot; ]] &amp;&amp; [[ &quot;$&#123;EXPERT&#125;&quot; != &quot;yes&quot; ]] &amp;&amp; exit_with_error &quot;Orange Pi $&#123;RELEASE&#125; is unsupported and, therefore, only available to experts (EXPERT=yes)&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">adding_packages()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">add deb files to repository <span class="keyword">if</span> they are not already there</span></span><br><span class="line"></span><br><span class="line">	display_alert &quot;Checking and adding to repository $release&quot; &quot;$3&quot; &quot;ext&quot;</span><br><span class="line">	for f in &quot;$&#123;DEB_STORAGE&#125;$&#123;2&#125;&quot;/*.deb</span><br><span class="line">	do</span><br><span class="line">		local name version arch</span><br><span class="line">		name=$(dpkg-deb -I &quot;$&#123;f&#125;&quot; | grep Package | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">		version=$(dpkg-deb -I &quot;$&#123;f&#125;&quot; | grep Version | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">		arch=$(dpkg-deb -I &quot;$&#123;f&#125;&quot; | grep Architecture | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">add <span class="keyword">if</span> not already there</span></span><br><span class="line">		aptly repo search -architectures=&quot;$&#123;arch&#125;&quot; -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;1&#125;&quot; &#x27;Name (% &#x27;$&#123;name&#125;&#x27;), $Version (=&#x27;$&#123;version&#125;&#x27;), $Architecture (=&#x27;$&#123;arch&#125;&#x27;)&#x27; &amp;&gt;/dev/null</span><br><span class="line">		if [[ $? -ne 0 ]]; then</span><br><span class="line">			display_alert &quot;Adding $&#123;1&#125;&quot; &quot;$name&quot; &quot;info&quot;</span><br><span class="line">			aptly repo add -force-replace=true -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;1&#125;&quot; &quot;$&#123;f&#125;&quot; &amp;&gt;/dev/null</span><br><span class="line">		fi</span><br><span class="line">	done</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">addtorepo()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">create repository</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">parameter <span class="string">&quot;remove&quot;</span> dumps all and creates new</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">parameter <span class="string">&quot;delete&quot;</span> remove incoming directory <span class="keyword">if</span> publishing is succesful</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">function</span>: cycle trough distributions</span></span><br><span class="line"></span><br><span class="line">	local distributions=(&quot;stretch&quot; &quot;bionic&quot; &quot;buster&quot; &quot;bullseye&quot; &quot;bookworm&quot; &quot;focal&quot; &quot;hirsute&quot; &quot;jammy&quot; &quot;sid&quot;)</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">local</span> distributions=($(grep -rw config/distributions/*/ -e <span class="string">&#x27;supported&#x27;</span> | <span class="built_in">cut</span> -d<span class="string">&quot;/&quot;</span> -f3))</span></span><br><span class="line">	local errors=0</span><br><span class="line"></span><br><span class="line">	for release in &quot;$&#123;distributions[@]&#125;&quot;; do</span><br><span class="line"></span><br><span class="line">		local forceoverwrite=&quot;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="built_in">let</span><span class="string">&#x27;s drop from publish if exits</span></span></span><br><span class="line">		if [[ -n $(aptly publish list -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; -raw | awk &#x27;&#123;print $(NF)&#125;&#x27; | grep &quot;$&#123;release&#125;&quot;) ]]; then</span><br><span class="line">			aptly publish drop -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;release&#125;&quot; &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">create local repository if not exist</span></span></span><br><span class="line">		if [[ -z $(aptly repo list -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; -raw | awk &#x27;&#123;print $(NF)&#125;&#x27; | grep &quot;$&#123;release&#125;&quot;) ]]; then</span><br><span class="line">			display_alert &quot;Creating section&quot; &quot;main&quot; &quot;info&quot;</span><br><span class="line">			aptly repo create -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; -distribution=&quot;$&#123;release&#125;&quot; -component=&quot;main&quot; \</span><br><span class="line">			-comment=&quot;Armbian main repository&quot; &quot;$&#123;release&#125;&quot; &gt;/dev/null</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		if [[ -z $(aptly repo list -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; -raw | awk &#x27;&#123;print $(NF)&#125;&#x27; | grep &quot;^utils&quot;) ]]; then</span><br><span class="line">			aptly repo create -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; -distribution=&quot;$&#123;release&#125;&quot; -component=&quot;utils&quot; \</span><br><span class="line">			-comment=&quot;Armbian utilities (backwards compatibility)&quot; utils &gt;/dev/null</span><br><span class="line">		fi</span><br><span class="line">		if [[ -z $(aptly repo list -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; -raw | awk &#x27;&#123;print $(NF)&#125;&#x27; | grep &quot;$&#123;release&#125;-utils&quot;) ]]; then</span><br><span class="line">			aptly repo create -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; -distribution=&quot;$&#123;release&#125;&quot; -component=&quot;$&#123;release&#125;-utils&quot; \</span><br><span class="line">			-comment=&quot;Armbian $&#123;release&#125; utilities&quot; &quot;$&#123;release&#125;-utils&quot; &gt;/dev/null</span><br><span class="line">		fi</span><br><span class="line">		if [[ -z $(aptly repo list -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; -raw | awk &#x27;&#123;print $(NF)&#125;&#x27; | grep &quot;$&#123;release&#125;-desktop&quot;) ]]; then</span><br><span class="line">			aptly repo create -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; -distribution=&quot;$&#123;release&#125;&quot; -component=&quot;$&#123;release&#125;-desktop&quot; \</span><br><span class="line">			-comment=&quot;Armbian $&#123;release&#125; desktop&quot; &quot;$&#123;release&#125;-desktop&quot; &gt;/dev/null</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">adding main</span></span></span><br><span class="line">		if find &quot;$&#123;DEB_STORAGE&#125;&quot;/ -maxdepth 1 -type f -name &quot;*.deb&quot; 2&gt;/dev/null | grep -q .; then</span><br><span class="line">			adding_packages &quot;$release&quot; &quot;&quot; &quot;main&quot;</span><br><span class="line">		else</span><br><span class="line">			aptly repo add -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;release&#125;&quot; &quot;$&#123;SCRIPTPATH&#125;config/templates/example.deb&quot; &gt;/dev/null</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		local COMPONENTS=&quot;main&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">adding main distribution packages</span></span></span><br><span class="line">		if find &quot;$&#123;DEB_STORAGE&#125;/$&#123;release&#125;&quot; -maxdepth 1 -type f -name &quot;*.deb&quot; 2&gt;/dev/null | grep -q .; then</span><br><span class="line">			adding_packages &quot;$&#123;release&#125;-utils&quot; &quot;/$&#123;release&#125;&quot; &quot;release packages&quot;</span><br><span class="line">		else</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">workaround - add dummy package to not trigger error</span></span></span><br><span class="line">			aptly repo add -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;release&#125;&quot; &quot;$&#123;SCRIPTPATH&#125;config/templates/example.deb&quot; &gt;/dev/null</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">adding release-specific utils</span></span></span><br><span class="line">		if find &quot;$&#123;DEB_STORAGE&#125;/extra/$&#123;release&#125;-utils&quot; -maxdepth 1 -type f -name &quot;*.deb&quot; 2&gt;/dev/null | grep -q .; then</span><br><span class="line">			adding_packages &quot;$&#123;release&#125;-utils&quot; &quot;/extra/$&#123;release&#125;-utils&quot; &quot;release utils&quot;</span><br><span class="line">		else</span><br><span class="line">			aptly repo add -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;release&#125;-utils&quot; &quot;$&#123;SCRIPTPATH&#125;config/templates/example.deb&quot; &gt;/dev/null</span><br><span class="line">		fi</span><br><span class="line">		COMPONENTS=&quot;$&#123;COMPONENTS&#125; $&#123;release&#125;-utils&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">adding desktop</span></span></span><br><span class="line">		if find &quot;$&#123;DEB_STORAGE&#125;/extra/$&#123;release&#125;-desktop&quot; -maxdepth 1 -type f -name &quot;*.deb&quot; 2&gt;/dev/null | grep -q .; then</span><br><span class="line">			adding_packages &quot;$&#123;release&#125;-desktop&quot; &quot;/extra/$&#123;release&#125;-desktop&quot; &quot;desktop&quot;</span><br><span class="line">		else</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">workaround - add dummy package to not trigger error</span></span></span><br><span class="line">			aptly repo add -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;release&#125;-desktop&quot; &quot;$&#123;SCRIPTPATH&#125;config/templates/example.deb&quot; &gt;/dev/null</span><br><span class="line">		fi</span><br><span class="line">		COMPONENTS=&quot;$&#123;COMPONENTS&#125; $&#123;release&#125;-desktop&quot;</span><br><span class="line"></span><br><span class="line">		local mainnum utilnum desknum</span><br><span class="line">		mainnum=$(aptly repo show -with-packages -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;release&#125;&quot; | grep &quot;Number of packages&quot; | awk &#x27;&#123;print $NF&#125;&#x27;)</span><br><span class="line">		utilnum=$(aptly repo show -with-packages -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;release&#125;-desktop&quot; | grep &quot;Number of packages&quot; | awk &#x27;&#123;print $NF&#125;&#x27;)</span><br><span class="line">		desknum=$(aptly repo show -with-packages -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;release&#125;-utils&quot; | grep &quot;Number of packages&quot; | awk &#x27;&#123;print $NF&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">		if [ $mainnum -gt 0 ] &amp;&amp; [ $utilnum -gt 0 ] &amp;&amp; [ $desknum -gt 0 ]; then</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">publish</span></span></span><br><span class="line">			aptly publish \</span><br><span class="line">			-acquire-by-hash \</span><br><span class="line">			-passphrase=&quot;$&#123;GPG_PASS&#125;&quot; \</span><br><span class="line">			-origin=&quot;Armbian&quot; \</span><br><span class="line">			-label=&quot;Armbian&quot; \</span><br><span class="line">			-config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; \</span><br><span class="line">			-component=&quot;$&#123;COMPONENTS// /,&#125;&quot; \</span><br><span class="line">			-distribution=&quot;$&#123;release&#125;&quot; repo &quot;$&#123;release&#125;&quot; $&#123;COMPONENTS//main/&#125; &gt;/dev/null</span><br><span class="line"></span><br><span class="line">			if [[ $? -ne 0 ]]; then</span><br><span class="line">				display_alert &quot;Publishing failed&quot; &quot;$&#123;release&#125;&quot; &quot;err&quot;</span><br><span class="line">				errors=$((errors+1))</span><br><span class="line">				exit 0</span><br><span class="line">			fi</span><br><span class="line">		else</span><br><span class="line">			errors=$((errors+1))</span><br><span class="line">			local err_txt=&quot;: All components must be present: main, utils and desktop for first build&quot;</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">	done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">cleanup</span></span></span><br><span class="line">	display_alert &quot;Cleaning repository&quot; &quot;$&#123;DEB_STORAGE&#125;&quot; &quot;info&quot;</span><br><span class="line">	aptly db cleanup -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">display what we have</span></span></span><br><span class="line">	echo &quot;&quot;</span><br><span class="line">	display_alert &quot;List of local repos&quot; &quot;local&quot; &quot;info&quot;</span><br><span class="line">	(aptly repo list -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot;) | grep -E packages</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">remove debs if no errors found</span></span></span><br><span class="line">	if [[ $errors -eq 0 ]]; then</span><br><span class="line">		if [[ &quot;$2&quot; == &quot;delete&quot; ]]; then</span><br><span class="line">			display_alert &quot;Purging incoming debs&quot; &quot;all&quot; &quot;ext&quot;</span><br><span class="line">			find &quot;$&#123;DEB_STORAGE&#125;&quot; -name &quot;*.deb&quot; -type f -delete</span><br><span class="line">		fi</span><br><span class="line">	else</span><br><span class="line">		display_alert &quot;There were some problems $err_txt&quot; &quot;leaving incoming directory intact&quot; &quot;err&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">repo-manipulate()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">repository manipulation</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;show&quot; displays packages in each repository</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;server&quot; serve repository - useful for local diagnostics</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;unique&quot; manually select which package should be removed from all repositories</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;update&quot; search for new files in output/debs* to add them to repository</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;purge&quot; leave only last 5 versions</span></span></span><br><span class="line"></span><br><span class="line">	local DISTROS=(&quot;stretch&quot; &quot;bionic&quot; &quot;buster&quot; &quot;bullseye&quot; &quot;bookworm&quot; &quot;focal&quot; &quot;hirsute&quot; &quot;jammy&quot; &quot;sid&quot;)</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">local DISTROS=($(grep -rw config/distributions/*/ -e &#x27;</span>supported<span class="string">&#x27; | cut -d&quot;/&quot; -f3))</span></span></span><br><span class="line"></span><br><span class="line">	case $@ in</span><br><span class="line"></span><br><span class="line">		serve)</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">display repository content</span></span></span><br><span class="line">			display_alert &quot;Serving content&quot; &quot;common utils&quot; &quot;ext&quot;</span><br><span class="line">			aptly serve -listen=$(ip -f inet addr | grep -Po &#x27;inet \K[\d.]+&#x27; | grep -v 127.0.0.1 | head -1):80 -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot;</span><br><span class="line">			exit 0</span><br><span class="line">			;;</span><br><span class="line"></span><br><span class="line">		show)</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">display repository content</span></span></span><br><span class="line">			for release in &quot;$&#123;DISTROS[@]&#125;&quot;; do</span><br><span class="line">				display_alert &quot;Displaying repository contents for&quot; &quot;$release&quot; &quot;ext&quot;</span><br><span class="line">				aptly repo show -with-packages -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;release&#125;&quot; | tail -n +7</span><br><span class="line">				aptly repo show -with-packages -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;release&#125;-desktop&quot; | tail -n +7</span><br><span class="line">			done</span><br><span class="line">			display_alert &quot;Displaying repository contents for&quot; &quot;common utils&quot; &quot;ext&quot;</span><br><span class="line">			aptly repo show -with-packages -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; utils | tail -n +7</span><br><span class="line">			echo &quot;done.&quot;</span><br><span class="line">			exit 0</span><br><span class="line">			;;</span><br><span class="line"></span><br><span class="line">		unique)</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">which package should be removed from all repositories</span></span></span><br><span class="line">			IFS=$&#x27;\n&#x27;</span><br><span class="line">			while true; do</span><br><span class="line">				LIST=()</span><br><span class="line">				for release in &quot;$&#123;DISTROS[@]&#125;&quot;; do</span><br><span class="line">					LIST+=( $(aptly repo show -with-packages -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;release&#125;&quot; | tail -n +7) )</span><br><span class="line">					LIST+=( $(aptly repo show -with-packages -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;release&#125;-desktop&quot; | tail -n +7) )</span><br><span class="line">				done</span><br><span class="line">				LIST+=( $(aptly repo show -with-packages -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; utils | tail -n +7) )</span><br><span class="line">				LIST=( $(echo &quot;$&#123;LIST[@]&#125;&quot; | tr &#x27; &#x27; &#x27;\n&#x27; | sort -u))</span><br><span class="line">				new_list=()</span><br><span class="line">				# create a human readable menu</span><br><span class="line">				for ((n=0;n&lt;$(($&#123;#LIST[@]&#125;));n++));</span><br><span class="line">				do</span><br><span class="line">					new_list+=( &quot;$&#123;LIST[$n]&#125;&quot; )</span><br><span class="line">					new_list+=( &quot;&quot; )</span><br><span class="line">				done</span><br><span class="line">				LIST=(&quot;$&#123;new_list[@]&#125;&quot;)</span><br><span class="line">				LIST_LENGTH=$(($&#123;#LIST[@]&#125;/2));</span><br><span class="line">				exec 3&gt;&amp;1</span><br><span class="line">				TARGET_VERSION=$(dialog --cancel-label &quot;Cancel&quot; --backtitle &quot;BACKTITLE&quot; --no-collapse --title &quot;Remove packages from repositories&quot; --clear --menu &quot;Delete&quot; $((9+$&#123;LIST_LENGTH&#125;)) 82 65 &quot;$&#123;LIST[@]&#125;&quot; 2&gt;&amp;1 1&gt;&amp;3)</span><br><span class="line">				exitstatus=$?;</span><br><span class="line">				exec 3&gt;&amp;-</span><br><span class="line">				if [[ $exitstatus -eq 0 ]]; then</span><br><span class="line">					for release in &quot;$&#123;DISTROS[@]&#125;&quot;; do</span><br><span class="line">						aptly repo remove -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot;  &quot;$&#123;release&#125;&quot; &quot;$TARGET_VERSION&quot;</span><br><span class="line">						aptly repo remove -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot;  &quot;$&#123;release&#125;-desktop&quot; &quot;$TARGET_VERSION&quot;</span><br><span class="line">					done</span><br><span class="line">					aptly repo remove -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;utils&quot; &quot;$TARGET_VERSION&quot;</span><br><span class="line">				else</span><br><span class="line">					exit 1</span><br><span class="line">				fi</span><br><span class="line">				aptly db cleanup -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">			done</span><br><span class="line">			;;</span><br><span class="line"></span><br><span class="line">		update)</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">display full help test</span></span></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">run repository update</span></span></span><br><span class="line">			addtorepo &quot;update&quot; &quot;&quot;</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">add a key to repo</span></span></span><br><span class="line">			cp &quot;$&#123;SCRIPTPATH&#125;&quot;config/armbian.key &quot;$&#123;REPO_STORAGE&#125;&quot;/public/</span><br><span class="line">			exit 0</span><br><span class="line">			;;</span><br><span class="line"></span><br><span class="line">		purge)</span><br><span class="line">			for release in &quot;$&#123;DISTROS[@]&#125;&quot;; do</span><br><span class="line">				repo-remove-old-packages &quot;$release&quot; &quot;armhf&quot; &quot;5&quot;</span><br><span class="line">				repo-remove-old-packages &quot;$release&quot; &quot;arm64&quot; &quot;5&quot;</span><br><span class="line">				repo-remove-old-packages &quot;$release&quot; &quot;amd64&quot; &quot;5&quot;</span><br><span class="line">				repo-remove-old-packages &quot;$release&quot; &quot;all&quot; &quot;5&quot;</span><br><span class="line">				aptly -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; -passphrase=&quot;$&#123;GPG_PASS&#125;&quot; publish update &quot;$&#123;release&#125;&quot; &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">			done</span><br><span class="line">			exit 0</span><br><span class="line">			;;</span><br><span class="line"></span><br><span class="line">                purgeedge)</span><br><span class="line">                        for release in &quot;$&#123;DISTROS[@]&#125;&quot;; do</span><br><span class="line">				repo-remove-old-packages &quot;$release&quot; &quot;armhf&quot; &quot;3&quot; &quot;edge&quot;</span><br><span class="line">				repo-remove-old-packages &quot;$release&quot; &quot;arm64&quot; &quot;3&quot; &quot;edge&quot;</span><br><span class="line">				repo-remove-old-packages &quot;$release&quot; &quot;amd64&quot; &quot;3&quot; &quot;edge&quot;</span><br><span class="line">				repo-remove-old-packages &quot;$release&quot; &quot;all&quot; &quot;3&quot; &quot;edge&quot;</span><br><span class="line">				aptly -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; -passphrase=&quot;$&#123;GPG_PASS&#125;&quot; publish update &quot;$&#123;release&#125;&quot; &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">                        done</span><br><span class="line">                        exit 0</span><br><span class="line">                        ;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		purgesource)</span><br><span class="line">			for release in &quot;$&#123;DISTROS[@]&#125;&quot;; do</span><br><span class="line">				aptly repo remove -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;release&#125;&quot; &#x27;Name (% *-source*)&#x27;</span><br><span class="line">				aptly -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; -passphrase=&quot;$&#123;GPG_PASS&#125;&quot; publish update &quot;$&#123;release&#125;&quot;  &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">			done</span><br><span class="line">			aptly db cleanup -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">			exit 0</span><br><span class="line">			;;</span><br><span class="line">		*)</span><br><span class="line"></span><br><span class="line">			echo -e &quot;Usage: repository show | serve | unique | create | update | purge | purgesource\n&quot;</span><br><span class="line">			echo -e &quot;\n show           = display repository content&quot;</span><br><span class="line">			echo -e &quot;\n serve          = publish your repositories on current server over HTTP&quot;</span><br><span class="line">			echo -e &quot;\n unique         = manually select which package should be removed from all repositories&quot;</span><br><span class="line">			echo -e &quot;\n update         = updating repository&quot;</span><br><span class="line">			echo -e &quot;\n purge          = removes all but last 5 versions&quot;</span><br><span class="line">			echo -e &quot;\n purgeedge      = removes all but last 3 edge versions&quot;</span><br><span class="line">			echo -e &quot;\n purgesource    = removes all sources\n\n&quot;</span><br><span class="line">			exit 0</span><br><span class="line">			;;</span><br><span class="line"></span><br><span class="line">	esac</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Removes old packages in the received repo</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># $1: Repository</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">$2: Architecture</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">$3: Amount of packages to keep</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">$4: Additional search pattern</span></span></span><br><span class="line">repo-remove-old-packages() &#123;</span><br><span class="line">	local repo=$1</span><br><span class="line">	local arch=$2</span><br><span class="line">	local keep=$3</span><br><span class="line">	for pkg in $(aptly repo search -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;repo&#125;&quot; &quot;Architecture ($arch)&quot; | grep -v &quot;ERROR: no results&quot; | sort -t &#x27;.&#x27; -nk4 | grep -e &quot;$4&quot;); do</span><br><span class="line">		local pkg_name</span><br><span class="line">		count=0</span><br><span class="line">		pkg_name=$(echo &quot;$&#123;pkg&#125;&quot; | cut -d_ -f1)</span><br><span class="line">		for subpkg in $(aptly repo search -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;repo&#125;&quot; &quot;Name ($pkg_name)&quot;  | grep -v &quot;ERROR: no results&quot; | sort -rt &#x27;.&#x27; -nk4); do</span><br><span class="line">			((count+=1))</span><br><span class="line">			if [[ $count -gt $keep ]]; then</span><br><span class="line">			pkg_version=$(echo &quot;$&#123;subpkg&#125;&quot; | cut -d_ -f2)</span><br><span class="line">			aptly repo remove -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;repo&#125;&quot; &quot;Name ($pkg_name), Version (= $pkg_version)&quot;</span><br><span class="line">			fi</span><br><span class="line">		done</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">wait_for_package_manager</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># * installation will break if we try to install when package manager is running</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">wait_for_package_manager()</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">exit if package manager is running in the back</span></span></span><br><span class="line">	while true; do</span><br><span class="line">		if [[ &quot;$(fuser /var/lib/dpkg/lock 2&gt;/dev/null; echo $?)&quot; != 1 &amp;&amp; &quot;$(fuser /var/lib/dpkg/lock-frontend 2&gt;/dev/null; echo $?)&quot; != 1 ]]; then</span><br><span class="line">				display_alert &quot;Package manager is running in the background.&quot; &quot;Please wait! Retrying in 30 sec&quot; &quot;wrn&quot;</span><br><span class="line">				sleep 30</span><br><span class="line">			else</span><br><span class="line">				break</span><br><span class="line">		fi</span><br><span class="line">	done</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Installing debian packages in the orangepi build system.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The function accepts four optional parameters:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">autoupdate - If the installation list is not empty then update first.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">upgrade, clean - the same name for apt</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">verbose - detailed log for the function</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># list=&quot;pkg1 pkg2 pkg3 pkgbadname pkg-1.0 | pkg-2.0 pkg5 (&gt;= 9)&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">install_pkg_deb upgrade verbose $list</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">or</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">install_pkg_deb autoupdate $list</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># If the package has a bad name, we will see it in the log file.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">If there is an LOG_OUTPUT_FILE variable and it has a value as</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the full real path to the log file, then all the information will be there.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The LOG_OUTPUT_FILE variable must be defined in the calling function</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">before calling the install_pkg_deb function and unset after.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">install_pkg_deb ()</span></span></span><br><span class="line">&#123;</span><br><span class="line">	local list=&quot;&quot;</span><br><span class="line">	local log_file</span><br><span class="line">	local for_install</span><br><span class="line">	local need_autoup=false</span><br><span class="line">	local need_upgrade=false</span><br><span class="line">	local need_clean=false</span><br><span class="line">	local need_verbose=false</span><br><span class="line">	local _line=$&#123;BASH_LINENO[0]&#125;</span><br><span class="line">	local _function=$&#123;FUNCNAME[1]&#125;</span><br><span class="line">	local _file=$(basename &quot;$&#123;BASH_SOURCE[1]&#125;&quot;)</span><br><span class="line">	local tmp_file=$(mktemp /tmp/install_log_XXXXX)</span><br><span class="line">	export DEBIAN_FRONTEND=noninteractive</span><br><span class="line"></span><br><span class="line">	list=$(</span><br><span class="line">	for p in $*;do</span><br><span class="line">		case $p in</span><br><span class="line">			autoupdate) need_autoup=true; continue ;;</span><br><span class="line">			upgrade) need_upgrade=true; continue ;;</span><br><span class="line">			clean) need_clean=true; continue ;;</span><br><span class="line">			verbose) need_verbose=true; continue ;;</span><br><span class="line">			\||\(*|*\)) continue ;;</span><br><span class="line">		esac</span><br><span class="line">		echo &quot; $p&quot;</span><br><span class="line">	done</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	if [ -d $(dirname $LOG_OUTPUT_FILE) ]; then</span><br><span class="line">		log_file=$&#123;LOG_OUTPUT_FILE&#125;</span><br><span class="line">	else</span><br><span class="line">		log_file=&quot;$&#123;SRC&#125;/output/$&#123;LOG_SUBPATH&#125;/install.log&quot;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">This is necessary first when there is no apt cache.</span></span></span><br><span class="line">	if $need_upgrade; then</span><br><span class="line">		apt-get -q update || echo &quot;apt cannot update&quot; &gt;&gt;$tmp_file</span><br><span class="line">		apt-get -y upgrade || echo &quot;apt cannot upgrade&quot; &gt;&gt;$tmp_file</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">If the package is not installed, check the latest</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">up-to-date version in the apt cache.</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Exclude bad package names and send a message to the log.</span></span></span><br><span class="line">	for_install=$(</span><br><span class="line">	for p in $list;do</span><br><span class="line">	  if $(dpkg-query -W -f &#x27;$&#123;db:Status-Abbrev&#125;&#x27; $p |&amp; awk &#x27;/ii/&#123;exit 1&#125;&#x27;);then</span><br><span class="line">		apt-cache  show $p -o APT::Cache::AllVersions=no |&amp; \</span><br><span class="line">		awk -v p=$p -v tmp_file=$tmp_file \</span><br><span class="line">		&#x27;/^Package:/&#123;print $2&#125; /^E:/&#123;print &quot;Bad package name: &quot;,p &gt;&gt;tmp_file&#125;&#x27;</span><br><span class="line">	  fi</span><br><span class="line">	done</span><br><span class="line">	)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">This information should be logged.</span></span></span><br><span class="line">	if [ -s $tmp_file ]; then</span><br><span class="line">		echo -e &quot;\nInstalling packages in function: $_function&quot; &quot;[$_file:$_line]&quot; \</span><br><span class="line"><span class="meta prompt_">		&gt;</span><span class="language-bash"><span class="string">&gt;$log_file</span></span></span><br><span class="line">		echo -e &quot;\nIncoming list:&quot; &gt;&gt;$log_file</span><br><span class="line">		printf &quot;%-30s %-30s %-30s %-30s\n&quot; $list &gt;&gt;$log_file</span><br><span class="line">		echo &quot;&quot; &gt;&gt;$log_file</span><br><span class="line">		cat $tmp_file &gt;&gt;$log_file</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [ -n &quot;$for_install&quot; ]; then</span><br><span class="line">		if $need_autoup; then</span><br><span class="line">			apt-get -q update</span><br><span class="line">			apt-get -y upgrade</span><br><span class="line">		fi</span><br><span class="line">		apt-get install -qq -y --no-install-recommends $for_install</span><br><span class="line">		echo -e &quot;\nPackages installed:&quot; &gt;&gt;$log_file</span><br><span class="line">		dpkg-query -W \</span><br><span class="line">		  -f &#x27;$&#123;binary:Package;-27&#125; $&#123;Version;-23&#125;\n&#x27; \</span><br><span class="line">		  $for_install &gt;&gt;$log_file</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">We will show the status after installation all listed</span></span></span><br><span class="line">	if $need_verbose; then</span><br><span class="line">		echo -e &quot;\nstatus after installation:&quot; &gt;&gt;$log_file</span><br><span class="line">		dpkg-query -W \</span><br><span class="line">		  -f &#x27;$&#123;binary:Package;-27&#125; $&#123;Version;-23&#125; [ $&#123;Status&#125; ]\n&#x27; \</span><br><span class="line">		  $list &gt;&gt;$log_file</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if $need_clean;then apt-get clean; fi</span><br><span class="line">	rm $tmp_file</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">prepare_host_basic</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># * installs only basic packages</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">prepare_host_basic()</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">command:package1 package2 ...</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">list of commands that are neeeded:packages where this command is</span></span></span><br><span class="line">	local check_pack install_pack</span><br><span class="line">	local checklist=(</span><br><span class="line">			&quot;whiptail:whiptail&quot;</span><br><span class="line">			&quot;dialog:dialog&quot;</span><br><span class="line">			&quot;fuser:psmisc&quot;</span><br><span class="line">			&quot;getfacl:acl&quot;</span><br><span class="line">			&quot;uuid:uuid uuid-runtime&quot;</span><br><span class="line">			&quot;curl:curl&quot;</span><br><span class="line">			&quot;gpg:gnupg&quot;</span><br><span class="line">			&quot;gawk:gawk&quot;</span><br><span class="line">			&quot;git:git&quot;</span><br><span class="line">			)</span><br><span class="line"></span><br><span class="line">	for check_pack in &quot;$&#123;checklist[@]&#125;&quot;; do</span><br><span class="line">	        if ! which $&#123;check_pack%:*&#125; &gt;/dev/null; then local install_pack+=$&#123;check_pack#*:&#125;&quot; &quot;; fi</span><br><span class="line">	done</span><br><span class="line"></span><br><span class="line">	if [[ -n $install_pack ]]; then</span><br><span class="line">		display_alert &quot;Installing basic packages&quot; &quot;$install_pack&quot;</span><br><span class="line">		sudo bash -c &quot;apt-get -qq update &amp;&amp; apt-get install -qq -y --no-install-recommends $install_pack&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">prepare_host</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># * checks and installs necessary packages</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">* creates directory structure</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">* changes system settings</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">prepare_host()</span></span></span><br><span class="line">&#123;</span><br><span class="line">	display_alert &quot;Preparing&quot; &quot;host&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">The &#x27;</span>offline<span class="string">&#x27; variable must always be set to &#x27;</span><span class="literal">true</span><span class="string">&#x27; or &#x27;</span><span class="literal">false</span><span class="string">&#x27;</span></span></span><br><span class="line">	if [ &quot;$OFFLINE_WORK&quot; == &quot;yes&quot; ]; then</span><br><span class="line">		local offline=true</span><br><span class="line">	else</span><br><span class="line">		local offline=false</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">wait until package manager finishes possible system maintanace</span></span></span><br><span class="line">	wait_for_package_manager</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">fix for Locales settings</span></span></span><br><span class="line">	if ! grep -q &quot;^en_US.UT</span><br><span class="line">	-8 UTF-8&quot; /etc/locale.gen; then</span><br><span class="line">		sudo sed -i &#x27;s/# en_US.UTF-8/en_US.UTF-8/&#x27; /etc/locale.gen</span><br><span class="line">		sudo locale-gen</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	export LC_ALL=&quot;en_US.UTF-8&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">packages list for host</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">NOTE: please sync any changes here with the Dockerfile and Vagrantfile</span></span></span><br><span class="line"></span><br><span class="line">	local hostdeps=&quot;acl aptly aria2 bc binfmt-support bison btrfs-progs       \</span><br><span class="line">	build-essential  ca-certificates ccache cpio cryptsetup curl              \</span><br><span class="line">	debian-archive-keyring debian-keyring debootstrap device-tree-compiler    \</span><br><span class="line">	dialog dirmngr dosfstools dwarves f2fs-tools fakeroot flex gawk           \</span><br><span class="line">	gcc-arm-linux-gnueabihf gdisk gpg imagemagick jq kmod libbison-dev \</span><br><span class="line">	libc6-dev-armhf-cross libelf-dev libfdt-dev libfile-fcntllock-perl        \</span><br><span class="line">	libfl-dev liblz4-tool libncurses-dev libpython2.7-dev libssl-dev          \</span><br><span class="line">	libusb-1.0-0-dev linux-base locales lzop ncurses-base ncurses-term        \</span><br><span class="line">	nfs-kernel-server ntpdate p7zip-full parted patchutils pigz pixz          \</span><br><span class="line">	pkg-config pv python3-dev python3-distutils qemu-user-static rsync swig   \</span><br><span class="line">	systemd-container u-boot-tools udev unzip uuid-dev wget whiptail zip      \</span><br><span class="line">	zlib1g-dev&quot;</span><br><span class="line"></span><br><span class="line">  if [[ $(dpkg --print-architecture) == amd64 ]]; then</span><br><span class="line"></span><br><span class="line">	hostdeps+=&quot; distcc lib32ncurses-dev lib32stdc++6 libc6-i386&quot;</span><br><span class="line">	grep -q i386 &lt;(dpkg --print-foreign-architectures) || dpkg --add-architecture i386</span><br><span class="line"></span><br><span class="line">  elif [[ $(dpkg --print-architecture) == arm64 ]]; then</span><br><span class="line"></span><br><span class="line">	hostdeps+=&quot; gcc-arm-linux-gnueabi gcc-arm-none-eabi libc6 libc6-amd64-cross qemu&quot;</span><br><span class="line"></span><br><span class="line">  else</span><br><span class="line"></span><br><span class="line">	display_alert &quot;Please read documentation to set up proper compilation environment&quot;</span><br><span class="line">	display_alert &quot;https://www.armbian.com/using-armbian-tools/&quot;</span><br><span class="line">	exit_with_error &quot;Running this tool on non x86_64 build host is not supported&quot;</span><br><span class="line"></span><br><span class="line">  fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Add support for Ubuntu 20.04, 21.04 and Mint 20.x</span></span></span><br><span class="line">	if [[ $HOSTRELEASE =~ ^(focal|hirsute|jammy|ulyana|ulyssa|bullseye|bookworm|uma)$ ]]; then</span><br><span class="line">		hostdeps+=&quot; python2 python3&quot;</span><br><span class="line">		ln -fs /usr/bin/python2.7 /usr/bin/python2</span><br><span class="line">		ln -fs /usr/bin/python2.7 /usr/bin/python</span><br><span class="line">	else</span><br><span class="line">		hostdeps+=&quot; python libpython-dev&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	display_alert &quot;Build host OS release&quot; &quot;$&#123;HOSTRELEASE:-(unknown)&#125;&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Ubuntu 21.04.x (Hirsute) x86_64 is the only fully supported host OS release</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Using Docker/VirtualBox/Vagrant is the only supported way to run the build script on other Linux distributions</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">	# NO_HOST_RELEASE_CHECK overrides the check for a supported host system</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Disable host OS check at your own risk. Any issues reported with unsupported releases will be closed without discussion</span></span></span><br><span class="line">	if [[ -z $HOSTRELEASE || &quot;focal jammy&quot; != *&quot;$HOSTRELEASE&quot;* ]]; then</span><br><span class="line">		if [[ $NO_HOST_RELEASE_CHECK == yes ]]; then</span><br><span class="line">			display_alert &quot;You are running on an unsupported system&quot; &quot;$&#123;HOSTRELEASE:-(unknown)&#125;&quot; &quot;wrn&quot;</span><br><span class="line">			display_alert &quot;Do not report any errors, warnings or other issues encountered beyond this point&quot; &quot;&quot; &quot;wrn&quot;</span><br><span class="line">		else</span><br><span class="line">			exit_with_error &quot;It seems you ignore documentation and run an unsupported build system: $&#123;HOSTRELEASE:-(unknown)&#125;&quot;</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if grep -qE &quot;(Microsoft|WSL)&quot; /proc/version; then</span><br><span class="line">		if [ -f /.dockerenv ]; then</span><br><span class="line">			display_alert &quot;Building images using Docker on WSL2 may fail&quot; &quot;&quot; &quot;wrn&quot;</span><br><span class="line">		else</span><br><span class="line">			exit_with_error &quot;Windows subsystem for Linux is not a supported build environment&quot;</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if systemd-detect-virt -q -c; then</span><br><span class="line">		display_alert &quot;Running in container&quot; &quot;$(systemd-detect-virt)&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">disable apt-cacher unless NO_APT_CACHER=no is not specified explicitly</span></span></span><br><span class="line">		if [[ $NO_APT_CACHER != no ]]; then</span><br><span class="line">			display_alert &quot;apt-cacher is disabled in containers, set NO_APT_CACHER=no to override&quot; &quot;&quot; &quot;wrn&quot;</span><br><span class="line">			NO_APT_CACHER=yes</span><br><span class="line">		fi</span><br><span class="line">		CONTAINER_COMPAT=yes</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">trying to use nested containers is not a good idea, so don&#x27;</span>t permit EXTERNAL_NEW=compile</span></span><br><span class="line">		if [[ $EXTERNAL_NEW == compile ]]; then</span><br><span class="line">			display_alert &quot;EXTERNAL_NEW=compile is not available when running in container, setting to prebuilt&quot; &quot;&quot; &quot;wrn&quot;</span><br><span class="line">			EXTERNAL_NEW=prebuilt</span><br><span class="line">		fi</span><br><span class="line">		SYNC_CLOCK=no</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Skip verification <span class="keyword">if</span> you are working offline</span></span><br><span class="line">	if ! $offline; then</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">warning: apt-cacher-ng will fail <span class="keyword">if</span> installed and used both on host and <span class="keyword">in</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">container/chroot environment with shared network</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="built_in">set</span> NO_APT_CACHER=<span class="built_in">yes</span> to prevent installation errors <span class="keyword">in</span> such <span class="keyword">case</span></span></span><br><span class="line">	if [[ $NO_APT_CACHER != yes ]]; then hostdeps+=&quot; apt-cacher-ng&quot;; fi</span><br><span class="line"></span><br><span class="line">	export EXTRA_BUILD_DEPS=&quot;&quot;</span><br><span class="line">	call_extension_method &quot;add_host_dependencies&quot; &lt;&lt;- &#x27;ADD_HOST_DEPENDENCIES&#x27;</span><br><span class="line">	*run before installing host dependencies*</span><br><span class="line">	you can add packages to install, space separated, to $&#123;EXTRA_BUILD_DEPS&#125; here.</span><br><span class="line">	ADD_HOST_DEPENDENCIES</span><br><span class="line"></span><br><span class="line">	if [ -n &quot;$&#123;EXTRA_BUILD_DEPS&#125;&quot; ]; then hostdeps+=&quot; $&#123;EXTRA_BUILD_DEPS&#125;&quot;; fi</span><br><span class="line"></span><br><span class="line">	display_alert &quot;Installing build dependencies&quot;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">don<span class="string">&#x27;t prompt for apt cacher selection</span></span></span><br><span class="line">	sudo echo &quot;apt-cacher-ng    apt-cacher-ng/tunnelenable      boolean false&quot; | sudo debconf-set-selections</span><br><span class="line"></span><br><span class="line">	LOG_OUTPUT_FILE=&quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/hostdeps.log</span><br><span class="line">	install_pkg_deb &quot;autoupdate $hostdeps&quot;</span><br><span class="line">	unset LOG_OUTPUT_FILE</span><br><span class="line"></span><br><span class="line">	update-ccache-symlinks</span><br><span class="line"></span><br><span class="line">	export FINAL_HOST_DEPS=&quot;$hostdeps $&#123;EXTRA_BUILD_DEPS&#125;&quot;</span><br><span class="line">	call_extension_method &quot;host_dependencies_ready&quot; &lt;&lt;- &#x27;HOST_DEPENDENCIES_READY&#x27;</span><br><span class="line">	*run after all host dependencies are installed*</span><br><span class="line">	At this point we can read `$&#123;FINAL_HOST_DEPS&#125;`, but changing won&#x27;t have any effect.</span><br><span class="line">	All the dependencies, including the default/core deps and the ones added via `$&#123;EXTRA_BUILD_DEPS&#125;`</span><br><span class="line">	are installed at this point. The system clock has not yet been synced.</span><br><span class="line">	HOST_DEPENDENCIES_READY</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">sync clock</span></span></span><br><span class="line">	if [[ $SYNC_CLOCK != no ]]; then</span><br><span class="line">		display_alert &quot;Syncing clock&quot; &quot;$&#123;NTP_SERVER:-pool.ntp.org&#125;&quot; &quot;info&quot;</span><br><span class="line">		ntpdate -s &quot;$&#123;NTP_SERVER:-pool.ntp.org&#125;&quot;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">create directory structure</span></span></span><br><span class="line">	mkdir -p $SRC/output $EXTER/cache $USERPATCHES_PATH</span><br><span class="line">	if [[ -n $SUDO_USER ]]; then</span><br><span class="line">		chgrp --quiet sudo cache output &quot;$&#123;USERPATCHES_PATH&#125;&quot;</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">SGID bit on cache/sources breaks kernel dpkg packaging</span></span></span><br><span class="line">		chmod --quiet g+w,g+s output &quot;$&#123;USERPATCHES_PATH&#125;&quot;</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">fix existing permissions</span></span></span><br><span class="line">		find &quot;$&#123;SRC&#125;&quot;/output &quot;$&#123;USERPATCHES_PATH&#125;&quot; -type d ! -group sudo -exec chgrp --quiet sudo &#123;&#125; \;</span><br><span class="line">		find &quot;$&#123;SRC&#125;&quot;/output &quot;$&#123;USERPATCHES_PATH&#125;&quot; -type d ! -perm -g+w,g+s -exec chmod --quiet g+w,g+s &#123;&#125; \;</span><br><span class="line">	fi</span><br><span class="line">	mkdir -p $DEST/debs/&#123;extra,u-boot&#125;  $DEST/&#123;config,debug,patch,images&#125; $USERPATCHES_PATH/overlay $EXTER/cache/&#123;debs,sources,hash&#125; $SRC/toolchains  $SRC/.tmp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">build aarch64</span></span></span><br><span class="line">	if [[ $(dpkg --print-architecture) == amd64 ]]; then</span><br><span class="line">		if [[ &quot;$&#123;SKIP_EXTERNAL_TOOLCHAINS&#125;&quot; != &quot;yes&quot; ]]; then</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">bind mount toolchain if defined</span></span></span><br><span class="line">			if [[ -d &quot;$&#123;ARMBIAN_CACHE_TOOLCHAIN_PATH&#125;&quot; ]]; then</span><br><span class="line">				mountpoint -q &quot;$&#123;SRC&#125;&quot;/cache/toolchain &amp;&amp; umount -l &quot;$&#123;SRC&#125;&quot;/cache/toolchain</span><br><span class="line">				mount --bind &quot;$&#123;ARMBIAN_CACHE_TOOLCHAIN_PATH&#125;&quot; &quot;$&#123;SRC&#125;&quot;/cache/toolchain</span><br><span class="line">			fi</span><br><span class="line"></span><br><span class="line">			display_alert &quot;Checking for external GCC compilers&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">download external Linaro compiler and missing special dependencies since they are needed for certain sources</span></span></span><br><span class="line"></span><br><span class="line">		local toolchains=(</span><br><span class="line">			&quot;gcc-linaro-aarch64-none-elf-4.8-2013.11_linux.tar.xz&quot;</span><br><span class="line">			&quot;gcc-linaro-arm-none-eabi-4.8-2014.04_linux.tar.xz&quot;</span><br><span class="line">			&quot;gcc-linaro-arm-linux-gnueabihf-4.8-2014.04_linux.tar.xz&quot;</span><br><span class="line">			&quot;gcc-linaro-4.9.4-2017.01-x86_64_arm-linux-gnueabi.tar.xz&quot;</span><br><span class="line">			&quot;gcc-linaro-4.9.4-2017.01-x86_64_aarch64-linux-gnu.tar.xz&quot;</span><br><span class="line">			&quot;gcc-linaro-5.5.0-2017.10-x86_64_arm-linux-gnueabihf.tar.xz&quot;</span><br><span class="line">			&quot;gcc-linaro-7.4.1-2019.02-x86_64_arm-linux-gnueabi.tar.xz&quot;</span><br><span class="line">			&quot;gcc-linaro-7.4.1-2019.02-x86_64_aarch64-linux-gnu.tar.xz&quot;</span><br><span class="line">			&quot;gcc-arm-9.2-2019.12-x86_64-arm-none-linux-gnueabihf.tar.xz&quot;</span><br><span class="line">			&quot;gcc-arm-9.2-2019.12-x86_64-aarch64-none-linux-gnu.tar.xz&quot;</span><br><span class="line">			&quot;gcc-arm-11.2-2022.02-x86_64-arm-none-linux-gnueabihf.tar.xz&quot;</span><br><span class="line">			&quot;gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu.tar.xz&quot;</span><br><span class="line">			)</span><br><span class="line"></span><br><span class="line">		USE_TORRENT_STATUS=$&#123;USE_TORRENT&#125;</span><br><span class="line">		USE_TORRENT=&quot;no&quot;</span><br><span class="line">		for toolchain in $&#123;toolchains[@]&#125;; do</span><br><span class="line">			download_and_verify &quot;_toolchain&quot; &quot;$&#123;toolchain##*/&#125;&quot;</span><br><span class="line">		done</span><br><span class="line">		USE_TORRENT=$&#123;USE_TORRENT_STATUS&#125;</span><br><span class="line"></span><br><span class="line">		rm -rf $SRC/toolchains/*.tar.xz*</span><br><span class="line">		local existing_dirs=( $(ls -1 $SRC/toolchains) )</span><br><span class="line">		for dir in $&#123;existing_dirs[@]&#125;; do</span><br><span class="line">			local found=no</span><br><span class="line">			for toolchain in $&#123;toolchains[@]&#125;; do</span><br><span class="line">				local filename=$&#123;toolchain##*/&#125;</span><br><span class="line">				local dirname=$&#123;filename//.tar.xz&#125;</span><br><span class="line">				[[ $dir == $dirname ]] &amp;&amp; found=yes</span><br><span class="line">			done</span><br><span class="line">			if [[ $found == no ]]; then</span><br><span class="line">				display_alert &quot;Removing obsolete toolchain&quot; &quot;$dir&quot;</span><br><span class="line">				rm -rf $SRC/toolchains/$dir</span><br><span class="line">			fi</span><br><span class="line">		done</span><br><span class="line">			else</span><br><span class="line">				display_alert &quot;Ignoring toolchains&quot; &quot;SKIP_EXTERNAL_TOOLCHAINS: $&#123;SKIP_EXTERNAL_TOOLCHAINS&#125;&quot; &quot;info&quot;</span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">	fi # check offline</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">enable arm binary format so that the cross-architecture chroot environment will work</span></span></span><br><span class="line">	if [[ $BUILD_OPT == &quot;image&quot; || $BUILD_OPT == &quot;rootfs&quot; ]]; then</span><br><span class="line">		modprobe -q binfmt_misc</span><br><span class="line">		mountpoint -q /proc/sys/fs/binfmt_misc/ || mount binfmt_misc -t binfmt_misc /proc/sys/fs/binfmt_misc</span><br><span class="line">		if [[ &quot;$(arch)&quot; != &quot;aarch64&quot; ]]; then</span><br><span class="line">			test -e /proc/sys/fs/binfmt_misc/qemu-arm || update-binfmts --enable qemu-arm</span><br><span class="line">			test -e /proc/sys/fs/binfmt_misc/qemu-aarch64 || update-binfmts --enable qemu-aarch64</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	[[ ! -f &quot;$&#123;USERPATCHES_PATH&#125;&quot;/customize-image.sh ]] &amp;&amp; cp &quot;$&#123;EXTER&#125;&quot;/config/templates/customize-image.sh.template &quot;$&#123;USERPATCHES_PATH&#125;&quot;/customize-image.sh</span><br><span class="line"></span><br><span class="line">	if [[ ! -f &quot;$&#123;USERPATCHES_PATH&#125;&quot;/README ]]; then</span><br><span class="line">		rm -f &quot;$&#123;USERPATCHES_PATH&#125;&quot;/readme.txt</span><br><span class="line">		echo &#x27;Please read documentation about customizing build configuration&#x27; &gt; &quot;$&#123;USERPATCHES_PATH&#125;&quot;/README</span><br><span class="line">		echo &#x27;https:/www.orangepi.org&#x27; &gt;&gt; &quot;$&#123;USERPATCHES_PATH&#125;&quot;/README</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">create patches directory structure under USERPATCHES_PATH</span></span></span><br><span class="line">		find $EXTER/patch -maxdepth 2 -type d ! -name . | sed &quot;s%/.*patch%/$USERPATCHES_PATH%&quot; | xargs mkdir -p</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">check free space (basic)</span></span></span><br><span class="line">	local freespace=$(findmnt --target &quot;$&#123;SRC&#125;&quot; -n -o AVAIL -b 2&gt;/dev/null) # in bytes</span><br><span class="line">	if [[ -n $freespace &amp;&amp; $(( $freespace / 1073741824 )) -lt 10 ]]; then</span><br><span class="line">		display_alert &quot;Low free space left&quot; &quot;$(( $freespace / 1073741824 )) GiB&quot; &quot;wrn&quot;</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">pause here since dialog-based menu will hide this message otherwise</span></span></span><br><span class="line">		echo -e &quot;Press \e[0;33m&lt;Ctrl-C&gt;\x1B[0m to abort compilation, \e[0;33m&lt;Enter&gt;\x1B[0m to ignore and continue&quot;</span><br><span class="line">		read</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function webseed ()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">list of mirrors that host our files</span></span></span><br><span class="line">	unset text</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Hardcoded to EU mirrors since</span></span></span><br><span class="line">	local CCODE=$(curl -s redirect.armbian.com/geoip | jq &#x27;.continent.code&#x27; -r)</span><br><span class="line">	WEBSEED=($(curl -s https://redirect.armbian.com/mirrors | jq -r &#x27;.&#x27;$&#123;CCODE&#125;&#x27; | .[] | values&#x27;))</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">aria2 simply split chunks based on sources count not depending on download speed</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">when selecting china mirrors, use only China mirror, others are very slow there</span></span></span><br><span class="line">	if [[ $DOWNLOAD_MIRROR == china ]]; then</span><br><span class="line">		WEBSEED=(</span><br><span class="line">		https://mirrors.tuna.tsinghua.edu.cn/armbian-releases/</span><br><span class="line">		)</span><br><span class="line">	elif [[ $DOWNLOAD_MIRROR == bfsu ]]; then</span><br><span class="line">		WEBSEED=(</span><br><span class="line">		https://mirrors.bfsu.edu.cn/armbian-releases/</span><br><span class="line">		)</span><br><span class="line">	fi</span><br><span class="line">	for toolchain in $&#123;WEBSEED[@]&#125;; do</span><br><span class="line">		text=&quot;$&#123;text&#125; $&#123;toolchain&#125;$&#123;1&#125;&quot;</span><br><span class="line">	done</span><br><span class="line">	text=&quot;$&#123;text:1&#125;&quot;</span><br><span class="line">	echo &quot;$&#123;text&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">download_and_verify()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	local remotedir=$1</span><br><span class="line">	local filename=$2</span><br><span class="line">	local localdir=$SRC/toolchains</span><br><span class="line">	local dirname=$&#123;filename//.tar.xz&#125;</span><br><span class="line"></span><br><span class="line">        if [[ $DOWNLOAD_MIRROR == china ]]; then</span><br><span class="line">			local server=&quot;https://mirrors.tuna.tsinghua.edu.cn/armbian-releases/&quot;</span><br><span class="line">		elif [[ $DOWNLOAD_MIRROR == bfsu ]]; then</span><br><span class="line">			local server=&quot;https://mirrors.bfsu.edu.cn/armbian-releases/&quot;</span><br><span class="line">		else</span><br><span class="line">			local server=$&#123;ARMBIAN_MIRROR&#125;</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">	if [[ -f $&#123;localdir&#125;/$&#123;dirname&#125;/.download-complete ]]; then</span><br><span class="line">		return</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">switch to china mirror if US timeouts</span></span></span><br><span class="line">	timeout 10 curl --head --fail --silent $&#123;server&#125;$&#123;remotedir&#125;/$&#123;filename&#125; 2&gt;&amp;1 &gt;/dev/null</span><br><span class="line">	if [[ $? -ne 7 &amp;&amp; $? -ne 22 &amp;&amp; $? -ne 0 ]]; then</span><br><span class="line">		display_alert &quot;Timeout from $server&quot; &quot;retrying&quot; &quot;info&quot;</span><br><span class="line">		server=&quot;https://mirrors.tuna.tsinghua.edu.cn/armbian-releases/&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">switch to another china mirror if tuna timeouts</span></span></span><br><span class="line">		timeout 10 curl --head --fail --silent $&#123;server&#125;$&#123;remotedir&#125;/$&#123;filename&#125; 2&gt;&amp;1 &gt;/dev/null</span><br><span class="line">		if [[ $? -ne 7 &amp;&amp; $? -ne 22 &amp;&amp; $? -ne 0 ]]; then</span><br><span class="line">			display_alert &quot;Timeout from $server&quot; &quot;retrying&quot; &quot;info&quot;</span><br><span class="line">			server=&quot;https://mirrors.bfsu.edu.cn/armbian-releases/&quot;</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">check if file exists on remote server before running aria2 downloader</span></span></span><br><span class="line">	[[ ! `timeout 10 curl --head --fail --silent $&#123;server&#125;$&#123;remotedir&#125;/$&#123;filename&#125;` ]] &amp;&amp; return</span><br><span class="line"></span><br><span class="line">	cd &quot;$&#123;localdir&#125;&quot; || exit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">use local control file</span></span></span><br><span class="line">	if [[ -f &quot;$&#123;EXTER&#125;&quot;/config/torrents/$&#123;filename&#125;.asc ]]; then</span><br><span class="line">		local torrent=&quot;$&#123;EXTER&#125;&quot;/config/torrents/$&#123;filename&#125;.torrent</span><br><span class="line">		ln -sf &quot;$&#123;EXTER&#125;/config/torrents/$&#123;filename&#125;.asc&quot; &quot;$&#123;localdir&#125;/$&#123;filename&#125;.asc&quot;</span><br><span class="line">	elif [[ ! `timeout 10 curl --head --fail --silent &quot;$&#123;server&#125;$&#123;remotedir&#125;/$&#123;filename&#125;.asc&quot;` ]]; then</span><br><span class="line">		return</span><br><span class="line">	else</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">download control file</span></span></span><br><span class="line">		local torrent=$&#123;server&#125;$remotedir/$&#123;filename&#125;.torrent</span><br><span class="line">		aria2c --download-result=hide --disable-ipv6=true --summary-interval=0 --console-log-level=error --auto-file-renaming=false \</span><br><span class="line">		--continue=false --allow-overwrite=true --dir=&quot;$&#123;localdir&#125;&quot; $&#123;server&#125;$&#123;remotedir&#125;/$&#123;filename&#125;.asc $(webseed &quot;$remotedir/$&#123;filename&#125;.asc&quot;) -o &quot;$&#123;filename&#125;.asc&quot;</span><br><span class="line">		[[ $? -ne 0 ]] &amp;&amp; display_alert &quot;Failed to download control file&quot; &quot;&quot; &quot;wrn&quot;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">download torrent first</span></span></span><br><span class="line">	if [[ $&#123;USE_TORRENT&#125; == &quot;yes&quot; ]]; then</span><br><span class="line"></span><br><span class="line">		display_alert &quot;downloading using torrent network&quot; &quot;$filename&quot;</span><br><span class="line">		local ariatorrent=&quot;--summary-interval=0 --auto-save-interval=0 --seed-time=0 --bt-stop-timeout=120 --console-log-level=error \</span><br><span class="line">		--allow-overwrite=true --download-result=hide --rpc-save-upload-metadata=false --auto-file-renaming=false \</span><br><span class="line">		--file-allocation=trunc --continue=true $&#123;torrent&#125; \</span><br><span class="line">		--dht-file-path=$EXTER/cache/.aria2/dht.dat --disable-ipv6=true --stderr --follow-torrent=mem --dir=$&#123;localdir&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">exception. It throws error if dht.dat file does not exists. Error suppress needed only at first download.</span></span></span><br><span class="line">		if [[ -f $EXTER/cache/.aria2/dht.dat ]]; then</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">shellcheck disable=SC2086</span></span></span><br><span class="line">			aria2c $&#123;ariatorrent&#125;</span><br><span class="line">		else</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">shellcheck disable=SC2035</span></span></span><br><span class="line">			aria2c $&#123;ariatorrent&#125; &amp;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/torrent.log</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">mark complete</span></span></span><br><span class="line">		[[ $? -eq 0 ]] &amp;&amp; touch &quot;$&#123;localdir&#125;/$&#123;filename&#125;.complete&quot;</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">direct download if torrent fails</span></span></span><br><span class="line">	if [[ ! -f &quot;$&#123;localdir&#125;/$&#123;filename&#125;.complete&quot; ]]; then</span><br><span class="line">		if [[ ! `timeout 10 curl --head --fail --silent $&#123;server&#125;$&#123;remotedir&#125;/$&#123;filename&#125; 2&gt;&amp;1 &gt;/dev/null` ]]; then</span><br><span class="line">			display_alert &quot;downloading using http(s) network&quot; &quot;$filename&quot;</span><br><span class="line">			aria2c --download-result=hide --rpc-save-upload-metadata=false --console-log-level=error \</span><br><span class="line">			--dht-file-path=&quot;$&#123;SRC&#125;&quot;/cache/.aria2/dht.dat --disable-ipv6=true --summary-interval=0 --auto-file-renaming=false --dir=&quot;$&#123;localdir&#125;&quot; $&#123;server&#125;$&#123;remotedir&#125;/$&#123;filename&#125; $(webseed &quot;$&#123;remotedir&#125;/$&#123;filename&#125;&quot;) -o &quot;$&#123;filename&#125;&quot;</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">mark complete</span></span></span><br><span class="line">			[[ $? -eq 0 ]] &amp;&amp; touch &quot;$&#123;localdir&#125;/$&#123;filename&#125;.complete&quot; &amp;&amp; echo &quot;&quot;</span><br><span class="line"></span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ -f $&#123;localdir&#125;/$&#123;filename&#125;.asc ]]; then</span><br><span class="line"></span><br><span class="line">		if grep -q &#x27;BEGIN PGP SIGNATURE&#x27; &quot;$&#123;localdir&#125;/$&#123;filename&#125;.asc&quot;; then</span><br><span class="line"></span><br><span class="line">			if [[ ! -d $EXTER/cache/.gpg ]]; then</span><br><span class="line">				mkdir -p $EXTER/cache/.gpg</span><br><span class="line">				chmod 700 $EXTER/cache/.gpg</span><br><span class="line">				touch $EXTER/cache/.gpg/gpg.conf</span><br><span class="line">				chmod 600 $EXTER/cache/.gpg/gpg.conf</span><br><span class="line">			fi</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">Verify archives with Linaro and Armbian GPG keys</span></span></span><br><span class="line"></span><br><span class="line">			if [ x&quot;&quot; != x&quot;$&#123;http_proxy&#125;&quot; ]; then</span><br><span class="line">				(gpg --homedir &quot;$&#123;EXTER&#125;&quot;/cache/.gpg --no-permission-warning --list-keys 8F427EAF &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/output.log 2&gt;&amp;1\</span><br><span class="line">				 || gpg --homedir &quot;$&#123;EXTER&#125;&quot;/cache/.gpg --no-permission-warning \</span><br><span class="line">				--keyserver hkp://keyserver.ubuntu.com:80 --keyserver-options http-proxy=&quot;$&#123;http_proxy&#125;&quot; \</span><br><span class="line">				--recv-keys 8F427EAF &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/output.log 2&gt;&amp;1)</span><br><span class="line"></span><br><span class="line">				(gpg --homedir &quot;$&#123;EXTER&#125;&quot;/cache/.gpg --no-permission-warning --list-keys 9F0E78D5 &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/output.log 2&gt;&amp;1\</span><br><span class="line">				|| gpg --homedir &quot;$&#123;EXTER&#125;&quot;/cache/.gpg --no-permission-warning \</span><br><span class="line">				--keyserver hkp://keyserver.ubuntu.com:80 --keyserver-options http-proxy=&quot;$&#123;http_proxy&#125;&quot; \</span><br><span class="line">				--recv-keys 9F0E78D5 &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/output.log 2&gt;&amp;1)</span><br><span class="line">			else</span><br><span class="line">				(gpg --homedir &quot;$&#123;EXTER&#125;&quot;/cache/.gpg --no-permission-warning --list-keys 8F427EAF &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/output.log 2&gt;&amp;1\</span><br><span class="line">				 || gpg --homedir &quot;$&#123;EXTER&#125;&quot;/cache/.gpg --no-permission-warning \</span><br><span class="line">				--keyserver hkp://keyserver.ubuntu.com:80 \</span><br><span class="line">				--recv-keys 8F427EAF &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/output.log 2&gt;&amp;1)</span><br><span class="line"></span><br><span class="line">				(gpg --homedir &quot;$&#123;EXTER&#125;&quot;/cache/.gpg --no-permission-warning --list-keys 9F0E78D5 &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/output.log 2&gt;&amp;1\</span><br><span class="line">				|| gpg --homedir &quot;$&#123;EXTER&#125;&quot;/cache/.gpg --no-permission-warning \</span><br><span class="line">				--keyserver hkp://keyserver.ubuntu.com:80 \</span><br><span class="line">				--recv-keys 9F0E78D5 &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/output.log 2&gt;&amp;1)</span><br><span class="line">			fi</span><br><span class="line"></span><br><span class="line">			gpg --homedir &quot;$&#123;EXTER&#125;&quot;/cache/.gpg --no-permission-warning --verify \</span><br><span class="line">			--trust-model always -q &quot;$&#123;localdir&#125;/$&#123;filename&#125;.asc&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/output.log 2&gt;&amp;1</span><br><span class="line">			[[ $&#123;PIPESTATUS[0]&#125; -eq 0 ]] &amp;&amp; verified=true &amp;&amp; display_alert &quot;Verified&quot; &quot;PGP&quot; &quot;info&quot;</span><br><span class="line"></span><br><span class="line">		else</span><br><span class="line"></span><br><span class="line">			md5sum -c --status &quot;$&#123;localdir&#125;/$&#123;filename&#125;.asc&quot; &amp;&amp; verified=true &amp;&amp; display_alert &quot;Verified&quot; &quot;MD5&quot; &quot;info&quot;</span><br><span class="line"></span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		if [[ $verified == true ]]; then</span><br><span class="line">			if [[ &quot;$&#123;filename:(-6)&#125;&quot; == &quot;tar.xz&quot; ]]; then</span><br><span class="line"></span><br><span class="line">				display_alert &quot;decompressing&quot;</span><br><span class="line">				pv -p -b -r -c -N &quot;[ .... ] $&#123;filename&#125;&quot; &quot;$&#123;filename&#125;&quot; | xz -dc | tar xp --xattrs --no-same-owner --overwrite</span><br><span class="line">				[[ $? -eq 0 ]] &amp;&amp; touch &quot;$&#123;localdir&#125;/$&#123;dirname&#125;/.download-complete&quot;</span><br><span class="line">			fi</span><br><span class="line">		else</span><br><span class="line">			exit_with_error &quot;verification failed&quot;</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show_developer_warning()</span><br><span class="line">&#123;</span><br><span class="line">	local temp_rc</span><br><span class="line">	temp_rc=$(mktemp)</span><br><span class="line">	cat &lt;&lt;-&#x27;EOF&#x27; &gt; &quot;$&#123;temp_rc&#125;&quot;</span><br><span class="line">	screen_color = (WHITE,RED,ON)</span><br><span class="line">	EOF</span><br><span class="line">	local warn_text=&quot;You are switching to the \Z1EXPERT MODE\Zn</span><br><span class="line"></span><br><span class="line">	This allows building experimental configurations that are provided</span><br><span class="line">	\Z1AS IS\Zn to developers and expert users,</span><br><span class="line">	\Z1WITHOUT ANY RESPONSIBILITIES\Zn from the Armbian team:</span><br><span class="line"></span><br><span class="line">	- You are using these configurations \Z1AT YOUR OWN RISK\Zn</span><br><span class="line">	- Bug reports related to the dev kernel, CSC, WIP and EOS boards</span><br><span class="line">	\Z1will be closed without a discussion\Zn</span><br><span class="line">	- Forum posts related to dev kernel, CSC, WIP and EOS boards</span><br><span class="line">	should be created in the \Z2\&quot;Community forums\&quot;\Zn section</span><br><span class="line">	&quot;</span><br><span class="line">	DIALOGRC=$temp_rc dialog --title &quot;Expert mode warning&quot; --backtitle &quot;$&#123;backtitle&#125;&quot; --colors --defaultno --no-label &quot;I do not agree&quot; \</span><br><span class="line">		--yes-label &quot;I understand and agree&quot; --yesno &quot;$warn_text&quot; &quot;$&#123;TTY_Y&#125;&quot; &quot;$&#123;TTY_X&#125;&quot;</span><br><span class="line">	[[ $? -ne 0 ]] &amp;&amp; exit_with_error &quot;Error switching to the expert mode&quot;</span><br><span class="line">	SHOW_WARNING=no</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">is a formatted output of the values of variables</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">from the list at the place of the function call.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The LOG_OUTPUT_FILE variable must be defined in the calling function</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">before calling the `show_checklist_variables` function and unset after.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">show_checklist_variables ()</span></span></span><br><span class="line">&#123;</span><br><span class="line">	local checklist=$*</span><br><span class="line">	local var pval</span><br><span class="line">	local log_file=$&#123;LOG_OUTPUT_FILE:-&quot;$&#123;SRC&#125;&quot;/output/$&#123;LOG_SUBPATH&#125;/trash.log&#125;</span><br><span class="line">	local _line=$&#123;BASH_LINENO[0]&#125;</span><br><span class="line">	local _function=$&#123;FUNCNAME[1]&#125;</span><br><span class="line">	local _file=$(basename &quot;$&#123;BASH_SOURCE[1]&#125;&quot;)</span><br><span class="line"></span><br><span class="line">	echo -e &quot;Show variables in function: $_function&quot; &quot;[$_file:$_line]\n&quot; &gt;&gt;$log_file</span><br><span class="line"></span><br><span class="line">	for var in $checklist;do</span><br><span class="line">		eval pval=\$$var</span><br><span class="line">		echo -e &quot;\n$var =:&quot; &gt;&gt;$log_file</span><br><span class="line">		if [ $(echo &quot;$pval&quot; | awk -F&quot;/&quot; &#x27;&#123;print NF&#125;&#x27;) -ge 4 ];then</span><br><span class="line">			printf &quot;%s\n&quot; $pval &gt;&gt;$log_file</span><br><span class="line">		else</span><br><span class="line">			printf &quot;%-30s %-30s %-30s %-30s\n&quot; $pval &gt;&gt;$log_file</span><br><span class="line">		fi</span><br><span class="line">	done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install_wiringop()</span><br><span class="line">&#123;</span><br><span class="line">	install_deb_chroot &quot;$EXTER/cache/debs/arm64/wiringpi_2.51.deb&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;apt-mark hold wiringpi&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">	if [[ $&#123;IGNORE_UPDATES&#125; != yes ]]; then</span><br><span class="line"></span><br><span class="line">		fetch_from_repo &quot;https://github.com/orangepi-xunlong/wiringOP.git&quot; &quot;$&#123;EXTER&#125;/cache/sources/wiringOP&quot; &quot;branch:next&quot; &quot;yes&quot;</span><br><span class="line">		fetch_from_repo &quot;https://github.com/orangepi-xunlong/wiringOP-Python.git&quot; &quot;$&#123;EXTER&#125;/cache/sources/wiringOP-Python&quot; &quot;branch:next&quot; &quot;yes&quot;</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	cp $&#123;EXTER&#125;/cache/sources/wiringOP/next $&#123;SDCARD&#125;/usr/src/wiringOP -rfa</span><br><span class="line">	cp $&#123;EXTER&#125;/cache/sources/wiringOP-Python/next $&#123;SDCARD&#125;/usr/src/wiringOP-Python -rfa</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install_docker() &#123;</span><br><span class="line"></span><br><span class="line">	[[ $install_docker != yes ]] &amp;&amp; return</span><br><span class="line"></span><br><span class="line">	display_alert &quot;Installing&quot; &quot;docker&quot; &quot;info&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;apt-get install -y -qq apt-transport-https ca-certificates curl gnupg2 software-properties-common &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line"></span><br><span class="line">	case $&#123;RELEASE&#125; in</span><br><span class="line">		buster|bullseye|bookworm)</span><br><span class="line">		distributor_id=&quot;debian&quot;</span><br><span class="line">		;;</span><br><span class="line">		xenial|bionic|focal|jammy)</span><br><span class="line">		distributor_id=&quot;ubuntu&quot;</span><br><span class="line">		;;</span><br><span class="line">	esac</span><br><span class="line"></span><br><span class="line">	if [[ $&#123;SELECTED_CONFIGURATION&#125; == desktop ]]; then</span><br><span class="line">		mirror_url=https://repo.huaweicloud.com</span><br><span class="line">	else</span><br><span class="line">		mirror_url=https://mirrors.aliyun.com</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;curl -fsSL $&#123;mirror_url&#125;/docker-ce/linux/$&#123;distributor_id&#125;/gpg | apt-key add -&quot;</span><br><span class="line">	echo &quot;deb [arch=$&#123;ARCH&#125;] $&#123;mirror_url&#125;/docker-ce/linux/$&#123;distributor_id&#125; $&#123;RELEASE&#125; stable&quot; &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/apt/sources.list.d/docker.list</span><br><span class="line"></span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;apt-get update&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;apt-get install -y -qq docker-ce docker-ce-cli containerd.io&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;sudo groupadd docker&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;sudo usermod -aG docker $&#123;OPI_USERNAME&#125;&quot;</span><br><span class="line"></span><br><span class="line">	run_on_sdcard &quot;systemctl --no-reload disable docker.service&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="3mainsh分析"><a class="markdownIt-Anchor" href="#3mainsh分析"></a> 3.main.sh分析</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Copyright (c) 2013-2021 Igor Pecovnik, igor.pecovnik@gma**.com</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This file is licensed under the terms of the GNU General Public</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">License version 2. This program is licensed <span class="string">&quot;as is&quot;</span> without any</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">warranty of any kind, whether express or implied.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Main program</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"></span><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">函数，清理列表中的空白字符。</span></span><br><span class="line">cleanup_list() &#123;</span><br><span class="line">	local varname=&quot;$&#123;1&#125;&quot;</span><br><span class="line">	local list_to_clean=&quot;$&#123;!varname&#125;&quot;</span><br><span class="line">	list_to_clean=&quot;$&#123;list_to_clean#&quot;$&#123;list_to_clean%%[![:space:]]*&#125;&quot;&#125;&quot;</span><br><span class="line">	list_to_clean=&quot;$&#123;list_to_clean%&quot;$&#123;list_to_clean##*[![:space:]]&#125;&quot;&#125;&quot;</span><br><span class="line">	echo $&#123;list_to_clean&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不能是直接执行main.sh,而是要间接执行</span></span><br><span class="line">if [[ $(basename &quot;$0&quot;) == main.sh ]]; then</span><br><span class="line"></span><br><span class="line">	echo &quot;Please use build.sh to start the build process&quot;</span><br><span class="line">	exit 255</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">default <span class="built_in">umask</span> <span class="keyword">for</span> root is 022 so parent directories won<span class="string">&#x27;t be group writeable without this</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">this is used instead of making the chmod in prepare_host() recursive</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">通过修改根用户的 umask 值，可以确保在创建新的父目录时，组成员具有写权限，而不需要进行递归的权限更改操作。</span></span></span><br><span class="line">umask 002</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">destination 设置输出目录</span></span></span><br><span class="line">if [ -d &quot;$CONFIG_PATH/output&quot; ]; then</span><br><span class="line">	DEST=&quot;$&#123;CONFIG_PATH&#125;&quot;/output</span><br><span class="line">else</span><br><span class="line">	DEST=&quot;$&#123;SRC&#125;&quot;/output</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">设置版本号</span></span></span><br><span class="line">[[ -z $REVISION ]] &amp;&amp; REVISION=&quot;3.0.8&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">设置ntp时间</span></span></span><br><span class="line">[[ $DOWNLOAD_MIRROR == &quot;china&quot; ]] &amp;&amp; NTP_SERVER=&quot;cn.pool.ntp.org&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">开始绘制节目</span></span></span><br><span class="line">if [[ $BUILD_ALL != &quot;yes&quot; ]]; then</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">override stty size</span></span></span><br><span class="line">	[[ -n $COLUMNS ]] &amp;&amp; stty cols $COLUMNS</span><br><span class="line">	[[ -n $LINES ]] &amp;&amp; stty rows $LINES</span><br><span class="line">	TTY_X=$(($(stty size | awk &#x27;&#123;print $2&#125;&#x27;)-6)) 			# determine terminal width</span><br><span class="line">	TTY_Y=$(($(stty size | awk &#x27;&#123;print $1&#125;&#x27;)-6)) 			# determine terminal height</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">We&#x27;</span>ll use this title on all menus</span></span><br><span class="line">backtitle=&quot;Orange Pi building script, http://www.orangepi.org&quot; </span><br><span class="line">titlestr=&quot;Choose an option&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Warnings mitigation</span></span><br><span class="line">[[ -z $LANGUAGE ]] &amp;&amp; export LANGUAGE=&quot;en_US:en&quot;            # set to english if not set</span><br><span class="line">[[ -z $CONSOLE_CHAR ]] &amp;&amp; export CONSOLE_CHAR=&quot;UTF-8&quot;       # set console to UTF-8 if not set</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Libraries include</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">source</span>=debootstrap.sh</span></span><br><span class="line">source &quot;$&#123;SRC&#125;&quot;/scripts/debootstrap.sh	# system specific install 系统特定的安装脚本。</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">source</span>=image-helpers.sh</span></span><br><span class="line">source &quot;$&#123;SRC&#125;&quot;/scripts/image-helpers.sh	# helpers for OS image building  用于操作系统镜像构建的辅助函数脚本</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">source</span>=distributions.sh</span></span><br><span class="line">source &quot;$&#123;SRC&#125;&quot;/scripts/distributions.sh	# system specific install 系统特定的安装脚本</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">source</span>=desktop.sh</span></span><br><span class="line">source &quot;$&#123;SRC&#125;&quot;/scripts/desktop.sh		# desktop specific install  桌面环境特定的安装脚本</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">source</span>=compilation.sh</span></span><br><span class="line">source &quot;$&#123;SRC&#125;&quot;/scripts/compilation.sh	# patching and compilation of kernel, uboot, ATF 补丁和编译内核、uboot、ATF（Arm Trusted Firmware）的脚本</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">source</span>=compilation-prepare.sh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">source</span> <span class="string">&quot;<span class="variable">$&#123;SRC&#125;</span>&quot;</span>/scripts/compilation-prepare.sh	<span class="comment"># drivers that are not upstreamed 非上游驱动程序的脚本。</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">source</span>=makeboarddeb.sh</span></span><br><span class="line">source &quot;$&#123;SRC&#125;&quot;/scripts/makeboarddeb.sh		# board support package 用于构建板级支持软件包的脚本</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">source</span>=general.sh</span></span><br><span class="line">source &quot;$&#123;SRC&#125;&quot;/scripts/general.sh		# general functions  通用函数脚本</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">source</span>=chroot-buildpackages.sh</span></span><br><span class="line">source &quot;$&#123;SRC&#125;&quot;/scripts/chroot-buildpackages.sh	# chroot packages building  在 chroot 环境中构建软件包的脚本</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">source</span>=pack.sh</span></span><br><span class="line">source &quot;$&#123;SRC&#125;&quot;/scripts/pack-uboot.sh  打包 uboot 的脚本</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">set</span> <span class="built_in">log</span> path</span></span><br><span class="line">LOG_SUBPATH=$&#123;LOG_SUBPATH:=debug&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">compress and remove old logs</span></span><br><span class="line">mkdir -p &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;</span><br><span class="line">(cd &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125; &amp;&amp; tar -czf logs-&quot;$(&lt;timestamp)&quot;.tgz ./*.log) &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">rm -f &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/*.log &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">date +&quot;%d_%m_%Y-%H_%M_%S&quot; &gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/timestamp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">delete compressed logs older than 7 days</span></span><br><span class="line">(cd &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125; &amp;&amp; find . -name &#x27;*.tgz&#x27; -mtime +7 -delete) &gt; /dev/null</span><br><span class="line"></span><br><span class="line">if [[ $PROGRESS_DISPLAY == none ]]; then</span><br><span class="line"></span><br><span class="line">	OUTPUT_VERYSILENT=yes</span><br><span class="line"></span><br><span class="line">elif [[ $PROGRESS_DISPLAY == dialog ]]; then</span><br><span class="line"></span><br><span class="line">	OUTPUT_DIALOG=yes</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $PROGRESS_LOG_TO_FILE != yes ]]; then unset PROGRESS_LOG_TO_FILE; fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SHOW_WARNING=yes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [[ $USE_CCACHE != no ]]; then</span><br><span class="line"></span><br><span class="line">	CCACHE=ccache</span><br><span class="line">	export PATH=&quot;/usr/lib/ccache:$PATH&quot;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">private ccache directory to avoid permission issues when using build script with <span class="string">&quot;sudo&quot;</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">see https://ccache.samba.org/manual.html<span class="comment">#_sharing_a_cache for alternative solution</span></span></span><br><span class="line">	[[ $PRIVATE_CCACHE == yes ]] &amp;&amp; export CCACHE_DIR=$EXTER/cache/ccache</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line"></span><br><span class="line">	CCACHE=&quot;&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [[ -n $REPOSITORY_UPDATE ]]; then</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="keyword">select</span> stable/beta configuration</span></span><br><span class="line">		if [[ $BETA == yes ]]; then</span><br><span class="line">				DEB_STORAGE=$DEST/debs-beta</span><br><span class="line">				REPO_STORAGE=$DEST/repository-beta</span><br><span class="line">				REPO_CONFIG=&quot;aptly-beta.conf&quot;</span><br><span class="line">		else</span><br><span class="line">				DEB_STORAGE=$DEST/debs</span><br><span class="line">				REPO_STORAGE=$DEST/repository</span><br><span class="line">				REPO_CONFIG=&quot;aptly.conf&quot;</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">For user override</span></span><br><span class="line">		if [[ -f &quot;$&#123;USERPATCHES_PATH&#125;&quot;/lib.config ]]; then</span><br><span class="line">				display_alert &quot;Using user configuration override&quot; &quot;userpatches/lib.config&quot; &quot;info&quot;</span><br><span class="line">			source &quot;$&#123;USERPATCHES_PATH&#125;&quot;/lib.config</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		repo-manipulate &quot;$REPOSITORY_UPDATE&quot;</span><br><span class="line">		exit</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个选项数组 options，并为每个选项添加标签和描述 ，也就是执行之后进入的第一个界面，有4个选择，uboot 内核 文件系统和完整镜像，最后保存到BUILD_OPT</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">if</span> BUILD_OPT, KERNEL_CONFIGURE, BOARD, BRANCH or RELEASE are not <span class="built_in">set</span>, display selection menu</span></span><br><span class="line">if [[ -z $BUILD_OPT ]]; then</span><br><span class="line"></span><br><span class="line">	options+=(&quot;u-boot&quot;	 &quot;U-boot package&quot;)</span><br><span class="line">	options+=(&quot;kernel&quot;	 &quot;Kernel package&quot;)</span><br><span class="line">	options+=(&quot;rootfs&quot;	 &quot;Rootfs and all deb packages&quot;)</span><br><span class="line">	options+=(&quot;image&quot;	 &quot;Full OS image for flashing&quot;)</span><br><span class="line"></span><br><span class="line">	menustr=&quot;Compile image | rootfs | kernel | u-boot&quot;</span><br><span class="line">	BUILD_OPT=$(whiptail --title &quot;$&#123;titlestr&#125;&quot; --backtitle &quot;$&#123;backtitle&#125;&quot; --notags \</span><br><span class="line">			  --menu &quot;$&#123;menustr&#125;&quot; &quot;$&#123;TTY_Y&#125;&quot; &quot;$&#123;TTY_X&#125;&quot; $((TTY_Y - 8))  \</span><br><span class="line">			  --cancel-button Exit --ok-button Select &quot;$&#123;options[@]&#125;&quot; \</span><br><span class="line">			  3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)</span><br><span class="line"></span><br><span class="line">	unset options</span><br><span class="line">	[[ -z $BUILD_OPT ]] &amp;&amp; exit_with_error &quot;No option selected&quot;</span><br><span class="line">	[[ $BUILD_OPT == rootfs ]] &amp;&amp; ROOT_FS_CREATE_ONLY=&quot;yes&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">内核的选择，两个选择，最后保存到KERNEL_CONFIGURE</span></span><br><span class="line">if [[ $&#123;BUILD_OPT&#125; =~ kernel|image ]]; then</span><br><span class="line"></span><br><span class="line">	if [[ -z $KERNEL_CONFIGURE ]]; then</span><br><span class="line"></span><br><span class="line">		options+=(&quot;no&quot; &quot;Do not change the kernel configuration&quot;)</span><br><span class="line">		options+=(&quot;yes&quot; &quot;Show a kernel configuration menu before compilation&quot;)</span><br><span class="line"></span><br><span class="line">		menustr=&quot;Select the kernel configuration.&quot;</span><br><span class="line">		KERNEL_CONFIGURE=$(whiptail --title &quot;$&#123;titlestr&#125;&quot; --backtitle &quot;$backtitle&quot; --notags \</span><br><span class="line">						 --menu &quot;$&#123;menustr&#125;&quot; $TTY_Y $TTY_X $((TTY_Y - 8)) \</span><br><span class="line">						 --cancel-button Exit --ok-button Select &quot;$&#123;options[@]&#125;&quot; \</span><br><span class="line">						 3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)</span><br><span class="line"></span><br><span class="line">		unset options</span><br><span class="line">		[[ -z $KERNEL_CONFIGURE ]] &amp;&amp; exit_with_error &quot;No option selected&quot;</span><br><span class="line">	fi</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">板子的选择，我这里选择orangepi5b，最后保存到BOARD变量中</span></span><br><span class="line">if [[ -z $BOARD ]]; then</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepir1&quot;</span>			<span class="string">&quot;Allwinner H2+ quad core 256MB RAM WiFi SPI 2xETH&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepizero&quot;</span>		<span class="string">&quot;Allwinner H2+ quad core 256MB/512MB RAM WiFi SPI&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepipc&quot;</span>			<span class="string">&quot;Allwinner H3 quad core 1GB RAM&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepipcplus&quot;</span>		<span class="string">&quot;Allwinner H3 quad core 1GB RAM WiFi eMMC&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepione&quot;</span>			<span class="string">&quot;Allwinner H3 quad core 512MB RAM&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepilite&quot;</span>		<span class="string">&quot;Allwinner H3 quad core 512MB RAM WiFi&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepiplus&quot;</span>		<span class="string">&quot;Allwinner H3 quad core 1GB/2GB RAM WiFi GBE eMMC&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepiplus2e&quot;</span>		<span class="string">&quot;Allwinner H3 quad core 2GB RAM WiFi GBE eMMC&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepizeroplus2h3&quot;</span> 	<span class="string">&quot;Allwinner H3 quad core 512MB RAM WiFi/BT eMMC&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepipch5&quot;</span>                <span class="string">&quot;Allwinner H5 quad core 1GB RAM&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepipc2&quot;</span>			<span class="string">&quot;Allwinner H5 quad core 1GB RAM GBE SPI&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepioneh5&quot;</span>               <span class="string">&quot;Allwinner H5 quad core 512MB/1GB RAM&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepiprime&quot;</span>		<span class="string">&quot;Allwinner H5 quad core 2GB RAM GBE WiFi/BT&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepizeroplus&quot;</span>		<span class="string">&quot;Allwinner H5 quad core 512MB RAM GBE WiFi SPI&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepizeroplus2h5&quot;</span>		<span class="string">&quot;Allwinner H5 quad core 512MB RAM WiFi/BT eMMC&quot;</span>)</span></span><br><span class="line">	options+=(&quot;orangepi3&quot;			&quot;Allwinner H6 quad core 1GB/2GB RAM GBE WiFi/BT eMMC USB3&quot;)</span><br><span class="line">	options+=(&quot;orangepi3-lts&quot;		&quot;Allwinner H6 quad core 2GB RAM GBE WiFi/BT-AW859A eMMC USB3&quot;)</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepilite2&quot;</span>		<span class="string">&quot;Allwinner H6 quad core 1GB RAM WiFi/BT USB3&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepioneplus&quot;</span>		<span class="string">&quot;Allwinner H6 quad core 1GB RAM GBE&quot;</span>)</span></span><br><span class="line">	options+=(&quot;orangepizero2&quot;		&quot;Allwinner H616 quad core 512MB/1GB RAM WiFi/BT GBE SPI&quot;)</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepizero2-b&quot;</span>		<span class="string">&quot;Allwinner H616 quad core 512MB/1GB RAM WiFi/BT GBE SPI&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepizero2-lts&quot;</span>           <span class="string">&quot;Allwinner H616 quad core 1.5GB RAM WiFi/BT GBE SPI&quot;</span>)</span></span><br><span class="line">	options+=(&quot;orangepizero3&quot;		&quot;Allwinner H618 quad core 1GB/1.5GB/2GB/4GB RAM WiFi/BT GBE SPI&quot;)</span><br><span class="line">	options+=(&quot;orangepizero2w&quot;		&quot;Allwinner H618 quad core 1GB/1.5GB/2GB/4GB RAM WiFi/BT SPI&quot;)</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepir1b&quot;</span>			<span class="string">&quot;Allwinner H618 quad core 1.5GB/2GB/4GB RAM WiFi/BT GBE SPI&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepi400&quot;</span>			<span class="string">&quot;Allwinner H616 quad core 4GB RAM WiFi/BT GBE eMMC VGA&quot;</span>)</span></span><br><span class="line">	options+=(&quot;orangepi4&quot;                   &quot;Rockchip  RK3399 hexa core 4GB RAM GBE eMMC USB3 USB-C WiFi/BT&quot;)</span><br><span class="line">	options+=(&quot;orangepi4-lts&quot;                 &quot;Rockchip  RK3399 hexa core 4GB RAM GBE eMMC USB3 USB-C WiFi/BT&quot;)</span><br><span class="line">	options+=(&quot;orangepi800&quot;                 &quot;Rockchip  RK3399 hexa core 4GB RAM GBE eMMC USB3 USB-C WiFi/BT VGA&quot;)</span><br><span class="line">	options+=(&quot;orangepi5&quot;                 &quot;Rockchip  RK3588S octa core 4-16GB RAM GBE USB3 USB-C NVMe&quot;)</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepicm5&quot;</span>                 <span class="string">&quot;Rockchip  RK3588S octa core 4-16GB RAM GBE USB3 USB-C&quot;</span>)</span></span><br><span class="line">	options+=(&quot;orangepi5b&quot;                 &quot;Rockchip  RK3588S octa core 4-16GB RAM GBE USB3 USB-C WiFi/BT eMMC&quot;)</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepitab&quot;</span>                 <span class="string">&quot;Rockchip  RK3588S octa core 4-16GB RAM USB-C WiFi/BT NVMe&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepi900&quot;</span>                 <span class="string">&quot;Rockchip  RK3588 octa core 4-16GB RAM 2.5GBE USB3 USB-C WiFi/BT NVMe&quot;</span>)</span></span><br><span class="line">	options+=(&quot;orangepi5plus&quot;                 &quot;Rockchip  RK3588 octa core 4-32GB RAM 2.5GBE USB3 USB-C WiFi/BT NVMe eMMC&quot;)</span><br><span class="line">	options+=(&quot;orangepicm4&quot;                 &quot;Rockchip  RK3566 quad core 2-8GB RAM GBE eMMC USB3 NvMe WiFi/BT&quot;)</span><br><span class="line">	options+=(&quot;orangepi3b&quot;                  &quot;Rockchip  RK3566 quad core 2-8GB RAM GBE eMMC USB3 NvMe WiFi/BT&quot;)</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepir1plus&quot;</span>              <span class="string">&quot;Rockchip  RK3328 quad core 1GB RAM 2xGBE USB2 SPI&quot;</span>)</span></span><br><span class="line"></span><br><span class="line">	menustr=&quot;Please choose a Board.&quot;</span><br><span class="line">	BOARD=$(whiptail --title &quot;$&#123;titlestr&#125;&quot; --backtitle &quot;$&#123;backtitle&#125;&quot; \</span><br><span class="line">			  --menu &quot;$&#123;menustr&#125;&quot; &quot;$&#123;TTY_Y&#125;&quot; &quot;$&#123;TTY_X&#125;&quot; $((TTY_Y - 8))  \</span><br><span class="line">			  --cancel-button Exit --ok-button Select &quot;$&#123;options[@]&#125;&quot; \</span><br><span class="line">			  3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)</span><br><span class="line"></span><br><span class="line">	unset options</span><br><span class="line">	[[ -z $BOARD ]] &amp;&amp; exit_with_error &quot;No option selected&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">BOARD_TYPE=&quot;conf&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">source</span>=/dev/null</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">external/config/boards/orangepi5b.conf，类似于瑞芯微的环境配置文件，</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Rockchip RK3588s SoC</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">BOARD_NAME=<span class="string">&quot;Orange Pi 5B&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">BOARDFAMILY=<span class="string">&quot;rockchip-rk3588&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">BOOTCONFIG=<span class="string">&quot;orangepi_5b_defconfig&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">KERNEL_TARGET=<span class="string">&quot;legacy&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">BOOT_LOGO=<span class="string">&quot;desktop&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">BOOT_FDT_FILE=<span class="string">&quot;rockchip/rk3588s-orangepi-5b.dtb&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">BOOT_SCENARIO=<span class="string">&quot;spl-blobs&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">IMAGE_PARTITION_TABLE=<span class="string">&quot;gpt&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">BOOT_SUPPORT_SPI=<span class="string">&quot;yes&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SKIP_BOOTSPLASH=<span class="string">&quot;yes&quot;</span> <span class="comment"># Skip boot splash patch, conflicts with CONFIG_VT=yes</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">DISTRIB_TYPE_LEGACY=<span class="string">&quot;bullseye bookworm bionic focal jammy&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">BOOTFS_TYPE=<span class="string">&quot;fat&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">REVISION=<span class="string">&quot;1.0.8&quot;</span></span></span><br><span class="line"></span><br><span class="line">source &quot;$&#123;EXTER&#125;/config/boards/$&#123;BOARD&#125;.$&#123;BOARD_TYPE&#125;&quot;</span><br><span class="line">LINUXFAMILY=&quot;$&#123;BOARDFAMILY&#125;&quot;</span><br><span class="line"></span><br><span class="line">[[ -z $KERNEL_TARGET ]] &amp;&amp; exit_with_error &quot;Board configuration does not define valid kernel config&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这个没有进入，跳过</span></span><br><span class="line">if [[ -z $BRANCH ]]; then</span><br><span class="line"></span><br><span class="line">	options=()</span><br><span class="line">	[[ $KERNEL_TARGET == *current* ]] &amp;&amp; options+=(&quot;current&quot; &quot;Recommended. Come with best support&quot;)</span><br><span class="line">	[[ $KERNEL_TARGET == *legacy* ]] &amp;&amp; options+=(&quot;legacy&quot; &quot;Old stable / Legacy&quot;)</span><br><span class="line">	[[ $KERNEL_TARGET == *next* ]] &amp;&amp; options+=(&quot;next&quot; &quot;Use the latest kernel&quot;)</span><br><span class="line"></span><br><span class="line">	menustr=&quot;Select the target kernel branch\nExact kernel versions depend on selected board&quot;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="keyword">do</span> not display selection dialog <span class="keyword">if</span> only one kernel branch is available</span></span><br><span class="line">	if [[ &quot;$&#123;#options[@]&#125;&quot; == 2 ]]; then</span><br><span class="line">		BRANCH=&quot;$&#123;options[0]&#125;&quot;</span><br><span class="line">	else</span><br><span class="line">		BRANCH=$(whiptail --title &quot;$&#123;titlestr&#125;&quot; --backtitle &quot;$&#123;backtitle&#125;&quot; \</span><br><span class="line">				  --menu &quot;$&#123;menustr&#125;&quot; &quot;$&#123;TTY_Y&#125;&quot; &quot;$&#123;TTY_X&#125;&quot; $((TTY_Y - 8))  \</span><br><span class="line">				  --cancel-button Exit --ok-button Select &quot;$&#123;options[@]&#125;&quot; \</span><br><span class="line">				  3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)</span><br><span class="line">	fi</span><br><span class="line">	unset options</span><br><span class="line">	[[ -z $BRANCH ]] &amp;&amp; exit_with_error &quot;No kernel branch selected&quot;</span><br><span class="line">	[[ $BRANCH == dev &amp;&amp; $SHOW_WARNING == yes ]] &amp;&amp; show_developer_warning</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里没进入</span></span><br><span class="line">if [[ -z $&#123;MEM_TYPE&#125; &amp;&amp; $&#123;BOARD&#125; =~ orangepizero3|orangepir1b|orangepizero2w &amp;&amp; $&#123;BUILD_OPT&#125; =~ u-boot|image &amp;&amp; $&#123;BRANCH&#125; == next ]]; then</span><br><span class="line"></span><br><span class="line">	options+=(&quot;1500MB&quot;    &quot;1.5 GB Memory&quot;)</span><br><span class="line">	options+=(&quot;Others&quot;    &quot;1/2/4 GB Memory&quot;)</span><br><span class="line"></span><br><span class="line">	menustr=&quot;Please choose memory size for $&#123;BOARD&#125;.&quot;</span><br><span class="line">	MEM_TYPE=$(whiptail --title &quot;$&#123;titlestr&#125;&quot; --backtitle &quot;$&#123;backtitle&#125;&quot; \</span><br><span class="line">			  --menu &quot;$&#123;menustr&#125;&quot; &quot;$&#123;TTY_Y&#125;&quot; &quot;$&#123;TTY_X&#125;&quot; $((TTY_Y - 8))  \</span><br><span class="line">			  --cancel-button Exit --ok-button Select &quot;$&#123;options[@]&#125;&quot; \</span><br><span class="line">			  3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)</span><br><span class="line"></span><br><span class="line">	unset options</span><br><span class="line">	[[ -z $MEM_TYPE ]] &amp;&amp; exit_with_error &quot;No option selected&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里也没进入</span></span><br><span class="line">if [[ $BUILD_OPT =~ rootfs|image &amp;&amp; -z $RELEASE ]]; then</span><br><span class="line"></span><br><span class="line">	options=()</span><br><span class="line"></span><br><span class="line">	distros_options</span><br><span class="line"></span><br><span class="line">	menustr=&quot;Select the target OS release package base&quot;</span><br><span class="line">	RELEASE=$(whiptail --title &quot;Choose a release package base&quot; --backtitle &quot;$&#123;backtitle&#125;&quot; \</span><br><span class="line">			  --menu &quot;$&#123;menustr&#125;&quot; &quot;$&#123;TTY_Y&#125;&quot; &quot;$&#123;TTY_X&#125;&quot; $((TTY_Y - 8))  \</span><br><span class="line">			  --cancel-button Exit --ok-button Select &quot;$&#123;options[@]&#125;&quot; \</span><br><span class="line">			  3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;options : <span class="variable">$&#123;options&#125;</span>&quot;</span></span></span><br><span class="line">	[[ -z $RELEASE ]] &amp;&amp; exit_with_error &quot;No release selected&quot;</span><br><span class="line"></span><br><span class="line">	unset options</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择桌面端还是服务器端，保存到BUILD_DESKTOP变量中</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">don<span class="string">&#x27;t show desktop option if we choose minimal build</span></span></span><br><span class="line">[[ $BUILD_MINIMAL == yes ]] &amp;&amp; BUILD_DESKTOP=no</span><br><span class="line"></span><br><span class="line">if [[ $BUILD_OPT =~ rootfs|image &amp;&amp; -z $BUILD_DESKTOP ]]; then</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">read distribution support status which is written to the orangepi-release file</span></span></span><br><span class="line">	set_distribution_status</span><br><span class="line"></span><br><span class="line">	options=()</span><br><span class="line">	options+=(&quot;no&quot; &quot;Image with console interface (server)&quot;)</span><br><span class="line">	options+=(&quot;yes&quot; &quot;Image with desktop environment&quot;)</span><br><span class="line"></span><br><span class="line">	menustr=&quot;Select the target image type&quot;</span><br><span class="line">	BUILD_DESKTOP=$(whiptail --title &quot;Choose image type&quot; --backtitle &quot;$&#123;backtitle&#125;&quot; \</span><br><span class="line">			  --menu &quot;$&#123;menustr&#125;&quot; &quot;$&#123;TTY_Y&#125;&quot; &quot;$&#123;TTY_X&#125;&quot; $((TTY_Y - 8))  \</span><br><span class="line">			  --cancel-button Exit --ok-button Select &quot;$&#123;options[@]&#125;&quot; \</span><br><span class="line">			  3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)</span><br><span class="line">	unset options</span><br><span class="line">	[[ -z $BUILD_DESKTOP ]] &amp;&amp; exit_with_error &quot;No option selected&quot;</span><br><span class="line">	if [[ $&#123;BUILD_DESKTOP&#125; == &quot;yes&quot; ]]; then</span><br><span class="line">		BUILD_MINIMAL=no</span><br><span class="line">		SELECTED_CONFIGURATION=&quot;desktop&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">服务端的选择，我这里不会进入</span></span></span><br><span class="line">if [[ $BUILD_OPT =~ rootfs|image &amp;&amp; $BUILD_DESKTOP == no &amp;&amp; -z $BUILD_MINIMAL ]]; then</span><br><span class="line"></span><br><span class="line">	options=()</span><br><span class="line">	options+=(&quot;no&quot; &quot;Standard image with console interface&quot;)</span><br><span class="line">	options+=(&quot;yes&quot; &quot;Minimal image with console interface&quot;)</span><br><span class="line">	menustr=&quot;Select the target image type&quot;</span><br><span class="line">	BUILD_MINIMAL=$(whiptail --title &quot;Choose image type&quot; --backtitle &quot;$&#123;backtitle&#125;&quot; \</span><br><span class="line">			  --menu &quot;$&#123;menustr&#125;&quot; &quot;$&#123;TTY_Y&#125;&quot; &quot;$&#123;TTY_X&#125;&quot; $((TTY_Y - 8))  \</span><br><span class="line">			  --cancel-button Exit --ok-button Select &quot;$&#123;options[@]&#125;&quot; \</span><br><span class="line">			  3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)</span><br><span class="line">	unset options</span><br><span class="line">	[[ -z $BUILD_MINIMAL ]] &amp;&amp; exit_with_error &quot;No option selected&quot;</span><br><span class="line">	if [[ $BUILD_MINIMAL == &quot;yes&quot; ]]; then</span><br><span class="line">		SELECTED_CONFIGURATION=&quot;cli_minimal&quot;</span><br><span class="line">	else</span><br><span class="line">		SELECTED_CONFIGURATION=&quot;cli_standard&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">prevent conflicting setup</span></span></span><br><span class="line">if [[ $BUILD_DESKTOP == &quot;yes&quot; ]]; then</span><br><span class="line">	BUILD_MINIMAL=no</span><br><span class="line">	SELECTED_CONFIGURATION=&quot;desktop&quot;</span><br><span class="line">elif [[ $BUILD_MINIMAL != &quot;yes&quot; || -z &quot;$&#123;BUILD_MINIMAL&#125;&quot; ]]; then</span><br><span class="line">	BUILD_MINIMAL=no # Just in case BUILD_MINIMAL is not defined</span><br><span class="line">	BUILD_DESKTOP=no</span><br><span class="line">	SELECTED_CONFIGURATION=&quot;cli_standard&quot;</span><br><span class="line">elif [[ $BUILD_MINIMAL == &quot;yes&quot; ]]; then</span><br><span class="line">	BUILD_DESKTOP=no</span><br><span class="line">	SELECTED_CONFIGURATION=&quot;cli_minimal&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">[[ $&#123;KERNEL_CONFIGURE&#125; == prebuilt ]] &amp;&amp; [[ -z $&#123;REPOSITORY_INSTALL&#125; ]] &amp;&amp; \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">#REPOSITORY_INSTALL=&quot;u-boot,kernel,bsp,orangepi-zsh,orangepi-config,orangepi-firmware$&#123;BUILD_DESKTOP:+,orangepi-desktop&#125;&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">shellcheck source=configuration.sh</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">这个脚本可能有问题，具体看一下，也是一些配置，</span></span></span><br><span class="line">source &quot;$&#123;SRC&#125;&quot;/scripts/configuration.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">optimize build time with 100% CPU usage</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">获取CPU最大的线程数</span></span></span><br><span class="line">CPUS=$(grep -c &#x27;processor&#x27; /proc/cpuinfo)</span><br><span class="line">if [[ $USEALLCORES != no ]]; then</span><br><span class="line"></span><br><span class="line">	CTHREADS=&quot;-j$((CPUS + CPUS/2))&quot;</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line"></span><br><span class="line">	CTHREADS=&quot;-j1&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">call_extension_method &quot;post_determine_cthreads&quot; &quot;config_post_determine_cthreads&quot; &lt;&lt; &#x27;POST_DETERMINE_CTHREADS&#x27;</span><br><span class="line">*give config a chance modify CTHREADS programatically. A build server may work better with hyperthreads-1 for example.*</span><br><span class="line">Called early, before any compilation work starts.</span><br><span class="line">POST_DETERMINE_CTHREADS</span><br><span class="line"></span><br><span class="line">if [[ $BETA == yes ]]; then</span><br><span class="line">	IMAGE_TYPE=nightly</span><br><span class="line">elif [[ $BETA != &quot;yes&quot; &amp;&amp; $BUILD_ALL == yes &amp;&amp; -n $GPG_PASS ]]; then</span><br><span class="line">	IMAGE_TYPE=stable</span><br><span class="line">else</span><br><span class="line">	IMAGE_TYPE=user-built</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">branch2dir() &#123;</span><br><span class="line">	[[ &quot;$&#123;1&#125;&quot; == &quot;head&quot; ]] &amp;&amp; echo &quot;HEAD&quot; || echo &quot;$&#123;1##*:&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOTSOURCEDIR=&quot;$&#123;BOOTDIR&#125;/$(branch2dir &quot;$&#123;BOOTBRANCH&#125;&quot;)&quot;</span><br><span class="line">LINUXSOURCEDIR=&quot;$&#123;KERNELDIR&#125;/$(branch2dir &quot;$&#123;KERNELBRANCH&#125;&quot;)&quot;</span><br><span class="line">[[ -n $ATFSOURCE ]] &amp;&amp; ATFSOURCEDIR=&quot;$&#123;ATFDIR&#125;/$(branch2dir &quot;$&#123;ATFBRANCH&#125;&quot;)&quot;</span><br><span class="line"></span><br><span class="line">BSP_CLI_PACKAGE_NAME=&quot;orangepi-bsp-cli-$&#123;BOARD&#125;&quot;</span><br><span class="line">BSP_CLI_PACKAGE_FULLNAME=&quot;$&#123;BSP_CLI_PACKAGE_NAME&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;&quot;</span><br><span class="line">BSP_DESKTOP_PACKAGE_NAME=&quot;orangepi-bsp-desktop-$&#123;BOARD&#125;&quot;</span><br><span class="line">BSP_DESKTOP_PACKAGE_FULLNAME=&quot;$&#123;BSP_DESKTOP_PACKAGE_NAME&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;&quot;</span><br><span class="line"></span><br><span class="line">CHOSEN_UBOOT=linux-u-boot-$&#123;BRANCH&#125;-$&#123;BOARD&#125;</span><br><span class="line">CHOSEN_KERNEL=linux-image-$&#123;BRANCH&#125;-$&#123;LINUXFAMILY&#125;</span><br><span class="line">CHOSEN_ROOTFS=$&#123;BSP_CLI_PACKAGE_NAME&#125;</span><br><span class="line">CHOSEN_DESKTOP=orangepi-$&#123;RELEASE&#125;-desktop-$&#123;DESKTOP_ENVIRONMENT&#125;</span><br><span class="line">CHOSEN_KSRC=linux-source-$&#123;BRANCH&#125;-$&#123;LINUXFAMILY&#125;</span><br><span class="line"></span><br><span class="line">do_default() &#123;</span><br><span class="line"></span><br><span class="line">start=$(date +%s)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Check and install dependencies, directory structure and settings</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The OFFLINE_WORK variable inside the function</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">下载编译器等以及一些环境依赖</span></span></span><br><span class="line">prepare_host</span><br><span class="line"></span><br><span class="line">[[ &quot;$&#123;JUST_INIT&#125;&quot; == &quot;yes&quot; ]] &amp;&amp; exit 0</span><br><span class="line"></span><br><span class="line">[[ $CLEAN_LEVEL == *sources* ]] &amp;&amp; cleaning &quot;sources&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">fetch_from_repo &lt;url&gt; &lt;dir&gt; &lt;ref&gt; &lt;subdir_flag&gt;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">ignore updates help on building all images - for internal purposes</span></span></span><br><span class="line">if [[ $&#123;IGNORE_UPDATES&#125; != yes ]]; then</span><br><span class="line"></span><br><span class="line">	display_alert &quot;Downloading sources&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">同步uboot和内核</span></span></span><br><span class="line">	[[ $BUILD_OPT =~ u-boot|image ]] &amp;&amp; fetch_from_repo &quot;$BOOTSOURCE&quot; &quot;$BOOTDIR&quot; &quot;$BOOTBRANCH&quot; &quot;yes&quot;</span><br><span class="line">	[[ $BUILD_OPT =~ kernel|image ]] &amp;&amp; fetch_from_repo &quot;$KERNELSOURCE&quot; &quot;$KERNELDIR&quot; &quot;$KERNELBRANCH&quot; &quot;yes&quot;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">同步atfa</span></span></span><br><span class="line">	if [[ -n $&#123;ATFSOURCE&#125; ]]; then</span><br><span class="line"></span><br><span class="line">		[[ $&#123;BUILD_OPT&#125; =~ u-boot|image ]] &amp;&amp; fetch_from_repo &quot;$ATFSOURCE&quot; &quot;$&#123;EXTER&#125;/cache/sources/$ATFDIR&quot; &quot;$ATFBRANCH&quot; &quot;yes&quot;</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ $&#123;BOARD&#125; =~ orangepi4|orangepi4-lts|orangepi800 &amp;&amp; $BRANCH == legacy ]]; then</span><br><span class="line"></span><br><span class="line">		[[ $BUILD_OPT =~ image ]] &amp;&amp; fetch_from_repo &quot;https://github.com/orangepi-xunlong/rk3399_gst_xserver_libs.git&quot; &quot;$&#123;EXTER&#125;/cache/sources/rk3399_gst_xserver_libs&quot; &quot;branch:main&quot;</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ $&#123;BOARD&#125; =~ orangepi4|orangepi4-lts|orangepi800 &amp;&amp; $RELEASE =~ focal|buster|bullseye|bookworm ]]; then</span><br><span class="line"></span><br><span class="line">		[[ $&#123;BUILD_OPT&#125; == image ]] &amp;&amp; fetch_from_repo &quot;https://github.com/orangepi-xunlong/rk-rootfs-build.git&quot; &quot;$&#123;EXTER&#125;/cache/sources/rk-rootfs-build-$&#123;RELEASE&#125;&quot; &quot;branch:rk-rootfs-build-$&#123;RELEASE&#125;&quot;</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">同步3588的package</span></span></span><br><span class="line">	if [[ $&#123;BOARDFAMILY&#125; == &quot;rockchip-rk3588&quot; &amp;&amp; $RELEASE =~ bullseye|bookworm|focal|jammy|raspi ]]; then</span><br><span class="line"></span><br><span class="line">		[[ $&#123;BUILD_OPT&#125; == image ]] &amp;&amp; fetch_from_repo &quot;https://github.com/orangepi-xunlong/rk-rootfs-build.git&quot; &quot;$&#123;EXTER&#125;/cache/sources/rk3588_packages_$&#123;RELEASE&#125;&quot; &quot;branch:rk3588_packages_$&#123;RELEASE&#125;&quot;</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ $&#123;BOARDFAMILY&#125; == &quot;rockchip-rk356x&quot; &amp;&amp; $RELEASE =~ bullseye|focal|jammy|raspi ]]; then</span><br><span class="line"></span><br><span class="line">		[[ $&#123;BUILD_OPT&#125; == image ]] &amp;&amp; fetch_from_repo &quot;https://github.com/orangepi-xunlong/rk-rootfs-build.git&quot; &quot;$&#123;EXTER&#125;/cache/sources/rk356x_packages&quot; &quot;branch:rk356x_packages&quot;</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ $&#123;BOARD&#125; =~ orangepi3|orangepi3-lts &amp;&amp; $RELEASE =~ bullseye &amp;&amp; $BRANCH == current ]]; then</span><br><span class="line"></span><br><span class="line">		[[ $&#123;BUILD_OPT&#125; == image ]] &amp;&amp; fetch_from_repo &quot;https://github.com/orangepi-xunlong/rk-rootfs-build.git&quot; &quot;$&#123;EXTER&#125;/cache/sources/ffmpeg_kodi_$&#123;RELEASE&#125;&quot; &quot;branch:ffmpeg_kodi_$&#123;RELEASE&#125;&quot;</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ $&#123;BOARD&#125; =~ orangepi4|orangepi4-lts|orangepi800 &amp;&amp; $RELEASE =~ jammy &amp;&amp; $BRANCH == next ]]; then</span><br><span class="line"></span><br><span class="line">		[[ $&#123;BUILD_OPT&#125; == image ]] &amp;&amp; fetch_from_repo &quot;https://github.com/orangepi-xunlong/rk-rootfs-build.git&quot; &quot;$&#123;EXTER&#125;/cache/sources/ffmpeg_kodi_$&#123;RELEASE&#125;&quot; &quot;branch:ffmpeg_kodi_$&#123;RELEASE&#125;&quot;</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	call_extension_method &quot;fetch_sources_tools&quot;  &lt;&lt;- &#x27;FETCH_SOURCES_TOOLS&#x27;</span><br><span class="line">	*fetch host-side sources needed for tools and build*</span><br><span class="line">	Run early to fetch_from_repo or otherwise obtain sources for needed tools.</span><br><span class="line">	FETCH_SOURCES_TOOLS</span><br><span class="line"></span><br><span class="line">	call_extension_method &quot;build_host_tools&quot;  &lt;&lt;- &#x27;BUILD_HOST_TOOLS&#x27;</span><br><span class="line">	*build needed tools for the build, host-side*</span><br><span class="line">	After sources are fetched, build host-side tools needed for the build.</span><br><span class="line">	BUILD_HOST_TOOLS</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">for option in $(tr &#x27;,&#x27; &#x27; &#x27; &lt;&lt;&lt; &quot;$CLEAN_LEVEL&quot;); do</span><br><span class="line">	[[ $option != sources ]] &amp;&amp; cleaning &quot;$option&quot;</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Compile u-boot if packed .deb does not exist or use the one from Orange Pi</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">编译uboot</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">编译TF-a</span></span></span><br><span class="line">if [[ $BUILD_OPT == u-boot || $BUILD_OPT == image ]]; then</span><br><span class="line"></span><br><span class="line">	if [[ ! -f &quot;$&#123;DEB_STORAGE&#125;&quot;/u-boot/$&#123;CHOSEN_UBOOT&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb ]]; then</span><br><span class="line"></span><br><span class="line">		[[ -n &quot;$&#123;ATFSOURCE&#125;&quot; &amp;&amp; &quot;$&#123;REPOSITORY_INSTALL&#125;&quot; != *u-boot* ]] &amp;&amp; compile_atf</span><br><span class="line">		</span><br><span class="line">		[[ $&#123;REPOSITORY_INSTALL&#125; != *u-boot* ]] &amp;&amp; compile_uboot</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ $BUILD_OPT == &quot;u-boot&quot; ]]; then</span><br><span class="line">		unset BUILD_MINIMAL BUILD_DESKTOP COMPRESS_OUTPUTIMAGE</span><br><span class="line">		display_alert &quot;U-boot build done&quot; &quot;@host&quot; &quot;info&quot;</span><br><span class="line">		display_alert &quot;Target directory&quot; &quot;$&#123;DEB_STORAGE&#125;/u-boot&quot; &quot;info&quot;</span><br><span class="line">		display_alert &quot;File name&quot; &quot;$&#123;CHOSEN_UBOOT&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot; &quot;info&quot;</span><br><span class="line">	fi</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">编译内核</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Compile kernel if packed .deb does not exist or use the one from Orange Pi</span></span></span><br><span class="line">if [[ $BUILD_OPT == kernel || $BUILD_OPT == image ]]; then</span><br><span class="line"></span><br><span class="line">	if [[ ! -f $&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KERNEL&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb ]]; then </span><br><span class="line"></span><br><span class="line">		KDEB_CHANGELOG_DIST=$RELEASE</span><br><span class="line">		[[ &quot;$&#123;REPOSITORY_INSTALL&#125;&quot; != *kernel* ]] &amp;&amp; compile_kernel</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ $BUILD_OPT == &quot;kernel&quot; ]]; then</span><br><span class="line">		unset BUILD_MINIMAL BUILD_DESKTOP COMPRESS_OUTPUTIMAGE</span><br><span class="line">		display_alert &quot;Kernel build done&quot; &quot;@host&quot; &quot;info&quot;</span><br><span class="line">		display_alert &quot;Target directory&quot; &quot;$&#123;DEB_STORAGE&#125;/&quot; &quot;info&quot;</span><br><span class="line">		display_alert &quot;File name&quot; &quot;$&#123;CHOSEN_KERNEL&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot; &quot;info&quot;</span><br><span class="line">	fi</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">编译文件系统，这里是最重要的</span></span></span><br><span class="line">if [[ $BUILD_OPT == rootfs || $BUILD_OPT == image ]]; then</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Compile orangepi-config if packed .deb does not exist or use the one from Orange Pi</span></span></span><br><span class="line">	if [[ ! -f $&#123;DEB_STORAGE&#125;/orangepi-config_$&#123;REVISION&#125;_all.deb ]]; then</span><br><span class="line">	</span><br><span class="line">		[[ &quot;$&#123;REPOSITORY_INSTALL&#125;&quot; != *orangepi-config* ]] &amp;&amp; compile_orangepi-config</span><br><span class="line">	fi </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Compile orangepi-zsh if packed .deb does not exist or use the one from repository</span></span></span><br><span class="line">	if [[ ! -f $&#123;DEB_STORAGE&#125;/orangepi-zsh_$&#123;REVISION&#125;_all.deb ]]; then</span><br><span class="line"></span><br><span class="line">	        [[ &quot;$&#123;REPOSITORY_INSTALL&#125;&quot; != *orangepi-zsh* ]] &amp;&amp; compile_orangepi-zsh</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Compile plymouth-theme-orangepi if packed .deb does not exist or use the one from repository</span></span></span><br><span class="line">	if [[ ! -f $&#123;DEB_STORAGE&#125;/plymouth-theme-orangepi_$&#123;REVISION&#125;_all.deb ]]; then</span><br><span class="line"></span><br><span class="line">		[[ &quot;$&#123;REPOSITORY_INSTALL&#125;&quot; != *plymouth-theme-orangepi* ]] &amp;&amp; compile_plymouth-theme-orangepi</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Compile orangepi-firmware if packed .deb does not exist or use the one from repository</span></span></span><br><span class="line">	if [[ &quot;$&#123;REPOSITORY_INSTALL&#125;&quot; != *orangepi-firmware* ]]; then</span><br><span class="line"></span><br><span class="line">		if ! ls &quot;$&#123;DEB_STORAGE&#125;/orangepi-firmware_$&#123;REVISION&#125;_all.deb&quot; 1&gt; /dev/null 2&gt;&amp;1; then</span><br><span class="line"></span><br><span class="line">			FULL=&quot;&quot;</span><br><span class="line">			REPLACE=&quot;-full&quot;</span><br><span class="line">			compile_firmware</span><br><span class="line"></span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"><span class="string">if ! ls &quot;$&#123;DEB_STORAGE&#125;/orangepi-firmware-full_$&#123;REVISION&#125;_all.deb&quot; 1&gt; /dev/null 2&gt;&amp;1; then</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			#</span><span class="language-bash"><span class="string">FULL=&quot;-full&quot;</span></span></span><br><span class="line"><span class="meta prompt_">			#</span><span class="language-bash"><span class="string">REPLACE=&quot;&quot;</span></span></span><br><span class="line"><span class="meta prompt_">			#</span><span class="language-bash"><span class="string">compile_firmware</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"><span class="string">fi</span></span></span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	overlayfs_wrapper &quot;cleanup&quot;</span><br><span class="line"><span class="meta prompt_">	</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">create board support package</span></span></span><br><span class="line">	[[ -n $RELEASE &amp;&amp; ! -f $&#123;DEB_STORAGE&#125;/$RELEASE/$&#123;BSP_CLI_PACKAGE_FULLNAME&#125;.deb ]] &amp;&amp; create_board_package</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">create desktop package</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">[[ -n $RELEASE &amp;&amp; $DESKTOP_ENVIRONMENT &amp;&amp; ! -f $&#123;DEB_STORAGE&#125;/$RELEASE/$&#123;CHOSEN_DESKTOP&#125;_$&#123;REVISION&#125;_all.deb ]] &amp;&amp; create_desktop_package</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">[[ -n $RELEASE &amp;&amp; $DESKTOP_ENVIRONMENT &amp;&amp; ! -f $&#123;DEB_STORAGE&#125;/$&#123;RELEASE&#125;/$&#123;BSP_DESKTOP_PACKAGE_FULLNAME&#125;.deb ]] &amp;&amp; create_bsp_desktop_package</span></span></span><br><span class="line">	[[ -n $RELEASE &amp;&amp; $DESKTOP_ENVIRONMENT ]] &amp;&amp; create_desktop_package</span><br><span class="line">	[[ -n $RELEASE &amp;&amp; $DESKTOP_ENVIRONMENT ]] &amp;&amp; create_bsp_desktop_package</span><br><span class="line"><span class="meta prompt_">	</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">build additional packages</span></span></span><br><span class="line">	[[ $EXTERNAL_NEW == compile ]] &amp;&amp; chroot_build_packages</span><br><span class="line">	</span><br><span class="line">	[[ $BSP_BUILD != yes ]] &amp;&amp; debootstrap_ng</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">hook for function to run after build, i.e. to change owner of $SRC</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">NOTE: this will run only if there were no errors during build process</span></span></span><br><span class="line">[[ $(type -t run_after_build) == function ]] &amp;&amp; run_after_build || true</span><br><span class="line"></span><br><span class="line">end=$(date +%s)</span><br><span class="line">runtime=$(((end-start)/60))</span><br><span class="line">display_alert &quot;Runtime&quot; &quot;$runtime min&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Make it easy to repeat build by displaying build options used</span></span></span><br><span class="line">[ &quot;$(systemd-detect-virt)&quot; == &#x27;docker&#x27; ] &amp;&amp; BUILD_CONFIG=&#x27;docker&#x27;</span><br><span class="line"></span><br><span class="line">display_alert &quot;Repeat Build Options&quot; &quot;sudo ./build.sh $&#123;BUILD_CONFIG&#125; BOARD=$&#123;BOARD&#125; BRANCH=$&#123;BRANCH&#125; \</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="string">([[ -n $BUILD_OPT ]] &amp;&amp; echo &quot;BUILD_OPT=$&#123;BUILD_OPT&#125; &quot;)\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">$([[ -n $RELEASE ]] &amp;&amp; echo &quot;RELEASE=$&#123;RELEASE&#125; &quot;)\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">$([[ -n $BUILD_MINIMAL ]] &amp;&amp; echo &quot;BUILD_MINIMAL=$&#123;BUILD_MINIMAL&#125; &quot;)\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">$([[ -n $BUILD_DESKTOP ]] &amp;&amp; echo &quot;BUILD_DESKTOP=$&#123;BUILD_DESKTOP&#125; &quot;)\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">$([[ -n $KERNEL_CONFIGURE ]] &amp;&amp; echo &quot;KERNEL_CONFIGURE=$&#123;KERNEL_CONFIGURE&#125; &quot;)\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">$([[ -n $DESKTOP_ENVIRONMENT ]] &amp;&amp; echo &quot;DESKTOP_ENVIRONMENT=$&#123;DESKTOP_ENVIRONMENT&#125; &quot;)\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">$([[ -n $DESKTOP_ENVIRONMENT_CONFIG_NAME  ]] &amp;&amp; echo &quot;DESKTOP_ENVIRONMENT_CONFIG_NAME=$&#123;DESKTOP_ENVIRONMENT_CONFIG_NAME&#125; &quot;)\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">$([[ -n $DESKTOP_APPGROUPS_SELECTED ]] &amp;&amp; echo &quot;DESKTOP_APPGROUPS_SELECTED=\&quot;$&#123;DESKTOP_APPGROUPS_SELECTED&#125;\&quot; &quot;)\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">$([[ -n $DESKTOP_APT_FLAGS_SELECTED ]] &amp;&amp; echo &quot;DESKTOP_APT_FLAGS_SELECTED=\&quot;$&#123;DESKTOP_APT_FLAGS_SELECTED&#125;\&quot; &quot;)\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">$([[ -n $COMPRESS_OUTPUTIMAGE ]] &amp;&amp; echo &quot;COMPRESS_OUTPUTIMAGE=$&#123;COMPRESS_OUTPUTIMAGE&#125; &quot;)\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">&quot; &quot;ext&quot;</span></span></span><br><span class="line"></span><br><span class="line">&#125; # end of do_default()</span><br><span class="line"></span><br><span class="line">if [[ -z $1 ]]; then</span><br><span class="line">	do_default</span><br><span class="line">else</span><br><span class="line">	eval &quot;$@&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="4configurationsh分析"><a class="markdownIt-Anchor" href="#4configurationsh分析"></a> 4.configuration.sh分析</h1>
<p>看样子是配置一些环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Copyright (c) 2013-2021 Igor Pecovnik, igor.pecovnik@gma**.com</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This file is licensed under the terms of the GNU General Public</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">License version 2. This program is licensed <span class="string">&quot;as is&quot;</span> without any</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">warranty of any kind, whether express or implied.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[[ -z $VENDOR ]] &amp;&amp; VENDOR=&quot;Orange Pi&quot;</span><br><span class="line">[[ -z $ROOTPWD ]] &amp;&amp; ROOTPWD=&quot;orangepi&quot; # Must be changed @first login</span><br><span class="line">[[ -z $OPI_USERNAME ]] &amp;&amp; OPI_USERNAME=&quot;orangepi&quot; </span><br><span class="line">[[ -z $OPI_PWD ]] &amp;&amp; OPI_PWD=&quot;orangepi&quot; </span><br><span class="line">[[ -z $MAINTAINER ]] &amp;&amp; MAINTAINER=&quot;Orange Pi&quot; # deb signature</span><br><span class="line">[[ -z $MAINTAINERMAIL ]] &amp;&amp; MAINTAINERMAIL=&quot;leeboby@aliyun.com&quot; # deb signature</span><br><span class="line">[[ -z $DEB_COMPRESS ]] &amp;&amp; DEB_COMPRESS=&quot;xz&quot; # compress .debs with XZ by default. Use &#x27;none&#x27; for faster/larger builds</span><br><span class="line">TZDATA=$(cat /etc/timezone) # Timezone for target is taken from host or defined here.</span><br><span class="line">USEALLCORES=yes # Use all CPU cores for compiling</span><br><span class="line">HOSTRELEASE=$(cat /etc/os-release | grep VERSION_CODENAME | cut -d&quot;=&quot; -f2)</span><br><span class="line">[[ -z $HOSTRELEASE ]] &amp;&amp; HOSTRELEASE=$(cut -d&#x27;/&#x27; -f1 /etc/debian_version)</span><br><span class="line">[[ -z $EXIT_PATCHING_ERROR ]] &amp;&amp; EXIT_PATCHING_ERROR=&quot;&quot; # exit patching if failed</span><br><span class="line">[[ -z $HOST ]] &amp;&amp; HOST=&quot;$BOARD&quot; # set hostname to the board</span><br><span class="line">[[ -z $CHINA_DOWNLOAD_MIRROR ]] &amp;&amp; CHINA_DOWNLOAD_MIRROR=huawei</span><br><span class="line">cd &quot;$&#123;SRC&#125;&quot; || exit</span><br><span class="line">[[ -z &quot;$&#123;ROOTFSCACHE_VERSION&#125;&quot; ]] &amp;&amp; ROOTFSCACHE_VERSION=11</span><br><span class="line">[[ -z &quot;$&#123;CHROOT_CACHE_VERSION&#125;&quot; ]] &amp;&amp; CHROOT_CACHE_VERSION=7</span><br><span class="line">[[ -z $PLYMOUTH ]] &amp;&amp; PLYMOUTH=&quot;yes&quot;</span><br><span class="line"></span><br><span class="line">cd $&#123;SRC&#125;/scripts</span><br><span class="line">BUILD_REPOSITORY_URL=$(improved_git remote get-url $(improved_git remote 2&gt;/dev/null | grep origin) 2&gt;/dev/null)</span><br><span class="line">BUILD_REPOSITORY_COMMIT=$(improved_git describe --match=d_e_a_d_b_e_e_f --always --dirty 2&gt;/dev/null)</span><br><span class="line">ROOTFS_CACHE_MAX=200 # max number of rootfs cache, older ones will be cleaned up</span><br><span class="line"></span><br><span class="line">DEB_STORAGE=$DEST/debs</span><br><span class="line">DEB_ORANGEPI=$EXTER/cache/debs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">TODO: fixed name can<span class="string">&#x27;t be used for parallel image building</span></span></span><br><span class="line">ROOT_MAPPER=&quot;orangepi-root&quot;</span><br><span class="line">[[ -z $ROOTFS_TYPE ]] &amp;&amp; ROOTFS_TYPE=ext4 # default rootfs type is ext4</span><br><span class="line">[[ &quot;ext4 f2fs btrfs xfs nfs fel&quot; != *$ROOTFS_TYPE* ]] &amp;&amp; exit_with_error &quot;Unknown rootfs type&quot; &quot;$ROOTFS_TYPE&quot;</span><br><span class="line"></span><br><span class="line">[[ -z $BTRFS_COMPRESSION ]] &amp;&amp; BTRFS_COMPRESSION=zlib # default btrfs filesystem compression method is zlib</span><br><span class="line">[[ ! $BTRFS_COMPRESSION =~ zlib|lzo|zstd|none ]] &amp;&amp; exit_with_error &quot;Unknown btrfs compression method&quot; &quot;$BTRFS_COMPRESSION&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Fixed image size is in 1M dd blocks (MiB)</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">to get size of block device /dev/sdX execute as root:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">echo $(( $(blockdev --getsize64 /dev/sdX) / 1024 / 1024 ))</span></span></span><br><span class="line">[[ &quot;f2fs&quot; == *$ROOTFS_TYPE* &amp;&amp; -z $FIXED_IMAGE_SIZE ]] &amp;&amp; exit_with_error &quot;Please define FIXED_IMAGE_SIZE&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">a passphrase is mandatory if rootfs encryption is enabled</span></span></span><br><span class="line">if [[ $CRYPTROOT_ENABLE == yes &amp;&amp; -z $CRYPTROOT_PASSPHRASE ]]; then</span><br><span class="line">	exit_with_error &quot;Root encryption is enabled but CRYPTROOT_PASSPHRASE is not set&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">small SD card with kernel, boot script and .dtb/.bin files</span></span></span><br><span class="line">[[ $ROOTFS_TYPE == nfs ]] &amp;&amp; FIXED_IMAGE_SIZE=64</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Since we are having too many options for mirror management,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">then here is yet another mirror related option.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Respecting user&#x27;</span>s override <span class="keyword">in</span> <span class="keyword">case</span> a mirror is unreachable.</span></span><br><span class="line">case $REGIONAL_MIRROR in</span><br><span class="line">	china)</span><br><span class="line">		[[ -z $USE_MAINLINE_GOOGLE_MIRROR ]] &amp;&amp; [[ -z $MAINLINE_MIRROR ]] &amp;&amp; MAINLINE_MIRROR=tuna</span><br><span class="line">		[[ -z $USE_GITHUB_UBOOT_MIRROR ]] &amp;&amp; [[ -z $UBOOT_MIRROR ]] &amp;&amp; UBOOT_MIRROR=gitee</span><br><span class="line">		[[ -z $GITHUB_MIRROR ]] &amp;&amp; GITHUB_MIRROR=gitclone</span><br><span class="line">		[[ -z $DOWNLOAD_MIRROR ]] &amp;&amp; DOWNLOAD_MIRROR=china</span><br><span class="line">		;;</span><br><span class="line">	*)</span><br><span class="line">		;;</span><br><span class="line">esac</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">used by multiple sources - reduce code duplication</span></span><br><span class="line">[[ $USE_MAINLINE_GOOGLE_MIRROR == yes ]] &amp;&amp; MAINLINE_MIRROR=google</span><br><span class="line"></span><br><span class="line">case $MAINLINE_MIRROR in</span><br><span class="line">	google)</span><br><span class="line">		MAINLINE_KERNEL_SOURCE=&#x27;https://kernel.googlesource.com/pub/scm/linux/kernel/git/stable/linux-stable&#x27;</span><br><span class="line">		MAINLINE_FIRMWARE_SOURCE=&#x27;https://kernel.googlesource.com/pub/scm/linux/kernel/git/firmware/linux-firmware.git&#x27;</span><br><span class="line">		;;</span><br><span class="line">	tuna)</span><br><span class="line">		MAINLINE_KERNEL_SOURCE=&#x27;https://mirrors.tuna.tsinghua.edu.cn/git/linux-stable.git&#x27;</span><br><span class="line">		MAINLINE_FIRMWARE_SOURCE=&#x27;https://mirrors.tuna.tsinghua.edu.cn/git/linux-firmware.git&#x27;</span><br><span class="line">		;;</span><br><span class="line">	bfsu)</span><br><span class="line">		MAINLINE_KERNEL_SOURCE=&#x27;https://mirrors.bfsu.edu.cn/git/linux-stable.git&#x27;</span><br><span class="line">		MAINLINE_FIRMWARE_SOURCE=&#x27;https://mirrors.bfsu.edu.cn/git/linux-firmware.git&#x27;</span><br><span class="line">		;;</span><br><span class="line">	*)</span><br><span class="line">		MAINLINE_KERNEL_SOURCE=&#x27;git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git&#x27;</span><br><span class="line">		MAINLINE_FIRMWARE_SOURCE=&#x27;git://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git&#x27;</span><br><span class="line">		;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">MAINLINE_KERNEL_DIR=&quot;$SRC/kernel&quot;</span><br><span class="line"></span><br><span class="line">[[ $USE_GITHUB_UBOOT_MIRROR == yes ]] &amp;&amp; UBOOT_MIRROR=github</span><br><span class="line"></span><br><span class="line">case $UBOOT_MIRROR in</span><br><span class="line">	gitee)</span><br><span class="line">		MAINLINE_UBOOT_SOURCE=&#x27;https://github.com/orangepi-xunlong/u-boot-orangepi.git&#x27;</span><br><span class="line">		;;</span><br><span class="line">	github)</span><br><span class="line">		MAINLINE_UBOOT_SOURCE=&#x27;https://github.com/orangepi-xunlong/u-boot-orangepi.git&#x27;</span><br><span class="line">		;;</span><br><span class="line">	*)</span><br><span class="line">		MAINLINE_UBOOT_SOURCE=&#x27;https://source.denx.de/u-boot/u-boot.git&#x27;</span><br><span class="line">		;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">MAINLINE_UBOOT_DIR=&quot;$SRC/u-boot&quot;</span><br><span class="line"></span><br><span class="line">case $GITHUB_MIRROR in</span><br><span class="line">	fastgit)</span><br><span class="line">		GITHUB_SOURCE=&#x27;https://hub.fastgit.xyz&#x27;</span><br><span class="line">		;;</span><br><span class="line">	gitclone)</span><br><span class="line">		GITHUB_SOURCE=&#x27;https://gitclone.com/github.com&#x27;</span><br><span class="line">		;;</span><br><span class="line">	*)</span><br><span class="line">		GITHUB_SOURCE=&#x27;https://github.com&#x27;</span><br><span class="line">		;;</span><br><span class="line">esac</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Let<span class="string">&#x27;s set default data if not defined in board configuration above</span></span></span><br><span class="line">[[ -z $OFFSET ]] &amp;&amp; OFFSET=4 # offset to 1st partition (we use 4MiB boundaries by default)</span><br><span class="line">ARCH=armhf</span><br><span class="line">KERNEL_IMAGE_TYPE=zImage</span><br><span class="line">CAN_BUILD_STRETCH=yes</span><br><span class="line">ATF_COMPILE=yes</span><br><span class="line">[[ -z $CRYPTROOT_SSH_UNLOCK ]] &amp;&amp; CRYPTROOT_SSH_UNLOCK=yes</span><br><span class="line">[[ -z $CRYPTROOT_SSH_UNLOCK_PORT ]] &amp;&amp; CRYPTROOT_SSH_UNLOCK_PORT=2022</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Default to pdkdf2, this used to be the default with cryptroot &lt;= 2.0, however</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">cryptroot 2.1 changed that to Argon2i. Argon2i is a memory intensive</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">algorithm which doesn&#x27;</span>t play well with SBCs (need 1GiB RAM by default !)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://gitlab.com/cryptsetup/cryptsetup/-/issues/372</span></span><br><span class="line">[[ -z $CRYPTROOT_PARAMETERS ]] &amp;&amp; CRYPTROOT_PARAMETERS=&quot;--pbkdf pbkdf2&quot;</span><br><span class="line">[[ -z $WIREGUARD ]] &amp;&amp; WIREGUARD=&quot;no&quot;</span><br><span class="line">[[ -z $EXTRAWIFI ]] &amp;&amp; EXTRAWIFI=&quot;yes&quot;</span><br><span class="line">[[ -z $SKIP_BOOTSPLASH ]] &amp;&amp; SKIP_BOOTSPLASH=&quot;no&quot;</span><br><span class="line">[[ -z $AUFS ]] &amp;&amp; AUFS=&quot;yes&quot;</span><br><span class="line">[[ -z $IMAGE_PARTITION_TABLE ]] &amp;&amp; IMAGE_PARTITION_TABLE=&quot;msdos&quot;</span><br><span class="line">[[ -z $EXTRA_BSP_NAME ]] &amp;&amp; EXTRA_BSP_NAME=&quot;&quot;</span><br><span class="line">[[ -z $EXTRA_ROOTFS_MIB_SIZE ]] &amp;&amp; EXTRA_ROOTFS_MIB_SIZE=0</span><br><span class="line">[[ -z $BUILD_KSRC ]] &amp;&amp; BUILD_KSRC=&quot;no&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">single ext4 partition is the default and preferred configuration</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">BOOTFS_TYPE=<span class="string">&#x27;&#x27;</span></span></span><br><span class="line">[[ ! -f $&#123;EXTER&#125;/config/sources/families/$LINUXFAMILY.conf ]] &amp;&amp; \</span><br><span class="line">	exit_with_error &quot;Sources configuration not found&quot; &quot;$LINUXFAMILY&quot;</span><br><span class="line"></span><br><span class="line">source &quot;$&#123;EXTER&#125;/config/sources/families/$&#123;LINUXFAMILY&#125;.conf&quot;</span><br><span class="line"></span><br><span class="line">if [[ -f $USERPATCHES_PATH/sources/families/$LINUXFAMILY.conf ]]; then</span><br><span class="line">	display_alert &quot;Adding user provided $LINUXFAMILY overrides&quot;</span><br><span class="line">	source &quot;$USERPATCHES_PATH/sources/families/$&#123;LINUXFAMILY&#125;.conf&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">load architecture defaults</span></span><br><span class="line">source &quot;$&#123;EXTER&#125;/config/sources/$&#123;ARCH&#125;.conf&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Extensions: at this point we&#x27;ve sourced all the config files that will be used,</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#             and (hopefully) not yet invoked any extension methods. So this is the perfect</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#             place to initialize the extension manager. It will create functions</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#             like the &#x27;post_family_config&#x27; that is invoked below.</span></span></span><br><span class="line">initialize_extension_manager</span><br><span class="line"></span><br><span class="line">call_extension_method &quot;post_family_config&quot; &quot;config_tweaks_post_family_config&quot; &lt;&lt; &#x27;POST_FAMILY_CONFIG&#x27;</span><br><span class="line">*give the config a chance to override the family/arch defaults*</span><br><span class="line">This hook is called after the family configuration (`sources/families/xxx.conf`) is sourced.</span><br><span class="line">Since the family can override values from the user configuration and the board configuration,</span><br><span class="line">it is often used to in turn override those.</span><br><span class="line">POST_FAMILY_CONFIG</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Myy : Menu configuration <span class="keyword">for</span> choosing desktop configurations</span></span><br><span class="line"></span><br><span class="line">show_menu() &#123;</span><br><span class="line">	provided_title=$1</span><br><span class="line">	provided_backtitle=$2</span><br><span class="line">	provided_menuname=$3</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Myy : I don<span class="string">&#x27;t know why there&#x27;</span>s a TTY_Y - 8...</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;Provided title : <span class="variable">$provided_title</span>&quot;</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;Provided backtitle : <span class="variable">$provided_backtitle</span>&quot;</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;Provided menuname : <span class="variable">$provided_menuname</span>&quot;</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;Provided options : &quot;</span> <span class="string">&quot;<span class="variable">$&#123;@:4&#125;</span>&quot;</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;TTY X: <span class="variable">$TTY_X</span> Y: <span class="variable">$TTY_Y</span>&quot;</span></span></span><br><span class="line">	whiptail --title &quot;$&#123;provided_title&#125;&quot; --backtitle &quot;$&#123;provided_backtitle&#125;&quot; --notags \</span><br><span class="line">                          --menu &quot;$&#123;provided_menuname&#125;&quot; &quot;$&#123;TTY_Y&#125;&quot; &quot;$&#123;TTY_X&#125;&quot; $((TTY_Y - 8))  \</span><br><span class="line">			  &quot;$&#123;@:4&#125;&quot; \</span><br><span class="line">			  3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Myy : FIXME Factorize</span></span><br><span class="line">show_select_menu() &#123;</span><br><span class="line">	provided_title=$1</span><br><span class="line">	provided_backtitle=$2</span><br><span class="line">	provided_menuname=$3</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">dialog --stdout --title <span class="string">&quot;<span class="variable">$&#123;provided_title&#125;</span>&quot;</span> --backtitle <span class="string">&quot;<span class="variable">$&#123;provided_backtitle&#125;</span>&quot;</span> \</span></span><br><span class="line"><span class="language-bash">	<span class="comment">#--checklist &quot;$&#123;provided_menuname&#125;&quot; $TTY_Y $TTY_X $((TTY_Y - 8)) &quot;$&#123;@:4&#125;&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">whiptail --separate-output --title <span class="string">&quot;<span class="variable">$&#123;provided_title&#125;</span>&quot;</span> --backtitle <span class="string">&quot;<span class="variable">$&#123;provided_backtitle&#125;</span>&quot;</span> \</span></span><br><span class="line"><span class="language-bash">	<span class="comment">#                  --checklist &quot;$&#123;provided_menuname&#125;&quot; &quot;$&#123;TTY_Y&#125;&quot; &quot;$&#123;TTY_X&#125;&quot; $((TTY_Y - 8))  \</span></span></span><br><span class="line"><span class="language-bash">	<span class="comment">#		  &quot;$&#123;@:4&#125;&quot; \</span></span></span><br><span class="line"><span class="language-bash">	<span class="comment">#		  3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3</span></span></span><br><span class="line"></span><br><span class="line">	whiptail --title &quot;$&#123;provided_title&#125;&quot; --backtitle &quot;$&#123;provided_backtitle&#125;&quot; \</span><br><span class="line">	                  --checklist &quot;$&#123;provided_menuname&#125;&quot; &quot;$&#123;TTY_Y&#125;&quot; &quot;$&#123;TTY_X&#125;&quot; $((TTY_Y - 8))  \</span><br><span class="line">			  &quot;$&#123;@:4&#125;&quot; \</span><br><span class="line">			  3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Myy : Once we got a list of selected <span class="built_in">groups</span>, parse the PACKAGE_LIST inside configuration.sh</span></span><br><span class="line"></span><br><span class="line">DESKTOP_ELEMENTS_DIR=&quot;$&#123;EXTER&#125;/config/desktop/$&#123;RELEASE&#125;&quot;</span><br><span class="line">DESKTOP_CONFIGS_DIR=&quot;$&#123;DESKTOP_ELEMENTS_DIR&#125;/environments&quot;</span><br><span class="line">DESKTOP_CONFIG_PREFIX=&quot;config_&quot;</span><br><span class="line">DESKTOP_APPGROUPS_DIR=&quot;$&#123;DESKTOP_ELEMENTS_DIR&#125;/appgroups&quot;</span><br><span class="line"></span><br><span class="line">desktop_element_available_for_arch() &#123;</span><br><span class="line">	local desktop_element_path=&quot;$&#123;1&#125;&quot;</span><br><span class="line">	local targeted_arch=&quot;$&#123;2&#125;&quot;</span><br><span class="line"></span><br><span class="line">	local arch_limitation_file=&quot;$&#123;1&#125;/only_for&quot;</span><br><span class="line"></span><br><span class="line">	echo &quot;Checking if $&#123;desktop_element_path&#125; is available for $&#123;targeted_arch&#125; in $&#123;arch_limitation_file&#125;&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/output.log</span><br><span class="line">	if [[ -f &quot;$&#123;arch_limitation_file&#125;&quot; ]]; then</span><br><span class="line">		grep -- &quot;$&#123;targeted_arch&#125;&quot; &quot;$&#123;arch_limitation_file&#125;&quot; &gt; /dev/null</span><br><span class="line">		return $?</span><br><span class="line">	else</span><br><span class="line">		return 0</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">desktop_element_supported() &#123;</span><br><span class="line"></span><br><span class="line">	local desktop_element_path=&quot;$&#123;1&#125;&quot;</span><br><span class="line"></span><br><span class="line">	local support_level_filepath=&quot;$&#123;desktop_element_path&#125;/support&quot;</span><br><span class="line">	if [[ -f &quot;$&#123;support_level_filepath&#125;&quot; ]]; then</span><br><span class="line">		local support_level=&quot;$(cat &quot;$&#123;support_level_filepath&#125;&quot;)&quot;</span><br><span class="line">		if [[ &quot;$&#123;support_level&#125;&quot; != &quot;supported&quot; &amp;&amp; &quot;$&#123;EXPERT&#125;&quot; != &quot;yes&quot; ]]; then</span><br><span class="line">			return 65</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		desktop_element_available_for_arch &quot;$&#123;desktop_element_path&#125;&quot; &quot;$&#123;ARCH&#125;&quot;</span><br><span class="line">		if [[ $? -ne 0 ]]; then</span><br><span class="line">			return 66</span><br><span class="line">		fi</span><br><span class="line">	else</span><br><span class="line">		return 64</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	return 0</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if [[ $BUILD_DESKTOP == &quot;yes&quot; &amp;&amp; -z $DESKTOP_ENVIRONMENT ]]; then</span><br><span class="line"></span><br><span class="line">	desktop_environments_prepare_menu() &#123;</span><br><span class="line">		for desktop_env_dir in &quot;$&#123;DESKTOP_CONFIGS_DIR&#125;/&quot;*; do</span><br><span class="line">			local desktop_env_name=$(basename $&#123;desktop_env_dir&#125;)</span><br><span class="line">			local expert_infos=&quot;&quot;</span><br><span class="line">			[[ &quot;$&#123;EXPERT&#125;&quot; == &quot;yes&quot; ]] &amp;&amp; expert_infos=&quot;[$(cat &quot;$&#123;desktop_env_dir&#125;/support&quot; 2&gt; /dev/null)]&quot;</span><br><span class="line">			desktop_element_supported &quot;$&#123;desktop_env_dir&#125;&quot; &quot;$&#123;ARCH&#125;&quot; &amp;&amp; options+=(&quot;$&#123;desktop_env_name&#125;&quot; &quot;$&#123;desktop_env_name^&#125; desktop environment $&#123;expert_infos&#125;&quot;)</span><br><span class="line">		done</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	options=()</span><br><span class="line">	desktop_environments_prepare_menu</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$&#123;options[0]&#125;&quot; == &quot;&quot; ]]; then</span><br><span class="line">		exit_with_error &quot;No desktop environment seems to be available for your board $&#123;BOARD&#125; (ARCH : $&#123;ARCH&#125; - EXPERT : $&#123;EXPERT&#125;)&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	DESKTOP_ENVIRONMENT=$(show_menu &quot;Choose a desktop environment&quot; &quot;$backtitle&quot; &quot;Select the default desktop environment to bundle with this image&quot; &quot;$&#123;options[@]&#125;&quot;)</span><br><span class="line"></span><br><span class="line">	unset options</span><br><span class="line"></span><br><span class="line">	if [[ -z &quot;$&#123;DESKTOP_ENVIRONMENT&#125;&quot; ]]; then</span><br><span class="line">		exit_with_error &quot;No desktop environment selected...&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $BUILD_DESKTOP == &quot;yes&quot; ]]; then</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Expected environment variables :</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">- options</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">- ARCH</span></span><br><span class="line"></span><br><span class="line">	desktop_environment_check_if_valid() &#123;</span><br><span class="line"></span><br><span class="line">		local error_msg=&quot;&quot;</span><br><span class="line">		desktop_element_supported &quot;$&#123;DESKTOP_ENVIRONMENT_DIRPATH&#125;&quot; &quot;$&#123;ARCH&#125;&quot;</span><br><span class="line">		local retval=$?</span><br><span class="line"></span><br><span class="line">		if [[ $&#123;retval&#125; == 0 ]]; then</span><br><span class="line">			return</span><br><span class="line">		elif [[ $&#123;retval&#125; == 64 ]]; then</span><br><span class="line">			error_msg+=&quot;Either the desktop environment $&#123;DESKTOP_ENVIRONMENT&#125; does not exist &quot;</span><br><span class="line">			error_msg+=&quot;or the file $&#123;DESKTOP_ENVIRONMENT_DIRPATH&#125;/support is missing&quot;</span><br><span class="line">		elif [[ $&#123;retval&#125; == 65 ]]; then</span><br><span class="line">			error_msg+=&quot;Only experts can build an image with the desktop environment \&quot;$&#123;DESKTOP_ENVIRONMENT&#125;\&quot;, since the Armbian team won&#x27;t offer any support for it (EXPERT=$&#123;EXPERT&#125;)&quot;</span><br><span class="line">		elif [[ $&#123;retval&#125; == 66 ]]; then</span><br><span class="line">			error_msg+=&quot;The desktop environment \&quot;$&#123;DESKTOP_ENVIRONMENT&#125;\&quot; has no packages for your targeted board architecture (BOARD=$&#123;BOARD&#125; ARCH=$&#123;ARCH&#125;). &quot;</span><br><span class="line">			error_msg+=&quot;The supported boards architectures are : &quot;</span><br><span class="line">			error_msg+=&quot;$(cat &quot;$&#123;DESKTOP_ENVIRONMENT_DIRPATH&#125;/only_for&quot;)&quot;</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">supress error when cache is rebuilding</span></span><br><span class="line">		[[ -n &quot;$ROOT_FS_CREATE_ONLY&quot; ]] &amp;&amp; exit 0</span><br><span class="line"></span><br><span class="line">		exit_with_error &quot;$&#123;error_msg&#125;&quot;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	DESKTOP_ENVIRONMENT_DIRPATH=&quot;$&#123;DESKTOP_CONFIGS_DIR&#125;/$&#123;DESKTOP_ENVIRONMENT&#125;&quot;</span><br><span class="line"></span><br><span class="line">	desktop_environment_check_if_valid</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $BUILD_DESKTOP == &quot;yes&quot; &amp;&amp; -z $DESKTOP_ENVIRONMENT_CONFIG_NAME ]]; then</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">FIXME Check <span class="keyword">for</span> empty folders, just <span class="keyword">in</span> <span class="keyword">case</span> the current maintainer</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">messed up</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Note, we could also ignore it and don<span class="string">&#x27;t show anything in the previous</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">menu, but that hides information and make debugging harder, which I</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">don&#x27;</span>t like. Adding desktop environments as a maintainer is not a</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">trivial nor common task.</span></span><br><span class="line"></span><br><span class="line">	options=()</span><br><span class="line">	for configuration in &quot;$&#123;DESKTOP_ENVIRONMENT_DIRPATH&#125;/$&#123;DESKTOP_CONFIG_PREFIX&#125;&quot;*; do</span><br><span class="line">		config_filename=$(basename $&#123;configuration&#125;)</span><br><span class="line">		config_name=$&#123;config_filename#&quot;$&#123;DESKTOP_CONFIG_PREFIX&#125;&quot;&#125;</span><br><span class="line">		options+=(&quot;$&#123;config_filename&#125;&quot; &quot;$&#123;config_name&#125; configuration&quot;)</span><br><span class="line">	done</span><br><span class="line"></span><br><span class="line">	DESKTOP_ENVIRONMENT_CONFIG_NAME=$(show_menu &quot;Choose the desktop environment config&quot; &quot;$backtitle&quot; &quot;Select the configuration for this environment.\nThese are sourced from $&#123;desktop_environment_config_dir&#125;&quot; &quot;$&#123;options[@]&#125;&quot;)</span><br><span class="line">	unset options</span><br><span class="line"></span><br><span class="line">	if [[ -z $DESKTOP_ENVIRONMENT_CONFIG_NAME ]]; then</span><br><span class="line">		exit_with_error &quot;No desktop configuration selected... Do you really want a desktop environment ?&quot;</span><br><span class="line">	fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $BUILD_DESKTOP == &quot;yes&quot; ]]; then</span><br><span class="line">	DESKTOP_ENVIRONMENT_PACKAGE_LIST_DIRPATH=&quot;$&#123;DESKTOP_ENVIRONMENT_DIRPATH&#125;/$&#123;DESKTOP_ENVIRONMENT_CONFIG_NAME&#125;&quot;</span><br><span class="line">	DESKTOP_ENVIRONMENT_PACKAGE_LIST_FILEPATH=&quot;$&#123;DESKTOP_ENVIRONMENT_PACKAGE_LIST_DIRPATH&#125;/packages&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;-z <span class="variable">$&#123;VAR+x&#125;</span>&quot;</span> allows to check <span class="keyword">for</span> <span class="built_in">unset</span> variable</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Technically, someone might want to build a desktop with no additional</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">appgroups.</span></span><br><span class="line">if [[ $BUILD_DESKTOP == &quot;yes&quot; &amp;&amp; -z $&#123;DESKTOP_APPGROUPS_SELECTED+x&#125; &amp;&amp; $&#123;RELEASE&#125; != &quot;raspi&quot; ]]; then</span><br><span class="line"></span><br><span class="line">	options=()</span><br><span class="line">	for appgroup_path in &quot;$&#123;DESKTOP_APPGROUPS_DIR&#125;/&quot;*; do</span><br><span class="line">		appgroup=&quot;$(basename &quot;$&#123;appgroup_path&#125;&quot;)&quot;</span><br><span class="line">		options+=(&quot;$&#123;appgroup&#125;&quot; &quot;$&#123;appgroup^&#125;&quot; off)</span><br><span class="line">	done</span><br><span class="line"></span><br><span class="line">	DESKTOP_APPGROUPS_SELECTED=$(\</span><br><span class="line">		show_select_menu \</span><br><span class="line">		&quot;Choose desktop softwares to add&quot; \</span><br><span class="line">		&quot;$backtitle&quot; \</span><br><span class="line">		&quot;Select which kind of softwares you&#x27;d like to add to your build&quot; \</span><br><span class="line">		&quot;$&#123;options[@]&#125;&quot;)</span><br><span class="line"></span><br><span class="line">	DESKTOP_APPGROUPS_SELECTED=$&#123;DESKTOP_APPGROUPS_SELECTED//\&quot;/&#125;</span><br><span class="line"></span><br><span class="line">	unset options</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">exit_with_error <span class="string">&#x27;Testing&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Expected variables</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">- aggregated_content</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">- potential_paths</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">- separator</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Write to variables :</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">- aggregated_content</span></span><br><span class="line">aggregate_content() &#123;</span><br><span class="line">	LOG_OUTPUT_FILE=&quot;$&#123;SRC&#125;/output/$&#123;LOG_SUBPATH&#125;/potential-paths.log&quot;</span><br><span class="line">	echo -e &quot;Potential paths :&quot; &gt;&gt; &quot;$&#123;LOG_OUTPUT_FILE&#125;&quot;</span><br><span class="line">	show_checklist_variables potential_paths</span><br><span class="line">	for filepath in $&#123;potential_paths&#125;; do</span><br><span class="line">		if [[ -f &quot;$&#123;filepath&#125;&quot; ]]; then</span><br><span class="line">			echo -e &quot;$&#123;filepath/&quot;$EXTER&quot;\//&#125; yes&quot; &gt;&gt; &quot;$&#123;LOG_OUTPUT_FILE&#125;&quot;</span><br><span class="line">			aggregated_content+=$(cat &quot;$&#123;filepath&#125;&quot;)</span><br><span class="line">			aggregated_content+=&quot;$&#123;separator&#125;&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">		<span class="keyword">else</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">			<span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;filepath/&quot;$EXTER&quot;\//&#125;</span> no\n&quot;</span> &gt;&gt; <span class="string">&quot;<span class="variable">$&#123;LOG_OUTPUT_FILE&#125;</span>&quot;</span></span></span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">	done</span><br><span class="line">	echo &quot;&quot; &gt;&gt; &quot;$&#123;LOG_OUTPUT_FILE&#125;&quot;</span><br><span class="line">	unset LOG_OUTPUT_FILE</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">set</span> unique mounting directory</span></span><br><span class="line">MOUNT_UUID=$(uuidgen)</span><br><span class="line">SDCARD=&quot;$&#123;SRC&#125;/.tmp/rootfs-$&#123;MOUNT_UUID&#125;&quot;</span><br><span class="line">MOUNT=&quot;$&#123;SRC&#125;/.tmp/mount-$&#123;MOUNT_UUID&#125;&quot;</span><br><span class="line">DESTIMG=&quot;$&#123;SRC&#125;/.tmp/image-$&#123;MOUNT_UUID&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dropbear needs to be configured differently</span></span><br><span class="line">[[ $CRYPTROOT_ENABLE == yes &amp;&amp; $RELEASE == xenial ]] &amp;&amp; exit_with_error &quot;Encrypted rootfs is not supported in Xenial&quot;</span><br><span class="line">[[ $RELEASE == stretch &amp;&amp; $CAN_BUILD_STRETCH != yes ]] &amp;&amp; exit_with_error &quot;Building Debian Stretch images with selected kernel is not supported&quot;</span><br><span class="line">[[ $RELEASE == bionic &amp;&amp; $CAN_BUILD_STRETCH != yes ]] &amp;&amp; exit_with_error &quot;Building Ubuntu Bionic images with selected kernel is not supported&quot;</span><br><span class="line">[[ $RELEASE == hirsute &amp;&amp; $HOSTRELEASE == focal ]] &amp;&amp; exit_with_error &quot;Building Ubuntu Hirsute images requires Hirsute build host. Please upgrade your host or select a different target OS&quot;</span><br><span class="line"></span><br><span class="line">[[ -n $ATFSOURCE &amp;&amp; -z $ATF_USE_GCC ]] &amp;&amp; exit_with_error &quot;Error in configuration: ATF_USE_GCC is unset&quot;</span><br><span class="line">[[ -z $UBOOT_USE_GCC ]] &amp;&amp; exit_with_error &quot;Error in configuration: UBOOT_USE_GCC is unset&quot;</span><br><span class="line">[[ -z $KERNEL_USE_GCC ]] &amp;&amp; exit_with_error &quot;Error in configuration: KERNEL_USE_GCC is unset&quot;</span><br><span class="line"></span><br><span class="line">BOOTCONFIG_VAR_NAME=BOOTCONFIG_$&#123;BRANCH^^&#125;</span><br><span class="line">[[ -n $&#123;!BOOTCONFIG_VAR_NAME&#125; ]] &amp;&amp; BOOTCONFIG=$&#123;!BOOTCONFIG_VAR_NAME&#125;</span><br><span class="line">[[ -z $LINUXCONFIG ]] &amp;&amp; LINUXCONFIG=&quot;linux-$&#123;LINUXFAMILY&#125;-$&#123;BRANCH&#125;&quot;</span><br><span class="line">[[ -z $BOOTPATCHDIR ]] &amp;&amp; BOOTPATCHDIR=&quot;u-boot-$LINUXFAMILY&quot;</span><br><span class="line">[[ -z $ATFPATCHDIR ]] &amp;&amp; ATFPATCHDIR=&quot;atf-$LINUXFAMILY&quot;</span><br><span class="line">[[ -z $KERNELPATCHDIR ]] &amp;&amp; KERNELPATCHDIR=&quot;$LINUXFAMILY-$BRANCH&quot;</span><br><span class="line"></span><br><span class="line">if [[ &quot;$RELEASE&quot; =~ ^(xenial|bionic|focal|hirsute|impish|jammy)$ ]]; then</span><br><span class="line">		DISTRIBUTION=&quot;Ubuntu&quot;</span><br><span class="line">elif [[ &quot;$RELEASE&quot; == raspi ]]; then</span><br><span class="line">		DISTRIBUTION=&quot;Bullseye&quot;</span><br><span class="line">	else</span><br><span class="line">		DISTRIBUTION=&quot;Debian&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">CLI_CONFIG_PATH=&quot;$&#123;EXTER&#125;/config/cli/$&#123;RELEASE&#125;&quot;</span><br><span class="line">DEBOOTSTRAP_CONFIG_PATH=&quot;$&#123;CLI_CONFIG_PATH&#125;/debootstrap&quot;</span><br><span class="line"></span><br><span class="line">if [[ $? != 0 ]]; then</span><br><span class="line">	exit_with_error &quot;The desktop environment $&#123;DESKTOP_ENVIRONMENT&#125; is not available for your architecture $&#123;ARCH&#125;&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">AGGREGATION_SEARCH_ROOT_ABSOLUTE_DIRS=&quot;</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;EXTER&#125;/config</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;EXTER&#125;/config/optional/_any_board/_config</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;EXTER&#125;/config/optional/architectures/<span class="variable">$&#123;ARCH&#125;</span>/_config</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;EXTER&#125;/config/optional/families/<span class="variable">$&#123;LINUXFAMILY&#125;</span>/_config</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;EXTER&#125;/config/optional/boards/<span class="variable">$&#123;BOARD&#125;</span>/_config</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;USERPATCHES_PATH&#125;</span></span><br><span class="line">&quot;</span><br><span class="line"></span><br><span class="line">DEBOOTSTRAP_SEARCH_RELATIVE_DIRS=&quot;</span><br><span class="line">cli/_all_distributions/debootstrap</span><br><span class="line"><span class="meta prompt_">cli/$</span><span class="language-bash">&#123;RELEASE&#125;/debootstrap</span></span><br><span class="line">&quot;</span><br><span class="line"></span><br><span class="line">CLI_SEARCH_RELATIVE_DIRS=&quot;</span><br><span class="line">cli/_all_distributions/main</span><br><span class="line"><span class="meta prompt_">cli/$</span><span class="language-bash">&#123;RELEASE&#125;/main</span></span><br><span class="line">&quot;</span><br><span class="line"></span><br><span class="line">PACKAGES_SEARCH_ROOT_ABSOLUTE_DIRS=&quot;</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;EXTER&#125;/packages</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;EXTER&#125;/config/optional/_any_board/_packages</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;EXTER&#125;/config/optional/architectures/<span class="variable">$&#123;ARCH&#125;</span>/_packages</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;EXTER&#125;/config/optional/families/<span class="variable">$&#123;LINUXFAMILY&#125;</span>/_packages</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;EXTER&#125;/config/optional/boards/<span class="variable">$&#123;BOARD&#125;</span>/_packages</span></span><br><span class="line">&quot;</span><br><span class="line"></span><br><span class="line">DESKTOP_ENVIRONMENTS_SEARCH_RELATIVE_DIRS=&quot;</span><br><span class="line">desktop/_all_distributions/environments/_all_environments</span><br><span class="line"><span class="meta prompt_">desktop/_all_distributions/environments/$</span><span class="language-bash">&#123;DESKTOP_ENVIRONMENT&#125;</span></span><br><span class="line"><span class="meta prompt_">desktop/_all_distributions/environments/$</span><span class="language-bash">&#123;DESKTOP_ENVIRONMENT&#125;/<span class="variable">$&#123;DESKTOP_ENVIRONMENT_CONFIG_NAME&#125;</span></span></span><br><span class="line"><span class="meta prompt_">desktop/$</span><span class="language-bash">&#123;RELEASE&#125;/environments/_all_environments</span></span><br><span class="line"><span class="meta prompt_">desktop/$</span><span class="language-bash">&#123;RELEASE&#125;/environments/<span class="variable">$&#123;DESKTOP_ENVIRONMENT&#125;</span></span></span><br><span class="line"><span class="meta prompt_">desktop/$</span><span class="language-bash">&#123;RELEASE&#125;/environments/<span class="variable">$&#123;DESKTOP_ENVIRONMENT&#125;</span>/<span class="variable">$&#123;DESKTOP_ENVIRONMENT_CONFIG_NAME&#125;</span></span></span><br><span class="line">&quot;</span><br><span class="line"></span><br><span class="line">DESKTOP_APPGROUPS_SEARCH_RELATIVE_DIRS=&quot;</span><br><span class="line">desktop/_all_distributions/appgroups</span><br><span class="line"><span class="meta prompt_">desktop/_all_distributions/environments/$</span><span class="language-bash">&#123;DESKTOP_ENVIRONMENT&#125;/appgroups</span></span><br><span class="line"><span class="meta prompt_">desktop/$</span><span class="language-bash">&#123;RELEASE&#125;/appgroups</span></span><br><span class="line"><span class="meta prompt_">desktop/$</span><span class="language-bash">&#123;RELEASE&#125;/environments/<span class="variable">$&#123;DESKTOP_ENVIRONMENT&#125;</span>/appgroups</span></span><br><span class="line">&quot;</span><br><span class="line"></span><br><span class="line">get_all_potential_paths() &#123;</span><br><span class="line">	local root_dirs=&quot;$&#123;AGGREGATION_SEARCH_ROOT_ABSOLUTE_DIRS&#125;&quot;</span><br><span class="line">	local rel_dirs=&quot;$&#123;1&#125;&quot;</span><br><span class="line">	local sub_dirs=&quot;$&#123;2&#125;&quot;</span><br><span class="line">	local looked_up_subpath=&quot;$&#123;3&#125;&quot;</span><br><span class="line">	for root_dir in $&#123;root_dirs&#125;; do</span><br><span class="line">		for rel_dir in $&#123;rel_dirs&#125;; do</span><br><span class="line">			for sub_dir in $&#123;sub_dirs&#125;; do</span><br><span class="line">				potential_paths+=&quot;$&#123;root_dir&#125;/$&#123;rel_dir&#125;/$&#123;sub_dir&#125;/$&#123;looked_up_subpath&#125; &quot;</span><br><span class="line">			done</span><br><span class="line">		done</span><br><span class="line">	done</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="keyword">for</span> ppath <span class="keyword">in</span> <span class="variable">$&#123;potential_paths&#125;</span>; <span class="keyword">do</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"> 	<span class="built_in">echo</span> <span class="string">&quot;Checking for <span class="variable">$&#123;ppath&#125;</span>&quot;</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"> 	<span class="keyword">if</span> [[ -f <span class="string">&quot;<span class="variable">$&#123;ppath&#125;</span>&quot;</span> ]]; <span class="keyword">then</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"> 		<span class="built_in">echo</span> <span class="string">&quot;OK !|&quot;</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"> 	<span class="keyword">else</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"> 		<span class="built_in">echo</span> <span class="string">&quot;Nope|&quot;</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"> 	<span class="keyword">fi</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="keyword">done</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Environment variables expected :</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">- aggregated_content</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Arguments :</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. File to look up <span class="keyword">in</span> each directory</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. The separator to add between each concatenated file</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. Relative directories paths added to <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4. Relative directories paths added to <span class="variable">$&#123;4&#125;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># The function will basically generate a list of potential paths by</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">generating all the potential paths combinations leading to the</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">looked up file</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;AGGREGATION_SEARCH_ROOT_ABSOLUTE_DIRS&#125;</span>/<span class="variable">$&#123;3&#125;</span>/<span class="variable">$&#123;4&#125;</span>/<span class="variable">$&#123;1&#125;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Then it will concatenate the content of all the available files</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">into <span class="variable">$&#123;aggregated_content&#125;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># TODO :</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;4&#125;</span> could be removed by just adding the appropriate paths to <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dynamically <span class="keyword">for</span> each <span class="keyword">case</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(debootstrap, cli, desktop environments, desktop appgroups, ...)</span></span><br><span class="line"></span><br><span class="line">aggregate_all_root_rel_sub() &#123;</span><br><span class="line">	local separator=&quot;$&#123;2&#125;&quot;</span><br><span class="line"></span><br><span class="line">	local potential_paths=&quot;&quot;</span><br><span class="line">	get_all_potential_paths &quot;$&#123;3&#125;&quot; &quot;$&#123;4&#125;&quot; &quot;$&#123;1&#125;&quot;</span><br><span class="line"></span><br><span class="line">	aggregate_content</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">aggregate_all_debootstrap() &#123;</span><br><span class="line">	local sub_dirs_to_check=&quot;. &quot;</span><br><span class="line">	if [[ ! -z &quot;$&#123;SELECTED_CONFIGURATION+x&#125;&quot; ]]; then</span><br><span class="line">		sub_dirs_to_check+=&quot;config_$&#123;SELECTED_CONFIGURATION&#125;&quot;</span><br><span class="line">	fi</span><br><span class="line">	aggregate_all_root_rel_sub &quot;$&#123;1&#125;&quot; &quot;$&#123;2&#125;&quot; &quot;$&#123;DEBOOTSTRAP_SEARCH_RELATIVE_DIRS&#125;&quot; &quot;$&#123;sub_dirs_to_check&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">aggregate_all_cli() &#123;</span><br><span class="line">	local sub_dirs_to_check=&quot;. &quot;</span><br><span class="line">	if [[ ! -z &quot;$&#123;SELECTED_CONFIGURATION+x&#125;&quot; ]]; then</span><br><span class="line">		sub_dirs_to_check+=&quot;config_$&#123;SELECTED_CONFIGURATION&#125;&quot;</span><br><span class="line">	fi</span><br><span class="line">	aggregate_all_root_rel_sub &quot;$&#123;1&#125;&quot; &quot;$&#123;2&#125;&quot; &quot;$&#123;CLI_SEARCH_RELATIVE_DIRS&#125;&quot; &quot;$&#123;sub_dirs_to_check&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">aggregate_all_desktop() &#123;</span><br><span class="line">	aggregate_all_root_rel_sub &quot;$&#123;1&#125;&quot; &quot;$&#123;2&#125;&quot; &quot;$&#123;DESKTOP_ENVIRONMENTS_SEARCH_RELATIVE_DIRS&#125;&quot; &quot;.&quot;</span><br><span class="line">	aggregate_all_root_rel_sub &quot;$&#123;1&#125;&quot; &quot;$&#123;2&#125;&quot; &quot;$&#123;DESKTOP_APPGROUPS_SEARCH_RELATIVE_DIRS&#125;&quot; &quot;$&#123;DESKTOP_APPGROUPS_SELECTED&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">one_line() &#123;</span><br><span class="line">	local aggregate_func_name=&quot;$&#123;1&#125;&quot;</span><br><span class="line">	local aggregated_content=&quot;&quot;</span><br><span class="line">	shift 1</span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">aggregate_func_name <span class="string">&quot;<span class="variable">$&#123;@&#125;</span>&quot;</span></span></span><br><span class="line">	cleanup_list aggregated_content</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DEBOOTSTRAP_LIST=&quot;$(one_line aggregate_all_debootstrap &quot;packages&quot; &quot; &quot;)&quot;</span><br><span class="line">DEBOOTSTRAP_COMPONENTS=&quot;$(one_line aggregate_all_debootstrap &quot;components&quot; &quot; &quot;)&quot;</span><br><span class="line">DEBOOTSTRAP_COMPONENTS=&quot;$&#123;DEBOOTSTRAP_COMPONENTS// /,&#125;&quot;</span><br><span class="line">PACKAGE_LIST=&quot;$(one_line aggregate_all_cli &quot;packages&quot; &quot; &quot;)&quot;</span><br><span class="line">PACKAGE_LIST_ADDITIONAL=&quot;$(one_line aggregate_all_cli &quot;packages.additional&quot; &quot; &quot;)&quot;</span><br><span class="line"></span><br><span class="line">LOG_OUTPUT_FILE=&quot;$SRC/output/$&#123;LOG_SUBPATH&#125;/debootstrap-list.log&quot;</span><br><span class="line">show_checklist_variables &quot;DEBOOTSTRAP_LIST DEBOOTSTRAP_COMPONENTS PACKAGE_LIST PACKAGE_LIST_ADDITIONAL PACKAGE_LIST_UNINSTALL&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Dependent desktop packages</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Myy : Sources packages from file here</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Myy : FIXME Rename aggregate_all to aggregate_all_desktop</span></span><br><span class="line">if [[ $BUILD_DESKTOP == &quot;yes&quot; ]]; then</span><br><span class="line">	PACKAGE_LIST_DESKTOP+=&quot;$(one_line aggregate_all_desktop &quot;packages&quot; &quot; &quot;)&quot;</span><br><span class="line">	echo -e &quot;\nGroups selected $&#123;DESKTOP_APPGROUPS_SELECTED&#125; -&gt; PACKAGES :&quot; &gt;&gt; &quot;$&#123;LOG_OUTPUT_FILE&#125;&quot;</span><br><span class="line">	show_checklist_variables PACKAGE_LIST_DESKTOP</span><br><span class="line">fi</span><br><span class="line">unset LOG_OUTPUT_FILE</span><br><span class="line"></span><br><span class="line">DEBIAN_MIRROR=&#x27;deb.debian.org/debian&#x27;</span><br><span class="line">DEBIAN_SECURTY=&#x27;security.debian.org/&#x27;</span><br><span class="line">UBUNTU_MIRROR=&#x27;ports.ubuntu.com/&#x27;</span><br><span class="line">RASPI_MIRROR=&#x27;archive.raspberrypi.org/debian/&#x27;</span><br><span class="line"></span><br><span class="line">if [[ $DOWNLOAD_MIRROR == &quot;china&quot; ]] ; then</span><br><span class="line"></span><br><span class="line">	if [[ $&#123;CHINA_DOWNLOAD_MIRROR&#125; == tsinghua ]]; then</span><br><span class="line">		DEBIAN_MIRROR=&#x27;mirrors.tuna.tsinghua.edu.cn/debian&#x27;</span><br><span class="line">		DEBIAN_SECURTY=&#x27;mirrors.tuna.tsinghua.edu.cn/debian-security&#x27;</span><br><span class="line">		UBUNTU_MIRROR=&#x27;mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/&#x27;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ $&#123;CHINA_DOWNLOAD_MIRROR&#125; == huawei ]]; then</span><br><span class="line">		DEBIAN_MIRROR=&#x27;repo.huaweicloud.com/debian&#x27;</span><br><span class="line">		DEBIAN_SECURTY=&#x27;repo.huaweicloud.com/debian-security&#x27;</span><br><span class="line">		UBUNTU_MIRROR=&#x27;repo.huaweicloud.com/ubuntu-ports/&#x27;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	RASPI_MIRROR=&#x27;mirrors.ustc.edu.cn/archive.raspberrypi.org/debian/&#x27;</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $DOWNLOAD_MIRROR == &quot;bfsu&quot; ]] ; then</span><br><span class="line">	DEBIAN_MIRROR=&#x27;mirrors.bfsu.edu.cn/debian&#x27;</span><br><span class="line">	DEBIAN_SECURTY=&#x27;mirrors.bfsu.edu.cn/debian-security&#x27;</span><br><span class="line">	UBUNTU_MIRROR=&#x27;mirrors.bfsu.edu.cn/ubuntu-ports/&#x27;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ &quot;$&#123;ARCH&#125;&quot; == &quot;amd64&quot; ]]; then</span><br><span class="line">	UBUNTU_MIRROR=&#x27;archive.ubuntu.com/ubuntu&#x27; # ports are only for non-amd64, of course.</span><br><span class="line"></span><br><span class="line">		if [[ -n $&#123;CUSTOM_UBUNTU_MIRROR&#125; ]]; then # ubuntu redirector doesn&#x27;t work well on amd64</span><br><span class="line">			UBUNTU_MIRROR=&quot;$&#123;CUSTOM_UBUNTU_MIRROR&#125;&quot;</span><br><span class="line">		fi</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">don<span class="string">&#x27;t use mirrors that throws garbage on 404</span></span></span><br><span class="line">if [[ -z $&#123;ARMBIAN_MIRROR&#125; ]]; then</span><br><span class="line">	while true; do</span><br><span class="line"></span><br><span class="line">		ARMBIAN_MIRROR=$(wget -SO- -T 1 -t 1 https://redirect.armbian.com 2&gt;&amp;1 | egrep -i &quot;Location&quot; | awk &#x27;&#123;print $2&#125;&#x27; | head -1)</span><br><span class="line">		[[ $&#123;ARMBIAN_MIRROR&#125; != *armbian.hosthatch* ]] &amp;&amp; break</span><br><span class="line"></span><br><span class="line">	done</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">For (late) user override.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Notice: it is too late to define hook functions or add extensions in lib.config, since the extension initialization already ran by now.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">        in case the user tries to use them in lib.config, hopefully they&#x27;</span>ll be detected as <span class="string">&quot;wishful hooking&quot;</span> and the user will be wrn<span class="string">&#x27;ed.</span></span></span><br><span class="line">if [[ -f $USERPATCHES_PATH/lib.config ]]; then</span><br><span class="line">	display_alert &quot;Using user configuration override&quot; &quot;$USERPATCHES_PATH/lib.config&quot; &quot;info&quot;</span><br><span class="line">	source &quot;$USERPATCHES_PATH&quot;/lib.config</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">call_extension_method &quot;user_config&quot; &lt;&lt; &#x27;USER_CONFIG&#x27;</span><br><span class="line">*Invoke function with user override*</span><br><span class="line">Allows for overriding configuration values set anywhere else.</span><br><span class="line">It is called after sourcing the `lib.config` file if it exists,</span><br><span class="line">but before assembling any package lists.</span><br><span class="line">USER_CONFIG</span><br><span class="line"></span><br><span class="line">call_extension_method &quot;extension_prepare_config&quot; &lt;&lt; &#x27;EXTENSION_PREPARE_CONFIG&#x27;</span><br><span class="line">*allow extensions to prepare their own config, after user config is done*</span><br><span class="line">Implementors should preserve variable values pre-set, but can default values an/or validate them.</span><br><span class="line">This runs *after* user_config. Don&#x27;t change anything not coming from other variables or meant to be configured by the user.</span><br><span class="line">EXTENSION_PREPARE_CONFIG</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">apt-cacher-ng mirror configurarion</span></span></span><br><span class="line">if [[ $DISTRIBUTION == Ubuntu ]]; then</span><br><span class="line">	APT_MIRROR=$UBUNTU_MIRROR</span><br><span class="line">else</span><br><span class="line">	APT_MIRROR=$DEBIAN_MIRROR</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">[[ -n $APT_PROXY_ADDR ]] &amp;&amp; display_alert &quot;Using custom apt-cacher-ng address&quot; &quot;$APT_PROXY_ADDR&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Build final package list after possible override</span></span></span><br><span class="line">PACKAGE_LIST=&quot;$PACKAGE_LIST $PACKAGE_LIST_RELEASE $PACKAGE_LIST_ADDITIONAL&quot;</span><br><span class="line">PACKAGE_MAIN_LIST=&quot;$(cleanup_list PACKAGE_LIST)&quot;</span><br><span class="line"></span><br><span class="line">[[ $BUILD_DESKTOP == yes ]] &amp;&amp; PACKAGE_LIST=&quot;$PACKAGE_LIST $PACKAGE_LIST_DESKTOP&quot;</span><br><span class="line">PACKAGE_LIST=&quot;$(cleanup_list PACKAGE_LIST)&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">remove any packages defined in PACKAGE_LIST_RM in lib.config</span></span></span><br><span class="line">aggregated_content=&quot;$&#123;PACKAGE_LIST_RM&#125; &quot;</span><br><span class="line">aggregate_all_cli &quot;packages.remove&quot; &quot; &quot;</span><br><span class="line">aggregate_all_desktop &quot;packages.remove&quot; &quot; &quot;</span><br><span class="line">PACKAGE_LIST_RM=&quot;$(cleanup_list aggregated_content)&quot;</span><br><span class="line">unset aggregated_content</span><br><span class="line"></span><br><span class="line">aggregated_content=&quot;&quot;</span><br><span class="line">aggregate_all_cli &quot;packages.uninstall&quot; &quot; &quot;</span><br><span class="line">aggregate_all_desktop &quot;packages.uninstall&quot; &quot; &quot;</span><br><span class="line">PACKAGE_LIST_UNINSTALL=&quot;$(cleanup_list aggregated_content)&quot;</span><br><span class="line">unset aggregated_content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [[ -n $PACKAGE_LIST_RM ]]; then</span><br><span class="line">	display_alert &quot;Package remove list $&#123;PACKAGE_LIST_RM&#125;&quot;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Turns out that \b can be tricked by dashes.</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">So if you remove mesa-utils but still want to install &quot;mesa-utils-extra&quot;</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">a &quot;\b(mesa-utils)\b&quot; filter will convert &quot;mesa-utils-extra&quot; to &quot;-extra&quot;.</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">\W is not tricked by this but consumes the surrounding spaces, so we</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">replace the occurence by one space, to avoid sticking the next word to</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">the previous one after consuming the spaces.</span></span></span><br><span class="line">	DEBOOTSTRAP_LIST=$(sed -r &quot;s/\W($(tr &#x27; &#x27; &#x27;|&#x27; &lt;&lt;&lt; $&#123;PACKAGE_LIST_RM&#125;))\W/ /g&quot; &lt;&lt;&lt; &quot; $&#123;DEBOOTSTRAP_LIST&#125; &quot;)</span><br><span class="line">	PACKAGE_LIST=$(sed -r &quot;s/\W($(tr &#x27; &#x27; &#x27;|&#x27; &lt;&lt;&lt; $&#123;PACKAGE_LIST_RM&#125;))\W/ /g&quot; &lt;&lt;&lt; &quot; $&#123;PACKAGE_LIST&#125; &quot;)</span><br><span class="line">	PACKAGE_MAIN_LIST=$(sed -r &quot;s/\W($(tr &#x27; &#x27; &#x27;|&#x27; &lt;&lt;&lt; $&#123;PACKAGE_LIST_RM&#125;))\W/ /g&quot; &lt;&lt;&lt; &quot; $&#123;PACKAGE_MAIN_LIST&#125; &quot;)</span><br><span class="line">	if [[ $BUILD_DESKTOP == &quot;yes&quot; ]]; then</span><br><span class="line">		PACKAGE_LIST_DESKTOP=$(sed -r &quot;s/\W($(tr &#x27; &#x27; &#x27;|&#x27; &lt;&lt;&lt; $&#123;PACKAGE_LIST_RM&#125;))\W/ /g&quot; &lt;&lt;&lt; &quot; $&#123;PACKAGE_LIST_DESKTOP&#125; &quot;)</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">Removing double spaces... AGAIN, since we might have used a sed on them</span></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">Do not quote the variables. This would defeat the trick.</span></span></span><br><span class="line">		PACKAGE_LIST_DESKTOP=&quot;$(echo $&#123;PACKAGE_LIST_DESKTOP&#125;)&quot;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Removing double spaces... AGAIN, since we might have used a sed on them</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Do not quote the variables. This would defeat the trick.</span></span></span><br><span class="line">	DEBOOTSTRAP_LIST=&quot;$(echo $&#123;DEBOOTSTRAP_LIST&#125;)&quot;</span><br><span class="line">	PACKAGE_LIST=&quot;$(echo $&#123;PACKAGE_LIST&#125;)&quot;</span><br><span class="line">	PACKAGE_MAIN_LIST=&quot;$(echo $&#123;PACKAGE_MAIN_LIST&#125;)&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LOG_OUTPUT_FILE=&quot;$SRC/output/$&#123;LOG_SUBPATH&#125;/debootstrap-list.log&quot;</span><br><span class="line">echo -e &quot;\nVariables after manual configuration&quot; &gt;&gt;$LOG_OUTPUT_FILE</span><br><span class="line">show_checklist_variables &quot;DEBOOTSTRAP_COMPONENTS DEBOOTSTRAP_LIST PACKAGE_LIST PACKAGE_MAIN_LIST&quot;</span><br><span class="line">unset LOG_OUTPUT_FILE</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Give the option to configure DNS server used in the chroot during the build process</span></span></span><br><span class="line">[[ -z $NAMESERVER ]] &amp;&amp; NAMESERVER=&quot;1.0.0.1&quot; # default is cloudflare alternate</span><br><span class="line"></span><br><span class="line">call_extension_method &quot;post_aggregate_packages&quot; &quot;user_config_post_aggregate_packages&quot; &lt;&lt; &#x27;POST_AGGREGATE_PACKAGES&#x27;</span><br><span class="line">*For final user override, using a function, after all aggregations are done*</span><br><span class="line">Called after aggregating all package lists, before the end of `compilation.sh`.</span><br><span class="line">Packages will still be installed after this is called, so it is the last chance</span><br><span class="line">to confirm or change any packages.</span><br><span class="line">POST_AGGREGATE_PACKAGES</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">debug</span></span></span><br><span class="line">cat &lt;&lt;-EOF &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/output.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"># BUILD SCRIPT ENVIRONMENT</span></span></span><br><span class="line"></span><br><span class="line">Repository: $REPOSITORY_URL</span><br><span class="line">Version: $REPOSITORY_COMMIT</span><br><span class="line"></span><br><span class="line">Host OS: $HOSTRELEASE</span><br><span class="line">Host arch: $(dpkg --print-architecture)</span><br><span class="line">Host system: $(uname -a)</span><br><span class="line">Virtualization type: $(systemd-detect-virt)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"># Build script directories</span></span></span><br><span class="line">Build directory is located on:</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="string">(findmnt -o TARGET,SOURCE,FSTYPE,AVAIL -T &quot;$&#123;SRC&#125;&quot;)</span></span></span><br><span class="line"></span><br><span class="line">Build directory permissions:</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="string">(getfacl -p &quot;$&#123;SRC&#125;&quot;)</span></span></span><br><span class="line"></span><br><span class="line">Temp directory permissions:</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="string">(getfacl -p &quot;$&#123;SRC&#125;&quot;/.tmp 2&gt; /dev/null)</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"># BUILD CONFIGURATION</span></span></span><br><span class="line"></span><br><span class="line">Build target:</span><br><span class="line">Board: $BOARD</span><br><span class="line">Branch: $BRANCH</span><br><span class="line">Minimal: $BUILD_MINIMAL</span><br><span class="line">Desktop: $BUILD_DESKTOP</span><br><span class="line">Desktop Environment: $DESKTOP_ENVIRONMENT</span><br><span class="line">Software groups: $DESKTOP_APPGROUPS_SELECTED</span><br><span class="line"></span><br><span class="line">Kernel configuration:</span><br><span class="line">Repository: $KERNELSOURCE</span><br><span class="line">Branch: $KERNELBRANCH</span><br><span class="line">Config file: $LINUXCONFIG</span><br><span class="line"></span><br><span class="line">U-boot configuration:</span><br><span class="line">Repository: $BOOTSOURCE</span><br><span class="line">Branch: $BOOTBRANCH</span><br><span class="line">Config file: $BOOTCONFIG</span><br><span class="line"></span><br><span class="line">Partitioning configuration: $IMAGE_PARTITION_TABLE offset: $OFFSET</span><br><span class="line">Boot partition type: $&#123;BOOTFS_TYPE:-(none)&#125; $&#123;BOOTSIZE:+&quot;($&#123;BOOTSIZE&#125; MB)&quot;&#125;</span><br><span class="line">Root partition type: $ROOTFS_TYPE $&#123;FIXED_IMAGE_SIZE:+&quot;($&#123;FIXED_IMAGE_SIZE&#125; MB)&quot;&#125;</span><br><span class="line"></span><br><span class="line">CPU configuration: $CPUMIN - $CPUMAX with $GOVERNOR</span><br><span class="line">EOF</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="5debootstrap_ng-分析"><a class="markdownIt-Anchor" href="#5debootstrap_ng-分析"></a> 5.debootstrap_ng 分析</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Copyright (c) 2013-2021 Igor Pecovnik, igor.pecovnik@gma**.com</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This file is licensed under the terms of the GNU General Public</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">License version 2. This program is licensed <span class="string">&quot;as is&quot;</span> without any</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">warranty of any kind, whether express or implied.</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Functions:</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">debootstrap_ng</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">create_rootfs_cache</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prepare_partitions</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">update_initramfs</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">create_image</span></span><br><span class="line"></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">debootstrap_ng</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">debootstrap_ng()</span></span><br><span class="line">&#123;</span><br><span class="line">	display_alert &quot;Starting rootfs and image building process for&quot; &quot;$&#123;BRANCH&#125; $&#123;BOARD&#125; $&#123;RELEASE&#125; $&#123;DESKTOP_APPGROUPS_SELECTED:-null&#125; $&#123;DESKTOP_ENVIRONMENT:-null&#125; $&#123;BUILD_MINIMAL&#125;&quot; &quot;info&quot;</span><br><span class="line"></span><br><span class="line">	[[ $ROOTFS_TYPE != ext4 ]] &amp;&amp; display_alert &quot;Assuming $BOARD $BRANCH kernel supports $ROOTFS_TYPE&quot; &quot;&quot; &quot;wrn&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="built_in">trap</span> to unmount stuff <span class="keyword">in</span> <span class="keyword">case</span> of error/manual interruption</span></span><br><span class="line">	trap unmount_on_exit INT TERM EXIT</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">stage: clean and create directories</span></span><br><span class="line">	rm -rf $SDCARD $MOUNT</span><br><span class="line">	mkdir -p $SDCARD $MOUNT $DEST/images $EXTER/cache/rootfs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">stage: verify tmpfs configuration and mount</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">CLI needs ~1.5GiB, desktop - ~3.5GiB</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">calculate and <span class="built_in">set</span> tmpfs mount to use 9/10 of available RAM+SWAP</span></span><br><span class="line">	local phymem=$(( (($(awk &#x27;/MemTotal/ &#123;print $2&#125;&#x27; /proc/meminfo) + $(awk &#x27;/SwapTotal/ &#123;print $2&#125;&#x27; /proc/meminfo))) / 1024 * 9 / 10 )) # MiB</span><br><span class="line">	if [[ $BUILD_DESKTOP == yes ]]; then local tmpfs_max_size=3500; else local tmpfs_max_size=1500; fi # MiB</span><br><span class="line">	if [[ $FORCE_USE_RAMDISK == no ]]; then	local use_tmpfs=no</span><br><span class="line">	elif [[ $FORCE_USE_RAMDISK == yes || $phymem -gt $tmpfs_max_size ]]; then</span><br><span class="line">		local use_tmpfs=yes</span><br><span class="line">	fi</span><br><span class="line">	[[ -n $FORCE_TMPFS_SIZE ]] &amp;&amp; phymem=$FORCE_TMPFS_SIZE</span><br><span class="line"></span><br><span class="line">	[[ $use_tmpfs == yes ]] &amp;&amp; mount -t tmpfs -o size=$&#123;phymem&#125;M tmpfs $SDCARD</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">stage: prepare basic rootfs: unpack cache or create from scratch</span></span><br><span class="line">	create_rootfs_cache</span><br><span class="line"></span><br><span class="line">	call_extension_method &quot;pre_install_distribution_specific&quot; &quot;config_pre_install_distribution_specific&quot; &lt;&lt; &#x27;PRE_INSTALL_DISTRIBUTION_SPECIFIC&#x27;</span><br><span class="line">*give config a chance to act before install_distribution_specific*</span><br><span class="line">Called after `create_rootfs_cache` (_prepare basic rootfs: unpack cache or create from scratch_) but before `install_distribution_specific` (_install distribution and board specific applications_).</span><br><span class="line">PRE_INSTALL_DISTRIBUTION_SPECIFIC</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">stage: install kernel and u-boot packages</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">install distribution and board specific applications</span></span><br><span class="line"></span><br><span class="line">	if [[ $&#123;RELEASE&#125; == &quot;raspi&quot; ]]; then</span><br><span class="line">		install_opi_specific</span><br><span class="line">	else</span><br><span class="line">		install_distribution_specific</span><br><span class="line">		install_common</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">install locally built packages or install pre-built packages from orangepi</span></span><br><span class="line">		[[ $EXTERNAL_NEW == compile || $EXTERNAL_NEW == prebuilt ]] &amp;&amp; chroot_installpackages_local</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">[[ <span class="variable">$EXTERNAL_NEW</span> == prebuilt ]] &amp;&amp; chroot_installpackages <span class="string">&quot;yes&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">stage: user customization script</span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">NOTE: installing too many packages may fill tmpfs mount</span></span><br><span class="line">		customize_image</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">remove packages that are no longer needed. Since we have intrudoced uninstall feature, we might want to clean things that are no longer needed</span></span><br><span class="line">		display_alert &quot;No longer needed packages&quot; &quot;purge&quot; &quot;info&quot;</span><br><span class="line">		chroot $SDCARD /bin/bash -c &quot;apt-get autoremove -y&quot;  &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">create list of installed packages <span class="keyword">for</span> debug purposes</span></span><br><span class="line">		chroot $SDCARD /bin/bash -c &quot;dpkg --get-selections&quot; | grep -v deinstall | awk &#x27;&#123;print $1&#125;&#x27; | cut -f1 -d&#x27;:&#x27; &gt; $DEST/$&#123;LOG_SUBPATH&#125;/installed-packages-$&#123;RELEASE&#125;$([[ $&#123;BUILD_MINIMAL&#125; == yes ]] &amp;&amp; echo &quot;-minimal&quot;)$([[ $&#123;BUILD_DESKTOP&#125; == yes  ]] &amp;&amp; echo &quot;-desktop&quot;).list 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">clean up / prepare <span class="keyword">for</span> making the image</span></span><br><span class="line">	umount_chroot &quot;$SDCARD&quot;</span><br><span class="line">	post_debootstrap_tweaks</span><br><span class="line"></span><br><span class="line">	if [[ $ROOTFS_TYPE == fel ]]; then</span><br><span class="line">		FEL_ROOTFS=$SDCARD/</span><br><span class="line">		display_alert &quot;Starting FEL boot&quot; &quot;$BOARD&quot; &quot;info&quot;</span><br><span class="line">		source $SRC/scripts/fel-load.sh</span><br><span class="line">	else</span><br><span class="line">		prepare_partitions</span><br><span class="line">		create_image</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">stage: unmount tmpfs</span></span><br><span class="line">	umount $SDCARD 2&gt;&amp;1</span><br><span class="line">	if [[ $use_tmpfs = yes ]]; then</span><br><span class="line">		while grep -qs &quot;$SDCARD&quot; /proc/mounts</span><br><span class="line">		do</span><br><span class="line">			umount $SDCARD</span><br><span class="line">			sleep 5</span><br><span class="line">		done</span><br><span class="line">	fi</span><br><span class="line">	rm -rf $SDCARD</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">remove <span class="built_in">exit</span> <span class="built_in">trap</span></span></span><br><span class="line">	trap - INT TERM EXIT</span><br><span class="line">&#125; #############################################################################</span><br><span class="line"></span><br><span class="line">bootstrap()&#123;</span><br><span class="line">	local BOOTSTRAP_CMD=debootstrap</span><br><span class="line">	local BOOTSTRAP_ARGS=()</span><br><span class="line"></span><br><span class="line">	export CAPSH_ARG=&quot;--drop=cap_setfcap&quot;</span><br><span class="line">	export http_proxy=$&#123;APT_PROXY&#125;</span><br><span class="line"></span><br><span class="line">	BOOTSTRAP_ARGS+=(--arch arm64)</span><br><span class="line">	BOOTSTRAP_ARGS+=(--include gnupg)</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">BOOTSTRAP_ARGS+=(--components <span class="string">&quot;main,contrib,non-free&quot;</span>)</span></span><br><span class="line">	BOOTSTRAP_ARGS+=(--components &quot;main&quot;)</span><br><span class="line">	BOOTSTRAP_ARGS+=(--exclude=info)</span><br><span class="line">	BOOTSTRAP_ARGS+=(--include=ca-certificates)</span><br><span class="line">	BOOTSTRAP_ARGS+=(&quot;$@&quot;)</span><br><span class="line">	printf -v BOOTSTRAP_STR &#x27;%q &#x27; &quot;$&#123;BOOTSTRAP_ARGS[@]&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">&#123;BOOTSTRAP_CMD&#125; <span class="variable">$BOOTSTRAP_STR</span> || <span class="literal">true</span></span></span><br><span class="line">&#125;</span><br><span class="line">export -f bootstrap</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">create_rootfs_cache</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># unpacks cached rootfs for $RELEASE or creates one</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">create_rootfs_cache()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	local packages_hash=$(get_package_list_hash &quot;$ROOTFSCACHE_VERSION&quot;)</span><br><span class="line">	local cache_type=&quot;cli&quot;</span><br><span class="line">	[[ $&#123;BUILD_DESKTOP&#125; == yes ]] &amp;&amp; local cache_type=&quot;xfce-desktop&quot;</span><br><span class="line">	[[ -n $&#123;DESKTOP_ENVIRONMENT&#125; ]] &amp;&amp; local cache_type=&quot;$&#123;DESKTOP_ENVIRONMENT&#125;&quot;</span><br><span class="line">	[[ $&#123;BUILD_MINIMAL&#125; == yes ]] &amp;&amp; local cache_type=&quot;minimal&quot;</span><br><span class="line">	local cache_name=$&#123;RELEASE&#125;-$&#123;cache_type&#125;-$&#123;ARCH&#125;.$packages_hash.tar.lz4</span><br><span class="line">	local cache_fname=$&#123;EXTER&#125;/cache/rootfs/$&#123;cache_name&#125;</span><br><span class="line">	local display_name=$&#123;RELEASE&#125;-$&#123;cache_type&#125;-$&#123;ARCH&#125;.$&#123;packages_hash:0:3&#125;...$&#123;packages_hash:29&#125;.tar.lz4</span><br><span class="line"></span><br><span class="line">	if [[ -f $cache_fname &amp;&amp; &quot;$ROOT_FS_CREATE_ONLY&quot; != &quot;force&quot; ]]; then</span><br><span class="line">		local date_diff=$(( ($(date +%s) - $(stat -c %Y $cache_fname)) / 86400 ))</span><br><span class="line">		display_alert &quot;Extracting $display_name&quot; &quot;$date_diff days old&quot; &quot;info&quot;</span><br><span class="line">		pv -p -b -r -c -N &quot;[ .... ] $display_name&quot; &quot;$cache_fname&quot; | lz4 -dc | tar xp --xattrs -C $SDCARD/</span><br><span class="line">		[[ $? -ne 0 ]] &amp;&amp; rm $cache_fname &amp;&amp; exit_with_error &quot;Cache $cache_fname is corrupted and was deleted. Restart.&quot;</span><br><span class="line">		rm $SDCARD/etc/resolv.conf</span><br><span class="line">		echo &quot;nameserver $NAMESERVER&quot; &gt;&gt; $SDCARD/etc/resolv.conf</span><br><span class="line">		create_sources_list &quot;$RELEASE&quot; &quot;$SDCARD/&quot;</span><br><span class="line">	elif [[ $RELEASE == &quot;raspi&quot; ]]; then</span><br><span class="line">		display_alert &quot;local not found&quot; &quot;Creating new rootfs cache for $RELEASE&quot; &quot;info&quot;</span><br><span class="line"></span><br><span class="line">		cd $SDCARD # this will prevent error sh: 0: getcwd() failed</span><br><span class="line"></span><br><span class="line">		bootstrap bullseye &quot;$SDCARD&quot; &quot;https://mirrors.ustc.edu.cn/debian/&quot;</span><br><span class="line"></span><br><span class="line">		mount_chroot &quot;$SDCARD&quot;</span><br><span class="line"></span><br><span class="line">		display_alert &quot;Diverting&quot; &quot;initctl/start-stop-daemon&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">policy-rc.d script prevents starting or reloading services during image creation</span></span><br><span class="line">		printf &#x27;#!/bin/sh\nexit 101&#x27; &gt; $SDCARD/usr/sbin/policy-rc.d</span><br><span class="line">		LC_ALL=C LANG=C chroot $SDCARD /bin/bash -c &quot;dpkg-divert --quiet --local --rename --add /sbin/initctl&quot; &amp;&gt; /dev/null</span><br><span class="line">		LC_ALL=C LANG=C chroot $SDCARD /bin/bash -c &quot;dpkg-divert --quiet --local --rename --add /sbin/start-stop-daemon&quot; &amp;&gt; /dev/null</span><br><span class="line">		printf &#x27;#!/bin/sh\necho &quot;Warning: Fake start-stop-daemon called, doing nothing&quot;&#x27; &gt; $SDCARD/sbin/start-stop-daemon</span><br><span class="line">		printf &#x27;#!/bin/sh\necho &quot;Warning: Fake initctl called, doing nothing&quot;&#x27; &gt; $SDCARD/sbin/initctl</span><br><span class="line">		chmod 755 $SDCARD/usr/sbin/policy-rc.d</span><br><span class="line">		chmod 755 $SDCARD/sbin/initctl</span><br><span class="line">		chmod 755 $SDCARD/sbin/start-stop-daemon</span><br><span class="line"></span><br><span class="line">		install_raspi_specific</span><br><span class="line"></span><br><span class="line">		umount_chroot &quot;$SDCARD&quot;</span><br><span class="line"></span><br><span class="line">		tar cp --xattrs --directory=$SDCARD/ --exclude=&#x27;./dev/*&#x27; --exclude=&#x27;./proc/*&#x27; --exclude=&#x27;./run/*&#x27; --exclude=&#x27;./tmp/*&#x27; \</span><br><span class="line">			--exclude=&#x27;./sys/*&#x27; . | pv -p -b -r -s $(du -sb $SDCARD/ | cut -f1) -N &quot;$display_name&quot; | lz4 -5 -c &gt; $cache_fname</span><br><span class="line">	else</span><br><span class="line">		display_alert &quot;local not found&quot; &quot;Creating new rootfs cache for $RELEASE&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">stage: debootstrap base system</span></span><br><span class="line">		if [[ $NO_APT_CACHER != yes ]]; then</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">apt-cacher-ng apt-get proxy parameter</span></span><br><span class="line">			local apt_extra=&quot;-o Acquire::http::Proxy=\&quot;http://$&#123;APT_PROXY_ADDR:-localhost:3142&#125;\&quot;&quot;</span><br><span class="line">			local apt_mirror=&quot;http://$&#123;APT_PROXY_ADDR:-localhost:3142&#125;/$APT_MIRROR&quot;</span><br><span class="line">		else</span><br><span class="line">			local apt_mirror=&quot;http://$APT_MIRROR&quot;</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">fancy progress bars</span></span><br><span class="line">		[[ -z $OUTPUT_DIALOG ]] &amp;&amp; local apt_extra_progress=&quot;--show-progress -o DPKG::Progress-Fancy=1&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">Ok so <span class="keyword">for</span> <span class="built_in">eval</span>+PIPESTATUS.</span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">Try this on your bash shell:</span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">ONEVAR=<span class="string">&quot;testing&quot;</span> <span class="built_in">eval</span> <span class="string">&#x27;bash -c &quot;echo value once $ONEVAR &amp;&amp; false &amp;&amp; echo value twice $ONEVAR&quot;&#x27;</span> <span class="string">&#x27;| grep value&#x27;</span>  <span class="string">&#x27;| grep value&#x27;</span> ; <span class="built_in">echo</span> <span class="variable">$&#123;PIPESTATUS[*]&#125;</span></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">Notice how PIPESTATUS has only one element. and it is always <span class="literal">true</span>, although we failed explicitly with <span class="literal">false</span> <span class="keyword">in</span> the middle of the bash.</span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">That is because <span class="built_in">eval</span> itself is considered a single <span class="built_in">command</span>, no matter how many pipes you put <span class="keyword">in</span> there, you<span class="string">&#x27;ll get a single value, the return code of the LAST pipe.</span></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">Lets export the value of the pipe inside eval so we know outside what happened:</span></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">ONEVAR=&quot;testing&quot; eval &#x27;</span>bash -e -c <span class="string">&quot;echo value once <span class="variable">$ONEVAR</span> &amp;&amp; false &amp;&amp; echo value twice <span class="variable">$ONEVAR</span>&quot;</span><span class="string">&#x27; &#x27;</span>| grep value<span class="string">&#x27;  &#x27;</span>| grep value<span class="string">&#x27; &#x27;</span>;EVALPIPE=(<span class="variable">$&#123;PIPESTATUS[@]&#125;</span>)<span class="string">&#x27; ; echo $&#123;EVALPIPE[*]&#125;</span></span></span><br><span class="line"></span><br><span class="line">		display_alert &quot;Installing base system&quot; &quot;Stage 1/2&quot; &quot;info&quot;</span><br><span class="line">		cd $SDCARD # this will prevent error sh: 0: getcwd() failed</span><br><span class="line"></span><br><span class="line">		eval &#x27;debootstrap --variant=minbase --include=$&#123;DEBOOTSTRAP_LIST// /,&#125; $&#123;PACKAGE_LIST_EXCLUDE:+ --exclude=$&#123;PACKAGE_LIST_EXCLUDE// /,&#125;&#125; \</span><br><span class="line">			--arch=$ARCH --components=$&#123;DEBOOTSTRAP_COMPONENTS&#125; $DEBOOTSTRAP_OPTION --foreign $RELEASE $SDCARD/ $apt_mirror&#x27; \</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash"><span class="string">&#123;PROGRESS_LOG_TO_FILE:+&#x27;</span> | <span class="built_in">tee</span> -a <span class="variable">$DEST</span>/<span class="variable">$&#123;LOG_SUBPATH&#125;</span>/debootstrap.log<span class="string">&#x27;&#125; \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			$&#123;OUTPUT_DIALOG:+&#x27;</span> | dialog --backtitle <span class="string">&quot;<span class="variable">$backtitle</span>&quot;</span> --progressbox <span class="string">&quot;Debootstrap (stage 1/2)...&quot;</span> <span class="variable">$TTY_Y</span> <span class="variable">$TTY_X</span><span class="string">&#x27;&#125; \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			$&#123;OUTPUT_VERYSILENT:+&#x27;</span> &gt;/dev/null 2&gt;/dev/null<span class="string">&#x27;&#125; &#x27;</span>;EVALPIPE=(<span class="variable">$&#123;PIPESTATUS[@]&#125;</span>)<span class="string">&#x27;</span></span></span><br><span class="line"></span><br><span class="line">		[[ $&#123;EVALPIPE[0]&#125; -ne 0 || ! -f $SDCARD/debootstrap/debootstrap ]] &amp;&amp; exit_with_error &quot;Debootstrap base system for $&#123;BRANCH&#125; $&#123;BOARD&#125; $&#123;RELEASE&#125; $&#123;DESKTOP_APPGROUPS_SELECTED&#125; $&#123;DESKTOP_ENVIRONMENT&#125; $&#123;BUILD_MINIMAL&#125; first stage failed&quot;</span><br><span class="line"></span><br><span class="line">		cp /usr/bin/$QEMU_BINARY $SDCARD/usr/bin/</span><br><span class="line"></span><br><span class="line">		mkdir -p $SDCARD/usr/share/keyrings/</span><br><span class="line">		cp /usr/share/keyrings/*-archive-keyring.gpg $SDCARD/usr/share/keyrings/</span><br><span class="line"></span><br><span class="line">		display_alert &quot;Installing base system&quot; &quot;Stage 2/2&quot; &quot;info&quot;</span><br><span class="line">		eval &#x27;LC_ALL=C LANG=C chroot $SDCARD /bin/bash -e -c &quot;/debootstrap/debootstrap --second-stage&quot;&#x27; \</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash"><span class="string">&#123;PROGRESS_LOG_TO_FILE:+&#x27;</span> | <span class="built_in">tee</span> -a <span class="variable">$DEST</span>/<span class="variable">$&#123;LOG_SUBPATH&#125;</span>/debootstrap.log<span class="string">&#x27;&#125; \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			$&#123;OUTPUT_DIALOG:+&#x27;</span> | dialog --backtitle <span class="string">&quot;<span class="variable">$backtitle</span>&quot;</span> --progressbox <span class="string">&quot;Debootstrap (stage 2/2)...&quot;</span> <span class="variable">$TTY_Y</span> <span class="variable">$TTY_X</span><span class="string">&#x27;&#125; \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			$&#123;OUTPUT_VERYSILENT:+&#x27;</span> &gt;/dev/null 2&gt;/dev/null<span class="string">&#x27;&#125; &#x27;</span>;EVALPIPE=(<span class="variable">$&#123;PIPESTATUS[@]&#125;</span>)<span class="string">&#x27;</span></span></span><br><span class="line"></span><br><span class="line">		[[ $&#123;EVALPIPE[0]&#125; -ne 0 || ! -f $SDCARD/bin/bash ]] &amp;&amp; exit_with_error &quot;Debootstrap base system for $&#123;BRANCH&#125; $&#123;BOARD&#125; $&#123;RELEASE&#125; $&#123;DESKTOP_APPGROUPS_SELECTED&#125; $&#123;DESKTOP_ENVIRONMENT&#125; $&#123;BUILD_MINIMAL&#125; second stage failed&quot;</span><br><span class="line"></span><br><span class="line">		mount_chroot &quot;$SDCARD&quot;</span><br><span class="line"></span><br><span class="line">		display_alert &quot;Diverting&quot; &quot;initctl/start-stop-daemon&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">policy-rc.d script prevents starting or reloading services during image creation</span></span></span><br><span class="line">		printf &#x27;#!/bin/sh\nexit 101&#x27; &gt; $SDCARD/usr/sbin/policy-rc.d</span><br><span class="line">		LC_ALL=C LANG=C chroot $SDCARD /bin/bash -c &quot;dpkg-divert --quiet --local --rename --add /sbin/initctl&quot; &amp;&gt; /dev/null</span><br><span class="line">		LC_ALL=C LANG=C chroot $SDCARD /bin/bash -c &quot;dpkg-divert --quiet --local --rename --add /sbin/start-stop-daemon&quot; &amp;&gt; /dev/null</span><br><span class="line">		printf &#x27;#!/bin/sh\necho &quot;Warning: Fake start-stop-daemon called, doing nothing&quot;&#x27; &gt; $SDCARD/sbin/start-stop-daemon</span><br><span class="line">		printf &#x27;#!/bin/sh\necho &quot;Warning: Fake initctl called, doing nothing&quot;&#x27; &gt; $SDCARD/sbin/initctl</span><br><span class="line">		chmod 755 $SDCARD/usr/sbin/policy-rc.d</span><br><span class="line">		chmod 755 $SDCARD/sbin/initctl</span><br><span class="line">		chmod 755 $SDCARD/sbin/start-stop-daemon</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">stage: configure language and locales</span></span></span><br><span class="line">		display_alert &quot;Configuring locales&quot; &quot;$DEST_LANG&quot; &quot;info&quot;</span><br><span class="line"></span><br><span class="line">		[[ -f $SDCARD/etc/locale.gen ]] &amp;&amp; sed -i &quot;s/^# $DEST_LANG/$DEST_LANG/&quot; $SDCARD/etc/locale.gen</span><br><span class="line">		eval &#x27;LC_ALL=C LANG=C chroot $SDCARD /bin/bash -c &quot;locale-gen $DEST_LANG&quot;&#x27; $&#123;OUTPUT_VERYSILENT:+&#x27; &gt;/dev/null 2&gt;/dev/null&#x27;&#125;</span><br><span class="line">		eval &#x27;LC_ALL=C LANG=C chroot $SDCARD /bin/bash -c &quot;update-locale LANG=$DEST_LANG LANGUAGE=$DEST_LANG LC_MESSAGES=$DEST_LANG&quot;&#x27; \</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash"><span class="string">&#123;OUTPUT_VERYSILENT:+&#x27;</span> &gt;/dev/null 2&gt;/dev/null<span class="string">&#x27;&#125;</span></span></span><br><span class="line"></span><br><span class="line">		if [[ -f $SDCARD/etc/default/console-setup ]]; then</span><br><span class="line">			sed -e &#x27;s/CHARMAP=.*/CHARMAP=&quot;UTF-8&quot;/&#x27; -e &#x27;s/FONTSIZE=.*/FONTSIZE=&quot;8x16&quot;/&#x27; \</span><br><span class="line">				-e &#x27;s/CODESET=.*/CODESET=&quot;guess&quot;/&#x27; -i $SDCARD/etc/default/console-setup</span><br><span class="line">			eval &#x27;LC_ALL=C LANG=C chroot $SDCARD /bin/bash -c &quot;setupcon --save --force&quot;&#x27;</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">stage: create apt-get sources list</span></span></span><br><span class="line">		create_sources_list &quot;$RELEASE&quot; &quot;$SDCARD/&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">add armhf arhitecture to arm64, unless configured not to do so.</span></span></span><br><span class="line">		if [[ &quot;a$&#123;ARMHF_ARCH&#125;&quot; != &quot;askip&quot; ]]; then</span><br><span class="line">			[[ $ARCH == arm64 ]] &amp;&amp; eval &#x27;LC_ALL=C LANG=C chroot $SDCARD /bin/bash -c &quot;dpkg --add-architecture armhf&quot;&#x27;</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">this should fix resolvconf installation failure in some cases</span></span></span><br><span class="line">		chroot $SDCARD /bin/bash -c &#x27;echo &quot;resolvconf resolvconf/linkify-resolvconf boolean false&quot; | debconf-set-selections&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">stage: update packages list</span></span></span><br><span class="line">		display_alert &quot;Updating package list&quot; &quot;$RELEASE&quot; &quot;info&quot;</span><br><span class="line">		eval &#x27;LC_ALL=C LANG=C chroot $SDCARD /bin/bash -e -c &quot;apt-get -q -y $apt_extra update&quot;&#x27; \</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash"><span class="string">&#123;PROGRESS_LOG_TO_FILE:+&#x27;</span> | <span class="built_in">tee</span> -a <span class="variable">$DEST</span>/<span class="variable">$&#123;LOG_SUBPATH&#125;</span>/debootstrap.log<span class="string">&#x27;&#125; \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			$&#123;OUTPUT_DIALOG:+&#x27;</span> | dialog --backtitle <span class="string">&quot;<span class="variable">$backtitle</span>&quot;</span> --progressbox <span class="string">&quot;Updating package lists...&quot;</span> <span class="variable">$TTY_Y</span> <span class="variable">$TTY_X</span><span class="string">&#x27;&#125; \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			$&#123;OUTPUT_VERYSILENT:+&#x27;</span> &gt;/dev/null 2&gt;/dev/null<span class="string">&#x27;&#125; &#x27;</span>;EVALPIPE=(<span class="variable">$&#123;PIPESTATUS[@]&#125;</span>)<span class="string">&#x27;</span></span></span><br><span class="line"></span><br><span class="line">		[[ $&#123;EVALPIPE[0]&#125; -ne 0 ]] &amp;&amp; display_alert &quot;Updating package lists&quot; &quot;failed&quot; &quot;wrn&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">stage: upgrade base packages from xxx-updates and xxx-backports repository branches</span></span></span><br><span class="line">		display_alert &quot;Upgrading base packages&quot; &quot;Orange Pi&quot; &quot;info&quot;</span><br><span class="line">		eval &#x27;LC_ALL=C LANG=C chroot $SDCARD /bin/bash -e -c &quot;DEBIAN_FRONTEND=noninteractive apt-get -y -q \</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash"><span class="string">apt_extra $apt_extra_progress upgrade&quot;&#x27;</span> \</span></span><br><span class="line"><span class="language-bash">			<span class="variable">$&#123;PROGRESS_LOG_TO_FILE:+&#x27; | tee -a $DEST/<span class="variable">$&#123;LOG_SUBPATH&#125;</span>/debootstrap.log&#x27;&#125;</span> \</span></span><br><span class="line"><span class="language-bash">			<span class="variable">$&#123;OUTPUT_DIALOG:+&#x27; | dialog --backtitle &quot;$backtitle&quot; --progressbox &quot;Upgrading base packages...&quot; $TTY_Y $TTY_X&#x27;&#125;</span> \</span></span><br><span class="line"><span class="language-bash">			<span class="variable">$&#123;OUTPUT_VERYSILENT:+&#x27; &gt;/dev/null 2&gt;/dev/null&#x27;&#125;</span> <span class="string">&#x27;;EVALPIPE=($&#123;PIPESTATUS[@]&#125;)&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">Myy: Dividing the desktop packages installation steps into multiple</span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">ones. We first install the <span class="string">&quot;ADDITIONAL_PACKAGES&quot;</span> <span class="keyword">in</span> order to get</span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">access to software-common-properties installation.</span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">THEN we add the APT sources and install the Desktop packages.</span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">TODO : Find a way to add APT sources WITHOUT software-common-properties</span></span><br><span class="line"></span><br><span class="line">		[[ $&#123;EVALPIPE[0]&#125; -ne 0 ]] &amp;&amp; display_alert &quot;Upgrading base packages&quot; &quot;failed&quot; &quot;wrn&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">stage: install additional packages</span></span><br><span class="line">		display_alert &quot;Installing the main packages for&quot; &quot;Orange Pi&quot; &quot;info&quot;</span><br><span class="line">		eval &#x27;LC_ALL=C LANG=C chroot $SDCARD /bin/bash -e -c &quot;DEBIAN_FRONTEND=noninteractive apt-get -y -q \</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">apt_extra <span class="variable">$apt_extra_progress</span> --no-install-recommends install <span class="variable">$PACKAGE_MAIN_LIST</span><span class="string">&quot;&#x27; \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			<span class="variable">$&#123;PROGRESS_LOG_TO_FILE:+&#x27; | tee -a $DEST/<span class="variable">$&#123;LOG_SUBPATH&#125;</span>/debootstrap.log&#x27;&#125;</span> \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			<span class="variable">$&#123;OUTPUT_DIALOG:+&#x27; | dialog --backtitle &quot;$backtitle&quot; --progressbox &quot;Installing Orange Pi main packages...&quot; $TTY_Y $TTY_X&#x27;&#125;</span> \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			<span class="variable">$&#123;OUTPUT_VERYSILENT:+&#x27; &gt;/dev/null 2&gt;/dev/null&#x27;&#125;</span> &#x27;;EVALPIPE=(<span class="variable">$&#123;PIPESTATUS[@]&#125;</span>)&#x27;</span></span></span><br><span class="line"></span><br><span class="line">		[[ $&#123;PIPESTATUS[0]&#125; -ne 0 ]] &amp;&amp; exit_with_error &quot;Installation of Orange Pi main packages for $&#123;BRANCH&#125; $&#123;BOARD&#125; $&#123;RELEASE&#125; $&#123;DESKTOP_APPGROUPS_SELECTED&#125; $&#123;DESKTOP_ENVIRONMENT&#125; $&#123;BUILD_MINIMAL&#125; failed&quot;</span><br><span class="line"></span><br><span class="line">		if [[ $BUILD_DESKTOP == &quot;yes&quot; ]]; then</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">FIXME Myy : Are we keeping this only for Desktop users,</span></span></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">or should we extend this to CLI users too ?</span></span></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">There might be some clunky boards that require Debian packages from</span></span></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">specific repos...</span></span></span><br><span class="line">			display_alert &quot;Adding apt sources for Desktop packages&quot;</span><br><span class="line">			add_desktop_package_sources</span><br><span class="line"></span><br><span class="line">			local apt_desktop_install_flags=&quot;&quot;</span><br><span class="line">			if [[ ! -z $&#123;DESKTOP_APT_FLAGS_SELECTED+x&#125; ]]; then</span><br><span class="line">				for flag in $&#123;DESKTOP_APT_FLAGS_SELECTED&#125;; do</span><br><span class="line">					apt_desktop_install_flags+=&quot; --install-$&#123;flag&#125;&quot;</span><br><span class="line">				done</span><br><span class="line">			else</span><br><span class="line">				# Myy : Using the previous default option, if the variable isn&#x27;t defined</span><br><span class="line">				# And ONLY if it&#x27;s not defined !</span><br><span class="line">				apt_desktop_install_flags+=&quot; --no-install-recommends&quot;</span><br><span class="line">			fi</span><br><span class="line"></span><br><span class="line">			display_alert &quot;Installing the desktop packages for&quot; &quot;Orange Pi&quot; &quot;info&quot;</span><br><span class="line">			eval &#x27;LC_ALL=C LANG=C chroot $SDCARD /bin/bash -e -c &quot;DEBIAN_FRONTEND=noninteractive apt-get -y -q \</span><br><span class="line">				$apt_extra $apt_extra_progress install $&#123;apt_desktop_install_flags&#125; $PACKAGE_LIST_DESKTOP&quot;&#x27; \</span><br><span class="line">				$&#123;PROGRESS_LOG_TO_FILE:+&#x27; | tee -a $DEST/$&#123;LOG_SUBPATH&#125;/debootstrap.log&#x27;&#125; \</span><br><span class="line">				$&#123;OUTPUT_DIALOG:+&#x27; | dialog --backtitle &quot;$backtitle&quot; --progressbox &quot;Installing Orange Pi desktop packages...&quot; $TTY_Y $TTY_X&#x27;&#125; \</span><br><span class="line">				$&#123;OUTPUT_VERYSILENT:+&#x27; &gt;/dev/null 2&gt;/dev/null&#x27;&#125; &#x27;;EVALPIPE=($&#123;PIPESTATUS[@]&#125;)&#x27;</span><br><span class="line"></span><br><span class="line">			[[ $&#123;PIPESTATUS[0]&#125; -ne 0 ]] &amp;&amp; exit_with_error &quot;Installation of Orange Pi desktop packages for $&#123;BRANCH&#125; $&#123;BOARD&#125; $&#123;RELEASE&#125; $&#123;DESKTOP_APPGROUPS_SELECTED&#125; $&#123;DESKTOP_ENVIRONMENT&#125; $&#123;BUILD_MINIMAL&#125; failed&quot;</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">Remove packages from packages.uninstall</span></span></span><br><span class="line"></span><br><span class="line">		display_alert &quot;Uninstall packages&quot; &quot;$PACKAGE_LIST_UNINSTALL&quot; &quot;info&quot;</span><br><span class="line">		eval &#x27;LC_ALL=C LANG=C chroot $SDCARD /bin/bash -e -c &quot;DEBIAN_FRONTEND=noninteractive apt-get -y -qq \</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash"><span class="string">apt_extra <span class="variable">$apt_extra_progress</span> purge <span class="variable">$PACKAGE_LIST_UNINSTALL</span>&quot;</span><span class="string">&#x27; \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			$&#123;PROGRESS_LOG_TO_FILE:+&#x27;</span> &gt;&gt; <span class="variable">$DEST</span>/<span class="variable">$&#123;LOG_SUBPATH&#125;</span>/debootstrap.log<span class="string">&#x27;&#125; \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			$&#123;OUTPUT_DIALOG:+&#x27;</span> | dialog --backtitle <span class="string">&quot;<span class="variable">$backtitle</span>&quot;</span> --progressbox <span class="string">&quot;Removing packages.uninstall packages...&quot;</span> <span class="variable">$TTY_Y</span> <span class="variable">$TTY_X</span><span class="string">&#x27;&#125; \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			$&#123;OUTPUT_VERYSILENT:+&#x27;</span> &gt;/dev/null 2&gt;/dev/null<span class="string">&#x27;&#125; &#x27;</span>;EVALPIPE=(<span class="variable">$&#123;PIPESTATUS[@]&#125;</span>)<span class="string">&#x27;</span></span></span><br><span class="line"></span><br><span class="line">		[[ $&#123;EVALPIPE[0]&#125; -ne 0 ]] &amp;&amp; exit_with_error &quot;Installation of Orange Pi packages failed&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">stage: purge residual packages</span></span></span><br><span class="line">		display_alert &quot;Purging residual packages for&quot; &quot;Orange Pi&quot; &quot;info&quot;</span><br><span class="line">		PURGINGPACKAGES=$(chroot $SDCARD /bin/bash -c &quot;dpkg -l | grep \&quot;^rc\&quot; | awk &#x27;&#123;print \$2&#125;&#x27; | tr \&quot;\n\&quot; \&quot; \&quot;&quot;)</span><br><span class="line">		eval &#x27;LC_ALL=C LANG=C chroot $SDCARD /bin/bash -e -c &quot;DEBIAN_FRONTEND=noninteractive apt-get -y -q \</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash"><span class="string">apt_extra $apt_extra_progress remove --purge $PURGINGPACKAGES&quot;&#x27;</span> \</span></span><br><span class="line"><span class="language-bash">			<span class="variable">$&#123;PROGRESS_LOG_TO_FILE:+&#x27; | tee -a $DEST/<span class="variable">$&#123;LOG_SUBPATH&#125;</span>/debootstrap.log&#x27;&#125;</span> \</span></span><br><span class="line"><span class="language-bash">			<span class="variable">$&#123;OUTPUT_DIALOG:+&#x27; | dialog --backtitle &quot;$backtitle&quot; --progressbox &quot;Purging residual Orange Pi packages...&quot; $TTY_Y $TTY_X&#x27;&#125;</span> \</span></span><br><span class="line"><span class="language-bash">			<span class="variable">$&#123;OUTPUT_VERYSILENT:+&#x27; &gt;/dev/null 2&gt;/dev/null&#x27;&#125;</span> <span class="string">&#x27;;EVALPIPE=($&#123;PIPESTATUS[@]&#125;)&#x27;</span></span></span><br><span class="line"></span><br><span class="line">		[[ $&#123;EVALPIPE[0]&#125; -ne 0 ]] &amp;&amp; exit_with_error &quot;Purging of residual Orange Pi packages failed&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">stage: remove downloaded packages</span></span><br><span class="line">		chroot $SDCARD /bin/bash -c &quot;apt-get -y autoremove; apt-get clean&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">DEBUG: <span class="built_in">print</span> free space</span></span><br><span class="line">		local freespace=$(LC_ALL=C df -h)</span><br><span class="line">		echo $freespace &gt;&gt; $DEST/$&#123;LOG_SUBPATH&#125;/debootstrap.log</span><br><span class="line">		display_alert &quot;Free SD cache&quot; &quot;$(echo -e &quot;$freespace&quot; | grep $SDCARD | awk &#x27;&#123;print $5&#125;&#x27;)&quot; &quot;info&quot;</span><br><span class="line">		display_alert &quot;Mount point&quot; &quot;$(echo -e &quot;$freespace&quot; | grep $MOUNT | head -1 | awk &#x27;&#123;print $5&#125;&#x27;)&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">create list of installed packages <span class="keyword">for</span> debug purposes</span></span><br><span class="line">		chroot $SDCARD /bin/bash -c &quot;dpkg --get-selections&quot; | grep -v deinstall | awk &#x27;&#123;print $1&#125;&#x27; | cut -f1 -d&#x27;:&#x27; &gt; $&#123;cache_fname&#125;.list 2&gt;&amp;1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">creating xapian index that synaptic runs faster</span></span><br><span class="line">		if [[ $BUILD_DESKTOP == yes ]]; then</span><br><span class="line">			display_alert &quot;Recreating Synaptic search index&quot; &quot;Please wait&quot; &quot;info&quot;</span><br><span class="line">			chroot $SDCARD /bin/bash -c &quot;[[ -f /usr/sbin/update-apt-xapian-index ]] &amp;&amp; /usr/sbin/update-apt-xapian-index -u&quot;</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">this is needed <span class="keyword">for</span> the build process later since resolvconf generated file <span class="keyword">in</span> /run is not saved</span></span><br><span class="line">		rm $SDCARD/etc/resolv.conf</span><br><span class="line">		echo &quot;nameserver $NAMESERVER&quot; &gt;&gt; $SDCARD/etc/resolv.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">stage: make rootfs cache archive</span></span><br><span class="line">		display_alert &quot;Ending debootstrap process and preparing cache&quot; &quot;$RELEASE&quot; &quot;info&quot;</span><br><span class="line">		sync</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">the only reason to unmount here is compression progress display</span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">based on rootfs size calculation</span></span><br><span class="line">		umount_chroot &quot;$SDCARD&quot;</span><br><span class="line"></span><br><span class="line">		tar cp --xattrs --directory=$SDCARD/ --exclude=&#x27;./dev/*&#x27; --exclude=&#x27;./proc/*&#x27; --exclude=&#x27;./run/*&#x27; --exclude=&#x27;./tmp/*&#x27; \</span><br><span class="line">			--exclude=&#x27;./sys/*&#x27; --exclude=&#x27;./home/*&#x27; --exclude=&#x27;./root/*&#x27; . | pv -p -b -r -s $(du -sb $SDCARD/ | cut -f1) -N &quot;$display_name&quot; | lz4 -5 -c &gt; $cache_fname</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">sign rootfs cache archive that it can be used <span class="keyword">for</span> web cache once. Internal purposes</span></span><br><span class="line">		if [[ -n &quot;$&#123;GPG_PASS&#125;&quot; &amp;&amp; &quot;$&#123;SUDO_USER&#125;&quot; ]]; then</span><br><span class="line">			[[ -n $&#123;SUDO_USER&#125; ]] &amp;&amp; sudo chown -R $&#123;SUDO_USER&#125;:$&#123;SUDO_USER&#125; &quot;$&#123;DEST&#125;&quot;/images/</span><br><span class="line">			echo &quot;$&#123;GPG_PASS&#125;&quot; | sudo -H -u $&#123;SUDO_USER&#125; bash -c &quot;gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes $&#123;cache_fname&#125;&quot; || exit 1</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">needed <span class="keyword">for</span> backend to keep current only</span></span><br><span class="line">		touch $cache_fname.current</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">used <span class="keyword">for</span> internal purposes. Faster rootfs cache rebuilding</span></span><br><span class="line">	if [[ -n &quot;$ROOT_FS_CREATE_ONLY&quot; ]]; then</span><br><span class="line">		umount --lazy &quot;$SDCARD&quot;</span><br><span class="line">		rm -rf $SDCARD</span><br><span class="line"></span><br><span class="line">		display_alert &quot;Rootfs build done&quot; &quot;@host&quot; &quot;info&quot;</span><br><span class="line">		display_alert &quot;Target directory&quot; &quot;$&#123;EXTER&#125;/cache/rootfs&quot; &quot;info&quot;</span><br><span class="line">		display_alert &quot;File name&quot; &quot;$&#123;cache_name&#125;&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">remove <span class="built_in">exit</span> <span class="built_in">trap</span></span></span><br><span class="line">		trap - INT TERM EXIT</span><br><span class="line">        exit</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	mount_chroot &quot;$SDCARD&quot;</span><br><span class="line">&#125; #############################################################################</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prepare_partitions</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># creates image file, partitions and fs</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">and mounts it to <span class="built_in">local</span> <span class="built_in">dir</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">FS-dependent stuff (boot and root fs partition types) happens here</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="function"><span class="title">prepare_partitions</span></span>() &#123;</span></span><br><span class="line">	display_alert &quot;Preparing image file for rootfs&quot; &quot;$BOARD $RELEASE&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">possible partition combinations</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">/boot: none, ext4, ext2, fat (BOOTFS_TYPE)</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">root: ext4, btrfs, f2fs, nfs (ROOTFS_TYPE)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="built_in">declare</span> makes <span class="built_in">local</span> variables by default <span class="keyword">if</span> used inside a <span class="keyword">function</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">NOTE: mountopts string should always start with comma <span class="keyword">if</span> not empty</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">array copying <span class="keyword">in</span> old bash versions is tricky, so having filesystems as arrays</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">with attributes as keys is not a good idea</span></span><br><span class="line">	declare -A parttype mkopts mkopts_label mkfs mountopts</span><br><span class="line"></span><br><span class="line">	parttype[ext4]=ext4</span><br><span class="line">	parttype[ext2]=ext2</span><br><span class="line">	parttype[fat]=fat16</span><br><span class="line">	parttype[f2fs]=ext4 # not a copy-paste error</span><br><span class="line">	parttype[btrfs]=btrfs</span><br><span class="line">	parttype[xfs]=xfs</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">parttype[nfs] is empty</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">metadata_csum and 64bit may need to be disabled explicitly when migrating to newer supported host OS releases</span></span><br><span class="line">	if [[ $HOSTRELEASE =~ buster|bullseye|bookworm|bionic|focal|jammy|kinetic|sid ]]; then</span><br><span class="line">		mkopts[ext4]=&quot;-q -m 2 -O ^64bit,^metadata_csum&quot;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">mkopts[fat] is empty</span></span><br><span class="line">	mkopts[ext2]=&#x27;-q&#x27;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">mkopts[f2fs] is empty</span></span><br><span class="line">	mkopts[btrfs]=&#x27;-m dup&#x27;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">mkopts[xfs] is empty</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">mkopts[nfs] is empty</span></span><br><span class="line"></span><br><span class="line">	mkopts_label[ext4]=&#x27;-L &#x27;</span><br><span class="line">	mkopts_label[ext2]=&#x27;-L &#x27;</span><br><span class="line">	mkopts_label[fat]=&#x27;-n &#x27;</span><br><span class="line">	mkopts_label[f2fs]=&#x27;-l &#x27;</span><br><span class="line">	mkopts_label[btrfs]=&#x27;-L &#x27;</span><br><span class="line">	mkopts_label[xfs]=&#x27;-L &#x27;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">mkopts_label[nfs] is empty</span></span><br><span class="line"></span><br><span class="line">	mkfs[ext4]=ext4</span><br><span class="line">	mkfs[ext2]=ext2</span><br><span class="line">	mkfs[fat]=vfat</span><br><span class="line">	mkfs[f2fs]=f2fs</span><br><span class="line">	mkfs[btrfs]=btrfs</span><br><span class="line">	mkfs[xfs]=xfs</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">mkfs[nfs] is empty</span></span><br><span class="line"></span><br><span class="line">	mountopts[ext4]=&#x27;,commit=600,errors=remount-ro&#x27;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">mountopts[ext2] is empty</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">mountopts[fat] is empty</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">mountopts[f2fs] is empty</span></span><br><span class="line">	mountopts[btrfs]=&#x27;,commit=600&#x27;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">mountopts[xfs] is empty</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">mountopts[nfs] is empty</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">default BOOTSIZE to use <span class="keyword">if</span> not specified</span></span><br><span class="line">	DEFAULT_BOOTSIZE=1024 # MiB</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">size of UEFI partition. 0 <span class="keyword">for</span> no UEFI. Don<span class="string">&#x27;t mix UEFISIZE&gt;0 and BOOTSIZE&gt;0</span></span></span><br><span class="line">	UEFISIZE=$&#123;UEFISIZE:-0&#125;</span><br><span class="line">	BIOSSIZE=$&#123;BIOSSIZE:-0&#125;</span><br><span class="line">	UEFI_MOUNT_POINT=$&#123;UEFI_MOUNT_POINT:-/boot/efi&#125;</span><br><span class="line">	UEFI_FS_LABEL=&quot;$&#123;UEFI_FS_LABEL:-opi_efi&#125;&quot;</span><br><span class="line">	ROOT_FS_LABEL=&quot;$&#123;ROOT_FS_LABEL:-opi_root&#125;&quot;</span><br><span class="line">	BOOT_FS_LABEL=&quot;$&#123;BOOT_FS_LABEL:-opi_boot&#125;&quot;</span><br><span class="line"></span><br><span class="line">	call_extension_method &quot;pre_prepare_partitions&quot; &quot;prepare_partitions_custom&quot; &lt;&lt; &#x27;PRE_PREPARE_PARTITIONS&#x27;</span><br><span class="line">*allow custom options for mkfs*</span><br><span class="line">Good time to change stuff like mkfs opts, types etc.</span><br><span class="line">PRE_PREPARE_PARTITIONS</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">stage: determine partition configuration</span></span></span><br><span class="line">	local next=1</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Check if we need UEFI partition</span></span></span><br><span class="line">	if [[ $UEFISIZE -gt 0 ]]; then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">Check if we need BIOS partition</span></span></span><br><span class="line">		[[ $BIOSSIZE -gt 0 ]] &amp;&amp; local biospart=$((next++))</span><br><span class="line">		local uefipart=$((next++))</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Check if we need boot partition</span></span></span><br><span class="line">	if [[ -n $BOOTFS_TYPE || $ROOTFS_TYPE != ext4 || $CRYPTROOT_ENABLE == yes ]]; then</span><br><span class="line">		local bootpart=$((next++))</span><br><span class="line">		local bootfs=$&#123;BOOTFS_TYPE:-ext4&#125;</span><br><span class="line">		[[ -z $BOOTSIZE || $BOOTSIZE -le 8 ]] &amp;&amp; BOOTSIZE=$&#123;DEFAULT_BOOTSIZE&#125;</span><br><span class="line">	else</span><br><span class="line">		BOOTSIZE=0</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Check if we need root partition</span></span></span><br><span class="line">	[[ $ROOTFS_TYPE != nfs ]] &amp;&amp;</span><br><span class="line">		local rootpart=$((next++))</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">stage: calculate rootfs size</span></span></span><br><span class="line">	export rootfs_size=$(du -sm $SDCARD/ | cut -f1) # MiB</span><br><span class="line">	display_alert &quot;Current rootfs size&quot; &quot;$rootfs_size MiB&quot; &quot;info&quot;</span><br><span class="line"></span><br><span class="line">	call_extension_method &quot;prepare_image_size&quot; &quot;config_prepare_image_size&quot; &lt;&lt; &#x27;PREPARE_IMAGE_SIZE&#x27;</span><br><span class="line">*allow dynamically determining the size based on the $rootfs_size*</span><br><span class="line">Called after `$&#123;rootfs_size&#125;` is known, but before `$&#123;FIXED_IMAGE_SIZE&#125;` is taken into account.</span><br><span class="line">A good spot to determine `FIXED_IMAGE_SIZE` based on `rootfs_size`.</span><br><span class="line">UEFISIZE can be set to 0 for no UEFI partition, or to a size in MiB to include one.</span><br><span class="line">Last chance to set `USE_HOOK_FOR_PARTITION`=yes and then implement create_partition_table hook_point.</span><br><span class="line">PREPARE_IMAGE_SIZE</span><br><span class="line"></span><br><span class="line">	if [[ -n $FIXED_IMAGE_SIZE &amp;&amp; $FIXED_IMAGE_SIZE =~ ^[0-9]+$ ]]; then</span><br><span class="line">		display_alert &quot;Using user-defined image size&quot; &quot;$FIXED_IMAGE_SIZE MiB&quot; &quot;info&quot;</span><br><span class="line">		local sdsize=$FIXED_IMAGE_SIZE</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">basic sanity check</span></span></span><br><span class="line">		if [[ $ROOTFS_TYPE != nfs &amp;&amp; $sdsize -lt $rootfs_size ]]; then</span><br><span class="line">			exit_with_error &quot;User defined image size is too small&quot; &quot;$sdsize &lt;= $rootfs_size&quot;</span><br><span class="line">		fi</span><br><span class="line">	else</span><br><span class="line">		local imagesize=$(($rootfs_size + $OFFSET + $BOOTSIZE + $UEFISIZE + $EXTRA_ROOTFS_MIB_SIZE)) # MiB</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">Hardcoded overhead +25% is needed for desktop images,</span></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">for CLI it could be lower. Align the size up to 4MiB</span></span></span><br><span class="line">		if [[ $BUILD_DESKTOP == yes ]]; then</span><br><span class="line">			local sdsize=$(bc -l &lt;&lt;&lt; &quot;scale=0; ((($imagesize * 1.35) / 1 + 0) / 4 + 1) * 4&quot;)</span><br><span class="line">		else</span><br><span class="line">			local sdsize=$(bc -l &lt;&lt;&lt; &quot;scale=0; ((($imagesize * 1.30) / 1 + 0) / 4 + 1) * 4&quot;)</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">stage: create blank image</span></span></span><br><span class="line">	display_alert &quot;Creating blank image for rootfs&quot; &quot;$sdsize MiB&quot; &quot;info&quot;</span><br><span class="line">	if [[ $FAST_CREATE_IMAGE == yes ]]; then</span><br><span class="line">		truncate --size=$&#123;sdsize&#125;M $&#123;SDCARD&#125;.raw # sometimes results in fs corruption, revert to previous know to work solution</span><br><span class="line">		sync</span><br><span class="line">	else</span><br><span class="line">		dd if=/dev/zero bs=1M status=none count=$sdsize | pv -p -b -r -s $(($sdsize * 1024 * 1024)) -N &quot;[ .... ] dd&quot; | dd status=none of=$&#123;SDCARD&#125;.raw</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">stage: create partition table</span></span></span><br><span class="line">	display_alert &quot;Creating partitions&quot; &quot;$&#123;bootfs:+/boot: $bootfs &#125;root: $ROOTFS_TYPE&quot; &quot;info&quot;</span><br><span class="line">	if [[ &quot;$&#123;USE_HOOK_FOR_PARTITION&#125;&quot; == &quot;yes&quot; ]]; then</span><br><span class="line">		&#123;</span><br><span class="line">			[[ &quot;$IMAGE_PARTITION_TABLE&quot; == &quot;msdos&quot; ]] &amp;&amp;</span><br><span class="line">				echo &quot;label: dos&quot; ||</span><br><span class="line">				echo &quot;label: $IMAGE_PARTITION_TABLE&quot;</span><br><span class="line">		&#125; | sfdisk $&#123;SDCARD&#125;.raw &gt;&gt; &quot;$&#123;DEST&#125;/$&#123;LOG_SUBPATH&#125;/install.log&quot; 2&gt;&amp;1 ||</span><br><span class="line">			exit_with_error &quot;Create partition table fail. Please check&quot; &quot;$&#123;DEST&#125;/$&#123;LOG_SUBPATH&#125;/install.log&quot;</span><br><span class="line"></span><br><span class="line">		call_extension_method &quot;create_partition_table&quot; &lt;&lt;- &#x27;CREATE_PARTITION_TABLE&#x27;</span><br><span class="line">			*only called when USE_HOOK_FOR_PARTITION=yes to create the complete partition table*</span><br><span class="line">			Finally, we can get our own partition table. You have to partition $&#123;SDCARD&#125;.raw</span><br><span class="line">			yourself. Good luck.</span><br><span class="line">		CREATE_PARTITION_TABLE</span><br><span class="line">	else</span><br><span class="line">		&#123;</span><br><span class="line">			[[ &quot;$IMAGE_PARTITION_TABLE&quot; == &quot;msdos&quot; ]] &amp;&amp;</span><br><span class="line">				echo &quot;label: dos&quot; ||</span><br><span class="line">				echo &quot;label: $IMAGE_PARTITION_TABLE&quot;</span><br><span class="line"></span><br><span class="line">			local next=$OFFSET</span><br><span class="line">			if [[ -n &quot;$biospart&quot; ]]; then</span><br><span class="line">				# gpt: BIOS boot</span><br><span class="line">				local type=&quot;21686148-6449-6E6F-744E-656564454649&quot;</span><br><span class="line">				echo &quot;$biospart : name=\&quot;bios\&quot;, start=$&#123;next&#125;MiB, size=$&#123;BIOSSIZE&#125;MiB, type=$&#123;type&#125;&quot;</span><br><span class="line">				local next=$(($next + $BIOSSIZE))</span><br><span class="line">			fi</span><br><span class="line">			if [[ -n &quot;$uefipart&quot; ]]; then</span><br><span class="line">				# dos: EFI (FAT-12/16/32)</span><br><span class="line">				# gpt: EFI System</span><br><span class="line">				[[ &quot;$IMAGE_PARTITION_TABLE&quot; != &quot;gpt&quot; ]] &amp;&amp;</span><br><span class="line">					local type=&quot;ef&quot; ||</span><br><span class="line">					local type=&quot;C12A7328-F81F-11D2-BA4B-00A0C93EC93B&quot;</span><br><span class="line">				echo &quot;$uefipart : name=\&quot;efi\&quot;, start=$&#123;next&#125;MiB, size=$&#123;UEFISIZE&#125;MiB, type=$&#123;type&#125;&quot;</span><br><span class="line">				local next=$(($next + $UEFISIZE))</span><br><span class="line">			fi</span><br><span class="line">			if [[ -n &quot;$bootpart&quot; ]]; then</span><br><span class="line">				# Linux extended boot</span><br><span class="line">				[[ &quot;$IMAGE_PARTITION_TABLE&quot; != &quot;gpt&quot; ]] &amp;&amp;</span><br><span class="line">					local type=&quot;ea&quot; ||</span><br><span class="line">					local type=&quot;BC13C2FF-59E6-4262-A352-B275FD6F7172&quot;</span><br><span class="line">				if [[ -n &quot;$rootpart&quot; ]]; then</span><br><span class="line">					echo &quot;$bootpart : name=\&quot;bootfs\&quot;, start=$&#123;next&#125;MiB, size=$&#123;BOOTSIZE&#125;MiB, type=$&#123;type&#125;&quot;</span><br><span class="line">					local next=$(($next + $BOOTSIZE))</span><br><span class="line">				else</span><br><span class="line">					# no `size` argument mean &quot;as much as possible&quot;</span><br><span class="line">					echo &quot;$bootpart : name=\&quot;bootfs\&quot;, start=$&#123;next&#125;MiB, type=$&#123;type&#125;&quot;</span><br><span class="line">				fi</span><br><span class="line">			fi</span><br><span class="line">			if [[ -n &quot;$rootpart&quot; ]]; then</span><br><span class="line">				# dos: Linux</span><br><span class="line">				# gpt: Linux filesystem</span><br><span class="line">				[[ &quot;$IMAGE_PARTITION_TABLE&quot; != &quot;gpt&quot; ]] &amp;&amp;</span><br><span class="line">					local type=&quot;83&quot; ||</span><br><span class="line">					local type=&quot;0FC63DAF-8483-4772-8E79-3D69D8477DE4&quot;</span><br><span class="line">				# no `size` argument mean &quot;as much as possible&quot;</span><br><span class="line">				echo &quot;$rootpart : name=\&quot;rootfs\&quot;, start=$&#123;next&#125;MiB, type=$&#123;type&#125;&quot;</span><br><span class="line">			fi</span><br><span class="line">		&#125; | sfdisk $&#123;SDCARD&#125;.raw &gt;&gt; &quot;$&#123;DEST&#125;/$&#123;LOG_SUBPATH&#125;/install.log&quot; 2&gt;&amp;1 ||</span><br><span class="line">			exit_with_error &quot;Partition fail. Please check&quot; &quot;$&#123;DEST&#125;/$&#123;LOG_SUBPATH&#125;/install.log&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	call_extension_method &quot;post_create_partitions&quot; &lt;&lt;- &#x27;POST_CREATE_PARTITIONS&#x27;</span><br><span class="line">		*called after all partitions are created, but not yet formatted*</span><br><span class="line">	POST_CREATE_PARTITIONS</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">stage: mount image</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">lock access to loop devices</span></span></span><br><span class="line">	exec &#123;FD&#125;&gt; /var/lock/orangepi-debootstrap-losetup</span><br><span class="line">	flock -x $FD</span><br><span class="line"></span><br><span class="line">	LOOP=$(losetup -f)</span><br><span class="line">	[[ -z $LOOP ]] &amp;&amp; exit_with_error &quot;Unable to find free loop device&quot;</span><br><span class="line"></span><br><span class="line">	check_loop_device &quot;$LOOP&quot;</span><br><span class="line"></span><br><span class="line">	losetup $LOOP $&#123;SDCARD&#125;.raw</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">loop device was grabbed here, unlock</span></span></span><br><span class="line">	flock -u $FD</span><br><span class="line"></span><br><span class="line">	partprobe $LOOP</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">stage: create fs, mount partitions, create fstab</span></span></span><br><span class="line">	rm -f $SDCARD/etc/fstab</span><br><span class="line">	if [[ -n $rootpart ]]; then</span><br><span class="line">		local rootdevice=&quot;$&#123;LOOP&#125;p$&#123;rootpart&#125;&quot;</span><br><span class="line"></span><br><span class="line">		if [[ $CRYPTROOT_ENABLE == yes ]]; then</span><br><span class="line">			display_alert &quot;Encrypting root partition with LUKS...&quot; &quot;cryptsetup luksFormat $rootdevice&quot; &quot;&quot;</span><br><span class="line">			echo -n $CRYPTROOT_PASSPHRASE | cryptsetup luksFormat $CRYPTROOT_PARAMETERS $rootdevice -</span><br><span class="line">			echo -n $CRYPTROOT_PASSPHRASE | cryptsetup luksOpen $rootdevice $ROOT_MAPPER -</span><br><span class="line">			display_alert &quot;Root partition encryption complete.&quot; &quot;&quot; &quot;ext&quot;</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">TODO: pass /dev/mapper to Docker</span></span></span><br><span class="line">			rootdevice=/dev/mapper/$ROOT_MAPPER # used by `mkfs` and `mount` commands</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		check_loop_device &quot;$rootdevice&quot;</span><br><span class="line">		display_alert &quot;Creating rootfs&quot; &quot;$ROOTFS_TYPE on $rootdevice&quot;</span><br><span class="line">		mkfs.$&#123;mkfs[$ROOTFS_TYPE]&#125; $&#123;mkopts[$ROOTFS_TYPE]&#125; $&#123;mkopts_label[$ROOTFS_TYPE]:+$&#123;mkopts_label[$ROOTFS_TYPE]&#125;&quot;$ROOT_FS_LABEL&quot;&#125; $rootdevice &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span><br><span class="line">		[[ $ROOTFS_TYPE == ext4 ]] &amp;&amp; tune2fs -o journal_data_writeback $rootdevice &gt; /dev/null</span><br><span class="line">		if [[ $ROOTFS_TYPE == btrfs &amp;&amp; $BTRFS_COMPRESSION != none ]]; then</span><br><span class="line">			local fscreateopt=&quot;-o compress-force=$&#123;BTRFS_COMPRESSION&#125;&quot;</span><br><span class="line">		fi</span><br><span class="line">		mount $&#123;fscreateopt&#125; $rootdevice $MOUNT/</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">create fstab (and crypttab) entry</span></span></span><br><span class="line">		if [[ $CRYPTROOT_ENABLE == yes ]]; then</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">map the LUKS container partition via its UUID to be the &#x27;</span>cryptroot<span class="string">&#x27; device</span></span></span><br><span class="line">			echo &quot;$ROOT_MAPPER UUID=$(blkid -s UUID -o value $&#123;LOOP&#125;p$&#123;rootpart&#125;) none luks&quot; &gt;&gt; $SDCARD/etc/crypttab</span><br><span class="line">			local rootfs=$rootdevice # used in fstab</span><br><span class="line">		else</span><br><span class="line">			local rootfs=&quot;UUID=$(blkid -s UUID -o value $rootdevice)&quot;</span><br><span class="line">		fi</span><br><span class="line">		echo &quot;$rootfs / $&#123;mkfs[$ROOTFS_TYPE]&#125; defaults,noatime$&#123;mountopts[$ROOTFS_TYPE]&#125; 0 1&quot; &gt;&gt; $SDCARD/etc/fstab</span><br><span class="line">	else</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">update_initramfs will fail if /lib/modules/ doesn&#x27;</span>t exist</span></span><br><span class="line">		mount --bind --make-private $SDCARD $MOUNT/</span><br><span class="line">		echo &quot;/dev/nfs / nfs defaults 0 0&quot; &gt;&gt; $SDCARD/etc/fstab</span><br><span class="line">	fi</span><br><span class="line">	if [[ -n $bootpart ]]; then</span><br><span class="line">		display_alert &quot;Creating /boot&quot; &quot;$bootfs on $&#123;LOOP&#125;p$&#123;bootpart&#125;&quot;</span><br><span class="line">		check_loop_device &quot;$&#123;LOOP&#125;p$&#123;bootpart&#125;&quot;</span><br><span class="line">		mkfs.$&#123;mkfs[$bootfs]&#125; $&#123;mkopts[$bootfs]&#125; $&#123;mkopts_label[$bootfs]:+$&#123;mkopts_label[$bootfs]&#125;&quot;$BOOT_FS_LABEL&quot;&#125; $&#123;LOOP&#125;p$&#123;bootpart&#125; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span><br><span class="line">		mkdir -p $MOUNT/boot/</span><br><span class="line">		mount $&#123;LOOP&#125;p$&#123;bootpart&#125; $MOUNT/boot/</span><br><span class="line">		echo &quot;UUID=$(blkid -s UUID -o value $&#123;LOOP&#125;p$&#123;bootpart&#125;) /boot $&#123;mkfs[$bootfs]&#125; defaults$&#123;mountopts[$bootfs]&#125; 0 2&quot; &gt;&gt; $SDCARD/etc/fstab</span><br><span class="line">	fi</span><br><span class="line">	if [[ -n $uefipart ]]; then</span><br><span class="line">		display_alert &quot;Creating EFI partition&quot; &quot;FAT32 $&#123;UEFI_MOUNT_POINT&#125; on $&#123;LOOP&#125;p$&#123;uefipart&#125; label $&#123;UEFI_FS_LABEL&#125;&quot;</span><br><span class="line">		check_loop_device &quot;$&#123;LOOP&#125;p$&#123;uefipart&#125;&quot;</span><br><span class="line">		mkfs.fat -F32 -n &quot;$&#123;UEFI_FS_LABEL&#125;&quot; $&#123;LOOP&#125;p$&#123;uefipart&#125; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/debug/install.log 2&gt;&amp;1</span><br><span class="line">		mkdir -p &quot;$&#123;MOUNT&#125;$&#123;UEFI_MOUNT_POINT&#125;&quot;</span><br><span class="line">		mount $&#123;LOOP&#125;p$&#123;uefipart&#125; &quot;$&#123;MOUNT&#125;$&#123;UEFI_MOUNT_POINT&#125;&quot;</span><br><span class="line">		echo &quot;UUID=$(blkid -s UUID -o value $&#123;LOOP&#125;p$&#123;uefipart&#125;) $&#123;UEFI_MOUNT_POINT&#125; vfat defaults 0 2&quot; &gt;&gt; $SDCARD/etc/fstab</span><br><span class="line">	fi</span><br><span class="line">	echo &quot;tmpfs /tmp tmpfs defaults,nosuid 0 0&quot; &gt;&gt; $SDCARD/etc/fstab</span><br><span class="line"></span><br><span class="line">	call_extension_method &quot;format_partitions&quot; &lt;&lt;- &#x27;FORMAT_PARTITIONS&#x27;</span><br><span class="line">		*if you created your own partitions, this would be a good time to format them*</span><br><span class="line">		The loop device is mounted, so $&#123;LOOP&#125;p1 is it&#x27;s first partition etc.</span><br><span class="line">	FORMAT_PARTITIONS</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">stage: adjust boot script or boot environment</span></span><br><span class="line">	if [[ -f $SDCARD/boot/orangepiEnv.txt ]]; then</span><br><span class="line">		if [[ $CRYPTROOT_ENABLE == yes ]]; then</span><br><span class="line">			echo &quot;rootdev=$rootdevice cryptdevice=UUID=$(blkid -s UUID -o value $&#123;LOOP&#125;p$&#123;rootpart&#125;):$ROOT_MAPPER&quot; &gt;&gt; $SDCARD/boot/orangepiEnv.txt</span><br><span class="line">		else</span><br><span class="line">			echo &quot;rootdev=$rootfs&quot; &gt;&gt; $SDCARD/boot/orangepiEnv.txt</span><br><span class="line">		fi</span><br><span class="line">		echo &quot;rootfstype=$ROOTFS_TYPE&quot; &gt;&gt; $SDCARD/boot/orangepiEnv.txt</span><br><span class="line">	elif [[ $rootpart != 1 ]] &amp;&amp; [[ $SRC_EXTLINUX != yes ]]; then</span><br><span class="line">		local bootscript_dst=$&#123;BOOTSCRIPT##*:&#125;</span><br><span class="line">		sed -i &#x27;s/mmcblk0p1/mmcblk0p2/&#x27; $SDCARD/boot/$bootscript_dst</span><br><span class="line">		sed -i -e &quot;s/rootfstype=ext4/rootfstype=$ROOTFS_TYPE/&quot; \</span><br><span class="line">			-e &quot;s/rootfstype \&quot;ext4\&quot;/rootfstype \&quot;$ROOTFS_TYPE\&quot;/&quot; $SDCARD/boot/$bootscript_dst</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="keyword">if</span> we have boot.ini = remove orangepiEnv.txt and add UUID there <span class="keyword">if</span> enabled</span></span><br><span class="line">	if [[ -f $SDCARD/boot/boot.ini ]]; then</span><br><span class="line">		sed -i -e &quot;s/rootfstype \&quot;ext4\&quot;/rootfstype \&quot;$ROOTFS_TYPE\&quot;/&quot; $SDCARD/boot/boot.ini</span><br><span class="line">		if [[ $CRYPTROOT_ENABLE == yes ]]; then</span><br><span class="line">			local rootpart=&quot;UUID=$(blkid -s UUID -o value $&#123;LOOP&#125;p$&#123;rootpart&#125;)&quot;</span><br><span class="line">			sed -i &#x27;s/^setenv rootdev .*/setenv rootdev &quot;\/dev\/mapper\/&#x27;$ROOT_MAPPER&#x27; cryptdevice=&#x27;$rootpart&#x27;:&#x27;$ROOT_MAPPER&#x27;&quot;/&#x27; $SDCARD/boot/boot.ini</span><br><span class="line">		else</span><br><span class="line">			sed -i &#x27;s/^setenv rootdev .*/setenv rootdev &quot;&#x27;$rootfs&#x27;&quot;/&#x27; $SDCARD/boot/boot.ini</span><br><span class="line">		fi</span><br><span class="line">		if [[ $LINUXFAMILY != meson64 ]]; then</span><br><span class="line">			[[ -f $SDCARD/boot/orangepiEnv.txt ]] &amp;&amp; rm $SDCARD/boot/orangepiEnv.txt</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="keyword">if</span> we have a headless device, <span class="built_in">set</span> console to DEFAULT_CONSOLE</span></span><br><span class="line">	if [[ -n $DEFAULT_CONSOLE &amp;&amp; -f $SDCARD/boot/orangepiEnv.txt ]]; then</span><br><span class="line">		if grep -lq &quot;^console=&quot; $SDCARD/boot/orangepiEnv.txt; then</span><br><span class="line">			sed -i &quot;s/^console=.*/console=$DEFAULT_CONSOLE/&quot; $SDCARD/boot/orangepiEnv.txt</span><br><span class="line">		else</span><br><span class="line">			echo &quot;console=$DEFAULT_CONSOLE&quot; &gt;&gt; $SDCARD/boot/orangepiEnv.txt</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">recompile .cmd to .scr <span class="keyword">if</span> boot.cmd exists</span></span><br><span class="line"></span><br><span class="line">	if [[ -f $SDCARD/boot/boot.cmd ]]; then</span><br><span class="line">		if [ -z $BOOTSCRIPT_OUTPUT ]; then BOOTSCRIPT_OUTPUT=boot.scr; fi</span><br><span class="line">		mkimage -C none -A arm -T script -d $SDCARD/boot/boot.cmd $SDCARD/boot/$BOOTSCRIPT_OUTPUT &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">create extlinux config</span></span><br><span class="line">	if [[ -f $SDCARD/boot/extlinux/extlinux.conf ]]; then</span><br><span class="line">		echo &quot;  append root=$rootfs $SRC_CMDLINE $MAIN_CMDLINE&quot; &gt;&gt; $SDCARD/boot/extlinux/extlinux.conf</span><br><span class="line">		[[ -f $SDCARD/boot/orangepiEnv.txt ]] &amp;&amp; rm $SDCARD/boot/orangepiEnv.txt</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">update_initramfs</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># this should be invoked as late as possible for any modifications by</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">customize_image (userpatches) and prepare_partitions to be reflected <span class="keyword">in</span> the</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">final initramfs</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># especially, this needs to be invoked after /etc/crypttab has been created</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">for</span> cryptroot-unlock to work:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://serverfault.com/questions/907254/cryproot-unlock-with-dropbear-timeout-while-waiting-for-askpass</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># since Debian buster, it has to be called within create_image() on the $MOUNT</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">path instead of <span class="variable">$SDCARD</span> (<span class="built_in">which</span> can be a tmpfs and breaks cryptsetup-initramfs).</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">update_initramfs()</span></span><br><span class="line">&#123;</span><br><span class="line">	local chroot_target=$1</span><br><span class="line">	local target_dir=$(</span><br><span class="line">		find $&#123;chroot_target&#125;/lib/modules/ -maxdepth 1 -type d -name &quot;*$&#123;VER&#125;*&quot;</span><br><span class="line">	)</span><br><span class="line">	if [ &quot;$target_dir&quot; != &quot;&quot; ]; then</span><br><span class="line">		update_initramfs_cmd=&quot;update-initramfs -uv -k $(basename $target_dir)&quot;</span><br><span class="line">	else</span><br><span class="line">		exit_with_error &quot;No kernel installed for the version&quot; &quot;$&#123;VER&#125;&quot;</span><br><span class="line">	fi</span><br><span class="line">	display_alert &quot;Updating initramfs...&quot; &quot;$update_initramfs_cmd&quot; &quot;&quot;</span><br><span class="line">	cp /usr/bin/$QEMU_BINARY $chroot_target/usr/bin/</span><br><span class="line">	mount_chroot &quot;$chroot_target/&quot;</span><br><span class="line"></span><br><span class="line">	chroot $chroot_target /bin/bash -c &quot;$update_initramfs_cmd&quot; &gt;&gt; $DEST/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1 || &#123;</span><br><span class="line">		display_alert &quot;Updating initramfs FAILED, see:&quot; &quot;$DEST/$&#123;LOG_SUBPATH&#125;/install.log&quot; &quot;err&quot;</span><br><span class="line">		exit 23</span><br><span class="line">	&#125;</span><br><span class="line">	display_alert &quot;Updated initramfs.&quot; &quot;for details see: $DEST/$&#123;LOG_SUBPATH&#125;/install.log&quot; &quot;info&quot;</span><br><span class="line"></span><br><span class="line">	display_alert &quot;Re-enabling&quot; &quot;initramfs-tools hook for kernel&quot;</span><br><span class="line">	chroot $chroot_target /bin/bash -c &quot;chmod -v +x /etc/kernel/postinst.d/initramfs-tools&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">	umount_chroot &quot;$chroot_target/&quot;</span><br><span class="line">	rm $chroot_target/usr/bin/$QEMU_BINARY</span><br><span class="line"></span><br><span class="line">&#125; #############################################################################</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">create_image</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># finishes creation of image from cached rootfs</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">create_image()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">stage: create file name</span></span><br><span class="line">	if [[ $SELECTED_CONFIGURATION == &quot;cli_standard&quot; ]]; then</span><br><span class="line">		IMAGE_TYPE=server</span><br><span class="line">	elif [[ $SELECTED_CONFIGURATION == &quot;cli_minimal&quot; ]]; then</span><br><span class="line">		IMAGE_TYPE=minimal</span><br><span class="line">	else</span><br><span class="line">		IMAGE_TYPE=desktop</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ $&#123;MEM_TYPE&#125; == &quot;1500MB&quot; ]]; then</span><br><span class="line">		local version=&quot;$&#123;BOARD^&#125;_$&#123;REVISION&#125;_$&#123;DISTRIBUTION,&#125;_$&#123;RELEASE&#125;_$&#123;IMAGE_TYPE&#125;&quot;$&#123;DESKTOP_ENVIRONMENT:+_$DESKTOP_ENVIRONMENT&#125;&quot;_linux$(grab_version &quot;$LINUXSOURCEDIR&quot;)_1.5gb&quot;</span><br><span class="line">	else</span><br><span class="line">		local version=&quot;$&#123;BOARD^&#125;_$&#123;REVISION&#125;_$&#123;DISTRIBUTION,&#125;_$&#123;RELEASE&#125;_$&#123;IMAGE_TYPE&#125;&quot;$&#123;DESKTOP_ENVIRONMENT:+_$DESKTOP_ENVIRONMENT&#125;&quot;_linux$(grab_version &quot;$LINUXSOURCEDIR&quot;)&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ $&#123;RELEASE&#125; == &quot;raspi&quot; ]]; then</span><br><span class="line">		local version=&quot;$&#123;BOARD^&#125;_$&#123;REVISION&#125;_raspios_bullseye_$&#123;IMAGE_TYPE&#125;&quot;$&#123;DESKTOP_ENVIRONMENT:+_$DESKTOP_ENVIRONMENT&#125;&quot;_linux$(grab_version &quot;$LINUXSOURCEDIR&quot;)&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	[[ $ROOTFS_TYPE == nfs ]] &amp;&amp; version=$&#123;version&#125;_nfsboot</span><br><span class="line"></span><br><span class="line">	destimg=$DEST/images/$&#123;version&#125;</span><br><span class="line">	rm -rf $destimg</span><br><span class="line">	mkdir -p $destimg</span><br><span class="line"></span><br><span class="line">	if [[ $ROOTFS_TYPE != nfs ]]; then</span><br><span class="line">		display_alert &quot;Copying files to&quot; &quot;/&quot;</span><br><span class="line">		echo -e &quot;\nCopying files to [/]&quot; &gt;&gt;&quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log</span><br><span class="line">		rsync -aHWXh \</span><br><span class="line">			  --exclude=&quot;/boot/*&quot; \</span><br><span class="line">			  --exclude=&quot;/dev/*&quot; \</span><br><span class="line">			  --exclude=&quot;/proc/*&quot; \</span><br><span class="line">			  --exclude=&quot;/run/*&quot; \</span><br><span class="line">			  --exclude=&quot;/tmp/*&quot; \</span><br><span class="line">			  --exclude=&quot;/sys/*&quot; \</span><br><span class="line">			  --info=progress0,stats1 $SDCARD/ $MOUNT/ &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span><br><span class="line">	else</span><br><span class="line">		display_alert &quot;Creating rootfs archive&quot; &quot;rootfs.tgz&quot; &quot;info&quot;</span><br><span class="line">		tar cp --xattrs --directory=$SDCARD/ --exclude=&#x27;./boot/*&#x27; --exclude=&#x27;./dev/*&#x27; --exclude=&#x27;./proc/*&#x27; --exclude=&#x27;./run/*&#x27; --exclude=&#x27;./tmp/*&#x27; \</span><br><span class="line">			--exclude=&#x27;./sys/*&#x27; . | pv -p -b -r -s $(du -sb $SDCARD/ | cut -f1) -N &quot;rootfs.tgz&quot; | gzip -c &gt; $destimg/$&#123;version&#125;-rootfs.tgz</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">stage: rsync /boot</span></span><br><span class="line">	display_alert &quot;Copying files to&quot; &quot;/boot&quot;</span><br><span class="line">	echo -e &quot;\nCopying files to [/boot]&quot; &gt;&gt;&quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log</span><br><span class="line">	if [[ $(findmnt --target $MOUNT/boot -o FSTYPE -n) == vfat ]]; then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">fat32</span></span><br><span class="line">		rsync -rLtWh \</span><br><span class="line">			  --info=progress0,stats1 \</span><br><span class="line">			  --log-file=&quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log $SDCARD/boot $MOUNT &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span><br><span class="line">	else</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">ext4</span></span><br><span class="line">		rsync -aHWXh \</span><br><span class="line">			  --info=progress0,stats1 \</span><br><span class="line">			  --log-file=&quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log $SDCARD/boot $MOUNT &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	call_extension_method &quot;pre_update_initramfs&quot; &quot;config_pre_update_initramfs&quot; &lt;&lt; &#x27;PRE_UPDATE_INITRAMFS&#x27;</span><br><span class="line">*allow config to hack into the initramfs create process*</span><br><span class="line">Called after rsync has synced both `/root` and `/root` on the target, but before calling `update_initramfs`.</span><br><span class="line">PRE_UPDATE_INITRAMFS</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">stage: create final initramfs</span></span><br><span class="line">	[[ -n $KERNELSOURCE ]] &amp;&amp; &#123;</span><br><span class="line">		update_initramfs $MOUNT</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">DEBUG: <span class="built_in">print</span> free space</span></span><br><span class="line">	local freespace=$(LC_ALL=C df -h)</span><br><span class="line">	echo $freespace &gt;&gt; $DEST/$&#123;LOG_SUBPATH&#125;/debootstrap.log</span><br><span class="line">	display_alert &quot;Free SD cache&quot; &quot;$(echo -e &quot;$freespace&quot; | grep $SDCARD | awk &#x27;&#123;print $5&#125;&#x27;)&quot; &quot;info&quot;</span><br><span class="line">	display_alert &quot;Mount point&quot; &quot;$(echo -e &quot;$freespace&quot; | grep $MOUNT | head -1 | awk &#x27;&#123;print $5&#125;&#x27;)&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">stage: write u-boot</span></span><br><span class="line">	write_uboot $LOOP</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">fix wrong / permissions</span></span><br><span class="line">	chmod 755 $MOUNT</span><br><span class="line"></span><br><span class="line">	call_extension_method &quot;pre_umount_final_image&quot; &quot;config_pre_umount_final_image&quot; &lt;&lt; &#x27;PRE_UMOUNT_FINAL_IMAGE&#x27;</span><br><span class="line">*allow config to hack into the image before the unmount*</span><br><span class="line">Called before unmounting both `/root` and `/boot`.</span><br><span class="line">PRE_UMOUNT_FINAL_IMAGE</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">unmount /boot/efi first, <span class="keyword">then</span> /boot, rootfs third, image file last</span></span><br><span class="line">	sync</span><br><span class="line">	[[ $UEFISIZE != 0 ]] &amp;&amp; umount -l &quot;$&#123;MOUNT&#125;$&#123;UEFI_MOUNT_POINT&#125;&quot;</span><br><span class="line">	[[ $BOOTSIZE != 0 ]] &amp;&amp; umount -l $MOUNT/boot</span><br><span class="line">	[[ $ROOTFS_TYPE != nfs ]] &amp;&amp; umount -l $MOUNT</span><br><span class="line">	[[ $CRYPTROOT_ENABLE == yes ]] &amp;&amp; cryptsetup luksClose $ROOT_MAPPER</span><br><span class="line"></span><br><span class="line">	call_extension_method &quot;post_umount_final_image&quot; &quot;config_post_umount_final_image&quot; &lt;&lt; &#x27;POST_UMOUNT_FINAL_IMAGE&#x27;</span><br><span class="line">*allow config to hack into the image after the unmount*</span><br><span class="line">Called after unmounting both `/root` and `/boot`.</span><br><span class="line">POST_UMOUNT_FINAL_IMAGE</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">to make sure its unmounted</span></span><br><span class="line">	while grep -Eq &#x27;($&#123;MOUNT&#125;|$&#123;DESTIMG&#125;)&#x27; /proc/mounts</span><br><span class="line">	do</span><br><span class="line">		display_alert &quot;Wait for unmount&quot; &quot;$&#123;MOUNT&#125;&quot; &quot;info&quot;</span><br><span class="line">		sleep 5</span><br><span class="line">	done</span><br><span class="line"></span><br><span class="line">	losetup -d $LOOP</span><br><span class="line">	rm -rf --one-file-system $DESTIMG $MOUNT</span><br><span class="line"></span><br><span class="line">	mkdir -p $DESTIMG</span><br><span class="line">	mv $&#123;SDCARD&#125;.raw $DESTIMG/$&#123;version&#125;.img</span><br><span class="line"></span><br><span class="line">	FINALDEST=$&#123;destimg&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">custom post_build_image_modify hook to run before fingerprinting and compression</span></span><br><span class="line">	[[ $(type -t post_build_image_modify) == function ]] &amp;&amp; display_alert &quot;Custom Hook Detected&quot; &quot;post_build_image_modify&quot; &quot;info&quot; &amp;&amp; post_build_image_modify &quot;$&#123;DESTIMG&#125;/$&#123;version&#125;.img&quot;</span><br><span class="line"></span><br><span class="line">	if [[ $BUILD_ALL != yes ]]; then</span><br><span class="line">	</span><br><span class="line">		if [[ $COMPRESS_OUTPUTIMAGE == &quot;&quot; || $COMPRESS_OUTPUTIMAGE == no ]]; then</span><br><span class="line">			COMPRESS_OUTPUTIMAGE=&quot;sha,gpg,img&quot;</span><br><span class="line">		elif [[ $COMPRESS_OUTPUTIMAGE == yes ]]; then</span><br><span class="line">			COMPRESS_OUTPUTIMAGE=&quot;sha,gpg,7z&quot;</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		if [[ $COMPRESS_OUTPUTIMAGE == *gz* ]]; then</span><br><span class="line">			display_alert &quot;Compressing&quot; &quot;$&#123;DESTIMG&#125;/$&#123;version&#125;.img.gz&quot; &quot;info&quot;</span><br><span class="line">			pigz -3 &lt; $DESTIMG/$&#123;version&#125;.img &gt; $DESTIMG/$&#123;version&#125;.img.gz</span><br><span class="line">			compression_type=&quot;.gz&quot;</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		if [[ $COMPRESS_OUTPUTIMAGE == *xz* ]]; then</span><br><span class="line">			display_alert &quot;Compressing&quot; &quot;$&#123;DESTIMG&#125;/$&#123;version&#125;.img.xz&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">compressing consumes a lot of memory we don<span class="string">&#x27;t have. Waiting for previous packing job to finish helps to run a lot more builds in parallel</span></span></span><br><span class="line">			available_cpu=$(grep -c &#x27;processor&#x27; /proc/cpuinfo)</span><br><span class="line">			[[ $&#123;BUILD_ALL&#125; == yes ]] &amp;&amp; available_cpu=$(( $available_cpu * 30 / 100 )) # lets use 20% of resources in case of build-all</span><br><span class="line">			[[ $&#123;available_cpu&#125; -gt 8 ]] &amp;&amp; available_cpu=8 # using more cpu cores for compressing is pointless</span><br><span class="line">			available_mem=$(LC_ALL=c free | grep Mem | awk &#x27;&#123;print $4/$2 * 100.0&#125;&#x27; | awk &#x27;&#123;print int($1)&#125;&#x27;) # in percentage</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">build optimisations when memory drops below 5%</span></span></span><br><span class="line">			if [[ $&#123;BUILD_ALL&#125; == yes &amp;&amp; ( $&#123;available_mem&#125; -lt 15 || $(ps -uax | grep &quot;pixz&quot; | wc -l) -gt 4 )]]; then</span><br><span class="line">				while [[ $(ps -uax | grep &quot;pixz&quot; | wc -l) -gt 2 ]]</span><br><span class="line">					do echo -en &quot;#&quot;</span><br><span class="line">					sleep 20</span><br><span class="line">				done</span><br><span class="line">			fi</span><br><span class="line">			pixz -7 -p $&#123;available_cpu&#125; -f $(expr $&#123;available_cpu&#125; + 2) &lt; $DESTIMG/$&#123;version&#125;.img &gt; $&#123;DESTIMG&#125;/$&#123;version&#125;.img.xz</span><br><span class="line">			compression_type=&quot;.xz&quot;</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		if [[ $COMPRESS_OUTPUTIMAGE == *img* || $COMPRESS_OUTPUTIMAGE == *7z* ]]; then</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">			mv $DESTIMG/$&#123;version&#125;.img $&#123;FINALDEST&#125;/$&#123;version&#125;.img || exit 1</span></span></span><br><span class="line">			compression_type=&quot;&quot;</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		if [[ $COMPRESS_OUTPUTIMAGE == *sha* ]]; then</span><br><span class="line">			cd $&#123;DESTIMG&#125;</span><br><span class="line">			display_alert &quot;SHA256 calculating&quot; &quot;$&#123;version&#125;.img$&#123;compression_type&#125;&quot; &quot;info&quot;</span><br><span class="line">			sha256sum -b $&#123;version&#125;.img$&#123;compression_type&#125; &gt; $&#123;version&#125;.img$&#123;compression_type&#125;.sha</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		if [[ $COMPRESS_OUTPUTIMAGE == *gpg* ]]; then</span><br><span class="line">			cd $&#123;DESTIMG&#125;</span><br><span class="line">			if [[ -n $GPG_PASS ]]; then</span><br><span class="line">				display_alert &quot;GPG signing&quot; &quot;$&#123;version&#125;.img$&#123;compression_type&#125;&quot; &quot;info&quot;</span><br><span class="line">				[[ -n $&#123;SUDO_USER&#125; ]] &amp;&amp; sudo chown -R $&#123;SUDO_USER&#125;:$&#123;SUDO_USER&#125; &quot;$&#123;DESTIMG&#125;&quot;/</span><br><span class="line">				echo &quot;$&#123;GPG_PASS&#125;&quot; | sudo -H -u $&#123;SUDO_USER&#125; bash -c &quot;gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes $&#123;DESTIMG&#125;/$&#123;version&#125;.img$&#123;compression_type&#125;&quot; || exit 1</span><br><span class="line"><span class="meta prompt_">			#</span><span class="language-bash"><span class="string">else</span></span></span><br><span class="line"><span class="meta prompt_">			#</span><span class="language-bash"><span class="string">	display_alert &quot;GPG signing skipped - no GPG_PASS&quot; &quot;$&#123;version&#125;.img&quot; &quot;wrn&quot;</span></span></span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"><span class="string">fingerprint_image &quot;$&#123;DESTIMG&#125;/$&#123;version&#125;.img$&#123;compression_type&#125;.txt&quot; &quot;$&#123;version&#125;&quot;</span></span></span><br><span class="line"></span><br><span class="line">		if [[ $COMPRESS_OUTPUTIMAGE == *7z* ]]; then</span><br><span class="line">			display_alert &quot;Compressing&quot; &quot;$&#123;DESTIMG&#125;/$&#123;version&#125;.7z&quot; &quot;info&quot;</span><br><span class="line">			7za a -t7z -bd -m0=lzma2 -mx=3 -mfb=64 -md=32m -ms=on \</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash"><span class="string">&#123;DESTIMG&#125;/$&#123;version&#125;.7z $&#123;version&#125;.key $&#123;version&#125;.img* &gt;/dev/null 2&gt;&amp;1</span></span></span><br><span class="line">			find $&#123;DESTIMG&#125;/ -type \</span><br><span class="line">			f \( -name &quot;$&#123;version&#125;.img&quot; -o -name &quot;$&#123;version&#125;.img.asc&quot; -o -name &quot;$&#123;version&#125;.img.txt&quot; -o -name &quot;$&#123;version&#125;.img.sha&quot; \) -print0 \</span><br><span class="line"><span class="meta prompt_">			&gt;</span><span class="language-bash"><span class="string">/dev/null 2&gt;&amp;1</span></span></span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">display_alert &quot;Done building&quot; &quot;$&#123;DESTIMG&#125;/$&#123;version&#125;.img&quot; &quot;info&quot;</span></span></span><br><span class="line">	display_alert &quot;Done building&quot; &quot;$&#123;FINALDEST&#125;/$&#123;version&#125;.img&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">call custom post build hook</span></span></span><br><span class="line">	[[ $(type -t post_build_image) == function ]] &amp;&amp; post_build_image &quot;$&#123;DESTIMG&#125;/$&#123;version&#125;.img&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">move artefacts from temporally directory to its final destination</span></span></span><br><span class="line">	[[ -n $compression_type ]] &amp;&amp; rm $DESTIMG/$&#123;version&#125;.img</span><br><span class="line">	mv $DESTIMG/$&#123;version&#125;* $&#123;FINALDEST&#125;</span><br><span class="line">	rm -rf $DESTIMG</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">write image to SD card</span></span></span><br><span class="line">	if [[ $(lsblk &quot;$CARD_DEVICE&quot; 2&gt;/dev/null) &amp;&amp; -f $&#123;FINALDEST&#125;/$&#123;version&#125;.img ]]; then</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">make sha256sum if it does not exists. we need it for comparisson</span></span></span><br><span class="line">		if [[ -f &quot;$&#123;FINALDEST&#125;/$&#123;version&#125;&quot;.img.sha ]]; then</span><br><span class="line">			local ifsha=$(cat $&#123;FINALDEST&#125;/$&#123;version&#125;.img.sha | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">		else</span><br><span class="line">			local ifsha=$(sha256sum -b &quot;$&#123;FINALDEST&#125;/$&#123;version&#125;&quot;.img | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		display_alert &quot;Writing image&quot; &quot;$CARD_DEVICE $&#123;readsha&#125;&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">write to SD card</span></span></span><br><span class="line">		pv -p -b -r -c -N &quot;[ .... ] dd&quot; $&#123;FINALDEST&#125;/$&#123;version&#125;.img | dd of=$CARD_DEVICE bs=1M iflag=fullblock oflag=direct status=none</span><br><span class="line"></span><br><span class="line">		call_extension_method &quot;post_write_sdcard&quot;  &lt;&lt;- &#x27;POST_BUILD_IMAGE&#x27;</span><br><span class="line">		*run after writing img to sdcard*</span><br><span class="line">		After the image is written to `$CARD_DEVICE`, but before verifying it.</span><br><span class="line">		You can still set SKIP_VERIFY=yes to skip verification.</span><br><span class="line">		POST_BUILD_IMAGE</span><br><span class="line"></span><br><span class="line">		if [[ &quot;$&#123;SKIP_VERIFY&#125;&quot; != &quot;yes&quot; ]]; then</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">read and compare</span></span></span><br><span class="line">			display_alert &quot;Verifying. Please wait!&quot;</span><br><span class="line">			local ofsha=$(dd if=$CARD_DEVICE count=$(du -b $&#123;FINALDEST&#125;/$&#123;version&#125;.img | cut -f1) status=none iflag=count_bytes oflag=direct | sha256sum | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">			if [[ $ifsha == $ofsha ]]; then</span><br><span class="line">				display_alert &quot;Writing verified&quot; &quot;$&#123;version&#125;.img&quot; &quot;info&quot;</span><br><span class="line">			else</span><br><span class="line">				display_alert &quot;Writing failed&quot; &quot;$&#123;version&#125;.img&quot; &quot;err&quot;</span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line">	elif [[ `systemd-detect-virt` == &#x27;docker&#x27; &amp;&amp; -n $CARD_DEVICE ]]; then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">display warning when we want to write sd card under Docker</span></span></span><br><span class="line">		display_alert &quot;Can&#x27;t write to $CARD_DEVICE&quot; &quot;Enable docker privileged mode in config-docker.conf&quot; &quot;wrn&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">&#125; #############################################################################</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="6-distributionssh分析"><a class="markdownIt-Anchor" href="#6-distributionssh分析"></a> 6 distributions.sh分析</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Copyright (c) 2013-2021 Igor Pecovnik, igor.pecovnik@gma**.com</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This file is licensed under the terms of the GNU General Public</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">License version 2. This program is licensed <span class="string">&quot;as is&quot;</span> without any</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">warranty of any kind, whether express or implied.</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Functions:</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">install_common</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">install_rclocal</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">install_distribution_specific</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">post_debootstrap_tweaks</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">install_common()</span><br><span class="line">&#123;</span><br><span class="line">	display_alert &quot;Applying common tweaks&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">install rootfs encryption related packages separate to not <span class="built_in">break</span> packages cache</span></span><br><span class="line">	if [[ $CRYPTROOT_ENABLE == yes ]]; then</span><br><span class="line">		display_alert &quot;Installing rootfs encryption related packages&quot; &quot;cryptsetup&quot; &quot;info&quot;</span><br><span class="line">		chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;apt-get -y -qq --no-install-recommends install cryptsetup&quot; \</span><br><span class="line"><span class="meta prompt_">		&gt;</span><span class="language-bash">&gt; <span class="string">&quot;<span class="variable">$&#123;DEST&#125;</span>&quot;</span>/<span class="variable">$&#123;LOG_SUBPATH&#125;</span>/install.log 2&gt;&amp;1</span></span><br><span class="line">		if [[ $CRYPTROOT_SSH_UNLOCK == yes ]]; then</span><br><span class="line">			display_alert &quot;Installing rootfs encryption related packages&quot; &quot;dropbear-initramfs&quot; &quot;info&quot;</span><br><span class="line">			chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;apt-get -y -qq --no-install-recommends install dropbear-initramfs cryptsetup-initramfs&quot; \</span><br><span class="line"><span class="meta prompt_">			&gt;</span><span class="language-bash">&gt; <span class="string">&quot;<span class="variable">$&#123;DEST&#125;</span>&quot;</span>/<span class="variable">$&#123;LOG_SUBPATH&#125;</span>/install.log 2&gt;&amp;1</span></span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">add dummy fstab entry to make mkinitramfs happy</span></span><br><span class="line">	echo &quot;/dev/mmcblk0p1 / $ROOTFS_TYPE defaults 0 1&quot; &gt;&gt; &quot;$&#123;SDCARD&#125;&quot;/etc/fstab</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">required <span class="keyword">for</span> initramfs-tools-core on Stretch since it ignores the / fstab entry</span></span><br><span class="line">	echo &quot;/dev/mmcblk0p2 /usr $ROOTFS_TYPE defaults 0 2&quot; &gt;&gt; &quot;$&#123;SDCARD&#125;&quot;/etc/fstab</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">adjust initramfs dropbear configuration</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">needs to be <span class="keyword">done</span> before kernel installation, <span class="keyword">else</span> it won<span class="string">&#x27;t be in the initrd image</span></span></span><br><span class="line">	if [[ $CRYPTROOT_ENABLE == yes &amp;&amp; $CRYPTROOT_SSH_UNLOCK == yes ]]; then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">Set the port of the dropbear ssh daemon in the initramfs to a different one if configured</span></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">this avoids the typical &#x27;</span>host key changed warning<span class="string">&#x27; - `WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!`</span></span></span><br><span class="line">		[[ -f &quot;$&#123;SDCARD&#125;&quot;/etc/dropbear-initramfs/config ]] &amp;&amp; \</span><br><span class="line">		sed -i &#x27;s/^#DROPBEAR_OPTIONS=/DROPBEAR_OPTIONS=&quot;-p &#x27;&quot;$&#123;CRYPTROOT_SSH_UNLOCK_PORT&#125;&quot;&#x27;&quot;/&#x27; \</span><br><span class="line">		&quot;$&#123;SDCARD&#125;&quot;/etc/dropbear-initramfs/config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">setup dropbear authorized_keys, either provided by userpatches or generated</span></span></span><br><span class="line">		if [[ -f $USERPATCHES_PATH/dropbear_authorized_keys ]]; then</span><br><span class="line">			cp &quot;$USERPATCHES_PATH&quot;/dropbear_authorized_keys &quot;$&#123;SDCARD&#125;&quot;/etc/dropbear-initramfs/authorized_keys</span><br><span class="line">		else</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">generate a default ssh key for login on dropbear in initramfs</span></span></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">this key should be changed by the user on first login</span></span></span><br><span class="line">			display_alert &quot;Generating a new SSH key pair for dropbear (initramfs)&quot; &quot;&quot; &quot;&quot;</span><br><span class="line">			ssh-keygen -t ecdsa -f &quot;$&#123;SDCARD&#125;&quot;/etc/dropbear-initramfs/id_ecdsa \</span><br><span class="line">			-N &#x27;&#x27; -O force-command=cryptroot-unlock -C &#x27;AUTOGENERATED_BY_ARMBIAN_BUILD&#x27;  &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">/usr/share/initramfs-tools/hooks/dropbear will automatically add &#x27;</span>id_ecdsa.pub<span class="string">&#x27; to authorized_keys file</span></span></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">during mkinitramfs of update-initramfs</span></span></span><br><span class="line"><span class="meta prompt_">			#</span><span class="language-bash"><span class="string">cat &quot;$&#123;SDCARD&#125;&quot;/etc/dropbear-initramfs/id_ecdsa.pub &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/dropbear-initramfs/authorized_keys</span></span></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">The version of the Linux kernel</span></span></span><br><span class="line">			CRYPTROOT_SSH_UNLOCK_KEY_NAME=&quot;$&#123;BOARD^&#125;_$&#123;REVISION&#125;_$&#123;DISTRIBUTION,&#125;_$&#123;RELEASE&#125;_$&#123;SELECTED_CONFIGURATION&#125;_linux&quot;$(grab_version &quot;$LINUXSOURCEDIR&quot;)&quot;&quot;.key</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">copy dropbear ssh key to image output dir for convenience</span></span></span><br><span class="line">			cp &quot;$&#123;SDCARD&#125;&quot;/etc/dropbear-initramfs/id_ecdsa &quot;$&#123;DEST&#125;/images/$&#123;CRYPTROOT_SSH_UNLOCK_KEY_NAME&#125;&quot;</span><br><span class="line">			display_alert &quot;SSH private key for dropbear (initramfs) has been copied to:&quot; \</span><br><span class="line">			&quot;$DEST/images/$CRYPTROOT_SSH_UNLOCK_KEY_NAME&quot; &quot;info&quot;</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">create modules file</span></span></span><br><span class="line">	local modules=MODULES_$&#123;BRANCH^^&#125;</span><br><span class="line">	if [[ -n &quot;$&#123;!modules&#125;&quot; ]]; then</span><br><span class="line">		tr &#x27; &#x27; &#x27;\n&#x27; &lt;&lt;&lt; &quot;$&#123;!modules&#125;&quot; &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/modules</span><br><span class="line">	elif [[ -n &quot;$&#123;MODULES&#125;&quot; ]]; then</span><br><span class="line">		tr &#x27; &#x27; &#x27;\n&#x27; &lt;&lt;&lt; &quot;$&#123;MODULES&#125;&quot; &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/modules</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">create blacklist files</span></span></span><br><span class="line">	local blacklist=MODULES_BLACKLIST_$&#123;BRANCH^^&#125;</span><br><span class="line">	if [[ -n &quot;$&#123;!blacklist&#125;&quot; ]]; then</span><br><span class="line">		tr &#x27; &#x27; &#x27;\n&#x27; &lt;&lt;&lt; &quot;$&#123;!blacklist&#125;&quot; | sed -e &#x27;s/^/blacklist /&#x27; &gt; &quot;$&#123;SDCARD&#125;/etc/modprobe.d/blacklist-$&#123;BOARD&#125;.conf&quot;</span><br><span class="line">	elif [[ -n &quot;$&#123;MODULES_BLACKLIST&#125;&quot; ]]; then</span><br><span class="line">		tr &#x27; &#x27; &#x27;\n&#x27; &lt;&lt;&lt; &quot;$&#123;MODULES_BLACKLIST&#125;&quot; | sed -e &#x27;s/^/blacklist /&#x27; &gt; &quot;$&#123;SDCARD&#125;/etc/modprobe.d/blacklist-$&#123;BOARD&#125;.conf&quot;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">configure MIN / MAX speed for cpufrequtils</span></span></span><br><span class="line">	cat &lt;&lt;-EOF &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/default/cpufrequtils</span><br><span class="line">	ENABLE=true</span><br><span class="line">	MIN_SPEED=$CPUMIN</span><br><span class="line">	MAX_SPEED=$CPUMAX</span><br><span class="line">	GOVERNOR=$GOVERNOR</span><br><span class="line">	EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">remove default interfaces file if present</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">before installing board support package</span></span></span><br><span class="line">	rm -f &quot;$&#123;SDCARD&#125;&quot;/etc/network/interfaces</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">disable selinux by default</span></span></span><br><span class="line">	mkdir -p &quot;$&#123;SDCARD&#125;&quot;/selinux</span><br><span class="line">	[[ -f &quot;$&#123;SDCARD&#125;&quot;/etc/selinux/config ]] &amp;&amp; sed &quot;s/^SELINUX=.*/SELINUX=disabled/&quot; -i &quot;$&#123;SDCARD&#125;&quot;/etc/selinux/config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">remove Ubuntu&#x27;</span>s legal text</span></span><br><span class="line">	[[ -f &quot;$&#123;SDCARD&#125;&quot;/etc/legal ]] &amp;&amp; rm &quot;$&#123;SDCARD&#125;&quot;/etc/legal</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Prevent loading paralel printer port drivers <span class="built_in">which</span> we don<span class="string">&#x27;t need here.</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Suppress boot error if kernel modules are absent</span></span></span><br><span class="line">	if [[ -f &quot;$&#123;SDCARD&#125;&quot;/etc/modules-load.d/cups-filters.conf ]]; then</span><br><span class="line">		sed &quot;s/^lp/#lp/&quot; -i &quot;$&#123;SDCARD&#125;&quot;/etc/modules-load.d/cups-filters.conf</span><br><span class="line">		sed &quot;s/^ppdev/#ppdev/&quot; -i &quot;$&#123;SDCARD&#125;&quot;/etc/modules-load.d/cups-filters.conf</span><br><span class="line">		sed &quot;s/^parport_pc/#parport_pc/&quot; -i &quot;$&#123;SDCARD&#125;&quot;/etc/modules-load.d/cups-filters.conf</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">console fix due to Debian bug</span></span></span><br><span class="line">	sed -e &#x27;s/CHARMAP=&quot;.*&quot;/CHARMAP=&quot;&#x27;$CONSOLE_CHAR&#x27;&quot;/g&#x27; -i &quot;$&#123;SDCARD&#125;&quot;/etc/default/console-setup</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">add the /dev/urandom path to the rng config file</span></span></span><br><span class="line">	echo &quot;HRNGDEVICE=/dev/urandom&quot; &gt;&gt; &quot;$&#123;SDCARD&#125;&quot;/etc/default/rng-tools</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">ping needs privileged action to be able to create raw network socket</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">this is working properly but not with (at least) Debian Buster</span></span></span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;chmod u+s /bin/ping&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">change time zone data</span></span></span><br><span class="line">	echo &quot;$&#123;TZDATA&#125;&quot; &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/timezone</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;dpkg-reconfigure -f noninteractive tzdata &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">set root password</span></span></span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;(echo $ROOTPWD;echo $ROOTPWD;) | passwd root &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">enable automated login to console(s)</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">mkdir -p &quot;$&#123;SDCARD&#125;&quot;/etc/systemd/system/getty@.service.d/</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">mkdir -p &quot;$&#123;SDCARD&#125;&quot;/etc/systemd/system/serial-getty@.service.d/</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">cat &lt;&lt;-EOF &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/systemd/system/serial-getty@.service.d/override.conf</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">[Service]</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">ExecStartPre=/bin/sh -c &#x27;</span><span class="built_in">exec</span> /bin/sleep 10<span class="string">&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">ExecStart=</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">ExecStart=-/sbin/agetty --noissue --autologin root %I \$TERM</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">Type=idle</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">EOF</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">cp &quot;$&#123;SDCARD&#125;&quot;/etc/systemd/system/serial-getty@.service.d/override.conf &quot;$&#123;SDCARD&#125;&quot;/etc/systemd/system/getty@.service.d/override.conf</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">force change root password at first login</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;chage -d 0 root&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">change console welcome text</span></span></span><br><span class="line">	echo -e &quot;$&#123;VENDOR&#125; $&#123;REVISION&#125; $&#123;RELEASE^&#125; \\l \n&quot; &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/issue</span><br><span class="line">	echo &quot;$&#123;VENDOR&#125; $&#123;REVISION&#125; $&#123;RELEASE^&#125;&quot; &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/issue.net</span><br><span class="line">	sed -i &quot;s/^PRETTY_NAME=.*/PRETTY_NAME=\&quot;$&#123;VENDOR&#125; $REVISION &quot;$&#123;RELEASE^&#125;&quot;\&quot;/&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/os-release</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">enable few bash aliases enabled in Ubuntu by default to make it even</span></span></span><br><span class="line">	sed &quot;s/#alias ll=&#x27;ls -l&#x27;/alias ll=&#x27;ls -l&#x27;/&quot; -i &quot;$&#123;SDCARD&#125;&quot;/etc/skel/.bashrc</span><br><span class="line">	sed &quot;s/#alias la=&#x27;ls -A&#x27;/alias la=&#x27;ls -A&#x27;/&quot; -i &quot;$&#123;SDCARD&#125;&quot;/etc/skel/.bashrc</span><br><span class="line">	sed &quot;s/#alias l=&#x27;ls -CF&#x27;/alias l=&#x27;ls -CF&#x27;/&quot; -i &quot;$&#123;SDCARD&#125;&quot;/etc/skel/.bashrc</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">root user is already there. Copy bashrc there as well</span></span></span><br><span class="line">	cp &quot;$&#123;SDCARD&#125;&quot;/etc/skel/.bashrc &quot;$&#123;SDCARD&#125;&quot;/root</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">display welcome message at first root login</span></span></span><br><span class="line">	touch &quot;$&#123;SDCARD&#125;&quot;/root/.not_logged_in_yet</span><br><span class="line"></span><br><span class="line">	if [[ $&#123;DESKTOP_AUTOLOGIN&#125; != no ]]; then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">set desktop autologin</span></span></span><br><span class="line">		touch &quot;$&#123;SDCARD&#125;&quot;/root/.desktop_autologin</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">NOTE: this needs to be executed before family_tweaks</span></span></span><br><span class="line">	local bootscript_src=$&#123;BOOTSCRIPT%%:*&#125;</span><br><span class="line">	local bootscript_dst=$&#123;BOOTSCRIPT##*:&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">create extlinux config file</span></span></span><br><span class="line">	if [[ $SRC_EXTLINUX == yes ]]; then</span><br><span class="line">		mkdir -p $SDCARD/boot/extlinux</span><br><span class="line">		cat &lt;&lt;-EOF &gt; &quot;$SDCARD/boot/extlinux/extlinux.conf&quot;</span><br><span class="line">		label $&#123;VENDOR&#125;</span><br><span class="line">		  kernel /boot/$NAME_KERNEL</span><br><span class="line">		  initrd /boot/$NAME_INITRD</span><br><span class="line">	EOF</span><br><span class="line">		if [[ -n $BOOT_FDT_FILE ]]; then</span><br><span class="line">			if [[ $BOOT_FDT_FILE != &quot;none&quot; ]]; then</span><br><span class="line">				echo &quot;  fdt /boot/dtb/$BOOT_FDT_FILE&quot; &gt;&gt; &quot;$SDCARD/boot/extlinux/extlinux.conf&quot;</span><br><span class="line">			fi</span><br><span class="line">		else</span><br><span class="line">			echo &quot;  fdtdir /boot/dtb/&quot; &gt;&gt; &quot;$SDCARD/boot/extlinux/extlinux.conf&quot;</span><br><span class="line">		fi</span><br><span class="line">	else</span><br><span class="line"></span><br><span class="line">		if [[ &quot;$&#123;BOOTCONFIG&#125;&quot; != &quot;none&quot; ]]; then</span><br><span class="line">			if [ -f &quot;$&#123;USERPATCHES_PATH&#125;/bootscripts/$&#123;bootscript_src&#125;&quot; ]; then</span><br><span class="line">				cp &quot;$&#123;USERPATCHES_PATH&#125;/bootscripts/$&#123;bootscript_src&#125;&quot; &quot;$&#123;SDCARD&#125;/boot/$&#123;bootscript_dst&#125;&quot;</span><br><span class="line">			else</span><br><span class="line">				cp &quot;$&#123;EXTER&#125;/config/bootscripts/$&#123;bootscript_src&#125;&quot; &quot;$&#123;SDCARD&#125;/boot/$&#123;bootscript_dst&#125;&quot;</span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		if [[ -n $BOOTENV_FILE ]]; then</span><br><span class="line">			if [[ -f $USERPATCHES_PATH/bootenv/$BOOTENV_FILE ]]; then</span><br><span class="line">				cp &quot;$USERPATCHES_PATH/bootenv/$&#123;BOOTENV_FILE&#125;&quot; &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt</span><br><span class="line">			elif [[ -f $EXTER/config/bootenv/$BOOTENV_FILE ]]; then</span><br><span class="line">				cp &quot;$&#123;EXTER&#125;/config/bootenv/$&#123;BOOTENV_FILE&#125;&quot; &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt</span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">TODO: modify $bootscript_dst or orangepiEnv.txt to make NFS boot universal</span></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">instead of copying sunxi-specific template</span></span></span><br><span class="line">		if [[ $ROOTFS_TYPE == nfs ]]; then</span><br><span class="line">			display_alert &quot;Copying NFS boot script template&quot;</span><br><span class="line">			if [[ -f $USERPATCHES_PATH/nfs-boot.cmd ]]; then</span><br><span class="line">				cp &quot;$USERPATCHES_PATH&quot;/nfs-boot.cmd &quot;$&#123;SDCARD&#125;&quot;/boot/boot.cmd</span><br><span class="line">			else</span><br><span class="line">				cp &quot;$&#123;EXTER&#125;&quot;/config/templates/nfs-boot.cmd.template &quot;$&#123;SDCARD&#125;&quot;/boot/boot.cmd</span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		[[ -n $OVERLAY_PREFIX &amp;&amp; -f &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt &amp;&amp; ($BRANCH =~ current|next || $BOARDFAMILY =~ &quot;rockchip-rk3588&quot;|&quot;rockchip-rk356x&quot;) ]] &amp;&amp; \</span><br><span class="line">			echo &quot;overlay_prefix=$OVERLAY_PREFIX&quot; &gt;&gt; &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt</span><br><span class="line"></span><br><span class="line">		[[ -n $DEFAULT_OVERLAYS &amp;&amp; -f &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt &amp;&amp; ($BRANCH =~ current|next || $BOARDFAMILY =~ &quot;rockchip-rk3588&quot;|&quot;rockchip-rk356x&quot;) ]] &amp;&amp; \</span><br><span class="line">			echo &quot;overlays=$&#123;DEFAULT_OVERLAYS//,/ &#125;&quot; &gt;&gt; &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt</span><br><span class="line"></span><br><span class="line">		[[ -n $BOOT_FDT_FILE &amp;&amp; -f &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt ]] &amp;&amp; \</span><br><span class="line">			echo &quot;fdtfile=$&#123;BOOT_FDT_FILE&#125;&quot; &gt;&gt; &quot;$&#123;SDCARD&#125;/boot/orangepiEnv.txt&quot;</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">initial date for fake-hwclock</span></span></span><br><span class="line">	date -u &#x27;+%Y-%m-%d %H:%M:%S&#x27; &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/fake-hwclock.data</span><br><span class="line"></span><br><span class="line">	echo &quot;$&#123;HOST&#125;&quot; &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/hostname</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">set hostname in hosts file</span></span></span><br><span class="line">	cat &lt;&lt;-EOF &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/hosts</span><br><span class="line">	127.0.0.1   localhost</span><br><span class="line">	127.0.1.1   $HOST</span><br><span class="line">	::1         localhost $HOST ip6-localhost ip6-loopback</span><br><span class="line">	fe00::0     ip6-localnet</span><br><span class="line">	ff00::0     ip6-mcastprefix</span><br><span class="line">	ff02::1     ip6-allnodes</span><br><span class="line">	ff02::2     ip6-allrouters</span><br><span class="line">	EOF</span><br><span class="line"></span><br><span class="line">	cd $SRC</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Prepare and export caching-related params common to all apt calls below, to maximize apt-cacher-ng usage</span></span></span><br><span class="line">	export APT_EXTRA_DIST_PARAMS=&quot;&quot;</span><br><span class="line">	[[ $NO_APT_CACHER != yes ]] &amp;&amp; APT_EXTRA_DIST_PARAMS=&quot;-o Acquire::http::Proxy=\&quot;http://$&#123;APT_PROXY_ADDR:-localhost:3142&#125;\&quot; -o Acquire::http::Proxy::localhost=\&quot;DIRECT\&quot;&quot;</span><br><span class="line"></span><br><span class="line">	display_alert &quot;Cleaning&quot; &quot;package lists&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;apt-get clean&quot;</span><br><span class="line"></span><br><span class="line">	display_alert &quot;Updating&quot; &quot;package lists&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;apt-get $&#123;APT_EXTRA_DIST_PARAMS&#125; update&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">	display_alert &quot;Temporarily disabling&quot; &quot;initramfs-tools hook for kernel&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;chmod -v -x /etc/kernel/postinst.d/initramfs-tools&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">install family packages</span></span></span><br><span class="line">	if [[ -n $&#123;PACKAGE_LIST_FAMILY&#125; ]]; then</span><br><span class="line">		display_alert &quot;Installing PACKAGE_LIST_FAMILY packages&quot; &quot;$&#123;PACKAGE_LIST_FAMILY&#125;&quot;</span><br><span class="line">		chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;DEBIAN_FRONTEND=noninteractive  apt-get $&#123;APT_EXTRA_DIST_PARAMS&#125; -yqq --no-install-recommends install $PACKAGE_LIST_FAMILY&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">install board packages</span></span></span><br><span class="line">	if [[ -n $&#123;PACKAGE_LIST_BOARD&#125; ]]; then</span><br><span class="line">		display_alert &quot;Installing PACKAGE_LIST_BOARD packages&quot; &quot;$&#123;PACKAGE_LIST_BOARD&#125;&quot;</span><br><span class="line">		chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;DEBIAN_FRONTEND=noninteractive  apt-get $&#123;APT_EXTRA_DIST_PARAMS&#125; -yqq --no-install-recommends install $PACKAGE_LIST_BOARD&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log || &#123; display_alert &quot;Failed to install PACKAGE_LIST_BOARD&quot; &quot;$&#123;PACKAGE_LIST_BOARD&#125;&quot; &quot;err&quot;; exit 2; &#125; </span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">remove family packages</span></span></span><br><span class="line">	if [[ -n $&#123;PACKAGE_LIST_FAMILY_REMOVE&#125; ]]; then</span><br><span class="line">		display_alert &quot;Removing PACKAGE_LIST_FAMILY_REMOVE packages&quot; &quot;$&#123;PACKAGE_LIST_FAMILY_REMOVE&#125;&quot;</span><br><span class="line">		chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;DEBIAN_FRONTEND=noninteractive  apt-get $&#123;APT_EXTRA_DIST_PARAMS&#125; -yqq remove --auto-remove $PACKAGE_LIST_FAMILY_REMOVE&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">remove board packages</span></span></span><br><span class="line">	if [[ -n $&#123;PACKAGE_LIST_BOARD_REMOVE&#125; ]]; then</span><br><span class="line">		display_alert &quot;Removing PACKAGE_LIST_BOARD_REMOVE packages&quot; &quot;$&#123;PACKAGE_LIST_BOARD_REMOVE&#125;&quot;</span><br><span class="line">		for PKG_REMOVE in $&#123;PACKAGE_LIST_BOARD_REMOVE&#125;; do</span><br><span class="line">			chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;DEBIAN_FRONTEND=noninteractive apt-get $&#123;APT_EXTRA_DIST_PARAMS&#125; -yqq remove --auto-remove $&#123;PKG_REMOVE&#125;&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log</span><br><span class="line">		done</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">install u-boot</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">@TODO: add install_bootloader() extension method, refactor into u-boot extension</span></span></span><br><span class="line">	[[ &quot;$&#123;BOOTCONFIG&#125;&quot; != &quot;none&quot; ]] &amp;&amp; &#123;</span><br><span class="line">		if [[ &quot;$&#123;REPOSITORY_INSTALL&#125;&quot; != *u-boot* ]]; then</span><br><span class="line">			UBOOT_VER=$(dpkg --info &quot;$&#123;DEB_STORAGE&#125;/u-boot/$&#123;CHOSEN_UBOOT&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot; | grep Descr | awk &#x27;&#123;print $(NF)&#125;&#x27;)</span><br><span class="line">			install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/u-boot/$&#123;CHOSEN_UBOOT&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot;</span><br><span class="line">		else</span><br><span class="line">			UBOOT_VER=$(dpkg --info &quot;$&#123;DEB_ORANGEPI&#125;/u-boot/$&#123;CHOSEN_UBOOT&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot; | grep Descr | awk &#x27;&#123;print $(NF)&#125;&#x27;)</span><br><span class="line">			install_deb_chroot &quot;$&#123;DEB_ORANGEPI&#125;/u-boot/$&#123;CHOSEN_UBOOT&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot; &quot;orangepi&quot;</span><br><span class="line">		fi</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	call_extension_method &quot;pre_install_kernel_debs&quot;  &lt;&lt; &#x27;PRE_INSTALL_KERNEL_DEBS&#x27;</span><br><span class="line">*called before installing the Armbian-built kernel deb packages*</span><br><span class="line">It is not too late to `unset KERNELSOURCE` here and avoid kernel install.</span><br><span class="line">PRE_INSTALL_KERNEL_DEBS</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">install kernel</span></span></span><br><span class="line">	[[ -n $KERNELSOURCE ]] &amp;&amp; &#123;</span><br><span class="line">		if [[ &quot;$&#123;REPOSITORY_INSTALL&#125;&quot; != *kernel* ]]; then</span><br><span class="line">			VER=$(dpkg --info &quot;$&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KERNEL&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot; | awk -F&quot;-&quot; &#x27;/Source:/&#123;print $2&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">			install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KERNEL&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot;</span><br><span class="line">			if [[ -f $&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KERNEL/image/dtb&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb ]]; then</span><br><span class="line">				install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KERNEL/image/dtb&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot;</span><br><span class="line">			fi</span><br><span class="line">			if [[ $INSTALL_HEADERS == yes ]]; then</span><br><span class="line">				install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KERNEL/image/headers&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot;</span><br><span class="line">			else</span><br><span class="line">				cp &quot;$&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KERNEL/image/headers&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot; &quot;$&#123;SDCARD&#125;&quot;/opt/</span><br><span class="line">			fi</span><br><span class="line">		else</span><br><span class="line">			VER=$(dpkg --info &quot;$&#123;DEB_ORANGEPI&#125;/$&#123;CHOSEN_KERNEL&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot; | grep Descr | awk &#x27;&#123;print $(NF)&#125;&#x27;)</span><br><span class="line">			VER=&quot;$&#123;VER/-$LINUXFAMILY/&#125;&quot;</span><br><span class="line"></span><br><span class="line">			install_deb_chroot &quot;$&#123;DEB_ORANGEPI&#125;/$&#123;CHOSEN_KERNEL&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot; &quot;orangepi&quot;</span><br><span class="line"></span><br><span class="line">			if [[ -f $&#123;DEB_ORANGEPI&#125;/$&#123;CHOSEN_KERNEL/image/dtb&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb ]]; then</span><br><span class="line">				install_deb_chroot &quot;$&#123;DEB_ORANGEPI&#125;/$&#123;CHOSEN_KERNEL/image/dtb&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot; &quot;orangepi&quot;</span><br><span class="line">			fi</span><br><span class="line"></span><br><span class="line">			if [[ $INSTALL_HEADERS == yes ]]; then</span><br><span class="line">				install_deb_chroot &quot;$&#123;DEB_ORANGEPI&#125;/$&#123;CHOSEN_KERNEL/image/headers&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot; &quot;orangepi&quot;</span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	call_extension_method &quot;post_install_kernel_debs&quot; &lt;&lt; &#x27;POST_INSTALL_KERNEL_DEBS&#x27;</span><br><span class="line">*allow config to do more with the installed kernel/headers*</span><br><span class="line">Called after packages, u-boot, kernel and headers installed in the chroot, but before the BSP is installed.</span><br><span class="line">If `KERNELSOURCE` is (still?) unset after this, Armbian-built firmware will not be installed.</span><br><span class="line">POST_INSTALL_KERNEL_DEBS</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">install board support packages</span></span></span><br><span class="line">	if [[ &quot;$&#123;REPOSITORY_INSTALL&#125;&quot; != *bsp* ]]; then</span><br><span class="line">		install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/$RELEASE/$&#123;BSP_CLI_PACKAGE_FULLNAME&#125;.deb&quot;</span><br><span class="line">	else</span><br><span class="line">		install_deb_chroot &quot;$&#123;DEB_ORANGEPI&#125;/$RELEASE/$&#123;CHOSEN_ROOTFS&#125;_$&#123;BSP_CLI_PACKAGE_FULLNAME&#125;.deb&quot; &quot;orangepi&quot;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">install orangepi-desktop</span></span></span><br><span class="line">	if [[ &quot;$&#123;REPOSITORY_INSTALL&#125;&quot; != *orangepi-desktop* ]]; then</span><br><span class="line">		if [[ $BUILD_DESKTOP == yes ]]; then</span><br><span class="line">			install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/$&#123;RELEASE&#125;/$&#123;CHOSEN_DESKTOP&#125;_$&#123;REVISION&#125;_all.deb&quot;</span><br><span class="line">			install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/$&#123;RELEASE&#125;/$&#123;BSP_DESKTOP_PACKAGE_FULLNAME&#125;.deb&quot;</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">install display manager and PACKAGE_LIST_DESKTOP_FULL packages if enabled per board</span></span></span><br><span class="line">			desktop_postinstall</span><br><span class="line">		fi</span><br><span class="line">	else</span><br><span class="line">		if [[ $BUILD_DESKTOP == yes ]]; then</span><br><span class="line">			install_deb_chroot &quot;$&#123;CHOSEN_DESKTOP&#125;&quot; &quot;orangepi&quot;</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">install display manager and PACKAGE_LIST_DESKTOP_FULL packages if enabled per board</span></span></span><br><span class="line">			desktop_postinstall</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">install orangepi-firmware</span></span></span><br><span class="line">	if [[ &quot;$&#123;REPOSITORY_INSTALL&#125;&quot; != *orangepi-firmware* ]]; then</span><br><span class="line">		if [[ -f $&#123;DEB_STORAGE&#125;/orangepi-firmware_$&#123;REVISION&#125;_all.deb ]]; then</span><br><span class="line">			install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/orangepi-firmware_$&#123;REVISION&#125;_all.deb&quot;</span><br><span class="line">		fi</span><br><span class="line">	else</span><br><span class="line">		if [[ -f $&#123;DEB_STORAGE&#125;/orangepi-firmware_$&#123;REVISION&#125;_all.deb ]]; then</span><br><span class="line">			install_deb_chroot &quot;$&#123;DEB_ORANGEPI&#125;/orangepi-firmware_$&#123;REVISION&#125;_all.deb&quot; &quot;orangepi&quot;</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">install orangepi-config</span></span></span><br><span class="line">	if [[ &quot;$&#123;PACKAGE_LIST_RM&#125;&quot; != *orangepi-config* ]]; then</span><br><span class="line">		if [[ &quot;$&#123;REPOSITORY_INSTALL&#125;&quot; != *orangepi-config* ]]; then</span><br><span class="line">			if [[ $BUILD_MINIMAL != yes ]]; then</span><br><span class="line">				install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/orangepi-config_$&#123;REVISION&#125;_all.deb&quot;</span><br><span class="line">			fi</span><br><span class="line">		else</span><br><span class="line">			if [[ $BUILD_MINIMAL != yes ]]; then</span><br><span class="line">				install_deb_chroot &quot;$&#123;DEB_ORANGEPI&#125;/orangepi-config_$&#123;REVISION&#125;_all.deb&quot; &quot;orangepi&quot;</span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">install orangepi-zsh</span></span></span><br><span class="line">	if [[ &quot;$&#123;PACKAGE_LIST_RM&#125;&quot; != *orangepi-zsh* ]]; then</span><br><span class="line">		if [[ &quot;$&#123;REPOSITORY_INSTALL&#125;&quot; != *orangepi-zsh* ]]; then</span><br><span class="line">			if [[ $BUILD_MINIMAL != yes ]]; then</span><br><span class="line">				install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/orangepi-zsh_$&#123;REVISION&#125;_all.deb&quot;</span><br><span class="line">			fi</span><br><span class="line">		else</span><br><span class="line">			if [[ $BUILD_MINIMAL != yes ]]; then</span><br><span class="line">				install_deb_chroot &quot;orangepi-zsh&quot; &quot;remote&quot;</span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">install plymouth-theme-orangepi</span></span></span><br><span class="line">	if [[ $PLYMOUTH == yes &amp;&amp; $BUILD_DESKTOP == yes &amp;&amp; $RELEASE != buster ]]; then</span><br><span class="line">		if [[ &quot;$&#123;REPOSITORY_INSTALL&#125;&quot; != *plymouth-theme-orangepi* ]]; then</span><br><span class="line">			install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/orangepi-plymouth-theme_$&#123;REVISION&#125;_all.deb&quot;</span><br><span class="line">		else</span><br><span class="line">			install_deb_chroot &quot;orangepi-plymouth-theme&quot; &quot;remote&quot;</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">install kernel sources</span></span></span><br><span class="line">	if [[ -f $&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KSRC&#125;_$&#123;REVISION&#125;_all.deb &amp;&amp; $INSTALL_KSRC == yes ]]; then</span><br><span class="line">		install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KSRC&#125;_$&#123;REVISION&#125;_all.deb&quot;</span><br><span class="line">	elif [[ $INSTALL_KSRC == yes ]]; then</span><br><span class="line">		display_alert &quot;Please set BUILD_KSRC=yes to generate the kernel source package&quot; &quot;&quot; &quot;wrn&quot;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">install wireguard tools</span></span></span><br><span class="line">	if [[ $WIREGUARD == yes ]]; then</span><br><span class="line">		chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;apt-get -y -qq install wireguard-tools --no-install-recommends&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/debug/install.log 2&gt;&amp;1</span><br><span class="line">	fiinstall_wiringop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">freeze orangepi packages</span></span></span><br><span class="line">	if [[ $BSPFREEZE == yes ]]; then</span><br><span class="line">		display_alert &quot;Freezing Orange Pi packages&quot; &quot;$BOARD&quot; &quot;info&quot;</span><br><span class="line">		chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;apt-mark hold $&#123;CHOSEN_KERNEL&#125; $&#123;CHOSEN_KERNEL/image/headers&#125; \</span><br><span class="line"><span class="meta prompt_">		linux-u-boot-$</span><span class="language-bash"><span class="string">&#123;BOARD&#125;-$&#123;BRANCH&#125; $&#123;CHOSEN_KERNEL/image/dtb&#125;&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span></span></span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">add orangepi user</span></span></span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;adduser --quiet --disabled-password --shell /bin/bash --home /home/$&#123;OPI_USERNAME&#125; --gecos $&#123;OPI_USERNAME&#125; $&#123;OPI_USERNAME&#125;&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;(echo $&#123;OPI_PWD&#125;;echo $&#123;OPI_PWD&#125;;) | passwd &quot;$&#123;OPI_USERNAME&#125;&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">	for additionalgroup in sudo netdev audio video disk tty users games dialout plugdev input bluetooth systemd-journal ssh; do</span><br><span class="line">	        chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;usermod -aG $&#123;additionalgroup&#125; $&#123;OPI_USERNAME&#125; 2&gt;/dev/null&quot;</span><br><span class="line">	done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">fix for gksu in Xenial</span></span></span><br><span class="line">	touch $&#123;SDCARD&#125;/home/$&#123;OPI_USERNAME&#125;/.Xauthority</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;chown $&#123;OPI_USERNAME&#125;:$&#123;OPI_USERNAME&#125; /home/$&#123;OPI_USERNAME&#125;/.Xauthority&quot;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">set up profile sync daemon on desktop systems</span></span></span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;which psd &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">	if [ $? -eq 0 ]; then</span><br><span class="line">		echo -e &quot;$&#123;OPI_USERNAME&#125; ALL=(ALL) NOPASSWD: /usr/bin/psd-overlay-helper&quot; &gt;&gt; $&#123;SDCARD&#125;/etc/sudoers</span><br><span class="line">		touch $&#123;SDCARD&#125;/home/$&#123;OPI_USERNAME&#125;/.activate_psd</span><br><span class="line">		chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;chown $OPI_USERNAME:$OPI_USERNAME /home/$&#123;OPI_USERNAME&#125;/.activate_psd&quot;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">remove deb files</span></span></span><br><span class="line">	rm -f &quot;$&#123;SDCARD&#125;&quot;/root/*.deb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">copy boot splash images</span></span></span><br><span class="line">	cp &quot;$&#123;EXTER&#125;&quot;/packages/blobs/splash/orangepi-u-boot.bmp &quot;$&#123;SDCARD&#125;&quot;/boot/boot.bmp</span><br><span class="line">	cp &quot;$&#123;EXTER&#125;&quot;/packages/blobs/splash/logo.bmp &quot;$&#123;SDCARD&#125;&quot;/boot/logo.bmp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">copy audio.wav and mute.wav</span></span></span><br><span class="line">	cp &quot;$&#123;EXTER&#125;&quot;/packages/blobs/audio_wav/audio.wav &quot;$&#123;SDCARD&#125;&quot;/usr/share/sounds/alsa/</span><br><span class="line">	cp &quot;$&#123;EXTER&#125;&quot;/packages/blobs/audio_wav/mute.wav &quot;$&#123;SDCARD&#125;&quot;/usr/share/sounds/alsa/</span><br><span class="line"></span><br><span class="line">	cp &quot;$&#123;EXTER&#125;&quot;/packages/blobs/test.mp4 &quot;$&#123;SDCARD&#125;&quot;/usr/local/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">copy watchdog test programm</span></span></span><br><span class="line">	cp &quot;$&#123;EXTER&#125;&quot;/packages/blobs/watchdog/watchdog_test_$&#123;ARCH&#125; &quot;$&#123;SDCARD&#125;&quot;/usr/local/bin/watchdog_test</span><br><span class="line"></span><br><span class="line">	[[ -f &quot;$&#123;SDCARD&#125;&quot;/usr/bin/gnome-session ]] &amp;&amp; sed -i &quot;s/user-session.*/user-session=ubuntu-wayland/&quot; $&#123;SDCARD&#125;/etc/lightdm/lightdm.conf.d/22-orangepi-autologin.conf</span><br><span class="line">	[[ -f &quot;$&#123;SDCARD&#125;&quot;/usr/bin/startplasma-x11 ]] &amp;&amp; sed -i &quot;s/user-session.*/user-session=plasma-x11/&quot; $&#123;SDCARD&#125;/etc/lightdm/lightdm.conf.d/22-orangepi-autologin.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">execute $LINUXFAMILY-specific tweaks</span></span></span><br><span class="line">	[[ $(type -t family_tweaks) == function ]] &amp;&amp; family_tweaks</span><br><span class="line"></span><br><span class="line">	call_extension_method &quot;post_family_tweaks&quot; &lt;&lt; &#x27;FAMILY_TWEAKS&#x27;</span><br><span class="line">*customize the tweaks made by $LINUXFAMILY-specific family_tweaks*</span><br><span class="line">It is run after packages are installed in the rootfs, but before enabling additional services.</span><br><span class="line">It allows implementors access to the rootfs (`$&#123;SDCARD&#125;`) in its pristine state after packages are installed.</span><br><span class="line">FAMILY_TWEAKS</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">enable additional services</span></span></span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl --no-reload enable orangepi-firstrun.service &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl --no-reload enable orangepi-firstrun-config.service &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl --no-reload enable orangepi-zram-config.service &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl --no-reload enable orangepi-hardware-optimize.service &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl --no-reload enable orangepi-ramlog.service &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl --no-reload enable orangepi-resize-filesystem.service &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl --no-reload enable orangepi-hardware-monitor.service &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">copy &quot;first run automated config, optional user configured&quot;</span></span></span><br><span class="line"> 	cp $&#123;EXTER&#125;/packages/bsp/orangepi_first_run.txt.template &quot;$&#123;SDCARD&#125;&quot;/boot/orangepi_first_run.txt.template</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string"># switch to beta repository at this stage if building nightly images</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">[[ $IMAGE_TYPE == nightly ]] \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">	#&amp;&amp; echo &quot;deb http://beta.orangepi.com $RELEASE main $&#123;RELEASE&#125;-utils $&#123;RELEASE&#125;-desktop&quot; \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">	#&gt; &quot;$&#123;SDCARD&#125;&quot;/etc/apt/sources.list.d/orangepi.list</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Cosmetic fix [FAILED] Failed to start Set console font and keymap at first boot</span></span></span><br><span class="line">	[[ -f &quot;$&#123;SDCARD&#125;&quot;/etc/console-setup/cached_setup_font.sh ]] \</span><br><span class="line">	&amp;&amp; sed -i &quot;s/^printf &#x27;.*/printf &#x27;\\\033\%\%G&#x27;/g&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/console-setup/cached_setup_font.sh</span><br><span class="line">	[[ -f &quot;$&#123;SDCARD&#125;&quot;/etc/console-setup/cached_setup_terminal.sh ]] \</span><br><span class="line">	&amp;&amp; sed -i &quot;s/^printf &#x27;.*/printf &#x27;\\\033\%\%G&#x27;/g&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/console-setup/cached_setup_terminal.sh</span><br><span class="line">	[[ -f &quot;$&#123;SDCARD&#125;&quot;/etc/console-setup/cached_setup_keyboard.sh ]] \</span><br><span class="line">	&amp;&amp; sed -i &quot;s/-u/-x&#x27;/g&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/console-setup/cached_setup_keyboard.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">fix for https://bugs.launchpad.net/ubuntu/+source/blueman/+bug/1542723</span></span></span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;chown root:messagebus /usr/lib/dbus-1.0/dbus-daemon-launch-helper&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;chmod u+s /usr/lib/dbus-1.0/dbus-daemon-launch-helper&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">disable samba NetBIOS over IP name service requests since it hangs when no network is present at boot</span></span></span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl --quiet disable nmbd 2&gt; /dev/null&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">disable low-level kernel messages for non betas</span></span></span><br><span class="line">	if [[ -z $BETA ]]; then</span><br><span class="line">		sed -i &quot;s/^#kernel.printk*/kernel.printk/&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/sysctl.conf</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">disable repeated messages due to xconsole not being installed.</span></span></span><br><span class="line">	[[ -f &quot;$&#123;SDCARD&#125;&quot;/etc/rsyslog.d/50-default.conf ]] &amp;&amp; \</span><br><span class="line">	sed &#x27;/daemon\.\*\;mail.*/,/xconsole/ s/.*/#&amp;/&#x27; -i &quot;$&#123;SDCARD&#125;&quot;/etc/rsyslog.d/50-default.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">disable deprecated parameter</span></span></span><br><span class="line">	sed &#x27;/.*$KLogPermitNonKernelFacility.*/,// s/.*/#&amp;/&#x27; -i &quot;$&#123;SDCARD&#125;&quot;/etc/rsyslog.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">enable getty on multiple serial consoles</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">and adjust the speed if it is defined and different than 115200</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">	# example: SERIALCON=&quot;ttyS0:15000000,ttyGS1&quot;</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">	ifs=$IFS</span></span></span><br><span class="line">	for i in $(echo &quot;$&#123;SERIALCON:-&#x27;ttyS0&#x27;&#125;&quot; | sed &quot;s/,/ /g&quot;)</span><br><span class="line">	do</span><br><span class="line">		IFS=&#x27;:&#x27; read -r -a array &lt;&lt;&lt; &quot;$i&quot;</span><br><span class="line">		[[ &quot;$&#123;array[0]&#125;&quot; == &quot;tty1&quot; ]] &amp;&amp; continue # Don&#x27;t enable tty1 as serial console.</span><br><span class="line">		display_alert &quot;Enabling serial console&quot; &quot;$&#123;array[0]&#125;&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">add serial console to secure tty list</span></span></span><br><span class="line">		[ -z &quot;$(grep -w &#x27;^$&#123;array[0]&#125;&#x27; &quot;$&#123;SDCARD&#125;&quot;/etc/securetty 2&gt; /dev/null)&quot; ] &amp;&amp; \</span><br><span class="line">		echo &quot;$&#123;array[0]&#125;&quot; &gt;&gt;  &quot;$&#123;SDCARD&#125;&quot;/etc/securetty</span><br><span class="line">		if [[ $&#123;array[1]&#125; != &quot;115200&quot; &amp;&amp; -n $&#123;array[1]&#125; ]]; then</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">make a copy, fix speed and enable</span></span></span><br><span class="line">			cp &quot;$&#123;SDCARD&#125;&quot;/lib/systemd/system/serial-getty@.service \</span><br><span class="line">			&quot;$&#123;SDCARD&#125;/lib/systemd/system/serial-getty@$&#123;array[0]&#125;.service&quot;</span><br><span class="line">			sed -i &quot;s/--keep-baud 115200/--keep-baud $&#123;array[1]&#125;,115200/&quot; \</span><br><span class="line">			&quot;$&#123;SDCARD&#125;/lib/systemd/system/serial-getty@$&#123;array[0]&#125;.service&quot;</span><br><span class="line">		fi</span><br><span class="line">		chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl daemon-reload&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span><br><span class="line">		chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl --no-reload enable serial-getty@$&#123;array[0]&#125;.service&quot; \</span><br><span class="line"><span class="meta prompt_">		&gt;</span><span class="language-bash"><span class="string">&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span></span></span><br><span class="line">		if [[ &quot;$&#123;array[0]&#125;&quot; == &quot;ttyGS0&quot; &amp;&amp; $LINUXFAMILY == sun8i &amp;&amp; $BRANCH == legacy ]]; then</span><br><span class="line">			mkdir -p &quot;$&#123;SDCARD&#125;&quot;/etc/systemd/system/serial-getty@ttyGS0.service.d</span><br><span class="line">			cat &lt;&lt;-EOF &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/systemd/system/serial-getty@ttyGS0.service.d/10-switch-role.conf</span><br><span class="line">			[Service]</span><br><span class="line">			ExecStartPre=-/bin/sh -c &quot;echo 2 &gt; /sys/bus/platform/devices/sunxi_usb_udc/otg_role&quot;</span><br><span class="line">			EOF</span><br><span class="line">		fi</span><br><span class="line">	done</span><br><span class="line">	IFS=$ifs</span><br><span class="line"></span><br><span class="line">	[[ $LINUXFAMILY == sun*i ]] &amp;&amp; mkdir -p &quot;$&#123;SDCARD&#125;&quot;/boot/overlay-user</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">to prevent creating swap file on NFS (needs specific kernel options)</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">and f2fs/btrfs (not recommended or needs specific kernel options)</span></span></span><br><span class="line">	[[ $ROOTFS_TYPE != ext4 ]] &amp;&amp; touch &quot;$&#123;SDCARD&#125;&quot;/var/swap</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">install initial asound.state if defined</span></span></span><br><span class="line">	mkdir -p &quot;$&#123;SDCARD&#125;&quot;/var/lib/alsa/</span><br><span class="line">	[[ -n $ASOUND_STATE ]] &amp;&amp; cp &quot;$&#123;EXTER&#125;/packages/blobs/asound.state/$&#123;ASOUND_STATE&#125;&quot; &quot;$&#123;SDCARD&#125;&quot;/var/lib/alsa/asound.state</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">save initial orangepi-release state</span></span></span><br><span class="line">	cp &quot;$&#123;SDCARD&#125;&quot;/etc/orangepi-release &quot;$&#123;SDCARD&#125;&quot;/etc/orangepi-image-release</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">DNS fix. package resolvconf is not available everywhere</span></span></span><br><span class="line">	if [ -d /etc/resolvconf/resolv.conf.d ] &amp;&amp; [ -n &quot;$NAMESERVER&quot; ]; then</span><br><span class="line">		echo &quot;nameserver $NAMESERVER&quot; &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/resolvconf/resolv.conf.d/head</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">permit root login via SSH for the first boot</span></span></span><br><span class="line">	sed -i &#x27;s/#\?PermitRootLogin .*/PermitRootLogin yes/&#x27; &quot;$&#123;SDCARD&#125;&quot;/etc/ssh/sshd_config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">enable PubkeyAuthentication</span></span></span><br><span class="line">	sed -i &#x27;s/#\?PubkeyAuthentication .*/PubkeyAuthentication yes/&#x27; &quot;$&#123;SDCARD&#125;&quot;/etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">	if [ -f &quot;$&#123;SDCARD&#125;&quot;/etc/NetworkManager/NetworkManager.conf ]; then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">configure network manager</span></span></span><br><span class="line">		sed &quot;s/managed=\(.*\)/managed=true/g&quot; -i &quot;$&#123;SDCARD&#125;&quot;/etc/NetworkManager/NetworkManager.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">remove network manager defaults to handle eth by default</span></span></span><br><span class="line">		rm -f &quot;$&#123;SDCARD&#125;&quot;/usr/lib/NetworkManager/conf.d/10-globally-managed-devices.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">most likely we don&#x27;</span>t need to <span class="built_in">wait</span> <span class="keyword">for</span> nm to get online</span></span><br><span class="line">		chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl disable NetworkManager-wait-online.service&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">Just regular DNS and maintain /etc/resolv.conf as a file</span></span><br><span class="line">		sed &quot;/dns/d&quot; -i &quot;$&#123;SDCARD&#125;&quot;/etc/NetworkManager/NetworkManager.conf</span><br><span class="line">		sed &quot;s/\[main\]/\[main\]\ndns=default\nrc-manager=file/g&quot; -i &quot;$&#123;SDCARD&#125;&quot;/etc/NetworkManager/NetworkManager.conf</span><br><span class="line">		if [[ -n $NM_IGNORE_DEVICES ]]; then</span><br><span class="line">			mkdir -p &quot;$&#123;SDCARD&#125;&quot;/etc/NetworkManager/conf.d/</span><br><span class="line">			cat &lt;&lt;-EOF &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/NetworkManager/conf.d/10-ignore-interfaces.conf</span><br><span class="line">			[keyfile]</span><br><span class="line">			unmanaged-devices=$NM_IGNORE_DEVICES</span><br><span class="line">			EOF</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">	elif [ -d &quot;$&#123;SDCARD&#125;&quot;/etc/systemd/network ]; then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">configure networkd</span></span><br><span class="line">		rm &quot;$&#123;SDCARD&#125;&quot;/etc/resolv.conf</span><br><span class="line">		ln -s /run/systemd/resolve/resolv.conf &quot;$&#123;SDCARD&#125;&quot;/etc/resolv.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="built_in">enable</span> services</span></span><br><span class="line">		chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl enable systemd-networkd.service systemd-resolved.service&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">		if  [ -e /etc/systemd/timesyncd.conf ]; then</span><br><span class="line">			chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl enable systemd-timesyncd.service&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span><br><span class="line">		fi</span><br><span class="line">		umask 022</span><br><span class="line">		cat &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/systemd/network/eth0.network &lt;&lt;- __EOF__</span><br><span class="line">		[Match]</span><br><span class="line">		Name=eth0</span><br><span class="line"></span><br><span class="line">		[Network]</span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">MACAddress=</span></span><br><span class="line">		DHCP=ipv4</span><br><span class="line">		LinkLocalAddressing=ipv4</span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">Address=192.168.1.100/24</span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">Gateway=192.168.1.1</span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">DNS=192.168.1.1</span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">Domains=example.com</span></span><br><span class="line">		NTP=0.pool.ntp.org 1.pool.ntp.org</span><br><span class="line">		__EOF__</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">avahi daemon defaults <span class="keyword">if</span> exists</span></span><br><span class="line">	[[ -f &quot;$&#123;SDCARD&#125;&quot;/usr/share/doc/avahi-daemon/examples/sftp-ssh.service ]] &amp;&amp; \</span><br><span class="line">	cp &quot;$&#123;SDCARD&#125;&quot;/usr/share/doc/avahi-daemon/examples/sftp-ssh.service &quot;$&#123;SDCARD&#125;&quot;/etc/avahi/services/</span><br><span class="line">	[[ -f &quot;$&#123;SDCARD&#125;&quot;/usr/share/doc/avahi-daemon/examples/ssh.service ]] &amp;&amp; \</span><br><span class="line">	cp &quot;$&#123;SDCARD&#125;&quot;/usr/share/doc/avahi-daemon/examples/ssh.service &quot;$&#123;SDCARD&#125;&quot;/etc/avahi/services/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">nsswitch settings <span class="keyword">for</span> sane DNS behavior: remove resolve, assure libnss-myhostname support</span></span><br><span class="line">	sed &quot;s/hosts\:.*/hosts:          files mymachines dns myhostname/g&quot; -i &quot;$&#123;SDCARD&#125;&quot;/etc/nsswitch.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">build logo <span class="keyword">in</span> any <span class="keyword">case</span></span></span><br><span class="line">	boot_logo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="built_in">disable</span> MOTD <span class="keyword">for</span> first boot - we want as clean 1st run as possible</span></span><br><span class="line">	chmod -x &quot;$&#123;SDCARD&#125;&quot;/etc/update-motd.d/*</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install_rclocal()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	if [[ $BURN_IMAGE == yes ]]; then</span><br><span class="line"></span><br><span class="line">		cat &lt;&lt;-EOF &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/rc.local</span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">!/bin/sh -e</span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">		<span class="comment"># rc.local</span></span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">		<span class="comment"># This script is executed at the end of each multiuser runlevel.</span></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">Make sure that the script will <span class="string">&quot;exit 0&quot;</span> on success or any other</span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">value on error.</span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">		<span class="comment"># In order to enable or disable this script just change the execution</span></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">bits.</span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">		<span class="comment"># By default this script does nothing.</span></span></span><br><span class="line"></span><br><span class="line">		burn_to_emmc</span><br><span class="line"></span><br><span class="line">		exit 0</span><br><span class="line">		EOF</span><br><span class="line"></span><br><span class="line">	else</span><br><span class="line"></span><br><span class="line">		cat &lt;&lt;-EOF &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/rc.local</span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">!/bin/sh -e</span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">		<span class="comment"># rc.local</span></span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">		<span class="comment"># This script is executed at the end of each multiuser runlevel.</span></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">Make sure that the script will <span class="string">&quot;exit 0&quot;</span> on success or any other</span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">value on error.</span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">		<span class="comment"># In order to enable or disable this script just change the execution</span></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">bits.</span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">		<span class="comment"># By default this script does nothing.</span></span></span><br><span class="line"></span><br><span class="line">		exit 0</span><br><span class="line">		EOF</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line">	chmod +x &quot;$&#123;SDCARD&#125;&quot;/etc/rc.local</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install_distribution_specific()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	display_alert &quot;Applying distribution specific tweaks for&quot; &quot;$RELEASE&quot; &quot;info&quot;</span><br><span class="line"></span><br><span class="line">	case $RELEASE in</span><br><span class="line"></span><br><span class="line">	xenial)</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">remove legal info from Ubuntu</span></span><br><span class="line">			[[ -f &quot;$&#123;SDCARD&#125;&quot;/etc/legal ]] &amp;&amp; rm &quot;$&#123;SDCARD&#125;&quot;/etc/legal</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">ureadahead needs kernel tracing options that AFAIK are present only <span class="keyword">in</span> mainline. <span class="built_in">disable</span></span></span><br><span class="line">			chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c \</span><br><span class="line">			&quot;systemctl --no-reload mask ondemand.service ureadahead.service &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">			chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c \</span><br><span class="line">			&quot;systemctl --no-reload mask setserial.service etc-setserial.service &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line"></span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">	stretch|buster|sid)</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">remove doubled <span class="built_in">uname</span> from motd</span></span><br><span class="line">			[[ -f &quot;$&#123;SDCARD&#125;&quot;/etc/update-motd.d/10-uname ]] &amp;&amp; rm &quot;$&#123;SDCARD&#125;&quot;/etc/update-motd.d/10-uname</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">rc.local is not existing but one might need it</span></span><br><span class="line">			install_rclocal</span><br><span class="line"></span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">	bullseye)</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">remove doubled <span class="built_in">uname</span> from motd</span></span><br><span class="line">			[[ -f &quot;$&#123;SDCARD&#125;&quot;/etc/update-motd.d/10-uname ]] &amp;&amp; rm &quot;$&#123;SDCARD&#125;&quot;/etc/update-motd.d/10-uname</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">rc.local is not existing but one might need it</span></span><br><span class="line">			install_rclocal</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">fix missing versioning</span></span><br><span class="line">			[[ $(grep -L &quot;VERSION_ID=&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/os-release) ]] &amp;&amp; echo &#x27;VERSION_ID=&quot;11&quot;&#x27; &gt;&gt; &quot;$&#123;SDCARD&#125;&quot;/etc/os-release</span><br><span class="line">			[[ $(grep -L &quot;VERSION=&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/os-release) ]] &amp;&amp; echo &#x27;VERSION=&quot;11 (bullseye)&quot;&#x27; &gt;&gt; &quot;$&#123;SDCARD&#125;&quot;/etc/os-release</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		;;</span><br><span class="line">	</span><br><span class="line">	bookworm)</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">remove doubled <span class="built_in">uname</span> from motd</span></span><br><span class="line">			[[ -f &quot;$&#123;SDCARD&#125;&quot;/etc/update-motd.d/10-uname ]] &amp;&amp; rm &quot;$&#123;SDCARD&#125;&quot;/etc/update-motd.d/10-uname</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">rc.local is not existing but one might need it</span></span><br><span class="line">			install_rclocal</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">fix missing versioning</span></span><br><span class="line">			[[ $(grep -L &quot;VERSION_ID=&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/os-release) ]] &amp;&amp; echo &#x27;VERSION_ID=&quot;12&quot;&#x27; &gt;&gt; &quot;$&#123;SDCARD&#125;&quot;/etc/os-release</span><br><span class="line">			[[ $(grep -L &quot;VERSION=&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/os-release) ]] &amp;&amp; echo &#x27;VERSION=&quot;11 (bookworm)&quot;&#x27; &gt;&gt; &quot;$&#123;SDCARD&#125;&quot;/etc/os-release</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">remove security updates repository since it does not exists yet</span></span><br><span class="line">			sed &#x27;/security/ d&#x27; -i &quot;$&#123;SDCARD&#125;&quot;/etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">	bionic|focal|hirsute|impish|jammy)</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">by using default lz4 initrd compression leads to corruption, go back to proven method</span></span><br><span class="line">			sed -i &quot;s/^COMPRESS=.*/COMPRESS=gzip/&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/initramfs-tools/initramfs.conf</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">cleanup motd services and related files</span></span><br><span class="line">			chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl disable  motd-news.service &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">			chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl disable  motd-news.timer &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line"></span><br><span class="line">			rm -f &quot;$&#123;SDCARD&#125;&quot;/etc/update-motd.d/&#123;10-uname,10-help-text,50-motd-news,80-esm,80-livepatch,90-updates-available,91-release-upgrade,95-hwe-eol&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">remove motd news from motd.ubuntu.com</span></span><br><span class="line">			[[ -f &quot;$&#123;SDCARD&#125;&quot;/etc/default/motd-news ]] &amp;&amp; sed -i &quot;s/^ENABLED=.*/ENABLED=0/&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/default/motd-news</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">rc.local is not existing but one might need it</span></span><br><span class="line">			install_rclocal</span><br><span class="line"></span><br><span class="line">			if [ -d &quot;$&#123;SDCARD&#125;&quot;/etc/NetworkManager ]; then</span><br><span class="line">				local RENDERER=NetworkManager</span><br><span class="line">			else</span><br><span class="line">				local RENDERER=networkd</span><br><span class="line">			fi</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">Basic Netplan config. Let NetworkManager/networkd manage all devices on this system</span></span><br><span class="line">			[[ -d &quot;$&#123;SDCARD&#125;&quot;/etc/netplan ]] &amp;&amp; cat &lt;&lt;-EOF &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/netplan/orangepi-default.yaml</span><br><span class="line">			network:</span><br><span class="line">			  version: 2</span><br><span class="line">			  renderer: $RENDERER</span><br><span class="line">			EOF</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">DNS fix</span></span><br><span class="line">			if [ -n &quot;$NAMESERVER&quot; ]; then</span><br><span class="line">				sed -i &quot;s/#DNS=.*/DNS=$NAMESERVER/g&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/systemd/resolved.conf</span><br><span class="line">			fi</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">Journal service adjustements</span></span><br><span class="line">			sed -i &quot;s/#Storage=.*/Storage=volatile/g&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/systemd/journald.conf</span><br><span class="line">			sed -i &quot;s/#Compress=.*/Compress=yes/g&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/systemd/journald.conf</span><br><span class="line">			sed -i &quot;s/#RateLimitIntervalSec=.*/RateLimitIntervalSec=30s/g&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/systemd/journald.conf</span><br><span class="line">			sed -i &quot;s/#RateLimitBurst=.*/RateLimitBurst=10000/g&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/systemd/journald.conf</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">Chrony temporal fix https://bugs.launchpad.net/ubuntu/+<span class="built_in">source</span>/chrony/+bug/1878005</span></span><br><span class="line">			sed -i &#x27;/DAEMON_OPTS=/s/&quot;-F -1&quot;/&quot;-F 0&quot;/&#x27; &quot;$&#123;SDCARD&#125;&quot;/etc/default/chrony</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="built_in">disable</span> conflicting services</span></span><br><span class="line">			chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl --no-reload mask ondemand.service &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line"></span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">	esac</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">use list modules INITRAMFS</span></span><br><span class="line">	if [ -f &quot;$&#123;EXTER&#125;&quot;/config/modules/&quot;$&#123;MODULES_INITRD&#125;&quot; ]; then</span><br><span class="line">		display_alert &quot;Use file list modules INITRAMFS&quot; &quot;$&#123;MODULES_INITRD&#125;&quot;</span><br><span class="line">		sed -i &quot;s/^MODULES=.*/MODULES=list/&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/initramfs-tools/initramfs.conf</span><br><span class="line">		cat &quot;$&#123;EXTER&#125;&quot;/config/modules/&quot;$&#123;MODULES_INITRD&#125;&quot; &gt;&gt; &quot;$&#123;SDCARD&#125;&quot;/etc/initramfs-tools/modules</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">post_debootstrap_tweaks()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">remove service start blockers and QEMU binary</span></span><br><span class="line">	rm -f &quot;$&#123;SDCARD&#125;&quot;/sbin/initctl &quot;$&#123;SDCARD&#125;&quot;/sbin/start-stop-daemon</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;dpkg-divert --quiet --local --rename --remove /sbin/initctl&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;dpkg-divert --quiet --local --rename --remove /sbin/start-stop-daemon&quot;</span><br><span class="line">	rm -f &quot;$&#123;SDCARD&#125;&quot;/usr/sbin/policy-rc.d &quot;$&#123;SDCARD&#125;/usr/bin/$&#123;QEMU_BINARY&#125;&quot;</span><br><span class="line"></span><br><span class="line">	call_extension_method &quot;post_post_debootstrap_tweaks&quot; &quot;config_post_debootstrap_tweaks&quot; &lt;&lt; &#x27;POST_POST_DEBOOTSTRAP_TWEAKS&#x27;</span><br><span class="line">*run after removing diversions and qemu with chroot unmounted*</span><br><span class="line">Last chance to touch the `$&#123;SDCARD&#125;` filesystem before it is copied to the final media.</span><br><span class="line">It is too late to run any chrooted commands, since the supporting filesystems are already unmounted.</span><br><span class="line">POST_POST_DEBOOTSTRAP_TWEAKS</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">on_chroot()</span><br><span class="line">&#123;</span><br><span class="line">	if [ &quot;$SETFCAP&quot; != &quot;1&quot; ]; then</span><br><span class="line">		export CAPSH_ARG=&quot;--drop=cap_setfcap&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	capsh $CAPSH_ARG &quot;--chroot=$&#123;ROOTFS_DIR&#125;/&quot; -- -e &quot;$@&quot;</span><br><span class="line">&#125;</span><br><span class="line">export -f on_chroot</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">disable</span>=SC2119</span></span><br><span class="line">run_sub_stage()</span><br><span class="line">&#123;</span><br><span class="line">	log &quot;Begin $&#123;SUB_STAGE_DIR&#125;&quot;</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">pushd</span> <span class="string">&quot;<span class="variable">$&#123;SUB_STAGE_DIR&#125;</span>&quot;</span> &gt; /dev/null</span></span><br><span class="line">	cd $&#123;SUB_STAGE_DIR&#125;</span><br><span class="line"></span><br><span class="line">	for i in &#123;00..99&#125;; do</span><br><span class="line">		if [ -f &quot;$&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-debconf&quot; ]; then</span><br><span class="line">			display_alert &quot;Begin $&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-debconf&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line">			on_chroot &lt;&lt; EOF</span><br><span class="line">debconf-set-selections &lt;&lt;SELEOF</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="built_in">cat</span> <span class="string">&quot;<span class="variable">$&#123;i&#125;</span>-debconf&quot;</span>)</span></span><br><span class="line">SELEOF</span><br><span class="line">EOF</span><br><span class="line">			display_alert &quot;End $&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-debconf&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line">		fi</span><br><span class="line">		if [ -f &quot;$&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-packages-nr&quot; ]; then</span><br><span class="line">			display_alert &quot;Begin $&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-packages-nr&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line">			PACKAGES=&quot;$(sed -f &quot;$&#123;EXTER&#125;/packages/raspi/scripts/remove-comments.sed&quot; &lt; &quot;$&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-packages-nr&quot;)&quot;</span><br><span class="line">			if [ -n &quot;$PACKAGES&quot; ]; then</span><br><span class="line">				on_chroot &lt;&lt; EOF</span><br><span class="line">apt-get -o Acquire::Retries=3 install --no-install-recommends -y $PACKAGES</span><br><span class="line">EOF</span><br><span class="line">			fi</span><br><span class="line">			display_alert &quot;End $&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-packages-nr&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line">		fi</span><br><span class="line">		if [ -f &quot;$&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-packages&quot; ]; then</span><br><span class="line">			display_alert &quot;Begin $&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-packages&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line">			PACKAGES=&quot;$(sed -f &quot;$&#123;EXTER&#125;/packages/raspi/scripts/remove-comments.sed&quot; &lt; &quot;$&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-packages&quot;)&quot;</span><br><span class="line">			if [ -n &quot;$PACKAGES&quot; ]; then</span><br><span class="line">				on_chroot &lt;&lt; EOF</span><br><span class="line">apt-get -o Acquire::Retries=3 install -y $PACKAGES</span><br><span class="line">EOF</span><br><span class="line">			fi</span><br><span class="line">			display_alert &quot;End $&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-packages&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line">                fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">               <span class="keyword">if</span> [ -d <span class="string">&quot;<span class="variable">$&#123;SUB_STAGE_DIR&#125;</span>/<span class="variable">$&#123;i&#125;</span>-patches&quot;</span> ]; <span class="keyword">then</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       <span class="built_in">log</span> <span class="string">&quot;Begin <span class="variable">$&#123;SUB_STAGE_DIR&#125;</span>/<span class="variable">$&#123;i&#125;</span>-patches&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       <span class="built_in">pushd</span> <span class="string">&quot;<span class="variable">$&#123;STAGE_WORK_DIR&#125;</span>&quot;</span> &gt; /dev/null</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       <span class="comment">#cd $&#123;STAGE_WORK_DIR&#125;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#                        QUILT_PATCHES=&quot;$&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-patches&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       SUB_STAGE_QUILT_PATCH_DIR=<span class="string">&quot;<span class="subst">$(basename <span class="string">&quot;<span class="variable">$SUB_STAGE_DIR</span>&quot;</span>)</span>-pc&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       <span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="variable">$STAGE_WORK_DIR</span>/<span class="variable">$SUB_STAGE_QUILT_PATCH_DIR</span>&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       <span class="built_in">ln</span> -snf <span class="string">&quot;<span class="variable">$STAGE_WORK_DIR</span>/<span class="variable">$SUB_STAGE_QUILT_PATCH_DIR</span>&quot;</span> .pc</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       <span class="built_in">ln</span> -snfv <span class="string">&quot;<span class="variable">$&#123;ROOTFS_DIR&#125;</span>&quot;</span> <span class="variable">$&#123;STAGE_WORK_DIR&#125;</span>/rootfs</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       quilt upgrade</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       <span class="keyword">if</span> [ -e <span class="string">&quot;<span class="variable">$&#123;SUB_STAGE_DIR&#125;</span>/<span class="variable">$&#123;i&#125;</span>-patches/EDIT&quot;</span> ]; <span class="keyword">then</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                               <span class="built_in">echo</span> <span class="string">&quot;Dropping into bash to edit patches...&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                               bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       <span class="keyword">fi</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       RC=0</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       quilt push -a || RC=$?</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$RC</span>&quot;</span> <span class="keyword">in</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                               0|2)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                                       ;;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                               *)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                                       <span class="literal">false</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                                       ;;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       <span class="keyword">esac</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       <span class="comment">#popd &gt; /dev/null</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">			<span class="built_in">cd</span> -</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       <span class="built_in">log</span> <span class="string">&quot;End <span class="variable">$&#123;SUB_STAGE_DIR&#125;</span>/<span class="variable">$&#123;i&#125;</span>-patches&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">               <span class="keyword">fi</span></span></span><br><span class="line">		if [ -x $&#123;i&#125;-run.sh ]; then</span><br><span class="line">			display_alert &quot;Begin $&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-run.sh&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line">			./$&#123;i&#125;-run.sh</span><br><span class="line">			display_alert &quot;End $&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-run.sh&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line">		fi</span><br><span class="line">		if [ -f $&#123;i&#125;-run-chroot.sh ]; then</span><br><span class="line">			display_alert &quot;Begin $&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-run-chroot.sh&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line">			on_chroot &lt; $&#123;i&#125;-run-chroot.sh</span><br><span class="line">			display_alert &quot;End $&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-run-chroot.sh&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line">		fi</span><br><span class="line">	done</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">popd</span> &gt; /dev/null</span></span><br><span class="line">	log &quot;End $&#123;SUB_STAGE_DIR&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run_stage()&#123;</span><br><span class="line">	rm -rf &quot;$&#123;SRC&#125;&quot;/output/raspi</span><br><span class="line">	[[ ! -d &quot;$&#123;SRC&#125;&quot;/output/raspi ]] &amp;&amp; mkdir -p &quot;$&#123;SRC&#125;&quot;/output/raspi</span><br><span class="line"></span><br><span class="line">	STAGE_WORK_DIR=&quot;$&#123;SRC&#125;/output/raspi&quot;</span><br><span class="line"></span><br><span class="line">	if [ ! -f $&#123;STAGE_DIR&#125;/SKIP ]; then</span><br><span class="line">		if [ -x $&#123;STAGE_DIR&#125;/prerun.sh ]; then</span><br><span class="line">			display_alert &quot;Begin $&#123;STAGE_DIR&#125;/prerun.sh&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line">			source $&#123;STAGE_DIR&#125;/prerun.sh</span><br><span class="line">			display_alert &quot;End $&#123;STAGE_DIR&#125;/prerun.sh&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		for SUB_STAGE_DIR in &quot;$&#123;STAGE_DIR&#125;&quot;/*; do</span><br><span class="line">			if [ -d &quot;$&#123;SUB_STAGE_DIR&#125;&quot; ] &amp;&amp; [ ! -f &quot;$&#123;SUB_STAGE_DIR&#125;/SKIP&quot; ]; then</span><br><span class="line">				run_sub_stage</span><br><span class="line">			fi</span><br><span class="line">		done</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log ()</span><br><span class="line">&#123;</span><br><span class="line">	date +&quot;[%T] $*&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install_opi_specific()</span><br><span class="line">&#123;</span><br><span class="line">	cd $SRC</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">install u-boot</span></span><br><span class="line">	UBOOT_VER=$(dpkg --info &quot;$&#123;InstallingDEB_STORAGE&#125;/u-boot/$&#123;CHOSEN_UBOOT&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot; | grep Descr | awk &#x27;&#123;print $(NF)&#125;&#x27;)</span><br><span class="line">	install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/u-boot/$&#123;CHOSEN_UBOOT&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">install kernel</span></span><br><span class="line">	VER=$(dpkg --info &quot;$&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KERNEL&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot; | awk -F&quot;-&quot; &#x27;/Source:/&#123;print $2&#125;&#x27;)</span><br><span class="line">	install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KERNEL&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot;</span><br><span class="line">	if [[ -f $&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KERNEL/image/dtb&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb ]]; then</span><br><span class="line">		install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KERNEL/image/dtb&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot;</span><br><span class="line">	fi</span><br><span class="line">	if [[ $INSTALL_HEADERS == yes ]]; then</span><br><span class="line">		install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KERNEL/image/headers&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot;</span><br><span class="line">	else</span><br><span class="line">		cp &quot;$&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KERNEL/image/headers&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot; &quot;$&#123;SDCARD&#125;&quot;/opt/</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/packages/raspi/orangepi/debs/raspi-config_20230214_all.deb&quot;</span><br><span class="line"></span><br><span class="line">	case $&#123;BOARDFAMILY&#125; in</span><br><span class="line">		&quot;rockchip-rk356x&quot;)</span><br><span class="line">			rk356x_gpu_vpu_tweaks_for_raspios</span><br><span class="line">	esac</span><br><span class="line"></span><br><span class="line">	[[ ! -d &quot;$&#123;SDCARD&#125;/lib/firmware&quot; ]] &amp;&amp; mkdir -p &quot;$&#123;SDCARD&#125;/lib/firmware&quot;</span><br><span class="line">	cp -rfa $&#123;EXTER&#125;/cache/sources/orangepi-firmware-git/* $&#123;SDCARD&#125;/lib/firmware/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">NOTE: this needs to be executed before family_tweaks</span></span><br><span class="line">	local bootscript_src=$&#123;BOOTSCRIPT%%:*&#125;</span><br><span class="line">	local bootscript_dst=$&#123;BOOTSCRIPT##*:&#125;</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$&#123;BOOTCONFIG&#125;&quot; != &quot;none&quot; ]]; then</span><br><span class="line">		if [ -f &quot;$&#123;USERPATCHES_PATH&#125;/bootscripts/$&#123;bootscript_src&#125;&quot; ]; then</span><br><span class="line">			cp &quot;$&#123;USERPATCHES_PATH&#125;/bootscripts/$&#123;bootscript_src&#125;&quot; &quot;$&#123;SDCARD&#125;/boot/$&#123;bootscript_dst&#125;&quot;</span><br><span class="line">		else</span><br><span class="line">			cp &quot;$&#123;EXTER&#125;/config/bootscripts/$&#123;bootscript_src&#125;&quot; &quot;$&#123;SDCARD&#125;/boot/$&#123;bootscript_dst&#125;&quot;</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ -n $BOOTENV_FILE ]]; then</span><br><span class="line">		if [[ -f $USERPATCHES_PATH/bootenv/$BOOTENV_FILE ]]; then</span><br><span class="line">			cp &quot;$USERPATCHES_PATH/bootenv/$&#123;BOOTENV_FILE&#125;&quot; &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt</span><br><span class="line">		elif [[ -f $EXTER/config/bootenv/$BOOTENV_FILE ]]; then</span><br><span class="line">			cp &quot;$&#123;EXTER&#125;/config/bootenv/$&#123;BOOTENV_FILE&#125;&quot; &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	[[ -n $OVERLAY_PREFIX &amp;&amp; -f &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt &amp;&amp; ($BRANCH =~ current|next || $BOARDFAMILY =~ &quot;rockchip-rk3588&quot;|&quot;rockchip-rk356x&quot;) ]] &amp;&amp; \</span><br><span class="line">		echo &quot;overlay_prefix=$OVERLAY_PREFIX&quot; &gt;&gt; &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt</span><br><span class="line"></span><br><span class="line">	[[ -n $DEFAULT_OVERLAYS &amp;&amp; -f &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt &amp;&amp; ($BRANCH =~ current|next || $BOARDFAMILY =~ &quot;rockchip-rk3588&quot;|&quot;rockchip-rk356x&quot;) ]] &amp;&amp; \</span><br><span class="line">		echo &quot;overlays=$&#123;DEFAULT_OVERLAYS//,/ &#125;&quot; &gt;&gt; &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt</span><br><span class="line"></span><br><span class="line">	[[ -n $BOOT_FDT_FILE &amp;&amp; -f &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt ]] &amp;&amp; \</span><br><span class="line">		echo &quot;fdtfile=$&#123;BOOT_FDT_FILE&#125;&quot; &gt;&gt; &quot;$&#123;SDCARD&#125;/boot/orangepiEnv.txt&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">install initial asound.state <span class="keyword">if</span> defined</span></span><br><span class="line">	mkdir -p &quot;$&#123;SDCARD&#125;&quot;/var/lib/alsa/</span><br><span class="line">	[[ -n $ASOUND_STATE ]] &amp;&amp; cp &quot;$&#123;EXTER&#125;/packages/blobs/asound.state/$&#123;ASOUND_STATE&#125;&quot; &quot;$&#123;SDCARD&#125;&quot;/var/lib/alsa/asound.state</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">create modules file</span></span><br><span class="line">	local modules=MODULES_$&#123;BRANCH^^&#125;</span><br><span class="line">	if [[ -n &quot;$&#123;!modules&#125;&quot; ]]; then</span><br><span class="line">		tr &#x27; &#x27; &#x27;\n&#x27; &lt;&lt;&lt; &quot;$&#123;!modules&#125;&quot; &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/modules</span><br><span class="line">	elif [[ -n &quot;$&#123;MODULES&#125;&quot; ]]; then</span><br><span class="line">		tr &#x27; &#x27; &#x27;\n&#x27; &lt;&lt;&lt; &quot;$&#123;MODULES&#125;&quot; &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/modules</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">create blacklist files</span></span><br><span class="line">	local blacklist=MODULES_BLACKLIST_$&#123;BRANCH^^&#125;</span><br><span class="line">	if [[ -n &quot;$&#123;!blacklist&#125;&quot; ]]; then</span><br><span class="line">		tr &#x27; &#x27; &#x27;\n&#x27; &lt;&lt;&lt; &quot;$&#123;!blacklist&#125;&quot; | sed -e &#x27;s/^/blacklist /&#x27; &gt; &quot;$&#123;SDCARD&#125;/etc/modprobe.d/blacklist-$&#123;BOARD&#125;.conf&quot;</span><br><span class="line">	elif [[ -n &quot;$&#123;MODULES_BLACKLIST&#125;&quot; ]]; then</span><br><span class="line">		tr &#x27; &#x27; &#x27;\n&#x27; &lt;&lt;&lt; &quot;$&#123;MODULES_BLACKLIST&#125;&quot; | sed -e &#x27;s/^/blacklist /&#x27; &gt; &quot;$&#123;SDCARD&#125;/etc/modprobe.d/blacklist-$&#123;BOARD&#125;.conf&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	cat &lt;&lt;-EOF &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/orangepi-release</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">PLEASE DO NOT EDIT THIS FILE</span></span><br><span class="line">	BOARD=$&#123;BOARD&#125;</span><br><span class="line">	BOARD_NAME=&quot;$BOARD_NAME&quot;</span><br><span class="line">	BOARDFAMILY=$&#123;BOARDFAMILY&#125;</span><br><span class="line">	BUILD_REPOSITORY_URL=$&#123;BUILD_REPOSITORY_URL&#125;</span><br><span class="line">	BUILD_REPOSITORY_COMMIT=$&#123;BUILD_REPOSITORY_COMMIT&#125;</span><br><span class="line">	DISTRIBUTION_CODENAME=$&#123;RELEASE&#125;</span><br><span class="line">	DISTRIBUTION_STATUS=$&#123;DISTRIBUTION_STATUS&#125;</span><br><span class="line">	VERSION=$&#123;REVISION&#125;</span><br><span class="line">	LINUXFAMILY=$&#123;LINUXFAMILY&#125;</span><br><span class="line">	ARCH=$&#123;ARCHITECTURE&#125;</span><br><span class="line">	IMAGE_TYPE=$IMAGE_TYPE</span><br><span class="line">	BOARD_TYPE=$BOARD_TYPE</span><br><span class="line">	INITRD_ARCH=$&#123;INITRD_ARCH&#125;</span><br><span class="line">	KERNEL_IMAGE_TYPE=$&#123;KERNEL_IMAGE_TYPE&#125;</span><br><span class="line">	BRANCH=$&#123;BRANCH&#125;</span><br><span class="line">	EOF</span><br><span class="line"></span><br><span class="line">	install -d &quot;$&#123;SDCARD&#125;/etc/initramfs/post-update.d/&quot;</span><br><span class="line">	install -m 755 &quot;$&#123;EXTER&#125;/packages/bsp/common/etc/initramfs/post-update.d/99-uboot&quot; &quot;$&#123;SDCARD&#125;/etc/initramfs/post-update.d/&quot;</span><br><span class="line"></span><br><span class="line">	install -m 755 &quot;$&#123;EXTER&#125;/packages/raspi/orangepi/common/files/hciattach_opi&quot; &quot;$&#123;SDCARD&#125;/usr/bin/&quot;</span><br><span class="line">	install -m 755 &quot;$&#123;EXTER&#125;/packages/raspi/orangepi/common/files/brcm_patchram_plus&quot; &quot;$&#123;SDCARD&#125;/usr/bin/&quot;</span><br><span class="line"></span><br><span class="line">	install -d &quot;$&#123;SDCARD&#125;/usr/lib/orangepi/&quot;</span><br><span class="line">	install -m 755 &quot;$&#123;EXTER&#125;/packages/raspi/orangepi/common/files/orangepi-hardware-optimization&quot; &quot;$&#123;SDCARD&#125;/usr/lib/orangepi/&quot;</span><br><span class="line">	install -m 755 &quot;$&#123;EXTER&#125;/packages/raspi/orangepi/common/files/orangepi-hardware-optimize.service&quot; &quot;$&#123;SDCARD&#125;/usr/lib/systemd/system/&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl --no-reload enable orangepi-hardware-optimize.service &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line"></span><br><span class="line">	install_wiringop</span><br><span class="line"></span><br><span class="line">	rm $SDCARD/root/*.deb &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install_raspi_specific()</span><br><span class="line">&#123;</span><br><span class="line">	export TARGET_HOSTNAME=$&#123;TARGET_HOSTNAME:-raspberrypi&#125;</span><br><span class="line">	export FIRST_USER_NAME=$&#123;FIRST_USER_NAME:-pi&#125;</span><br><span class="line">	export FIRST_USER_PASS</span><br><span class="line">	export DISABLE_FIRST_BOOT_USER_RENAME=$&#123;DISABLE_FIRST_BOOT_USER_RENAME:-0&#125;</span><br><span class="line">	export WPA_ESSID</span><br><span class="line">	export WPA_PASSWORD</span><br><span class="line">	export WPA_COUNTRY</span><br><span class="line">	export ENABLE_SSH=&quot;$&#123;ENABLE_SSH:-0&#125;&quot;</span><br><span class="line">	export PUBKEY_ONLY_SSH=&quot;$&#123;PUBKEY_ONLY_SSH:-0&#125;&quot;</span><br><span class="line"></span><br><span class="line">	export LOCALE_DEFAULT=&quot;$&#123;LOCALE_DEFAULT:-en_GB.UTF-8&#125;&quot;</span><br><span class="line"></span><br><span class="line">	export KEYBOARD_KEYMAP=&quot;$&#123;KEYBOARD_KEYMAP:-gb&#125;&quot;</span><br><span class="line">	export KEYBOARD_LAYOUT=&quot;$&#123;KEYBOARD_LAYOUT:-English (UK)&#125;&quot;</span><br><span class="line"></span><br><span class="line">	export TIMEZONE_DEFAULT=&quot;$&#123;TIMEZONE_DEFAULT:-Europe/London&#125;&quot;</span><br><span class="line"></span><br><span class="line">	export PUBKEY_SSH_FIRST_USER</span><br><span class="line"></span><br><span class="line">	export APT_PROXY</span><br><span class="line"></span><br><span class="line">	export STAGE</span><br><span class="line">	export STAGE_DIR</span><br><span class="line">	export STAGE_WORK_DIR</span><br><span class="line">	export PREV_STAGE</span><br><span class="line">	export PREV_STAGE_DIR</span><br><span class="line">	export ROOTFS_DIR=$&#123;SDCARD&#125;</span><br><span class="line">	export PREV_ROOTFS_DIR</span><br><span class="line">	export IMG_SUFFIX</span><br><span class="line">	export NOOBS_NAME</span><br><span class="line">	export NOOBS_DESCRIPTION</span><br><span class="line">	export EXPORT_DIR</span><br><span class="line">	export EXPORT_ROOTFS_DIR</span><br><span class="line"></span><br><span class="line">	export QUILT_PATCHES</span><br><span class="line">	export QUILT_NO_DIFF_INDEX=1</span><br><span class="line">	export QUILT_NO_DIFF_TIMESTAMPS=1</span><br><span class="line">	export QUILT_REFRESH_ARGS=&quot;-p ab&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">check username is valid</span></span><br><span class="line">	if [[ ! &quot;$FIRST_USER_NAME&quot; =~ ^[a-z][-a-z0-9_]*$ ]]; then</span><br><span class="line">		echo &quot;Invalid FIRST_USER_NAME: $FIRST_USER_NAME&quot;</span><br><span class="line">		exit 1</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$DISABLE_FIRST_BOOT_USER_RENAME&quot; == &quot;1&quot; ]] &amp;&amp; [ -z &quot;$&#123;FIRST_USER_PASS&#125;&quot; ]; then</span><br><span class="line">		echo &quot;To disable user rename on first boot, FIRST_USER_PASS needs to be set&quot;</span><br><span class="line">		echo &quot;Not setting FIRST_USER_PASS makes your system vulnerable and open to cyberattacks&quot;</span><br><span class="line">		exit 1</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$DISABLE_FIRST_BOOT_USER_RENAME&quot; == &quot;1&quot; ]]; then</span><br><span class="line">		echo &quot;User rename on the first boot is disabled&quot;</span><br><span class="line">		echo &quot;Be advised of the security risks linked to shipping a device with default username/password set.&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ -n &quot;$&#123;APT_PROXY&#125;&quot; ]] &amp;&amp; ! curl --silent &quot;$&#123;APT_PROXY&#125;&quot; &gt;/dev/null ; then</span><br><span class="line">		echo &quot;Could not reach APT_PROXY server: $&#123;APT_PROXY&#125;&quot;</span><br><span class="line">		exit 1</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ -n &quot;$&#123;WPA_PASSWORD&#125;&quot; &amp;&amp; $&#123;#WPA_PASSWORD&#125; -lt 8 || $&#123;#WPA_PASSWORD&#125; -gt 63  ]] ; then</span><br><span class="line">		echo &quot;WPA_PASSWORD&quot; must be between 8 and 63 characters</span><br><span class="line">		exit 1</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$&#123;PUBKEY_ONLY_SSH&#125;&quot; = &quot;1&quot; &amp;&amp; -z &quot;$&#123;PUBKEY_SSH_FIRST_USER&#125;&quot; ]]; then</span><br><span class="line">		echo &quot;Must set &#x27;PUBKEY_SSH_FIRST_USER&#x27; to a valid SSH public key if using PUBKEY_ONLY_SSH&quot;</span><br><span class="line">		exit 1</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	RASPI_DIR=&quot;$&#123;EXTER&#125;/packages/raspi&quot;</span><br><span class="line"></span><br><span class="line">	if [[ $&#123;BUILD_DESKTOP&#125; == &quot;yes&quot; ]]; then</span><br><span class="line">		rm -r $&#123;RASPI_DIR&#125;/stage3/SKIP $&#123;RASPI_DIR&#125;/stage4/SKIP $&#123;RASPI_DIR&#125;/stage5/SKIP 2&gt;/dev/null</span><br><span class="line">		touch $&#123;RASPI_DIR&#125;/stage5/SKIP</span><br><span class="line">	else</span><br><span class="line">		rm -r $&#123;RASPI_DIR&#125;/stage1/SKIP $&#123;RASPI_DIR&#125;/stage2/SKIP 2&gt;/dev/null</span><br><span class="line">		touch $&#123;RASPI_DIR&#125;/stage3/SKIP $&#123;RASPI_DIR&#125;/stage4/SKIP $&#123;RASPI_DIR&#125;/stage5/SKIP</span><br><span class="line">		export FIRST_USER_PASS=&quot;pi&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	STAGE_LIST=$&#123;RASPI_DIR&#125;/stage*</span><br><span class="line"></span><br><span class="line">	for STAGE_DIR in $STAGE_LIST; do</span><br><span class="line">		STAGE_DIR=$(realpath &quot;$&#123;STAGE_DIR&#125;&quot;)</span><br><span class="line">		run_stage</span><br><span class="line">	done</span><br><span class="line"></span><br><span class="line">	STAGE_DIR=$&#123;RASPI_DIR&#125;/export-image</span><br><span class="line">	run_stage</span><br><span class="line"></span><br><span class="line">	rm -rf $&#123;SDCARD&#125;/boot/*</span><br><span class="line">	rm -rf $&#123;SDCARD&#125;/lib/firmware</span><br><span class="line">	rm -rf $&#123;SDCARD&#125;/lib/modules/*</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="7-整理的包"><a class="markdownIt-Anchor" href="#7-整理的包"></a> 7 整理的包</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">camera-engine-rkaiq_arm64.deb</span><br><span class="line">librga2_2.2.0-1_arm64.deb</span><br><span class="line">librga-dev_2.2.0-1_arm64.deb</span><br><span class="line">librockchip-mpp1_1.5.0-1_arm64.deb</span><br><span class="line">librockchip-mpp-dev_1.5.0-1_arm64.deb</span><br><span class="line">librockchip-vpu0_1.5.0-1_arm64.deb</span><br><span class="line">rockchip-mpp-demos_1.5.0-1_arm64.deb</span><br><span class="line">libmali-valhall-g610-g6p0-x11_1.9-1_arm64.deb</span><br><span class="line">gstreamer1.0-rockchip1_1.14-4_arm64.deb</span><br><span class="line">libgstreamer1.0-0_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">libgstreamer1.0-dev_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">gir1.2-gstreamer-1.0_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">gstreamer1.0-tools_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">libgstreamer-gl1.0-0_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">gir1.2-gst-plugins-base-1.0_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">gstreamer1.0-alsa_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">gstreamer1.0-plugins-base_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">gstreamer1.0-plugins-base-apps_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">gstreamer1.0-x_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">gstreamer1.0-gl_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">libgstreamer-plugins-base1.0-0_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">libgstreamer-plugins-base1.0-dev_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">gstreamer1.0-plugins-good_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">gstreamer1.0-pulseaudio_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">gstreamer1.0-gtk3_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">gstreamer1.0-qt5_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">libgstreamer-plugins-good1.0-0_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">libgstreamer-plugins-good1.0-dev_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">libdvbv5-0_1.18.0-2build1_arm64.deb</span><br><span class="line">dvb-tools_1.18.0-2build1_arm64.deb</span><br><span class="line">ir-keytable_1.18.0-2build1_arm64.deb</span><br><span class="line">libdvbv5-dev_1.18.0-2build1_arm64.deb</span><br><span class="line">libdvbv5-doc_1.18.0-2build1_all.deb</span><br><span class="line">libv4l-0_1.18.0-2build1_arm64.deb</span><br><span class="line">libv4l2rds0_1.18.0-2build1_arm64.deb</span><br><span class="line">libv4lconvert0_1.18.0-2build1_arm64.deb</span><br><span class="line">libv4l-dev_1.18.0-2build1_arm64.deb</span><br><span class="line">libv4l-rkmpp_1.4.0-1_arm64.deb</span><br><span class="line">v4l-utils_1.18.0-2build1_arm64.deb</span><br><span class="line">qv4l2_1.18.0-2build1_arm64.deb</span><br><span class="line">xserver-xorg-core_1.20.13-1ubuntu1~20.04.2_arm64.deb</span><br><span class="line">chromium-x11_91.0.4472.164_arm64.deb</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>瑞芯微</category>
      </categories>
  </entry>
  <entry>
    <title>ubuntu和debian文件系统构建详解</title>
    <url>/2023/11/20/10%20debian%E5%92%8Cubuntu%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%9E%84%E5%BB%BA%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第7章-ubuntu和debian系统构建"><a class="markdownIt-Anchor" href="#第7章-ubuntu和debian系统构建"></a> 第7章 Ubuntu和Debian系统构建</h1>
<p>在前面的几个章节中，我们利用了busybox，buildroot，yocto工具构建文件系统。我们也可以使用Linux发行版来直接作为文件系统，比如Ubuntu系统和Debian系统。由于Ubuntu和Debian系统的构建方法相同，所以作者将他们两个系统的构建放到了一起。</p>
<p>注意：必须要在ubuntu20等更高版本的系统上进行本章节的文件系统构建，经测试在ubutnu18上因为一些工具的版本问题，会出现很多意想不到的问题。</p>
<h2 id="71-安装所需的工具"><a class="markdownIt-Anchor" href="#71-安装所需的工具"></a> 7.1 安装所需的工具</h2>
<p>使用如下命令安装所需的工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install binfmt-support qemu qemu-user-static debootstrap</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311212050842.jpg" alt="img" /></p>
<p>binfmt-support：提供了对二进制格式解释器的支持。允许在Linux系统中执行非本机二进制文件，例如在ARM架构上运行x86二进制文件。它为Linux内核添加了解释器注册表和执行文件的解析逻辑。</p>
<p>qemu：是一个开源的硬件虚拟化和仿真软件，允许在一个平台上模拟另一个平台的运行。它支持多种体系结构和硬件设备，并可以用于开发和测试操作系统、应用程序等。</p>
<p>qemu-user-static：这是QEMU的用户态静态二进制文件。允许在主机平台上运行不同体系结构的可执行文件，而无需运行完整的虚拟机。这对于交叉编译和在本地主机上模拟其他体系结构的应用程序非常有用。</p>
<p>debootstrap：用于在Linux系统中创建基于Debian的最小文件系统的工具。可以帮助你从零开始构建一个基本的和Ubuntu和Debian系统，并可以用于创建chroot环境或构建自定义的Linux发行版。</p>
<h2 id="72根文件系统制作"><a class="markdownIt-Anchor" href="#72根文件系统制作"></a> 7.2根文件系统制作</h2>
<p>首先来学习一下debootstrap命令的基本语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">debootstrap arch &lt;架构&gt; &lt;发行版&gt; &lt;目标目录&gt; [镜像地址]</span><br></pre></td></tr></table></figure>
<p>–arch &lt;架构&gt;：指定目标系统的架构，例如 amd64、armhf、arm64 等。根据目标系统的架构选择合适的值。</p>
<p>&lt;发行版&gt;：指定要创建的Debian发行版，流行系统的版本号如下所示：</p>
<p>（1）Ubuntu 20.04：focal</p>
<p>（2）Ubuntu 22.04：jammy</p>
<p>（3）Debian 10： buster</p>
<p>（4）Debian 11：bullseye</p>
<p>&lt;目标目录&gt;：指定要创建的目标文件系统的目录路径。所有的Debian软件包和配置文件将安装到该目录中。</p>
<p>[镜像地址]（可选）：指定用于下载Ubuntu和Debian软件包的镜像地址。如果不提供镜像地址，将使用默认的镜像地址进行下载,这里建议选择国内源，例如华为源、阿里源等。</p>
<p>注意：debootstrap 命令的使用需要在root用户下。</p>
<p>首先创建一个镜像存放的目录，这里作者起名为binary，大家随意即可，创建完成如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311212050838.jpg" alt="img" /></p>
<p>然后使用以下命令制作根文件系统，每个系统的制作命令都已经列了出来：<br />
（1）Ubuntu 20.04：focal</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arch=arm64</span><br><span class="line">release=focal</span><br><span class="line">chroot_dir=binary</span><br><span class="line">mirror=https://mirrors.huaweicloud.com/repository/ubuntu-ports/</span><br><span class="line">debootstrap --arch $&#123;arch&#125; $&#123;release&#125; $&#123;chroot_dir&#125; $&#123;mirror&#125;</span><br></pre></td></tr></table></figure>
<p>（2）Ubuntu 22.04：jammy</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arch=arm64</span><br><span class="line">release=jammy</span><br><span class="line">chroot_dir=binary</span><br><span class="line">mirror=https://mirrors.huaweicloud.com/repository/ubuntu-ports/</span><br><span class="line">sudo debootstrap --arch $&#123;arch&#125; $&#123;release&#125; $&#123;chroot_dir&#125; $&#123;mirror&#125;</span><br></pre></td></tr></table></figure>
<p>（3）Debian 10： buster</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arch=arm64</span><br><span class="line">release=buster</span><br><span class="line">chroot_dir=</span><br><span class="line">mirror=https://mirrors.huaweicloud.com/repository/debian/</span><br><span class="line">debootstrap --arch $&#123;arch&#125; $&#123;release&#125; $&#123;chroot_dir&#125; $&#123;mirror&#125;</span><br></pre></td></tr></table></figure>
<p>（4）Debian 11：bullseye</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arch=arm64</span><br><span class="line">release=bullseye</span><br><span class="line">chroot_dir=binary</span><br><span class="line">mirror=https://mirrors.huaweicloud.com/repository/debian/</span><br><span class="line">debootstrap --arch $&#123;arch&#125; $&#123;release&#125; $&#123;chroot_dir&#125; $&#123;mirror&#125;</span><br></pre></td></tr></table></figure>
<p>这里作者以ubuntu20为例进行演示，命令输入之后会开始文件系统的构建，构建构成如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311212050845.jpg" alt="img" /></p>
<p>然后等待构建完成，构建完成之后如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311212050849.jpg" alt="img" /></p>
<p>可以看到Linux的一些基本目录就都已经生成了。</p>
<h2 id="73挂载根文件系统"><a class="markdownIt-Anchor" href="#73挂载根文件系统"></a> 7.3挂载根文件系统</h2>
<p>在构建Ubuntu和Debian文件系统时，需要将主机的/proc、/sys/、dev/、dev/pts这些虚拟文件系统挂载到要构建的系统中通过挂载这些临时文件系统，构建文件系统的过程中的命令可以正常访问和操作系统的进程、内核、硬件以及临时文件和进程。这些挂载操作为构建过程提供了必要的运行环境和资源。</p>
<p>挂载操作这里通过mount.sh脚本来完成，该脚本的具体内容如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">mnt() &#123;</span><br><span class="line">	echo &quot;MOUNTING&quot;</span><br><span class="line">	sudo mount -t proc /proc $&#123;2&#125;proc</span><br><span class="line">	sudo mount -t sysfs /sys $&#123;2&#125;sys</span><br><span class="line">	sudo mount -o bind /dev $&#123;2&#125;dev</span><br><span class="line">	sudo mount -o bind /dev/pts $&#123;2&#125;dev/pts</span><br><span class="line">&#125;</span><br><span class="line">umnt() &#123;</span><br><span class="line">	echo &quot;UNMOUNTING&quot;</span><br><span class="line">	sudo umount $&#123;2&#125;proc</span><br><span class="line">	sudo umount $&#123;2&#125;sys</span><br><span class="line">	sudo umount $&#123;2&#125;dev/pts</span><br><span class="line">	sudo umount $&#123;2&#125;dev</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if [ &quot;$1&quot; == &quot;-m&quot; ] &amp;&amp; [ -n &quot;$2&quot; ] ;</span><br><span class="line">then</span><br><span class="line">	mnt $1 $2</span><br><span class="line">elif [ &quot;$1&quot; == &quot;-u&quot; ] &amp;&amp; [ -n &quot;$2&quot; ];</span><br><span class="line">then</span><br><span class="line">	umnt $1 $2</span><br><span class="line">else</span><br><span class="line">	echo &quot;&quot;</span><br><span class="line">	echo &quot;Either 1&#x27;st, 2&#x27;nd or both parameters were missing&quot;</span><br><span class="line">	echo &quot;&quot;</span><br><span class="line">	echo &quot;1&#x27;st parameter can be one of these: -m(mount) OR -u(umount)&quot;</span><br><span class="line">	echo &quot;2&#x27;nd parameter is the full path of rootfs directory(with trailing &#x27;/&#x27;)&quot;</span><br><span class="line">	echo &quot;&quot;</span><br><span class="line">	echo &quot;For example: ch-mount -m /media/sdcard/&quot;</span><br><span class="line">	echo &quot;&quot;</span><br><span class="line">	echo 1st parameter : $&#123;1&#125;</span><br><span class="line">	echo 2nd parameter : $&#123;2&#125;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>创建该文件，添加相应的内容并赋予可执行权限，具体操作如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311212050848.jpg" alt="img" /></p>
<p>该脚本既可以用来挂载，也可以用来解除挂载，挂载的命令如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./mount.sh -m binary/</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311212050850.jpg" alt="img" /></p>
<p>挂载成功之后使用以下命令改变根目录，将根目录修改为刚刚创建好的文件系统中，如下图所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chroot binary/</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311212050000.jpg" alt="img" /></p>
<p>接下来就可以进入下一个小节，开始文件系统的定制了。</p>
<h2 id="74-定制根文件系统"><a class="markdownIt-Anchor" href="#74-定制根文件系统"></a> 7.4 定制根文件系统</h2>
<h3 id="741-apt换源"><a class="markdownIt-Anchor" href="#741-apt换源"></a> <strong>7.4.1 apt换源</strong></h3>
<p>由于构建出系统的软件源在国外，因为网络问题而不稳定导致下载速度缓慢，所以这里先将默认源更换为国内源。</p>
<p>Ubuntu和Debian系统的软件源文件为“/etc/apt/sources.list”，而不同的文件系统他们的软件源也各不相同，所以这里罗列了不同系统的国内软件源，如下所示：<br />
（1）Ubuntu 20.04：focal</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu-ports/ focal main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu-ports/ focal main main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu-ports/ focal-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu-ports/ focal-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu-ports/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu-ports/ focal-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu-ports/ focal-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu-ports/ focal-security main restricted universe multiverse</span><br></pre></td></tr></table></figure>
<p>（2）Ubuntu 22.04：jammy</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.huaweicloud.com/repository/ubuntu-ports/ jammy main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.huaweicloud.com/repository/ubuntu-ports/ jammy main restricted universe multiverse</span><br><span class="line">deb https://mirrors.huaweicloud.com/repository/ubuntu-ports/ jammy-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.huaweicloud.com/repository/ubuntu-ports/ jammy-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.huaweicloud.com/repository/ubuntu-ports/ jammy-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.huaweicloud.com/repository/ubuntu-ports/ jammy-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.huaweicloud.com/repository/ubuntu-ports/ jammy-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.huaweicloud.com/repository/ubuntu-ports/ jammy-security main restricted universe multiverse</span><br></pre></td></tr></table></figure>
<p>（3）Debian 10： buster</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.huaweicloud.com/repository/debian/ buster main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free</span><br><span class="line">deb https://mirrors.huaweicloud.com/repository/debian/ buster-updates main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free</span><br><span class="line">deb https://mirrors.huaweicloud.com/repository/debian/ buster-backports main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free</span><br><span class="line">deb https://mirrors.huaweicloud.com/repository/debian-security buster/updates main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free</span><br></pre></td></tr></table></figure>
<p>（4）Debian 11：bullseye</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.huaweicloud.com/debian/ bullseye main non-free contrib</span><br><span class="line">deb-src https://mirrors.huaweicloud.com/debian/ bullseye main non-free contrib</span><br><span class="line">deb https://mirrors.huaweicloud.com/debian-security/ bullseye-security main</span><br><span class="line">deb-src https://mirrors.huaweicloud.com/debian-security/ bullseye-security main</span><br><span class="line">deb https://mirrors.huaweicloud.com/debian/ bullseye-updates main non-free contrib</span><br><span class="line">deb-src https://mirrors.huaweicloud.com/debian/ bullseye-updates main non-free contrib</span><br><span class="line">deb https://mirrors.huaweicloud.com/debian/ bullseye-backports main non-free contrib</span><br><span class="line">deb-src https://mirrors.huaweicloud.com/debian/ bullseye-backports main non-free contrib</span><br></pre></td></tr></table></figure>
<p>然后使用vim命令修改/etc/apt/sources.list为上面提供的国内源，修改完成如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311212050010.jpg" alt="img" /></p>
<p>然后使用以下命令进行软件源的更新，更新过程如下图所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt update </span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311212050017.jpg" alt="img" /></p>
<p>等待更新完成即可。默认的dns源在烧写到开发板之后可能也无法正常解析域名，所以需要使用以下命令更换镜像的dns源，如下图所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf /etc/resolv.conf</span><br><span class="line">echo &quot;nameserver 8.8.8.8&quot; &gt; /etc/resolv.conf</span><br><span class="line">echo &quot;nameserver 114.114.114.114&quot; &gt;&gt; /etc/resolv.conf</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311220745228.png" alt="image-20231122074527194" /></p>
<h3 id="742安装常用工具"><a class="markdownIt-Anchor" href="#742安装常用工具"></a> <strong>7.4.2安装常用工具</strong></h3>
<p>然后使用以下命令安装必备的软件包，安装过程如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get -y install dmidecode mtd-utils i2c-tools u-boot-tools \</span><br><span class="line">bash-completion man-db manpages nano gnupg initramfs-tools sudo \</span><br><span class="line">dosfstools mtools parted ntfs-3g zip atop \</span><br><span class="line">p7zip-full htop iotop pciutils lshw lsof exfat-fuse hwinfo \</span><br><span class="line">net-tools wireless-tools openssh-client openssh-server wpasupplicant ifupdown \</span><br><span class="line">pigz wget curl lm-sensors bluez gdisk usb-modeswitch usb-modeswitch-data make \</span><br><span class="line">gcc libc6-dev bison libssl-dev flex  fake-hwclock rfkill wireless-regdb toilet cmake locales \</span><br><span class="line">openssh-server openssh-client network-manager fonts-wqy-zenhei xfonts-intl-chinese alsa-utils vim blueman </span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311212050030.jpg" alt="img" /></p>
<p>等待安装完成即可，每个安装包的具体作用如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dmidecode：用于获取系统的DMI（Desktop Management Interface）信息，包括硬件设备、BIOS和固件等。</span><br><span class="line">mtd-utils：提供对嵌入式闪存设备（MTD）的管理和操作工具，用于读取、擦除和编程闪存芯片。</span><br><span class="line">i2c-tools：用于配置和调试I2C总线设备的工具集。</span><br><span class="line">u-boot-tools：提供与U-Boot引导加载程序相关的工具，用于配置和管理嵌入式系统的引导过程。</span><br><span class="line">bash-completion：为Bash shell提供自动补全功能，可以快速补全命令、选项和文件名。</span><br><span class="line">man-db和manpages：man-db是一个用于管理和浏览man页面（Linux帮助文档）的工具，manpages则是包含常见命令和函数的man页面集合。</span><br><span class="line">nano：一个简单易用的文本编辑器，适用于终端环境。</span><br><span class="line">gnupg：GNU隐私保护工具，用于加密、签名和认证数据和通信。</span><br><span class="line">initramfs-tools：用于创建和管理初始内存文件系统（initramfs），通常用于启动Linux系统前的初始化过程。</span><br><span class="line">sudo：允许普通用户以超级用户（root）权限执行命令的工具。</span><br><span class="line">dosfstools：用于创建、检查和维护DOS/Windows文件系统（FAT）的工具集。</span><br><span class="line">mtools：用于在Linux系统上管理DOS/Windows文件系统（FAT）的工具。</span><br><span class="line">parted：磁盘分区工具，用于创建、调整和管理磁盘分区。</span><br><span class="line">ntfs-3g：用于在Linux系统上读写NTFS文件系统的驱动程序。</span><br><span class="line">zip和p7zip-full：用于创建和提取ZIP和7z等压缩文件的工具。</span><br><span class="line">htop和iotop：用于监视系统资源使用情况的命令行工具，分别监视进程和磁盘I/O的情况。</span><br><span class="line">pciutils：用于查询和配置PCI总线设备的工具。</span><br><span class="line">lshw：显示系统硬件信息的工具。</span><br><span class="line">lsof：列出打开的文件和进程的工具。</span><br><span class="line">exfat-fuse：用于在Linux系统上访问exFAT文件系统的驱动程序。</span><br><span class="line">hwinfo：用于获取和显示硬件信息的工具。</span><br><span class="line">net-tools：包含一些基本的网络工具，如ifconfig和netstat。</span><br><span class="line">wireless-tools：用于配置和管理无线网络接口的工具。</span><br><span class="line">openssh-client和openssh-server：提供SSH客户端和服务器，用于远程安全登录和文件传输。</span><br><span class="line">wpasupplicant：用于配置和连接无线网络的工具。</span><br><span class="line">ifupdown：用于配置和管理网络接口的工具。</span><br><span class="line">pigz：并行压缩/解压缩工具，用于加快压缩速度。</span><br><span class="line">wget和curl：用于从网络上下载文件的命令行工具。</span><br><span class="line">lm-sensors：用于监测硬件传感器（如温度、风扇速度）的工具。</span><br><span class="line">bluez：提供蓝牙协议栈的工具和库。</span><br><span class="line">gdisk：用于创建和管理GUID分区表（GPT）的工具。</span><br><span class="line">usb-modeswitch和usb-modeswitch-data：用于在Linux系统上切换和配置USB移动宽带设备的工具和数据。</span><br><span class="line">make和gcc：编译和构建软件的工具和编译器。</span><br><span class="line">libc6-dev：C语言标准库的开发文件，用于编译和链接C语言程序。</span><br><span class="line">bison和flex：用于生成词法分析器和语法分析器的生成工具。</span><br><span class="line">fake-hwclock：用于在系统没有硬件时钟的情况下，模拟保存和恢复时间的工具。</span><br><span class="line">rfkill：用于管理射频设备的软件屏蔽开关状态的工具。</span><br><span class="line">wireless-regdb：无线电设备的法规数据库，用于配置无线电频率和功率限制。</span><br><span class="line">toilet：用于在终端中生成彩色的ASCII艺术字的工具。</span><br><span class="line">cmake：一个跨平台的开源构建工具，用于管理软件项目的构建过程。</span><br><span class="line">locales：用于配置系统的本地化设置，包括语言、日期、时间等。</span><br><span class="line">network-manager：用于配置和管理网络连接的工具。</span><br><span class="line">fonts-wqy-zenhei和xfonts-intl-chinese：提供中文字体支持，用于显示中文字符。</span><br><span class="line">alsa-utils：用于配置和管理Advanced Linux Sound Architecture (ALSA)的工具。</span><br><span class="line">vim：一个功能强大的文本编辑器，适用于终端环境</span><br></pre></td></tr></table></figure>
<h3 id="743配置root密码"><a class="markdownIt-Anchor" href="#743配置root密码"></a> <strong>7.4.3配置root密码</strong></h3>
<p>输入“passwd root”命令，然后连续输入两次root 用户密码，如图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311212050040.jpg" alt="img" /></p>
<h3 id="744添加topeet用户"><a class="markdownIt-Anchor" href="#744添加topeet用户"></a> <strong>7.4.4添加topeet用户</strong></h3>
<p>然后输入以下命令添加名字为topeet的用户，并将topeet用户的登录密码设置为topeet，并授予该用户以管理员（root）权限执行所有命令，如下图所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adduser topeet --gecos &quot;First Last,RoomNumber,WorkPhone,HomePhone&quot; --disabled-password</span><br><span class="line">echo &quot;topeet:topeet&quot; |  chpasswd</span><br><span class="line">echo &quot;topeet ALL=(ALL:ALL) ALL&quot; &gt;&gt; /etc/sudoers</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311212050045.jpg" alt="img" /></p>
<p>至此，topeet用户就创建完成了，如果想要修改创建的用户修改命令中的topeet即可。</p>
<h3 id="745配置主机名"><a class="markdownIt-Anchor" href="#745配置主机名"></a> <strong>7.4.5配置主机名</strong></h3>
<p>接下来使用如下命令设置主机名称和本机 IP：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export HOST=topeet</span><br><span class="line">echo $HOST &gt; /etc/hostname</span><br><span class="line">echo &quot;127.0.0.1 localhost.localdomain localhost&quot; &gt;&gt; /etc/hosts</span><br><span class="line">echo &quot;127.0.0.1 $HOST&quot; &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311212050162.jpg" alt="img" /></p>
<h3 id="746中文设置"><a class="markdownIt-Anchor" href="#746中文设置"></a> <strong>7.4.6中文设置</strong></h3>
<p>目前的终端交互仍旧使用的是英文，为了便于交互和查看打印信息，可以根据以下步骤修改为中文。</p>
<p>首先使用sed 工具修改 /etc/locale.gen 文件的内容，将以 zh_CN.UTF-8 开头的行中的注释符号 # 去除。</p>
<p>然后设置系统的默认语言环境为中文（中国），如下图所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/^# *\(zh_CN.UTF-8\)/\1/&#x27; /etc/locale.gen</span><br><span class="line">echo &quot;LANG=zh_CN.UTF-8&quot; &gt;&gt; /etc/default/locale</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311212050190.jpg" alt="img" /></p>
<p>然后使用以下命令生成 zh_CN.UTF-8 语言环境所需的配置文件，执行过程如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">locale-gen zh_CN.UTF-8</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311212050196.jpg" alt="img" /><br />
最后执行以下命令将LC_ALL 、LANG和LANGUAGE追加到root和topeet用户的环境变量中，如下图所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;export LC_ALL=zh_CN.UTF-8&quot; &gt;&gt; ~/.bashrc</span><br><span class="line">echo &quot;export LANG=zh_CN.UTF-8&quot; &gt;&gt; ~/.bashrc</span><br><span class="line">echo &quot;export LANGUAGE=zh_CN.UTF-8&quot; &gt;&gt; ~/.bashrc</span><br><span class="line"></span><br><span class="line">echo &quot;export LC_ALL=zh_CN.UTF-8&quot; &gt;&gt; /home/topeet/.bashrc</span><br><span class="line">echo &quot;export LANG=zh_CN.UTF-8&quot; &gt;&gt; /home/topeet/.bashrc</span><br><span class="line">echo &quot;export LANGUAGE=zh_CN.UTF-8&quot; &gt;&gt; /home/topeet/.bashrc</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311212050210.jpg" alt="img" /></p>
<p>至此，中文环境就设置完成了，可以使用apt-get update命令来查看中文是否设置成功，设置成功如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311212050231.jpg" alt="img" /></p>
<p>可以看到打印信息已经设置为了中文。</p>
<h3 id="747安装桌面"><a class="markdownIt-Anchor" href="#747安装桌面"></a> 7.4.7安装桌面</h3>
<p>上面只是对系统进行了一些基本设置，本小节将进行桌面系统的安装，在Linux的发行版中以GNOME、KDE、Xfce和LXQt的使用最为广泛，考虑到3568的性能这里选用Xfce桌面进行安装，如果想要安装其他桌面可以自行搜索其他桌面的安装命令。Xfce桌面及一些其他的配置软件安装命令如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install -y xubuntu-core lightdm</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311212050239.jpg" alt="img" /></p>
<p>在安装过程中可能要选择默认显示管理器，选择lightmd即可，如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311212050316.jpg" alt="img" /></p>
<p>安装完成之后使用以下命令删除gdm3 ubuntu-session两个软件，如下图所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get remove -y gdm3 ubuntu-session</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311212050334.jpg" alt="img" /></p>
<p>至此，关于桌面的安装就完成了。</p>
<h3 id="748配置硬盘自动扩展"><a class="markdownIt-Anchor" href="#748配置硬盘自动扩展"></a> 7.4.8配置硬盘自动扩展</h3>
<p>为了尽可能的让烧写的镜像小，所以在构建烧写镜像的时候只是在原有的基础上扩大了300M（后面讲到），但系统烧写进去之后，会因为空间所以无法启动桌面环境等，所以硬盘自动扩展也是必不可少的一个步骤。</p>
<p>首先在usr/bin目录下创建一个名为disk-helper的文件，该文件内容如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd usr/bin</span><br><span class="line">vim disk-helper</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Uncomment below to see more logs</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">set</span> -x</span></span><br><span class="line"></span><br><span class="line">MISC_DEV=$(realpath /dev/block/by-name/misc 2&gt;/dev/null)</span><br><span class="line"></span><br><span class="line">BUSYBOX_MOUNT_OPTS=&quot;loop (a|)sync (no|)atime (no|)diratime (no|)relatime (no|)dev (no|)exec (no|)suid (r|)shared (r|)slave (r|)private (un|)bindable (r|)bind move remount ro&quot;</span><br><span class="line">NTFS_3G_MOUNT_OPTS=&quot;ro uid=[0-9]* gid=[0-9]* umask=[0-9]* fmask=[0-9]* dmask=[0-9]*&quot;</span><br><span class="line"></span><br><span class="line">check_tool()</span><br><span class="line">&#123;</span><br><span class="line">	TOOL=$(echo $1 | grep -o &quot;^[^ ]*&quot;)</span><br><span class="line">	BR2_CONFIG=$2</span><br><span class="line"></span><br><span class="line">	type $TOOL &gt;/dev/null &amp;&amp; return 0</span><br><span class="line"></span><br><span class="line">	if grep -wq &quot;ID=buildroot&quot; /etc/os-release 2&gt;/dev/null; then</span><br><span class="line">		[ -n &quot;$BR2_CONFIG&quot; ] &amp;&amp; \</span><br><span class="line">			echo &quot;You may need to enable $BR2_CONFIG&quot;</span><br><span class="line">	else</span><br><span class="line">		echo &quot;Missing tool: $TOOL&quot;</span><br><span class="line">	fi</span><br><span class="line">	return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">prepare_ubi()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Only support ubi <span class="keyword">for</span> mtd device</span></span><br><span class="line">	if echo $DEV | grep -vq /dev/mtd; then</span><br><span class="line">		echo &quot;$DEV is not a mtd device!&quot;</span><br><span class="line">		return 1</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	[ &quot;$PART_NO&quot; ] || &#123; echo &quot;No valid part number!&quot; &amp;&amp; return 1; &#125;</span><br><span class="line"></span><br><span class="line">	if [ &quot;$FSGROUP&quot; = ubifs ]; then</span><br><span class="line">		DEV=/dev/ubi$&#123;PART_NO&#125;_0</span><br><span class="line">	else</span><br><span class="line">		DEV=/dev/ubiblock$&#123;PART_NO&#125;_0</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	MTDDEV=/dev/mtd$&#123;PART_NO&#125;</span><br><span class="line"></span><br><span class="line">	echo &quot;Preparing $DEV from $MTDDEV&quot;</span><br><span class="line"></span><br><span class="line">	echo &quot;Remove ubi block device&quot;</span><br><span class="line">	if echo $DEV | grep -q ubiblock; then</span><br><span class="line">		check_tool ubiblock BR2_PACKAGE_MTD_UBIBLOCK || return 1</span><br><span class="line">		ubiblock -r /dev/ubi$&#123;PART_NO&#125;_0 &amp;&gt;/dev/null</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	echo &quot;Detach ubi device&quot;</span><br><span class="line">	check_tool ubidetach BR2_PACKAGE_MTD_UBIDETACH || return 1</span><br><span class="line">	ubidetach -p $MTDDEV &amp;&gt;/dev/null</span><br><span class="line"></span><br><span class="line">	echo &quot;Attach ubi device&quot;</span><br><span class="line">	check_tool ubiattach BR2_PACKAGE_MTD_UBIATTACH || return 1</span><br><span class="line">	ubiattach /dev/ubi_ctrl -m $PART_NO -d $PART_NO || return 1</span><br><span class="line"></span><br><span class="line">	echo &quot;Check for valid volume&quot;</span><br><span class="line">	if [ ! -e /dev/ubi$&#123;PART_NO&#125;_0 ]; then</span><br><span class="line">		echo &quot;No valid ubi volume&quot;</span><br><span class="line">		return 1</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	echo &quot;Create ubi block device&quot;</span><br><span class="line">	if echo $DEV | grep -q ubiblock; then</span><br><span class="line">		check_tool ubiblock BR2_PACKAGE_MTD_UBIBLOCK || return 1</span><br><span class="line">		ubiblock -c /dev/ubi$&#123;PART_NO&#125;_0 || return 1</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	return 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">format_ubifs()</span><br><span class="line">&#123;</span><br><span class="line">	echo &quot;Formatting $MTDDEV for $DEV&quot;</span><br><span class="line"></span><br><span class="line">	echo &quot;Remove ubi block device&quot;</span><br><span class="line">	if echo $DEV | grep -q ubiblock; then</span><br><span class="line">		check_tool ubiblock BR2_PACKAGE_MTD_UBIBLOCK || return 1</span><br><span class="line">		ubiblock -r /dev/ubi$&#123;PART_NO&#125;_0 &amp;&gt;/dev/null</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	echo &quot;Detach ubi device&quot;</span><br><span class="line">	check_tool ubidetach BR2_PACKAGE_MTD_UBIDETACH || return 1</span><br><span class="line">	ubidetach -p $MTDDEV &amp;&gt;/dev/null</span><br><span class="line"></span><br><span class="line">	echo &quot;Format device&quot;</span><br><span class="line">	check_tool ubiformat BR2_PACKAGE_MTD_UBIFORMAT || return 1</span><br><span class="line">	ubiformat -yq $MTDDEV || return 1</span><br><span class="line"></span><br><span class="line">	echo &quot;Attach ubi device&quot;</span><br><span class="line">	ubiattach /dev/ubi_ctrl -m $PART_NO -d $PART_NO || return 1</span><br><span class="line"></span><br><span class="line">	echo &quot;Create ubi volume&quot;</span><br><span class="line">	check_tool ubimkvol BR2_PACKAGE_MTD_UBIMKVOL || return 1</span><br><span class="line">	ubimkvol /dev/ubi$PART_NO -N $PART_NAME -m || return 1</span><br><span class="line"></span><br><span class="line">	echo &quot;Create ubi block device&quot;</span><br><span class="line">	if echo $DEV | grep -q ubiblock; then</span><br><span class="line">		check_tool ubiblock BR2_PACKAGE_MTD_UBIBLOCK || return 1</span><br><span class="line">		ubiblock -c /dev/ubi$&#123;PART_NO&#125;_0 || return 1</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">is_rootfs()</span><br><span class="line">&#123;</span><br><span class="line">	[ $MOUNT_POINT = &quot;/&quot; ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">remount_part()</span><br><span class="line">&#123;</span><br><span class="line">	mountpoint -q $MOUNT_POINT || return</span><br><span class="line"></span><br><span class="line">	if touch $MOUNT_POINT &amp;&gt;/dev/null; then</span><br><span class="line">		[ &quot;$1&quot; = ro ] &amp;&amp; mount -o remount,ro $MOUNT_POINT</span><br><span class="line">	else</span><br><span class="line">		[ &quot;$1&quot; = rw ] &amp;&amp; mount -o remount,rw $MOUNT_POINT</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">format_part()</span><br><span class="line">&#123;</span><br><span class="line">	echo &quot;Formatting $DEV($FSTYPE)&quot;</span><br><span class="line"></span><br><span class="line">	case $FSGROUP in</span><br><span class="line">		ext2)</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">Set max-mount-counts to 0, and <span class="built_in">disable</span> the time-dependent checking.</span></span><br><span class="line">			check_tool mke2fs BR2_PACKAGE_E2FSPROGS &amp;&amp; \</span><br><span class="line">			mke2fs -F -L $PART_NAME $DEV &amp;&amp; \</span><br><span class="line">			tune2fs -c 0 -i 0 $DEV</span><br><span class="line">			;;</span><br><span class="line">		vfat)</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">Use fat32 by default</span></span><br><span class="line">			check_tool mkfs.vfat BR2_PACKAGE_DOSFSTOOLS_MKFS_FAT &amp;&amp; \</span><br><span class="line">			mkfs.vfat -I -F 32 -n $PART_NAME $DEV</span><br><span class="line">			;;</span><br><span class="line">		ntfs)</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">Enable compression</span></span><br><span class="line">			check_tool mkntfs BR2_PACKAGE_NTFS_3G_NTFSPROGS &amp;&amp; \</span><br><span class="line">			mkntfs -FCQ -L $PART_NAME $DEV</span><br><span class="line">			;;</span><br><span class="line">		ubifs)</span><br><span class="line">			format_ubifs</span><br><span class="line">			;;</span><br><span class="line">		squashfs)</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">check_tool mksquashfs BR2_PACKAGE_SQUASHFS &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">			<span class="comment"># mksquashfs $DEV</span></span></span><br><span class="line">			echo &quot;It&#x27;s pointness to format a squashfs partition...&quot;</span><br><span class="line">			;;</span><br><span class="line">		jffs2)</span><br><span class="line">			echo &quot;It&#x27;s pointness to format a jffs2 partition...&quot;</span><br><span class="line">			;;</span><br><span class="line">		auto)</span><br><span class="line">			echo &quot;Unable to format a auto partition...&quot;</span><br><span class="line">			;;</span><br><span class="line">		*)</span><br><span class="line">			echo Unsupported file system $FSTYPE for $DEV</span><br><span class="line">			false</span><br><span class="line">			;;</span><br><span class="line">	esac</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">format_resize()</span><br><span class="line">&#123;</span><br><span class="line">	BACKUP=$1</span><br><span class="line">	SRC=$(realpath $MOUNT_POINT)</span><br><span class="line"></span><br><span class="line">	echo &quot;Format-resizing $DEV($FSTYPE)&quot;</span><br><span class="line"></span><br><span class="line">	echo &quot;Backup original data&quot;</span><br><span class="line">	cp -a &quot;$SRC&quot; &quot;$BACKUP/&quot; || return 1</span><br><span class="line">	umount &quot;$SRC&quot; || return 1</span><br><span class="line"></span><br><span class="line">	echo &quot;Format and mount rw&quot;</span><br><span class="line">	format_part || return 1</span><br><span class="line">	mount_part || return 1</span><br><span class="line">	remount_part rw</span><br><span class="line"></span><br><span class="line">	echo &quot;Restore backup data&quot;</span><br><span class="line">	cp -a &quot;$BACKUP/$SRC&quot; $(dirname &quot;$SRC&quot;) || return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resize_ext2()</span><br><span class="line">&#123;</span><br><span class="line">	check_tool resize2fs BR2_PACKAGE_E2FSPROGS_RESIZE2FS || return 1</span><br><span class="line"></span><br><span class="line">	resize2fs $DEV</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resize_vfat()</span><br><span class="line">&#123;</span><br><span class="line">	check_tool fatresize BR2_PACKAGE_FATRESIZE || return 1</span><br><span class="line"></span><br><span class="line">	SIZE=$(fatresize -i $DEV | grep &quot;Size:&quot; | grep -o &quot;[0-9]*$&quot;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Somehow fatresize only works <span class="keyword">for</span> 256M+ fat</span></span><br><span class="line">	[ &quot;$SIZE&quot; -gt $((256 * 1024 * 1024)) ] &amp;&amp; return 1</span><br><span class="line"></span><br><span class="line">	MAX_SIZE=$(( $(cat $SYS_PATH/size) * 512))</span><br><span class="line">	MIN_SIZE=$(($MAX_SIZE - 16 * 1024 * 1024))</span><br><span class="line">	[ $MIN_SIZE -lt $SIZE ] &amp;&amp; return 0 # Large enough!</span><br><span class="line">	while [ $MAX_SIZE -gt $MIN_SIZE ];do</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">Somehow fatresize cannot resize to max size</span></span><br><span class="line">		MAX_SIZE=$(($MAX_SIZE - 512 * 1024))</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">Try to resize with fatresize, not always work</span></span><br><span class="line">		fatresize -s $MAX_SIZE $DEV &amp;&amp; return</span><br><span class="line">	done</span><br><span class="line">	return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resize_ntfs()</span><br><span class="line">&#123;</span><br><span class="line">	check_tool ntfsresize BR2_PACKAGE_NTFS_3G_NTFSPROGS || return 1</span><br><span class="line"></span><br><span class="line">	echo y | ntfsresize -f $DEV</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resize_part()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Fixed size or already resized</span></span><br><span class="line">	[ -f $MOUNT_POINT/.fixed -o -f $MOUNT_POINT/.resized ] &amp;&amp; return</span><br><span class="line"></span><br><span class="line">	if [ -z &quot;$FSRESIZE&quot; ]; then</span><br><span class="line">		echo &quot;No resize for $FSTYPE&quot;</span><br><span class="line">		return</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	echo &quot;Resizing $DEV($FSTYPE)&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Online resize needs read-write</span></span><br><span class="line">	remount_part rw</span><br><span class="line">	if eval $FSRESIZE; then</span><br><span class="line">		touch $MOUNT_POINT/.resized</span><br><span class="line">		return</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	echo &quot;Done with rootfs&quot;</span><br><span class="line">	is_rootfs &amp;&amp; return</span><br><span class="line"></span><br><span class="line">	echo &quot;Fallback to format resize&quot;</span><br><span class="line">	TEMP_BACKUP=$(mktemp -d)</span><br><span class="line">	format_resize $TEMP_BACKUP &amp;&amp; touch $MOUNT_POINT/.resized</span><br><span class="line">	rm -rf $TEMP_BACKUP</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">erase_oem_command()</span><br><span class="line">&#123;</span><br><span class="line">	CMD=$1</span><br><span class="line">	FILE=$2</span><br><span class="line"></span><br><span class="line">	echo &quot;OEM: Erasing $CMD in $FILE&quot;</span><br><span class="line"></span><br><span class="line">	COUNT=$(echo $CMD | wc -c)</span><br><span class="line">	OFFSETS=$(strings -t d $FILE | grep -w &quot;$CMD&quot; | awk &#x27;&#123; print $1 &#125;&#x27;)</span><br><span class="line"></span><br><span class="line">	for offset in $OFFSETS; do</span><br><span class="line">		dd if=/dev/zero of=$FILE bs=1 count=$COUNT seek=$offset conv=notrunc 2&gt;/dev/null</span><br><span class="line">	done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">done_oem_command()</span><br><span class="line">&#123;</span><br><span class="line">	CMD=$1</span><br><span class="line"></span><br><span class="line">	echo &quot;OEM: Done with $CMD&quot;</span><br><span class="line"></span><br><span class="line">	if [ -b &quot;$MISC_DEV&quot; ]; then</span><br><span class="line">		erase_oem_command $CMD $MISC_DEV</span><br><span class="line">	else</span><br><span class="line">		echo &quot;OEM: Erase $CMD from mtd device&quot;</span><br><span class="line"></span><br><span class="line">		check_tool nanddump BR2_PACKAGE_MTD_NANDDUMP || return</span><br><span class="line">		check_tool nandwrite BR2_PACKAGE_MTD_NANDWRITE || return</span><br><span class="line">		check_tool flash_erase BR2_PACKAGE_MTD_FLASH_ERASE || return</span><br><span class="line"></span><br><span class="line">		TEMP=$(mktemp)</span><br><span class="line">		nanddump $MISC_DEV -f $TEMP</span><br><span class="line">		erase_oem_command $CMD $TEMP</span><br><span class="line">		flash_erase $MISC_DEV 0 0</span><br><span class="line">		nandwrite $MISC_DEV $TEMP</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handle_oem_command()</span><br><span class="line">&#123;</span><br><span class="line">	[ &quot;$OEM_CMD&quot; ] || return</span><br><span class="line"></span><br><span class="line">	for cmd in $OEM_CMD; do</span><br><span class="line">		case $cmd in</span><br><span class="line"><span class="meta prompt_">			cmd_wipe_$</span><span class="language-bash">PART_NAME)</span></span><br><span class="line">				is_rootfs &amp;&amp; continue</span><br><span class="line"></span><br><span class="line">				echo &quot;OEM: $cmd - Wiping $DEV&quot;</span><br><span class="line">				format_part &amp;&amp; done_oem_command $cmd</span><br><span class="line">				;;</span><br><span class="line">		esac</span><br><span class="line">	done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">convert_mount_opts()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Accept all opts by default <span class="keyword">for</span> standard mount tool</span></span><br><span class="line">	if [ -z &quot;$@&quot; ] &amp;&amp; [ &quot;$(readlink $(which mount))&quot; != busybox ]; then</span><br><span class="line">		echo $OPTS</span><br><span class="line">		return</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Filter out unsupported opts</span></span><br><span class="line">	for opt in $&#123;@:-$BUSYBOX_MOUNT_OPTS&#125;; do</span><br><span class="line">		echo $&#123;OPTS//,/ &#125; | xargs -n 1 | grep -oE &quot;^$opt$&quot;</span><br><span class="line">	done | tr &quot;\n&quot; &quot;,&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">prepare_part()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Ignore external storages</span></span><br><span class="line">	echo $MOUNT_POINT | grep -q &quot;^\/mnt\/&quot; &amp;&amp; return 1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Find real dev <span class="keyword">for</span> root dev</span></span><br><span class="line">	if is_rootfs; then</span><br><span class="line">		DEV=$(findmnt -n -o source /)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">Fallback to the by-name <span class="built_in">link</span></span></span><br><span class="line">		[ &quot;$DEV&quot; ] || DEV=/dev/block/by-name/rootfs</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	DEV=$(realpath $DEV 2&gt;/dev/null)</span><br><span class="line">	PART_NO=$(echo $DEV | grep -oE &quot;[0-9]*$&quot;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Unknown device</span></span><br><span class="line">	[ -b &quot;$DEV&quot; -o -c &quot;$DEV&quot; ] || return 1</span><br><span class="line"></span><br><span class="line">	SYS_PATH=$(echo /sys/class/*/$&#123;DEV##*/&#125;)</span><br><span class="line">	if [ -f &quot;$SYS_PATH/name&quot; ]; then</span><br><span class="line">		PART_NAME=$(cat $SYS_PATH/name)</span><br><span class="line">	else</span><br><span class="line">		PART_NAME=$(grep PARTNAME $&#123;SYS_PATH&#125;/uevent | cut -d &#x27;=&#x27; -f 2)</span><br><span class="line">	fi</span><br><span class="line">	PART_NAME=$&#123;PART_NAME:-$&#123;DEV##*/&#125;&#125;</span><br><span class="line"></span><br><span class="line">	case $FSTYPE in</span><br><span class="line">		ext[234])</span><br><span class="line">			FSGROUP=ext2</span><br><span class="line">			FSCK=&quot;fsck.$FSTYPE -y&quot;</span><br><span class="line">			FSCK_CONFIG=BR2_PACKAGE_E2FSPROGS_FSCK</span><br><span class="line">			FSRESIZE=resize_ext2</span><br><span class="line">			;;</span><br><span class="line">		msdos|fat|vfat)</span><br><span class="line">			FSGROUP=vfat</span><br><span class="line">			FSCK=&quot;fsck.vfat -y&quot;</span><br><span class="line">			FSCK_CONFIG=BR2_PACKAGE_DOSFSTOOLS_FSCK_FAT</span><br><span class="line">			FSRESIZE=resize_vfat</span><br><span class="line">			;;</span><br><span class="line">		ntfs)</span><br><span class="line">			FSGROUP=ntfs</span><br><span class="line">			FSCK=ntfsfix</span><br><span class="line">			FSCK_CONFIG=BR2_PACKAGE_NTFS_3G_NTFSPROGS</span><br><span class="line">			FSRESIZE=resize_ntfs</span><br><span class="line">			;;</span><br><span class="line">		ubi|ubifs)</span><br><span class="line">			FSGROUP=ubifs</span><br><span class="line">			unset FSCK</span><br><span class="line">			unset FSRESIZE</span><br><span class="line">			;;</span><br><span class="line">		squashfs)</span><br><span class="line">			FSGROUP=squashfs</span><br><span class="line">			unset FSCK</span><br><span class="line">			unset FSRESIZE</span><br><span class="line">			;;</span><br><span class="line">		jffs2)</span><br><span class="line">			FSGROUP=jffs2</span><br><span class="line">			unset FSCK</span><br><span class="line">			unset FSRESIZE</span><br><span class="line">			;;</span><br><span class="line">		auto)</span><br><span class="line">			FSGROUP=auto</span><br><span class="line">			echo &quot;Running fsck on a random fs is dangerous&quot;</span><br><span class="line">			unset FSCK</span><br><span class="line">			unset FSRESIZE</span><br><span class="line">			;;</span><br><span class="line">		*)</span><br><span class="line">			echo &quot;Unsupported file system $FSTYPE for $DEV&quot;</span><br><span class="line">			return</span><br><span class="line">	esac</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Setup mount tool and opts</span></span><br><span class="line">	case $FSGROUP in</span><br><span class="line">		ntfs)</span><br><span class="line">			MOUNT=ntfs-3g</span><br><span class="line">			check_tool ntfs-3g BR2_PACKAGE_NTFS_3G || return 1</span><br><span class="line">			OPTS=$(convert_mount_opts &quot;$NTFS_3G_MOUNT_OPTS&quot;)</span><br><span class="line">			;;</span><br><span class="line">		ubifs)</span><br><span class="line">			MOUNT=&quot;mount -t ubifs&quot;</span><br><span class="line">			OPTS=$(convert_mount_opts)</span><br><span class="line">			;;</span><br><span class="line">		*)</span><br><span class="line">			MOUNT=mount</span><br><span class="line">			OPTS=$(convert_mount_opts)</span><br><span class="line">			;;</span><br><span class="line">	esac</span><br><span class="line">	MOUNT_OPTS=$&#123;OPTS:+&quot; -o $&#123;OPTS%,&#125;&quot;&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Prepare <span class="keyword">for</span> ubi (consider /dev/mtdX as ubiblock)</span></span><br><span class="line">	if [ &quot;$FSGROUP&quot; = ubifs ] || echo $DEV | grep -q &quot;/dev/mtd[0-9]&quot;;then</span><br><span class="line">		if ! prepare_ubi; then</span><br><span class="line">			echo &quot;Failed to prepare ubi for $DEV&quot;</span><br><span class="line">			[ &quot;$AUTO_MKFS&quot; ] || return</span><br><span class="line"></span><br><span class="line">			echo &quot;Auto formatting&quot;</span><br><span class="line">			format_ubifs || return</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">check_part()</span><br><span class="line">&#123;</span><br><span class="line">	[ &quot;$SKIP_FSCK&quot; -o &quot;$PASS&quot; -eq 0 ] &amp;&amp; return</span><br><span class="line"></span><br><span class="line">	if [ -z &quot;$FSCK&quot; ]; then</span><br><span class="line">		echo &quot;No fsck for $FSTYPE&quot;</span><br><span class="line">		return</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	echo &quot;Checking $DEV($FSTYPE)&quot;</span><br><span class="line"></span><br><span class="line">	check_tool &quot;$FSCK&quot; $FSCK_CONFIG || return</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Fsck needs read-only</span></span><br><span class="line">	remount_part ro</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">FSCK <span class="variable">$DEV</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mount_part()</span><br><span class="line">&#123;</span><br><span class="line">	echo &quot;Mounting $DEV($FSTYPE) on $MOUNT_POINT $&#123;MOUNT_OPTS:+with$MOUNT_OPTS&#125;&quot;</span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">MOUNT <span class="variable">$DEV</span> <span class="variable">$MOUNT_POINT</span> <span class="variable">$MOUNT_OPTS</span> &amp;&amp; <span class="built_in">return</span></span></span><br><span class="line">	[ &quot;$AUTO_MKFS&quot; ] || return</span><br><span class="line"></span><br><span class="line">	echo &quot;Failed to mount $DEV, try to format it&quot;</span><br><span class="line">	format_part &amp;&amp; \</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">MOUNT <span class="variable">$DEV</span> <span class="variable">$MOUNT_POINT</span> <span class="variable">$MOUNT_OPTS</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>​	然后继续创建一个名为resize-helper的脚本文件，向该文件添加以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim resize-helper</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## BEGIN INIT INFO</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Provides:       resize-all</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Default-Start:  S</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Default-Stop:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Description:    调整所有已挂载的内部分区的大小</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## END INIT INFO</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不在错误状态下退出</span></span><br><span class="line">set +e</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消以下注释以查看更多日志</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">set</span> -x</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">包含 disk-helper 脚本</span></span><br><span class="line">. $(dirname $0)/disk-helper</span><br><span class="line"></span><br><span class="line">LOGFILE=/tmp/resize-all.log</span><br><span class="line"></span><br><span class="line">do_part()</span><br><span class="line">&#123;</span><br><span class="line">    DEV=$1</span><br><span class="line">    MOUNT_POINT=$2</span><br><span class="line">    FSTYPE=$3</span><br><span class="line">    OPTS=$4</span><br><span class="line"></span><br><span class="line">    echo &quot;处理 $DEV $MOUNT_POINT $FSTYPE $OPTS&quot;</span><br><span class="line"></span><br><span class="line">    # 设置检查/挂载工具并进行一些准备工作</span><br><span class="line">    prepare_part || return</span><br><span class="line"></span><br><span class="line">    # 存储 ro/rw</span><br><span class="line">    MOUNTED_RO_RW=$(touch $MOUNT_POINT &amp;&gt;/dev/null &amp;&amp; echo rw || echo ro)</span><br><span class="line"></span><br><span class="line">    # 如果需要，调整分区大小</span><br><span class="line">    resize_part</span><br><span class="line"></span><br><span class="line">    # 恢复 ro/rw</span><br><span class="line">    remount_part $MOUNTED_RO_RW</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resize_all()</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;将调整 /proc/mounts 中的所有分区大小&quot;</span><br><span class="line"></span><br><span class="line">    while read LINE; do</span><br><span class="line">        do_part $LINE</span><br><span class="line">    done &lt; /proc/mounts</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">    start|&quot;&quot;)</span><br><span class="line">        resize_all 2&gt;&amp;1 | tee $LOGFILE</span><br><span class="line">        echo &quot;日志保存至 $LOGFILE&quot;</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        echo &quot;用法: resize-helper start&quot; &gt;&amp;2</span><br><span class="line">        exit 3</span><br><span class="line">        ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>
<p>​	该脚本的主要功能是在系统引导时调整所有已挂载的内部分区的大小，保存退出之后，使用以下命令给予两个脚本的可执行权限，如下图所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 777 resize-helper disk-helper</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311212254933.png" alt="image-20231121225448900" /></p>
<p>然后在etc/init.d目录下创建一个名为resize-disk.sh的开机启动项，内容如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash -e</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Description:  调整 Rockchip 平台环境下的磁盘大小</span></span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line"></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">    start)</span><br><span class="line">        if [ ! -e /var/lib/misc/firstrun ]; then</span><br><span class="line">            /usr/bin/resize-helper  # 调用 resize-helper 脚本来调整磁盘大小</span><br><span class="line">            mkdir -p /var/lib/misc  # 创建目录 /var/lib/misc</span><br><span class="line">            touch /var/lib/misc/firstrun  # 创建文件 /var/lib/misc/firstrun</span><br><span class="line">        fi</span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        ;;</span><br><span class="line">    restart|reload)</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        echo &quot;用法: $0 &#123;start|stop|restart&#125;&quot;</span><br><span class="line">        exit 1</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">exit $?</span><br></pre></td></tr></table></figure>
<p>该脚本是一个初始化脚本（init script），用于在第一次启动系统时，运行/usr/bin/resize-helper调整磁盘大小。现在只是创建了该脚本，接下来向系统中添加相应的服务，让该脚本开机自动运行，首先来到/usr/lib/systemd/system目录下，创建一个名为resize-disk.service的服务，然后向该服务中添加以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/lib/systemd/system</span><br><span class="line">vi resize-disk.service</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">start</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Resize disk for rockchcip platform</span><br><span class="line">After=lighdm.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/etc/init.d/resize-disk.sh start</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">end</span></span><br></pre></td></tr></table></figure>
<p>该服务会运行/etc/init.d/resize-disk.sh脚本，该脚本</p>
<p>保存退出之后，使用以下命令创建该文件的软链接到/etc/systemd/system/sysinit.target.wants/目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /usr/lib/systemd/system/resize-disk.service /etc/systemd/system/sysinit.target.wants/resize-disk.service</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311220732603.png" alt="image-20231122073214553" /></p>
<p>​	至此，关于自动扩容相关的配置也就完成了，这时候如果制作烧写镜像进入系统之后会自动扩容，最终效果如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311220734847.png" alt="image-20231122073421803" /></p>
<h3 id="749配置adb"><a class="markdownIt-Anchor" href="#749配置adb"></a> 7.4.9配置ADB</h3>
<p>瑞芯微在很多地方要用到adb服务，例如在RKNPU中要用到的连扳推理，PC端向开发板传输文件都要使用adb服务，所以在本小节将对adb服务进行适配。</p>
<p>本小节要用到了文件已经放在了“iTOP-3568开发板\03_【iTOP-RK3568开发板】指南教程\03_文件系统构建配套资料\04_Ubuntu和Debian系统构建配套资料\02_配置ADB”目录下，如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023023.jpg" alt="img" /></p>
<p>首先进入/usr/lib/systemd/system/目录，创建一个名为usbdevice.service的服务，该服务的内容如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Manage USB device functions</span><br><span class="line">DefaultDependencies=no</span><br><span class="line">After=local-fs.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/bin/usbdevice start </span><br><span class="line">ExecStop=/usr/bin/usbdevice stop</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=sysinit.target</span><br></pre></td></tr></table></figure>
<p>保存退出之后，继续使用以下命令创建该文件的软链接到/etc/systemd/system/sysinit.target.wants/目录下，如下图所示</p>
<p>ln -s /usr/lib/systemd/system/usbdevice.service /etc/systemd/system/sysinit.target.wants/usbdevice.service</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023029.jpg" alt="img" /></p>
<p>然后进入/usr/lib/udev/rules.d目录下，创建一个名为61-usbdevice.rules的规格，具体内容如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SUBSYSTEM==&quot;android_usb&quot;,ACTION==&quot;change&quot;,RUN+=&quot;/usr/bin/usbdevice update&quot;  </span><br></pre></td></tr></table></figure>
<p>这个规则定义了一个触发条件，即当系统中的Android USB设备发生更改时（例如插入或拔出设备），将运行一个特定的命令/usr/bin/usbdevice update，然后将提供资料里的usbdevice脚本和adbd拷贝到/usr/bin目录下（需要打开一个终端进行操作），拷贝完成如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023030.jpg" alt="img" /></p>
<p>然后使用以下命令赋予两个文件可执行权限，如下图所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 777 adbd usbdevice</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023031.jpg" alt="img" /></p>
<p>最后来到/etc/profile.d/目录下创建一个名为usbdevice.sh的文件，/etc/profile.d/目录是用于存放系统级别的配置文件的目录。当用户登录时，系统会自动执行/etc/profile文件，然后向usbdevice.sh文件写入以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The <span class="built_in">env</span> variables below can be overridden</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">option: adb acm hid mtp ntb rndis uac1 uac2 ums uvc</span></span><br><span class="line">export USB_FUNCS=&quot;adb&quot;       </span><br><span class="line">export UMS_FILE=/userdata/ums_shared.img</span><br><span class="line">export UMS_SIZE=256M</span><br><span class="line">export UMS_FSTYPE=vfat</span><br><span class="line">export UMS_MOUNT=0</span><br><span class="line">export UMS_MOUNTPOINT=/mnt/ums</span><br><span class="line">export UMS_RO=0</span><br></pre></td></tr></table></figure>
<p>其中要注意的是第6行的内容，表示默认模式为ADB，也有其他的几种模式，如果后续用到会进行说明，至此，关于adb的配置就完成了，镜像打包之后烧写到开发板上，在RK的烧写软件中会显示“发现了一个ADB设备”，如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023035.jpg" alt="img" /></p>
<p>然后将ADB设备连接到虚拟机ubuntu上，连接成功之在左侧后会有一个手机的图标，如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023033.jpg" alt="img" /></p>
<p>首先输入“adb devices”命令查看adb设备如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023203.jpg" alt="img" /></p>
<p>然后使用以下命令将测试文件test通过adb传输到开发板的根目录，传输过程如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023212.jpg" alt="img" /></p>
<p>然后查看开发板的根目录，可以看到test文件已经成功传输，如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023222.jpg" alt="img" /></p>
<p>至此，关于adb的测试就完成了。</p>
<h3 id="7410配置终端和桌面自动登录"><a class="markdownIt-Anchor" href="#7410配置终端和桌面自动登录"></a> 7.4.10配置终端和桌面自动登录</h3>
<p>本小节要用到的文件路径为“iTOP-3568开发板\03_【iTOP-RK3568开发板】指南教程\03_文件系统构建配套资料\04_Ubuntu和Debian系统构建配套资料\03_终端和桌面自动登录”，如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023229.jpg" alt="img" /></p>
<p>为了方便，本小节将取消ubuntu启动时的终端登录和桌面的登录，默认让终端登录进root用户，桌面默认登录topeet用户，首先输入以下命令修改终端设置选项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /lib/systemd/system/serial-getty\@.service</span><br></pre></td></tr></table></figure>
<p>然后将ExecStart选项修改为以下内容，修改完成如下图所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ExecStart= -/sbin/agetty --autologin root --noclear %I $TERM</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023238.jpg" alt="img" /></p>
<p>至此，串口终端自动登录root用户就设置完成了，然后设置桌面自动登录，在安装桌面章节默认显示管理器使用的是lightdm，所以这里需要将提供资料里面的lightdm.conf拷贝到/etc/lightdm目录下，拷贝完成如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023246.jpg" alt="img" /></p>
<p>涉及到自动登录的内容为该配置文件的126行和127行，具体内容如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023348.jpg" alt="img" /></p>
<p>这里默认登录的为topeet用户，如果想要自动登录其他用户自行修改即可，打包镜像，烧写到开发板上之后，可以看到终端已经自动登录进入了系统，如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023362.jpg" alt="img" /></p>
<p>在图形界面也跳过了登录界面，自动进入了桌面，进入桌面之后如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023376.png" alt="img" /></p>
<p>至此终端和桌面自动登录的设置就完成了。</p>
<h3 id="7411配置以太网络"><a class="markdownIt-Anchor" href="#7411配置以太网络"></a> 7.4.11配置以太网络</h3>
<p>本小节要用到的文件路径为“iTOP-3568开发板\03_【iTOP-RK3568开发板】指南教程\03_文件系统构建配套资料\04_Ubuntu和Debian系统构建配套资料\05_以太网配置”，如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023386.jpg" alt="img" /></p>
<p>现在系统启动之后如果使用“ifconfig”命令查看网络可以发现只有一个本地回环生效了，其他的并未生效，如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023392.jpg" alt="img" /></p>
<p>所以需要对网络进行一些配置，首先对“/etc/NetworkManager/NetworkManager.conf”文件进行修改，将ifupdown从false设置为true，修改完成如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023399.jpg" alt="img" /></p>
<p>通过将[ifupdown]部分中的managed选项设置为true，可以启用 NetworkManager 对 ifupdown 工具的集成。这意味着 NetworkManager 将读取和解释 /etc/network/interfaces 文件中的配置，并使用自己的机制来管理这些网络接口。</p>
<p>然后修改/usr/lib/NetworkManager/conf.d/10-globally-managed-devices.conf配置文件，修改为以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[keyfile] </span><br><span class="line">unmanaged-devices=*,except:type:wifi,except:type:ethernet,except:type:gsm,except:type:cdma</span><br></pre></td></tr></table></figure>
<p>这个规则的作用是告诉 NetworkManager 不要自动管理除了Wi-Fi、以太网、GSM 和 CDMA 设备之外的其他类型的网络设备。这样可以确保这些设备不受 NetworkManager 的干预，并允许其他工具或配置来处理它们。</p>
<p>至此关于网络相关的配置就完成了。打包镜像重新烧写之后，重新使用“ifconfig”命令查看网络配置，可以看到eth0和eth1已经出现了，由于现在只是插着一根网线，所以只有eth1获取到了ip，如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023546.jpg" alt="img" /></p>
<p>当使用“apt-get update”命令进行软件源更新的时候可能出现以下打印，这是因为证书过期所导致的：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023562.jpg" alt="img" /></p>
<p>该问题可以通过输入下面两条命令来解决，如下图所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch /etc/apt/apt.conf.d/99verify-peer.conf</span><br><span class="line"></span><br><span class="line">echo &gt;&gt;/etc/apt/apt.conf.d/99verify-peer.conf &quot;Acquire &#123; https::Verify-Peer false &#125;&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023572.jpg" alt="img" /></p>
<p>至此，关于网络相关的配置就完成了。</p>
<h3 id="7412配置蓝牙wifi"><a class="markdownIt-Anchor" href="#7412配置蓝牙wifi"></a> 7.4.12配置蓝牙WIFI</h3>
<p>本小节要用到的文件路径为“iTOP-3568开发板\03_【iTOP-RK3568开发板】指南教程\03_文件系统构建配套资料\04_Ubuntu和Debian系统构建配套资料\06_配置蓝牙WIFI”，如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023578.jpg" alt="img" /></p>
<p>由于迅为使用的蓝牙WIFI模块为8723du，该模块若想正常使用，需要在系统启动之后通过ko的形式进行加载，所以本小节将会讲解如何让模块开机之后自动被加载。</p>
<p>首先进入到/usr/local/bin目录下，创建一个名为wifi_blue.sh的脚本文件，然后向该脚本中添加以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">insmod /usr/local/modules/8723du.ko</span><br><span class="line">insmod /usr/local/modules/rtk_btusb.ko    </span><br><span class="line">rfkill unblock bluetooth</span><br><span class="line">hciconfig hci0 up</span><br></pre></td></tr></table></figure>
<p>该脚本的作用就是加载蓝牙和WIFI两个KO模块，保存退出之后使用chmod命令给予该脚本可执行权限，如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023584.jpg" alt="img" /></p>
<p>这时候只是有了可以加载驱动的脚本，然后来到/usr/lib/systemd/system目录下创建一个名为wifibt.service的开机自动运行服务，向该服务中添加以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#start</span><br><span class="line">[Unit]</span><br><span class="line">Description=insmod topeet wifi_blue modules</span><br><span class="line">After=lighdm.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/bin/wifi_blue.sh</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>
<p>该服务的目的就是开机运行/usr/local/bin/wifi_blue.sh脚本，从而加载WIFI和蓝牙模块，让两个功能正常使用，然后使用以下命令创建该服务的软链接，创建完成如下图所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /usr/lib/systemd/system/wifibt.service /etc/systemd/system/sysinit.target.wants/</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023685.jpg" alt="img" /></p>
<p>接下来需要在/usr/local/目录下创建一个名为modules的目录，然后将提供资料里的两个ko文件拷贝到该目录下，拷贝完成如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023716.jpg" alt="img" /></p>
<p>需要注意的是，在资料中提供的这两个ko文件只适用于内核版本为4.19的系统，如果是其他版本的系统可以自行替换对应的ko文件。</p>
<p>初次之外蓝牙的正常运行还需要相应的固件，所以还需要资料中提供的rtl8723du_config和rtl8723du_fw两个固件拷贝到/usr/lib/firmware目录下，拷贝完成如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023722.jpg" alt="img" /></p>
<p>至此，关于蓝牙WIFI相关的配置就完成了。打包镜像并烧写到开发板上，来到图形界面，可以看到蓝牙已经可以正常的搜索到设备了，如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023728.png" alt="img" /></p>
<p>在右上角的网络设置中也可以搜索到相应的WIFI，如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023739.png" alt="img" /></p>
<p>至此，关于蓝牙WIFI 的相关配置就完成了。</p>
<h3 id="7413配置ssh允许root登录"><a class="markdownIt-Anchor" href="#7413配置ssh允许root登录"></a> 7.4.13配置ssh允许root登录</h3>
<p>本小节要用到的文件路径为“iTOP-3568开发板\03_【iTOP-RK3568开发板】指南教程\03_文件系统构建配套资料\04_Ubuntu和Debian系统构建配套资料\04_ssh 允许root登录”，如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023770.jpg" alt="img" /></p>
<p>默认情况下ssh是不能root用户登录的，为了方便调试，可以通过修改sshd的配置文件来允许ssh root登录。</p>
<p>sshd的配置文件为“/etc/ssh/sshd_config”，打开该文件找到下图所示的内容：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023832.jpg" alt="img" /></p>
<p>然后修改为以下内容，修改完成如下图所示：】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PermitRootLogin yes</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023859.jpg" alt="img" /></p>
<p>至此，关于ssh有关的配置就修改完成了。然后打包镜像烧写到开发板，进入系统之后查看开发板的ip地址为192.168.1.168，如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023871.jpg" alt="img" /></p>
<p>然后通过ssh软件通过root用户连接，连接设置如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023943.jpg" alt="img" /></p>
<p>连接成功如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023992.jpg" alt="img" /></p>
<p>至此，关于ssh允许root登录的设置就完成了。</p>
<h3 id="7414安装rga-deb包"><a class="markdownIt-Anchor" href="#7414安装rga-deb包"></a> 7.4.14安装rga deb包</h3>
<p>本小节要用到的文件路径为“iTOP-3568开发板\03_【iTOP-RK3568开发板】指南教程\03_文件系统构建配套资料\04_Ubuntu和Debian系统构建配套资料\07_rga”，如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023026.jpg" alt="img" /></p>
<p>注：这里提供的仅仅只是ubuntu20 rga相关的deb包，如果是其他系统并不适用。</p>
<p>RGA是Rockchip（瑞芯微电子）公司开发的图像处理技术，主要应用于他们的系统芯片中。RGA技术在Rockchip的芯片中集成了一个专门的硬件模块，用于加速2D图形操作。这个硬件模块通常被称为RGA硬件加速器。</p>
<p>RGA会对图形界面有一定的加速效果，而且后面在安装GPU相关库的部分也会用到RGA，所以这里先来安装一下RGA相关的deb包。</p>
<p>首先将deb包拷贝到构建的ubuntu文件系统中，拷贝完成如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023034.jpg" alt="img" /></p>
<p>然后使用以下命令进行安装,安装过程如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dpkg -i librga-dev_2.2.0-1_arm64.deb</span><br><span class="line">dpkg -i librga2_2.2.0-1_arm64.deb</span><br><span class="line">dpkg -i librga2-dbgsym_2.2.0-1_arm64.deb</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222023053.jpg" alt="img" /></p>
<p>至此，RGA相关的库就安装完成了。</p>
<h3 id="7415-安装mpp-deb包"><a class="markdownIt-Anchor" href="#7415-安装mpp-deb包"></a> 7.4.15 安装mpp deb包</h3>
<p>本小节要用到的文件路径为“iTOP-3568开发板\03_【iTOP-RK3568开发板】指南教程\03_文件系统构建配套资料\04_Ubuntu和Debian系统构建配套资料\08_mpp”，如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222226972.jpg" alt="img" /></p>
<p>注：这里提供的仅仅只是ubuntu20 mpp相关的deb包，如果是其他系统并不适用。</p>
<p>MPP（Media Processing Platform）是一种多媒体处理平台，用于实现音频和视频数据的处理、编解码和处理。MPP 提供了一组丰富的功能和算法，用于处理各种多媒体数据，并且能够在硬件加速的环境下提供高效的处理性能。</p>
<p>以下是 MPP 的主要作用：</p>
<p>（1）视频编解码：MPP 提供了各种视频编解码器，如 H.264、H.265、MPEG-2 等。这些编解码器能够将视频数据进行压缩（编码）和解压缩（解码），以满足不同应用场景对视频数据的存储和传输需求。通过硬件加速，MPP 可以提供高效的视频编解码性能，减轻 CPU 的负担。</p>
<p>（2）图像处理：MPP 包含了一系列图像处理算法，如图像缩放、旋转、裁剪、色彩空间转换等。这些算法可以对图像进行各种操作和转换，以满足不同应用场景对图像处理的需求。MPP 的硬件加速能力可以加快图像处理的速度，并提供更高的效率。</p>
<p>（3）音频编解码：除了视频编解码，MPP 还提供了音频编解码的功能。它支持常见的音频编码格式，如 AAC、MP3、AC3 等。通过 MPP，可以对音频数据进行高效的压缩和解压缩，实现音频的存储、传输和处理。</p>
<p>（4）多媒体处理流程管理：MPP 提供了一个统一的框架和接口，用于管理和控制多媒体处理流程。它可以对多个媒体处理单元进行调度和协调，实现复杂的多媒体处理任务。MPP 还提供了丰富的配置选项和参数设置，以满足不同应用场景的需求。</p>
<p>MPP包的安装方法跟上面RGA包的安装方法相同，首先将资料中提供的MPP包拷贝到构建的ubuntu文件系统中，拷贝完成如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222226970.jpg" alt="img" /></p>
<p>然后使用以下命令进行安装,安装过程如下所示：</p>
<p>dpkg -i librockchip-mpp1_1.5.0-1_arm64.deb</p>
<p>dpkg -i librockchip-mpp-dev_1.5.0-1_arm64.deb</p>
<p>dpkg -i librockchip-vpu0_1.5.0-1_arm64.deb</p>
<p>dpkg -i rockchip-mpp-demos_1.5.0-1_arm64.deb</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222226980.jpg" alt="img" /></p>
<p>至此，MPP相关的库就安装完成了，打包镜像，然后烧写到开发板，开发板启动之后，在开发板终端输入以下命令用来监控系统打印，如下图所示：</p>
<p>tail -f /var/log/syslog &amp;</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222226975.jpg" alt="img" /></p>
<p>然后输入以下命令通过mpi_dec_test命令调用mpp进行视频的解码，将<a href="https://so.csdn.net/so/search?q=h264&amp;spm=1001.2101.3001.7020">h264</a>转为yuv，解码过程如下图所示：</p>
<p>mpi_dec_test -i /oem/200frames_count.h264 -t 7 -n 250 -o /home/topeet/test.yuv -w 640 -h 480</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222226973.jpg" alt="img" /></p>
<p>解码完成之后在/home/topeet/目录下生成了解码为yuv格式的test.yuv文件，如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222226987.jpg" alt="img" /></p>
<p>然后继续使用mpi_enc_test命令进行视频的编码，将上面解码出来的yuv转为h264格式，编码过程如下图所示：</p>
<p>mpi_enc_test -i /home/topeet/test.yuv -t 7 -n 250 -o /home/topeet/test.h264 -w 640 -h 480 -fps 25</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222226355.jpg" alt="img" /></p>
<p>编码完成之后在/home/topeet/目录下生成了编码为h264格式的test.h26文件，如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222226373.jpg" alt="img" /></p>
<p>至此，关于MPP的相关测试就完成了。</p>
<h3 id="7416-安装gpu-deb包"><a class="markdownIt-Anchor" href="#7416-安装gpu-deb包"></a> 7.4.16 安装gpu deb包</h3>
<p>本小节要用到的文件路径为“iTOP-3568开发板\03_【iTOP-RK3568开发板】指南教程\03_文件系统构建配套资料\04_Ubuntu和Debian系统构建配套资料\09_gpu”，如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222226388.jpg" alt="img" /></p>
<p>注：这里提供的仅仅只是ubuntu20 gpu相关的deb包，如果是其他系统并不适用。</p>
<p>首先将上面提供资料里的xserver相关deb包拷贝到要构建的ubuntu系统中，拷贝完成如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222226397.jpg" alt="img" /></p>
<p>然后使用以下命令进行deb包的安装，安装过程如下所示：<br />
dpkg -i xserver-common_1.20.13-1ubuntu1~20.04.9_all.deb</p>
<p>dpkg -i xserver-xorg-core_1.20.13-1ubuntu1~20.04.9_arm64.deb</p>
<p>dpkg -i xserver-xorg-dev_1.20.13-1ubuntu1~20.04.9_arm64.deb</p>
<p>dpkg -i xserver-xorg-legacy_1.20.13-1ubuntu1~20.04.9_arm64.deb</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222226407.jpg" alt="img" /></p>
<p>中间在安装xserver-xorg-core_1.20.13-1ubuntu1~20.04.9_arm64.deb包时出现了错误，这里我们使用“apt-get install -f”命令进行修复即可，修复过程如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222226421.jpg" alt="img" /></p>
<p>修复完成之后将提供资料中的libmali库同样拷贝构建的ubuntu系统中，拷贝完成如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222226522.jpg" alt="img" /></p>
<p>然后使用以下命令进行安装，安装过程如下所示：</p>
<p>dpkg -i libmali-bifrost-g52-g13p0-x11-gbm_1.9-1_arm64.deb</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222226531.jpg" alt="img" /></p>
<p>至此，关于GPU 相关库的安装就完成了，</p>
<h3 id="7417-清除安装的软件包"><a class="markdownIt-Anchor" href="#7417-清除安装的软件包"></a> 7.4.17 清除安装的软件包</h3>
<p>经过了上面的一些步骤已经对构建的ubuntu进行了简单的配置，但在配置的过程中也下载了很多的软件包，这些软件包会占用很多的空间，所以在配置完成之后运行下面的命令清除安装的软件包，如下图所示：</p>
<p>apt-get -y clean &amp;&amp; apt-get -y autoclean</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222226543.jpg" alt="img" /></p>
<h3 id="7418-退出chroot环境"><a class="markdownIt-Anchor" href="#7418-退出chroot环境"></a> 7.4.18 退出chroot环境</h3>
<p>设置好以后就可以退出根文件系统了，输入命令“exit”退出。如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222226565.jpg" alt="img" /></p>
<p>然后通过以下命令取消binary目录的挂载，如下图所示：</p>
<p>./mount.sh -u binary/</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222226608.jpg" alt="img" /></p>
<h2 id="75-文件系统镜像的制作"><a class="markdownIt-Anchor" href="#75-文件系统镜像的制作"></a> 7.5 文件系统镜像的制作</h2>
<p>本小节要用到的文件路径为“iTOP-3568开发板\03_【iTOP-RK3568开发板】指南教程\03_文件系统构建配套资料\04_Ubuntu和Debian系统构建配套资料\10_制作烧写镜像”，如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222226627.jpg" alt="img" /></p>
<p>首先将上述资料中提供的mk-image.sh和post-build.sh脚本拷贝到虚拟机ubutnu上，而且要跟构建的binary目录放到同一目录下，拷贝完成如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222226706.jpg" alt="img" /><br />
然后使用以下命令赋予两个脚本可执行权限，如下图所示：</p>
<p>chmod 777 <a href="http://mk-image.sh">mk-image.sh</a> <a href="http://post-build.sh">post-build.sh</a><br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222226714.jpg" alt="img" /></p>
<p>然后运行mk-image.sh脚本即可完成烧写镜像的制作了，制作过程如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311222226722.jpg" alt="img" /></p>
<p>制作完成之后会在当前目录生成一个名为rootfs.img的烧写镜像，只需要根据烧写手册进行单独烧写即可。至此，关于Ubuntu和Debian文件系统的构建就讲解完成了。</p>
]]></content>
      <categories>
        <category>瑞芯微</category>
      </categories>
  </entry>
  <entry>
    <title>显示硬件发展与视频开发知识点扫盲</title>
    <url>/2023/11/19/9%20%E6%98%BE%E7%A4%BA%E7%A1%AC%E4%BB%B6%E5%8F%91%E5%B1%95%E4%B8%8E%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E7%82%B9%E6%89%AB%E7%9B%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>电脑上炫酷的展示，生动的形象，离不开硬件的支持，硬件是音视频编程文化的一部分。开发者有必要对相关硬件大概了解。本专题涉及视频硬件相关话题，音频相关以后讲述。</p>
<p>​    视频编程的本质是图形图像编程，本专题以时间为主线，以公司硬件发展为点位，以图像图像开发接口为切面，宏观进行介绍，希望对视频编程开发者进行有益的启示。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192138685.png" alt="img" /></p>
<p>​    本系列文章依发展顺序，从早期起源开始，再到2D时代，3D时代，移动时代，智能时代，最后到显示标准与专业视频处理单元，大体分为6部分。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192138724.png" alt="img" /></p>
<p>​    早期概述回顾286之前的电脑，以及一些图形图像工作站。那个年代图形图像编程起源于欧美发达国家。毫不夸张的说，欧美打开了计算机世界的大门，后面简单描述了VGA早期图形编程。</p>
<p>​    2D时代回顾了当年硬件产品、2D编程接口。GDI、GDI+、D2D、AGG、Cairo、Cocoa Drawing等。2D时代的到来，迈出了图形图像编程的第一步，拉开了多媒体编程的序幕。</p>
<p>​    3D时代是计算机图形学大发展的年代，3D引擎的出现，为图形学的发展注入了活力。可以说，3D时代的降临，音视频技术的春天到来了。</p>
<p>​    移动时代是图形图像技术在嵌入式设备上拓展的年代，多媒体引擎也发生了一些变化。多媒体功能是手机最重要的功能之一，未来音视频技术在手机上将会有大的发展。</p>
<p>​    人工智能的发展，智能时代到来了，音视频方面是人工智能应用最广泛的分支。音视频技术是人工智能最重要的方向，未来，人工智能技术是音视频技术最核心的技术之一。</p>
<p>​    技术的发展没有穷尽，硬件技术的进步，显示标准和工业化硬件的出现。给技术的发发展指明了方向。</p>
<h1 id="1-早期概述"><a class="markdownIt-Anchor" href="#1-早期概述"></a> 1、早期概述</h1>
<p>​    早期图形图像处理主要靠一些工作站来完成。286之前的电脑仅进行基本的双色文本显示。显示主要靠显示器和主板显示原器件做支持。下图是1973年的Alto和1980年的Perq图形工作站，其中Alto是地球上第一台图形工作站。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192138787.png" alt="img" /></p>
<p>​    286之前，国内谈不上电脑的视频编程。专业的音视频处理主要靠图形图像工作站完成，设备全靠进口，图形图像软件的开发是国外专业芯片公司、计算机设备公司开发，当年的视频编程没有走向民间。后来，在消费级领域，一些图形加速卡出现，为图形图像编程做了前期的准备。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192138694.png" alt="img" /></p>
<p>​    286之前的图形图像工作站编程，历史已经久远，本专题不做阐述。</p>
<p>​    技术的发展推动了显示标准的改变，从MDA—CGA—EGA—VGA。显示标准对硬件厂商做了规格的约束，指引着显示技术的方向，影响着图形图像技术的发展，对视频研发产生影响，推动末端技术应用。</p>
<p>​    历史的烽烟过去，年代已经久远，广袤的互联网上，很难找到工作站编程的资料。</p>
<h1 id="2-vga编程"><a class="markdownIt-Anchor" href="#2-vga编程"></a> 2、VGA编程</h1>
<p>​    VGA的出现，显卡作为独立功能部件，从主板上剥离。这个改变，图形图像编程的曙光出现了，当年的图形图像编程还必须依靠厂家提供的视频驱动。视频驱动的完备程度，很大程度决定了硬件厂商的生存。</p>
<p>​    下面的代码，老一代程序员应该对此并不陌生。也就是这样的代码，拉开了图形编程的序幕，迈出了视频编程的第一步。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//调用VGA驱动程序</span><br><span class="line">int  gdriver=DETECT， gmode;</span><br><span class="line">initgraph ( &amp;gdriver， &amp;gmode， “c:\\tc\\bgi”);</span><br><span class="line">setbkcolor ( BLACK);                 //设定背景颜色为黑色</span><br><span class="line">setcolor ( WHITE);                   //设定画线的颜色为白色</span><br><span class="line">setlinestyle (0， 4444， 4);          //设置当前线型 实线  线图样  线宽四个像素</span><br><span class="line">line ( x1， y1， x2，y2);            //画线  x1 y1起点  x2y2终点</span><br><span class="line">lineto( x， y);                      //当前位置到xy坐标画直线</span><br></pre></td></tr></table></figure>
<p>​    计算机发展过程中，显示部件在设计上发生着变化，下图是从70年代到今天显卡发展过程图。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192138742.png" alt="img" /></p>
<p>​    自从计算的出现，相比其它领域，计算机领域发展更快，对社会影响更远，厂商竞争更为激烈。下面从公司、产品、技术的角度探讨。</p>
<ol start="2">
<li>2d时代</li>
</ol>
<h1 id="3-2d时代"><a class="markdownIt-Anchor" href="#3-2d时代"></a> 3、2D时代</h1>
<p>​    几十年工艺改进，解决了基本制造问题，计算机开始向应用过渡。显示问题是首当其冲的问题，多年的思辨与实践，2D技术横空出世，完善发展，为计算机的应用推广做出了卓越的贡献。双色显示的星星之火，在2D时代终于熊熊燃烧，计算机走向民间的时代到来了。</p>
<p>​    下面从公司产品的角度，回顾2D时代的图形图像编程。</p>
<h2 id="31-公司"><a class="markdownIt-Anchor" href="#31-公司"></a> 3.1、公司</h2>
<h3 id="311-amiga"><a class="markdownIt-Anchor" href="#311-amiga"></a> 3.1.1、Amiga</h3>
<p>​    Amiga是80年代图形性能最强大的电脑之一，拥有专门处理图形的芯片。杰.迈纳是当年显卡芯片设计的灵魂人物。下图Amiga500拆机，红圈内的denise芯片就是专门用来负责处理图形的，denise是真正意义上的2d加速卡。</p>
<p>​    这家公司在音视频多媒体领域超越当年的IBM与Apple，遗憾的是，最好的技术也被市场所淘汰。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139556.png" alt="img" /></p>
<h3 id="312-ibm"><a class="markdownIt-Anchor" href="#312-ibm"></a> 3.1.2、IBM</h3>
<p>​    1981年， IBM推出个人电脑，提供了两种显卡，一种是“单色显卡”(简称 MDA)， 一种是 “彩色绘图卡” (简称 CGA)。</p>
<p>​    1982年，IBM又推出了MGA（Monochrome Graphic Adapter）， 又称Hercules Card (大力士卡)， 除了显示图形外，还保留了原来MDA的功能，IBM是世界第一块显卡制造商。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139564.png" alt="img" /></p>
<h3 id="313-s3"><a class="markdownIt-Anchor" href="#313-s3"></a> 3.1.3、S3</h3>
<p>​    S3在1989年开始造显卡，2D画质领域无人能及，盛极一时的Trident也无奈败下阵来。S3最经典的产品当属Trio64V+，有着高速的2D性能和强大的VCD软解实力，支持1024×768的分辨率，在低分辨率下支持最高32Bit真彩色。</p>
<p>​    那是一个VCD满天飞的年代，显卡的VCD解压能力是视频底层技术的一个突破。S3几经被转卖，先被威盛收编，后被HTC揽入囊中。今天，HTC步履蹒跚，生死一线。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139538.png" alt="img" /></p>
<h3 id="314-trident"><a class="markdownIt-Anchor" href="#314-trident"></a> 3.1.4、Trident</h3>
<p>​    Trident，这家公司当年在2D显卡领域红极一时，在当年的产品专柜里，多次看到其身影，后期由于技术方向原因，在3D显卡年代被淘汰。最终在2003年被XGI收购。而XGI最终在后来被ATI纳入麾下。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139600.png" alt="img" /></p>
<h3 id="315-matrox迈创"><a class="markdownIt-Anchor" href="#315-matrox迈创"></a> 3.1.5、Matrox（迈创）</h3>
<p>​    曾经独显领域的主要玩家，2D显卡时代声名显赫，3D时代落寞，最终转向小众视频市场。如今说起显卡GPU，很多人脑海里只会浮现NVIDIA、AMD两个名字，在上个世纪末，Matrox(迈创)的名字如雷贯耳。它的资格比NVIDIA、AMD要老得多。迈创来自加拿大(ATI也是)，Matrox成立于1976年，比ATI早9年，比NVIDIA早17年。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139577.png" alt="img" /></p>
<h2 id="32-图形技术"><a class="markdownIt-Anchor" href="#32-图形技术"></a> 3.2、图形技术</h2>
<p>​    1976年~1995年是沉闷寂寥的2D时代，显示技术发展缓慢，，图形图像编程近乎停滞。市场期待着集成电路的发展、微电子技术的爆发。</p>
<p>​    1995年之后，硬件技术的春天到来了，3D显卡涌现，性能和技术有很大提升，鸟语花香，百家争鸣。厂商不断推陈出新才能生存，跟不上节奏的企业，逃不了被收购的命运。缅怀过去，继往开来，2D技术多年的发展为3D技术做了20年的铺垫。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139542.png" alt="img" /></p>
<p>​    结合过去历史，回顾当年2D编程的技术。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139738.png" alt="img" /></p>
<h3 id="321-gdi编程"><a class="markdownIt-Anchor" href="#321-gdi编程"></a> 3.2.1、GDI编程</h3>
<p>​    当时图形图像编程多使用GDI技术。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139839.png" alt="img" /></p>
<p>​    代码示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CDC *pDC = GetDC();</span><br><span class="line">pDC-&gt;SelectObject(&amp;…);</span><br><span class="line">ReleaseDC(pDC);</span><br></pre></td></tr></table></figure>
<p>​    GDI编程的出现，代表了消费级图像编程的兴起。</p>
<h3 id="322-gdi编程"><a class="markdownIt-Anchor" href="#322-gdi编程"></a> 3.2.2、GDI+编程</h3>
<p>​    GDI+是GDI的增强版，想当年，Windows平台的上的图形图像技术，走在各个平台的前端。</p>
<p>​    GDI编程为OpenGL和DirectX做了铺垫。</p>
<p>​    代码示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HINSTANCE hInst = AfxGetResourceHandle();</span><br><span class="line">HRSRC hRsrc = ::FindResource (hInst，MAKEINTRESOURCE(nID)，sTR); // type</span><br><span class="line"></span><br><span class="line">if (!hRsrc)</span><br><span class="line">return FALSE;</span><br><span class="line"></span><br><span class="line">// load resource into memory</span><br><span class="line"></span><br><span class="line">DWORD len = SizeofResource(hInst， hRsrc);</span><br><span class="line">BYTE* lpRsrc = (BYTE*)LoadResource(hInst， hRsrc);</span><br><span class="line">if (!lpRsrc)</span><br><span class="line">return FALSE;</span><br><span class="line"></span><br><span class="line">// Allocate global memory on which to create stream</span><br><span class="line">HGLOBAL m_hMem = GlobalAlloc(GMEM_FIXED， len);</span><br><span class="line">BYTE* pmem = (BYTE*)GlobalLock(m_hMem);</span><br><span class="line">memcpy(pmem，lpRsrc，len);</span><br><span class="line">IStream* pstm;</span><br><span class="line">CreateStreamOnHGlobal(m_hMem，FALSE，&amp;pstm);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// load from stream</span><br><span class="line">pImg=Gdiplus::Image::FromStream(pstm);</span><br><span class="line"></span><br><span class="line">// free/release stuff</span><br><span class="line">GlobalUnlock(m_hMem);</span><br><span class="line">pstm-&gt;Release();</span><br><span class="line">FreeResource(lpRsrc);</span><br></pre></td></tr></table></figure>
<p>​    无论GDI还是GDI+技术，都代表着图形图像编程的年代到来了。</p>
<h3 id="323-direct-2d"><a class="markdownIt-Anchor" href="#323-direct-2d"></a> 3.2.3、Direct 2D</h3>
<p>​    Direct2D的出现代表着引擎技术的到来，体现了市场对图形图像、音视频技术的强烈需求，在引擎的背后，封装了图形图像技术的专业性与复杂性。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139869.png" alt="img" /></p>
<p>​    代码示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;windows.h&gt; </span><br><span class="line">#include &lt;d2d1.h&gt; </span><br><span class="line">#include &lt;d2d1helper.h&gt; </span><br><span class="line">#include &lt;dwrite.h&gt; </span><br><span class="line">#pragma comment(lib,&quot;dwrite.lib&quot;) </span><br><span class="line">#pragma comment(libd&quot;d2d1.lib&quot;) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">static HINSTANCE g_hinst; </span><br><span class="line">static HWND g_hwnd;</span><br><span class="line">static bool g_flag_app_exit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">static ID2D1Factory * g_factory; </span><br><span class="line">static ID2D1HwndRenderTarget * g_render_target; </span><br><span class="line"></span><br><span class="line">g_render_target-&gt;Resize(D2D1::SizeU(LOWORD(lparam)，HIWORD(lparam))); </span><br><span class="line">D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED， &amp;g_factory); </span><br><span class="line"></span><br><span class="line">RECT rc; </span><br><span class="line">GetClientRect(g_hwnd， &amp;rc); </span><br><span class="line"></span><br><span class="line">g_factory-&gt;CreateHwndRenderTarget(</span><br><span class="line">        D2D1::RenderTargetProperties()， </span><br><span class="line">        D2D1::HwndRenderTargetProperties(g_hwnd，</span><br><span class="line">D2D1::SizeU(rc。right - rc。left， rc。bottom - rc。top)    )， </span><br><span class="line">        &amp;g_render_target); </span><br><span class="line"></span><br><span class="line">g_render_target-&gt;BeginDraw(); </span><br><span class="line">g_render_target-&gt;Clear(D2D1::ColorF(0。63， 0。84， 0。00));  </span><br><span class="line">g_render_target-&gt;EndDraw(); </span><br><span class="line">g_render_target-&gt;Release(); </span><br><span class="line">g_factory-&gt;Release(); </span><br></pre></td></tr></table></figure>
<h3 id="324-agg"><a class="markdownIt-Anchor" href="#324-agg"></a> 3.2.4、AGG</h3>
<p>​    AGG，全名：Anti-Grain Geometry，一个开源的、高效2D图形库。AGG的功能与GDI+的功能类似，提供了比GDI+更灵活的编程接口，产生的图形的质量非常高，跨平台的2D图形引擎，可在Windows、Wince、Linux等平台上运行。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139845.png" alt="img" /></p>
<p>​    设计上，师出Boost库，使用了大量的C++语法规则，包括模板、仿函数等处理。为了能在更多平台上使用，并没有直接使用Boost和STL库，自己实现了部分STL功能。”</p>
<h3 id="325-cairo"><a class="markdownIt-Anchor" href="#325-cairo"></a> 3.2.5、Cairo</h3>
<p>​    cairo 是一个免费的矢量绘图软件库，可以绘制多种输出格式。cairo支持许多平台，包括 Linux、BSD、Windows等。Linux 绘图可以通过 X Window 系统、Quartz、图像缓冲格式或 OpenGL 上下文来实现。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139859.png" alt="img" /></p>
<p>​    cairo 的主要设计目标是提供尽可能接近的输出。这种一致的输出使 cairo 非常适合 GUI 工具集编程和跨平台应用程序开发。使用同一个绘图库打印高分辨率的屏幕和绘制屏幕内容，这种功能具有显著的优点。</p>
<p>​    在支持的目标平台上，cairo 尝试智能化地使用底层硬件和软件支持。高质量矢量图形和高性能的结合使cairo成为优秀的绘图系统。</p>
<p>​    cairo 用C编写的，为大多数常用的语言提供了绑定。选用C语言有助于创建新的绑定，在进行C语言调用时提供高性能。和Python绑定，支持快速原型开发，降低了学习 cairo绘图API的门槛。</p>
<p>​    代码示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cairo.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  <span class="title function_">main</span> <span class="params">(<span class="type">int</span> argc， <span class="type">char</span> *argv[])</span> </span><br><span class="line"></span><br><span class="line">&#123; </span><br><span class="line">    <span class="type">cairo_surface_t</span> *surface; </span><br><span class="line">    <span class="type">cairo_t</span> *cr; </span><br><span class="line">    <span class="type">int</span> width = <span class="number">640</span>; </span><br><span class="line">    <span class="type">int</span> height = <span class="number">480</span>; </span><br><span class="line">    surface = cairo_image_surface_create (CAIRO_FORMAT_ARGB32， width， height); </span><br><span class="line">    cr = cairo_create (surface); </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Drawing code goes here */</span> </span><br><span class="line">    cairo_set_line_width (cr， <span class="number">10</span>); </span><br><span class="line">    cairo_set_source_rgb (cr， <span class="number">0</span>， <span class="number">0</span>， <span class="number">0</span>); </span><br><span class="line">    cairo_rectangle (cr， width/<span class="number">4</span>， height/<span class="number">4</span>， width/<span class="number">2</span>， height/<span class="number">2</span>); </span><br><span class="line">    cairo_stroke (cr); </span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Write output and clean up */</span> </span><br><span class="line">   cairo_surface_write_to_png (surface， <span class="string">&quot;rectangle。png&quot;</span>); </span><br><span class="line">   cairo_destroy (cr); </span><br><span class="line">   cairo_surface_destroy (surface); </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="326-cocoa-drawing"><a class="markdownIt-Anchor" href="#326-cocoa-drawing"></a> 3.2.6、Cocoa Drawing</h3>
<p>​    Cocoa Drawing是苹果公司的2D图形图像开发类库，在XCode下运用，旨在推广苹果公司的技术。纵然苹果一直有着很强的图形图像处理能力，但仅局限于苹果公司本身的软件，苹果在早期一直没有很好的图形图像编程引擎。</p>
<p>​    近些年苹果的Metal技术，才可以算作苹果公司真正的技术创举。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139889.png" alt="img" /></p>
<p>​    代码示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[NSGraphicsContext saveGraphicsState];</span><br><span class="line"></span><br><span class="line">// Create the path and add the shapes</span><br><span class="line">NSBezierPath* clipPath = [NSBezierPath bezierPath];</span><br><span class="line">[clipPath appendBezierPathWithRect:NSMakeRect(0.0，0.0，100.0，100.0)];</span><br><span class="line">[clipPath appendBezierPathWithOvalInRect:NSMakeRect(50.0，50.0，100.0，100.0)];</span><br><span class="line"></span><br><span class="line">// Add the path to the clip shape。</span><br><span class="line">[clipPath addClip];</span><br><span class="line"></span><br><span class="line">// Draw the image。</span><br><span class="line">[NSGraphicsContext restoreGraphicsState];</span><br></pre></td></tr></table></figure>
<h2 id="33-总结"><a class="markdownIt-Anchor" href="#33-总结"></a> 3.3、总结</h2>
<p>​    计算机功能的强大，代表本身的强大，本身的强大代表体系的复杂，模块的组合，视频技术也不例外，从宏观角度来看，图形图像编程框架如下图。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139912.png" alt="img" /></p>
<p>​    软硬件技术是紧密结合的，硬件技术的进步推动了软件编程的繁荣，软件技术的应用促进了硬件的推广。早期的硬件公司驱动设计、专业级的编程接口研发，到后期消费级市场软件技术的繁荣。图形图像编程形成独立的软件阵地，呼唤着3D时代的到来。</p>
<h1 id="4-3d时代"><a class="markdownIt-Anchor" href="#4-3d时代"></a> 4、3D时代</h1>
<p>​    历史长河中，科技进步是人类文明的主要推动力。沧海桑田，天下多变，人类对科技的研究与探索从未停止，计算显示技术也不例外。</p>
<p>​    现实是3D的，显示硬件注定也是3D的。透过历史的云烟，得到岁月的启示，硬件对3D技术的支持是显卡厂商存活的根本。硬件对图形图像引擎的支持，是显示芯片公司做大做强的基础。引擎支持主要包括OpenGL和D3D引擎支持，在2000年前尤为明显。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139634.png" alt="img" /></p>
<p>​    科技的风风雨雨，面临着技术的抉择和选型，无论辉煌黯淡，时光默然前行，那些远行的技术，做了科学的辩证。</p>
<h2 id="41-公司"><a class="markdownIt-Anchor" href="#41-公司"></a> 4.1、公司</h2>
<h3 id="411-3dfx"><a class="markdownIt-Anchor" href="#411-3dfx"></a> 4.1.1、3Dfx</h3>
<p>​    1994年，3Dfx成立，在当时是一家小公司，定位明确，很快就推出了业界的第一块真正意义的3D图形加速卡：Voodoo。在当年，Voodoo在速度以及色彩方面的表现让喜欢游戏的用户为之疯狂，Voodoo几乎是玩家们唯一的选择，当年3Dfx的专用Glide引擎接口统治了整个3D世界。当年一个专业图形引擎，可拯救一系列产品，成就一家硬件厂商。</p>
<p>​    Glide引擎提供了专业的3D图形显示接口，Glide可以说是一套3D接口库，3Dfx凭借硬件与引擎的结合创造了发展历史上的奇迹。3Dfx的成功就是在3D硬件支持和相关引擎支持良好的表现。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139557.png" alt="img" /></p>
<p>​    3Dfx从硬件上实现了Z缓存和双缓存，可进行光栅化之类的操作，实现了DirectX 6的特征集。CPU从繁重的像素填充任务中解脱出来。当然，当年的技术不成熟，顶点变换必须在CPU中完成，光栅化之后的像素操作也很有限。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139575.png" alt="img" /></p>
<h3 id="412-ati"><a class="markdownIt-Anchor" href="#412-ati"></a> 4.1.2、ATI</h3>
<p>​    说起显卡，我们不能不提ATI，由于对3D技术支持较好以及紧跟OpenGL和DirectX步伐。多年和英伟达齐名。后来由于显卡驱动问题，造就了A卡追击N卡的局面。ATI提供了良好的编程接口，成为推广的一个重要因素。</p>
<p>​    ATI的欻创始人何国源先生，广东新会人，在很多年间都是芯片界的顶级人物。AMD在2006年以54亿美元收购ATI，何国源从此退出显卡芯片行业。今天世界上很多电脑的显卡都有ATI的技术。下面是显卡领域的两个风云人物，何先生已金盆洗手，退出江湖，黄药师依然皮衣挂帅，征战一线。</p>
<p>​    市场风云变幻，毫无疑问，ATI是幸运的，当年潜图问鼎，雄霸天下。直至后来被高价收购，多年后的今天，A卡依然笑傲江湖。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139678.png" alt="img" /></p>
<h3 id="413-nvidia"><a class="markdownIt-Anchor" href="#413-nvidia"></a> 4.1.3、NVIDIA</h3>
<p>​    提起显卡，必须提及另外一个厂家NViDia，英伟达的创始人黄仁勋先生，台湾台北人，江湖人称黄药师（老黄）。近20年以来，世界顶级芯片巨头。在图形处理芯片上，何国源和黄仁勋都做出了不可磨灭的贡献，图形处理芯片的前身，就是今天的GPU，GPU是英伟达推出的。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139618.png" alt="img" /></p>
<p>​    NVIDIA 通过NV系列产品小试牛刀，通过GeForce 系列产品出征江湖，屡战屡胜，战功显赫，今天稳坐显示领域第一把交椅，无人出其左右。在人工智能数据分析方面，英伟达依然战功显赫。</p>
<p>​    想当年，显示领域是英伟达和ATI的天下，两者相互竞争，推动了显示技术的发展。成就了今天的显示规范。当年的竞争本质是显示指令、Shader编程、效率的竞争。</p>
<p>​    英伟达的NV3开始支持OpenGL，取得了巨大的成功。后期开始支持Direct3D。也就是前期对这些框架支持不足，导致经营举步维艰。</p>
<p>​    1999年8月，NVIDIA公司发布了一款代号为NV10的图形芯片Geforce 256。Geforce 256是图形芯片领域开天辟地的产品，因为它是第一款提出GPU概念的产品。</p>
<p>​    Geforce 256所采用的核心技术有“T&amp;L”硬件、立方环境材质贴图和顶点混合、纹理压缩和凹凸映射贴图、双重纹理四像素、256位渲染引擎等。“T&amp;L”硬件的出现，让显示芯片具备了以前只有高端工作站才有的顶点变换能力，同时期的OpenGL和DirectX 7都提供了硬件顶点变换的编程接口。1999年，GPU的概念就这样出现了。</p>
<p>​    GPU的推出，不仅仅是硬件体系的革命性变化，更是对显示标准的强大支持。今天3D引擎编程，核心主要也是面向GPU的编程。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139564.png" alt="img" /></p>
<p>​    后期ATI被AMD收购，纵然没有英伟达耀眼，但整体发展还算顺利，形成了A卡和N卡竞争的格局。</p>
<p>​    2020年，英伟达收购ARM，市值超过3300亿美元，超过INTEL 1000亿美元，成为全球市值排名TOP10。在西方的土地上，一个黄种人，一个台湾人，战功显赫。</p>
<h3 id="414-3dlabs"><a class="markdownIt-Anchor" href="#414-3dlabs"></a> 4.1.4、3DLabs</h3>
<p>​    3D技术飞速发展，专业显卡需求增大。专业公司应运而生。3DLabs就是这样的公司，开发高端绘图芯片，对OpenGL的完美支持，性能强大，当时的OpenGL普通显卡难以完全支持。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139756.png" alt="img" /></p>
<p>​    当年在专业显卡市场，3DLabs的产品几乎是唯一选择。面对瞬息万变的世界，3DLabs还是落后了，对D3D技术重视不足和对OpenGL过度依赖，最终被黄药师的Quadro干掉。于2002年被创新科技收购，成为旗下子公司。</p>
<p>​    对D3D的支持程度不仅仅影响民间显卡，对专业显卡也有很大的影响。显卡的发展不仅仅要考虑OpenGL，更要考虑D3D。D3D是微软的，操作系统是微软的，Windows垄断操作系统的存在，对D3D是一个强大的支持。公司决定软件，软件决定硬件又一次得到体现。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139865.png" alt="img" /></p>
<h3 id="415-video-logic"><a class="markdownIt-Anchor" href="#415-video-logic"></a> 4.1.5、Video Logic</h3>
<p>​    Video Logic前期主打产品是PowerVR，当年PowerVR也涉足桌面显卡市场，比较有名的就是PCX2芯片，性能强大，支持D3D、OpenGL，然而驱动程序兼容性较差，游戏运行有问题，对CPU要求较高，影响了销售。即使如此，在很长时间内，市场占有率一直保持第二。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139862.png" alt="img" /></p>
<p>​    对图形图像引擎的支持、驱动的友好程度决定了硬件的发展。后期由于优化不好，兼容性问题、软件冲突等，容易引起渲染错误或性能下降。离不开最终被转卖的命运。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139912.png" alt="img" /></p>
<p>​    相比太多厂商，PowerVR是幸运的，桌面市场失败了，但PowerVR睿智的转向了移动图形市场，避免了桌面市场的残酷竞争，发挥了自己的技术优势，移动端成为未来的趋势，PowerVR成为移动显示领域的重要力量。</p>
<p>​    PC端计算机图形学发展的同时，移动端技术的兴起，移动端细分专业显示芯片的出现，进而发展成为独立的领域，计算机图形学向精细化发展。</p>
<h3 id="416-intel"><a class="markdownIt-Anchor" href="#416-intel"></a> 4.1.6、intel</h3>
<p>​    英特尔是美国一家以研制CPU为主的公司，是全球最大的个人计算机零件和CPU制造商，成立于1968年，具有52年产品创新和市场领导的历史。</p>
<p>​    1971年，英特尔推出了全球第一个微处理器。微处理器所带来的计算机和互联网革命，改变了整个世界。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139935.png" alt="img" /></p>
<p>​    2016年4月，英特尔推出处理器至强7290F采用了多达72个处理器核心，成为英特尔核心数最多的处理器。2019年2月，英特尔推出至强铂金9282，它有112个线程，是线程最多的处理器。</p>
<p>​    2020年7月，福布斯2020全球品牌价值100强发布，英特尔排名第12位。9月3日，英特尔推出了新的极简主义 Logo。</p>
<p>​    谈到显卡，不能回避intel，由于特殊的地位，相比其它厂商，在显卡的道路上，走的相对平稳与踏实。i740就是Intel推出的第一款产品，极大的推动了AGP标准的发展。</p>
<p>​    intel专注于集成显卡领域，从i740之后，再也没有推出过独立显卡，i740成了Intel独立显卡的绝唱。纵然在显卡领域没有大的建树，但intel一直在坚守。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139916.png" alt="img" /></p>
<h3 id="417-amd"><a class="markdownIt-Anchor" href="#417-amd"></a> 4.1.7、AMD</h3>
<p>​    AMD显卡即ATI(被AMD收购)显卡，俗称A卡。搭载AMD公司的显示芯片。与NVIDIA齐名，同为世界两大显示芯片厂商之一。由于收购关系，在本专题中，不做过多讲述。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139966.png" alt="img" /></p>
<p>​    AMD是目前业内唯一一个可以提供高性能CPU、高性能独立显卡、主板芯片组三大组件的半导体公司，为明确其优势，提出3A平台新标志，在笔记本领域有“AMD VISION”标志的就表示该电脑采用3A构建方案。</p>
<p>​    今天显卡市场，是A卡与N卡的天下，19年第四季度，AMD出货量环比大增22.6%，份额19%，NVIDIA减少1.9%，份额18%，Intel微增0.2%，份额63%。由于计算将Intel核显、APU算在内，NVIDIA并无优势。</p>
<p>​    在独显方面，AMD出货量占比27%，较上季度的24%和去年的26%均有增加，但NVIDIA仍旧以73%垄断剩余市场。今年，Intel Xe架构独显将面世，对独显格局有一定冲击。</p>
<p>​    AMD显卡与NVIDIA显卡相比，有更高的功耗与更高的性能。AMD显卡的子品牌有 ATI 和 Radeon，显卡型号众多。今天，AMD(ATI)显卡技术坚挺，依然耀眼。</p>
<h2 id="42-软件与硬件"><a class="markdownIt-Anchor" href="#42-软件与硬件"></a> 4.2、软件与硬件</h2>
<h3 id="421-接口与硬件"><a class="markdownIt-Anchor" href="#421-接口与硬件"></a> 4.2.1、接口与硬件</h3>
<p>​    专业图形图像领域，Z缓存和双缓存称为了3D图形技术的标配。在今天的流行图形图像API里，当年的Z缓冲和双缓冲，仅仅是今天图形图像引擎的一个参数或者一个函数而已，参数和函数的背后，是硬件的支持。</p>
<p>​    显卡插口有PCI和AGP两种。在数据处理上，逐渐支持高速和并行。具有着更大的传输速率，更复杂数据的处理能力。硬件技术的变革推动了软件技术的进步。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139076.png" alt="img" /></p>
<p>​    任何技术的发展都不是一帆风顺的，显示技术也不例外。每一次技术的革新，都可能带来革命性的变化。那些曾经被淘汰、被边缘化的技术，为主流技术的发展做了助攻。在显卡技术发展过程中，硬件的升级，架构的改变，都代表着功能的提升。</p>
<p>​    下图从另外一个角度，展现显卡发展的过程。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139165.png" alt="img" /></p>
<h3 id="422-3d引擎"><a class="markdownIt-Anchor" href="#422-3d引擎"></a> 4.2.2、3D引擎</h3>
<p>​    遥想当年，视频编程主要靠专业引擎来体现，各家公司雄心勃勃，开宗立派，在数家公司的专业图形图像接口里，OpenGL和DirectX最终胜出。今天，消费级市场主要通过OpenGL和DirectX来体现。</p>
<p>​    可悲的是，早期在linux上很少有图形图像编程的处理。一直到今天，图形图像工作主要还是在Windows和Mac上进行。</p>
<p>​    时光的河流，流淌着一个真理，对3D的支持，以及对3D相关图形系统的支持，是硬件厂商存活的根本。这里的3D支持，就是3D引擎。</p>
<p>​    当年的图形图像编程，OpenGL刚刚起步，很多公司提供的应用引擎都是对OpenGL和D3D的封装。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139192.png" alt="img" /></p>
<h4 id="4221opengl"><a class="markdownIt-Anchor" href="#4221opengl"></a> 4.2.2.1．OpenGL</h4>
<p>​    OpenGL是渲染2D、3D数字图形的跨语言、跨平台的应用程序编程接口（API）。由近350个函数组成，绘制简单图形和复杂三维景象。OpenGL常用于CAD、虚拟现实、科学可视化和游戏开发等。OpenGL直接操纵图形硬件，高效进行图形图像编程，实现一般由显示设备厂商提供。OpenGL是对显卡编程的工业接口。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139175.png" alt="img" /></p>
<p>​    OpenGL规范由1992年成立的OpenGL架构评审委员会（ARB）维护。ARB由业界顶级软硬件公司组成，下图是OpenGL的发展过程。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139161.png" alt="img" /></p>
<p>​    OpenGL API定义了若干被客户端程序调用的函数，以及一些整型常量。这些实现方便了开发者调用。</p>
<p>​    OpenGL与语言平台无关。规范没有获得和管理OpenGL上下文相关的内容，将这些细节交给底层窗口系统。OpenGL专注图像渲染，不提供输入、音频及窗口相关的API。</p>
<p>​    OpenGL不断进化API。新版规范定期由Khronos Group发布，新版本通过扩展API来支持各种新功能。每个版本细节由Khronos Group成员一致决定，包括显卡厂商、操作系统设计人员以及类似Mozilla和谷歌的技术性公司。</p>
<p>​    除了核心API功能，GPU供应商通过扩展的形式提供额外功能。扩展引入新功能和新常量，增加或取消现有OpenGL功能。</p>
<p>​    每个扩展与一个标识符联系，标识符基于开发公司的名称。例如，英伟达（nVidia）的标识符是NV。如果多个供应商同意使用相同的API来实现相同功能，那么就用EXT标志符。这种情况更进一步，Khronos Group的架构评审委员（Architecture Review Board，ARB）正式批准该扩展，那么就被称为一个“标准扩展”，标识符使用ARB。第一个ARB扩展是GL_ARB_multitexture。</p>
<p>​    OpenGL每个新版本中引入的功能，特别是ARB和EXT类型的扩展，通常由数个被广泛实现的扩展功能组合而成。</p>
<p>​    代码示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;GLTools。h&gt;             // OpenGL toolkit</span><br><span class="line">#include &lt;GLShaderManager。h&gt;    // Shader Manager Class</span><br><span class="line"></span><br><span class="line">GLBatch	triangleBatch;</span><br><span class="line">GLShaderManager	shaderManager;</span><br><span class="line"></span><br><span class="line">void ChangeSize(int w， int h);</span><br><span class="line">void SetupRC();</span><br><span class="line">void RenderScene(void);</span><br><span class="line">gltSetWorkingDirectory(argv[0]);</span><br><span class="line">glutInit(&amp;argc， argv);</span><br><span class="line">glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH | GLUT_STENCIL);</span><br><span class="line">glutInitWindowSize(800， 600);</span><br><span class="line">glutCreateWindow(&quot;Triangle&quot;);</span><br><span class="line">glutReshapeFunc(ChangeSize);</span><br><span class="line">glutDisplayFunc(RenderScene);</span><br><span class="line"></span><br><span class="line">SetupRC();</span><br><span class="line">glutMainLoop();</span><br></pre></td></tr></table></figure>
<h4 id="4222-directx"><a class="markdownIt-Anchor" href="#4222-directx"></a> 4.2.2.2、DirectX</h4>
<p>​    微软在业界的大哥地位，影响力不言而喻。在发展史上，多次和IBM对博公堂，微软宣布，凡是IBM的电脑，不能安装Windows操作系统。软件厂商要挟硬件厂商，在微软发展历史上，留下了光辉的一页。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139171.png" alt="img" /></p>
<p>​    音视频是电脑最核心的功能之一，作为系统供应商，微软推出了自己的DirectX产品，该产品在1995年前后十几年间，决定了很多硬件厂商的生死。</p>
<p>​    示例代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma comment(lib，&quot;d3d9.lib&quot;)</span><br><span class="line">#pragma comment(lib，&quot;d3dx9.lib&quot;)</span><br><span class="line">#include &lt;d3dx9。h&gt;</span><br><span class="line">LPDIRECT3D9 g_pD3D = NULL;</span><br><span class="line">LPDIRECT3DDEVICE9 g_pD3DDevice = NULL;</span><br><span class="line">LPDIRECT3DVERTEXBUFFER9 g_pVertexBuffer = NULL; </span><br><span class="line"></span><br><span class="line">HRESULT InitialiseD3D(HWND hWnd)</span><br><span class="line">HRESULT InitialiseVertexBuffer()</span><br><span class="line">void SetupRotation()</span><br><span class="line">void SetupCamera()</span><br><span class="line">void SetupPerspective()</span><br><span class="line">void Render()</span><br><span class="line">void CleanUp()</span><br></pre></td></tr></table></figure>
<p>​    当我们平心静气面对这些技术和代码时，深刻的感受到，尤其在早期，当年的D3D技术对显卡厂家的影响是可怕的，对D3D技术的支持程度代表了显卡的受欢迎程度。当年的D3D技术应用最主要是游戏领域。</p>
<p>​    从D3D的发展，得到岁月的启示，垄断阻碍了技术的发展，相信在某一天，D3D也终究会退出技术的舞台。</p>
<h3 id="423-shader编程"><a class="markdownIt-Anchor" href="#423-shader编程"></a> 4.2.3、Shader编程</h3>
<p>​    Shader在3D编程里面占据着重要的地位，是OpenGL、DirectX、Unity等引擎中最核心的概念。成了3D图形图像编程的核心标配。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139313.png" alt="img" /></p>
<p>​    示例代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#version 130</span><br><span class="line">in vec4 vVertex;</span><br><span class="line">in vec3 vNormal;</span><br><span class="line"></span><br><span class="line">uniform vec4    ambientColor;</span><br><span class="line">uniform vec4    diffuseColor;	</span><br><span class="line">uniform vec4    specularColor;</span><br><span class="line">uniform vec3	   vLightPosition;</span><br><span class="line">uniform mat4	   mvpMatrix;</span><br><span class="line">uniform mat4	   mvMatrix;</span><br><span class="line">uniform mat3	   normalMatrix;</span><br><span class="line">smooth out vec4 vVaryingColor;</span><br><span class="line"></span><br><span class="line">void main(void) </span><br><span class="line">&#123; </span><br><span class="line">    vec3 vEyeNormal = normalMatrix * vNormal;</span><br><span class="line">    vec4 vPosition4 = mvMatrix * vVertex;</span><br><span class="line">    vec3 vPosition3 = vPosition4。xyz / vPosition4。w;</span><br><span class="line">    vec3 vLightDir = normalize(vLightPosition - vPosition3);</span><br><span class="line">    float diff = max(0。0， dot(vEyeNormal， vLightDir));</span><br><span class="line">    vVaryingColor = diff * diffuseColor;</span><br><span class="line">    vVaryingColor += ambientColor;</span><br><span class="line">    vec3 vReflection = normalize(reflect(-vLightDir， vEyeNormal));</span><br><span class="line">    float spec = max(0。0， dot(vEyeNormal， vReflection));</span><br><span class="line">if(diff != 0) </span><br><span class="line">&#123;</span><br><span class="line">        float fSpec = pow(spec， 128。0);</span><br><span class="line">        vVaryingColor。rgb += vec3(fSpec， fSpec， fSpec);</span><br><span class="line">	&#125;</span><br><span class="line">    gl_Position = mvpMatrix * vVertex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4221-metal"><a class="markdownIt-Anchor" href="#4221-metal"></a> 4.2.2.1、Metal</h4>
<p>​    Metal是苹果公司的图形编程库，近两年取得了巨大的发展。在Mac平台和IOS平台音视频开发上，Metal是一个很好的选择。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139423.png" alt="img" /></p>
<p>​    Metal提供对GPU的直接访问，技术人员最大程度地发挥 iOS、macOS和Apple tvOS app中的图形硬件计算潜能。Metal构建于易用的低开销架构之上，提供预编译的GPU 着色器和精细的资源控制。</p>
<p>​    Metal支持多线程，支持 GPU 驱动命令创建。支持GPU阵列编程，充分利用 Mac Pro 和 Pro Display XDR 的专业级多媒体功能。</p>
<p>​    渲染示例代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &quot;Renderer.h&quot;</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">    float red, green , blue, alpha;</span><br><span class="line">&#125;Color;</span><br><span class="line"></span><br><span class="line">@implementation Renderer</span><br><span class="line">&#123;</span><br><span class="line">    id&lt;MTLDevice&gt; _device;</span><br><span class="line">    id&lt;MTLCommandQueue&gt; _commandQueue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//画view的内容，这个代理方法会按帧率执行</span><br><span class="line">-(void)drawInMTKView:(MTKView *)view&#123;</span><br><span class="line">    //获取颜色</span><br><span class="line">    Color color = [self makeFancyColor];</span><br><span class="line">    //设置背景色</span><br><span class="line">    view.clearColor = MTLClearColorMake(color.red, color.green, color.blue, color.alpha);</span><br><span class="line">    </span><br><span class="line">    //创建一个命令缓冲区</span><br><span class="line">    id&lt;MTLCommandBuffer&gt; commandBuffer = [_commandQueue commandBuffer];</span><br><span class="line">    commandBuffer.label = @&quot;mycommand&quot;;</span><br><span class="line">    </span><br><span class="line">    //渲染过程，用于保存渲染过程的结果</span><br><span class="line">    MTLRenderPassDescriptor *renderPassDescriptor = view.currentRenderPassDescriptor;</span><br><span class="line">    </span><br><span class="line">    if (renderPassDescriptor != nil) &#123;</span><br><span class="line">        id&lt;MTLRenderCommandEncoder&gt; renderEncoder = [commandBuffer renderCommandEncoderWithDescriptor:renderPassDescriptor];</span><br><span class="line">        renderEncoder.label = @&quot;myrenderEncoder&quot;;</span><br><span class="line">        </span><br><span class="line">        //结束编码</span><br><span class="line">        [renderEncoder endEncoding];</span><br><span class="line">        </span><br><span class="line">        //注册一个可绘制图像</span><br><span class="line">        [commandBuffer presentDrawable:view.currentDrawable];</span><br><span class="line">    &#125;</span><br><span class="line">    //提交命令到GPU</span><br><span class="line">    [commandBuffer commit];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//视口发生变化会被调用</span><br><span class="line">- (void)mtkView:(nonnull MTKView *)view drawableSizeWillChange:(CGSize)size &#123;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<h4 id="4222-vulkan"><a class="markdownIt-Anchor" href="#4222-vulkan"></a> 4.2.2.2、Vulkan</h4>
<p>​    Vulkan是一个跨平台的2D和3D绘图应用程序接口（API），科纳斯组织（Khronos Group）在2015年游戏开发者大会（GDC）上发布。</p>
<p>​    Khronos Group目前是世界多媒体、音视频、图形图像领域的核心协会，拥有世界顶级会员单元，拥有世界级的技术标准。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139417.png" alt="img" /></p>
<p>​    科纳斯把Vulkan API称为“下一代OpenGL行动”（next generation OpenGL initiative）或“glNext”。就像OpenGL，Vulkan针对实时3D程序（如电子游戏）设计，Vulkan并计划提供高性能和低CPU管理负担（overhead），这也是Direct3D12和AMD的Mantle的目标。Vulkan兼容Mantle的一个分支，并使用了Mantle的一些组件。</p>
<p>​    Vulkan 是 AMD Mantle 的后续版本，继承了强大的低开销架构，使软件开发能够全面获取 Radeo GPU 与多核 CPU 的性能、效率和功能。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139433.png" alt="img" /></p>
<p>​    Vulkan 支持深入硬件底层的控制，为各种系统带来更快的性能和更高的影像质量。Vulkan API 还提供超高的 OS 兼容性、渲染特性和硬件效率。</p>
<p>​    基于GCN架构的Radeon 显卡拥有强大的“异步计算”功能，使显卡并行处理3D几何图形与计算工作量。当游戏需要同时计算复杂照明与渲染人物时，这种功能就找到了用武之地。这些任务并不需要在Radeon显卡上串行运行，节约时间、提升整体帧速率。Vulkan在近期Windows和Linux系统上都有很好的应用。</p>
<p>​    目前，Vulkan得到广泛的的支持，在硬件上，无论是服务器、桌面、移动端，都进行了完好的支持。在系统层面上，Linux、Windows、Mac、Android、IOS都为Vulkan提供了完备的接口。</p>
<p>​    示例代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;vulkan/vulkan.h&gt;</span><br><span class="line">#include &lt;stdexcept&gt;</span><br><span class="line">#include &lt;functional&gt;</span><br><span class="line"></span><br><span class="line">class HelloTriangleApplication </span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">void run() </span><br><span class="line">&#123;</span><br><span class="line">        initVulkan();</span><br><span class="line">        mainLoop();</span><br><span class="line">        cleanup();</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">void initVulkan() &#123;&#125;</span><br><span class="line">void mainLoop() &#123;&#125;</span><br><span class="line">void cleanup() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">    HelloTriangleApplication app;</span><br><span class="line">try </span><br><span class="line">&#123;</span><br><span class="line">        app.run();</span><br><span class="line">&#125;</span><br><span class="line">catch (const std::runtime_error&amp; e) </span><br><span class="line">&#123;</span><br><span class="line">        std::cerr &lt;&lt; e.what() &lt;&lt; std::endl;</span><br><span class="line">        return EXIT_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line">    return EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="43-启示"><a class="markdownIt-Anchor" href="#43-启示"></a> 4.3、启示</h2>
<p>​    计算机图形学的发展不是一蹴而就的，前期发展过程中，百花齐放，百家争鸣。各家接口不一，处于蓬勃不稳定发展期，系统厂商、硬件厂商、软件厂商、行业协会一起，共同推出软硬件规范，OpenGL就是一个成功的表现。</p>
<p>​    技术发展过程中，一些厂商没有明确的规范或没有明确的支持规范，进而失败了。没有硬件厂商支持的规范同样是可悲的，很快被淘汰了。软件运行在硬件之上，硬件在一定程度上决定着软件。软件反过来影响着硬件。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192139426.png" alt="img" /></p>
<p>​    3D时代绚丽多彩，现实生活姹紫嫣红，多年技术积淀，在3D时代五彩斑斓，应用辈出。显示技术的应用发挥到了极致，对计算技术的发展做出了卓越的贡献。</p>
<p>​    3D时代的到来，为显示技术的精细化发展吹响了号角。在计算机图形图像技术发展史上，承前启后，继往开来。</p>
<h1 id="5-移动时代"><a class="markdownIt-Anchor" href="#5-移动时代"></a> 5、移动时代</h1>
<p>​    移动时代可以追踪到很远，从古老的电台到1948年贝尔实验室的Bell boy，到1956年摩托罗拉的BP机。寻呼机的发展历史，主要是通讯技术的进步。和主题有一定偏差，不做阐述。翻开半个多世纪的画卷，历史没有想到的是，通讯技术在今天有如此傲娇的成绩。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192146034.png" alt="img" /></p>
<p>​    早期电脑至上，后来移动至上。不可怀疑的是，移动互联网高速发展的今天，手机成为应用系统最重要的终端。</p>
<p>​    移动端图形系统的研究，是移动应用终端开发的重中之重，也是手机底层技术的核心要素。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192146054.png" alt="img" /></p>
<p>​    本篇从手机发展史起笔，到移动显示芯片厂家、移动芯片技术与流行图形库讲述，希望给移动端音视频开发带来有益的启示。</p>
<h2 id="51-手机时代"><a class="markdownIt-Anchor" href="#51-手机时代"></a> 5.1、手机时代</h2>
<p>​    那年的“hello moto”，能否勾起你绵绵的情思。这颗圆圆的行星，”hello moto”之声奏响了银河系无线通讯的号角。那个年代手提电话(也叫移动电话)，还不叫手机，绰号大哥大，也叫板砖。当年的大哥大仅仅局限通话，短信功能也不具备。有了大哥大，不学数理化，大哥大成为了身份的象征。</p>
<p>​    硬件技术的进步，手机向小型化发展。两个企业的高光时刻带来了，当年的摩托罗拉和诺基亚堪称业界大哥，赚钱赚到罗马。从早期的单色屏逐渐发展到彩色屏。从1990年到2005年，那是诺基亚和摩托罗拉的时代。昨日年少英雄，指点江山，今天英雄白发，美人谢幕。互联网给我们多少唏嘘。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192146040.png" alt="img" /></p>
<p>​    工艺的提升不仅推动硬件设计的进步，更推动软件系统的发展，手机应该拥有更强大的功能。在这一大环境下，SmartPhone、Symbian、Linux手机操作系统不断涌现，为智能手机系统发展发起了前期的火力侦察。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192146031.png" alt="img" /></p>
<p>​    乔布斯担负着上帝赋予的伟大使命，2007年，Iphone诞生了。伴随着Iphone的诞生，Android的出现，智能时代到来了。完成了伟大使命的乔帮主，这位天选之子，4年之后，撒手人寰，魂归天堂。而他，留下了这颗行星上市值最高的公司。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192146048.png" alt="img" /></p>
<p>​    智能手机的兴起，促进移动端硬件提升，显示技术也有很大变化。移动时代硬件发展同样精彩,充满了竞争与杀戮，野蛮和邪恶，和PC端同样精彩。软件方面相对平滑平淡，没有大的开开合合。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192146075.png" alt="img" /></p>
<p>​    手机的发展史，也是一部无线技术的发展史。硬件技术与通讯规范密切相关，翻开移动通讯的日记，从1G到5G，感时光如梭，叹技术神速。通讯技术规范不属于本主题内容，不做阐述。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192146307.png" alt="img" /></p>
<p>​    移动时代芯片科技，看到了中国企业的影子，东方用资本开始了买买买的过程。对芯片技术的渴求，资本是最直接的倾诉。期望不远的未来，有一家拥有核心技术的东方芯片厂商。在技术的长河中，书写浓重的一笔。在芯片的交响乐中，奏出中国的声音。</p>
<p>​    波澜壮阔的手机应用，后台是芯片技术的驱动。下一节，我们从芯片的角度回顾。</p>
<h2 id="52-移动端主流显示芯片"><a class="markdownIt-Anchor" href="#52-移动端主流显示芯片"></a> 5.2、移动端主流显示芯片</h2>
<h3 id="521-arm"><a class="markdownIt-Anchor" href="#521-arm"></a> 5.2.1、ARM</h3>
<p>​    ARM不仅进行嵌入式CPU架构授权，也进行GPU架构授权。在芯片架构设计上，ARM稳坐头把交椅。2006年，ARM 完成对挪威Falanx公司的收购，获得其移动GPU技术，完成对原有IP技术的扩展。也就是从那个年代开始，ARM闪亮登场。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192146341.png" alt="img" /></p>
<p>​    ARM是有先见之明的，15年后，GPU广泛用于智能手机、DTV和平板电脑等多种设备。15年时间，ARM Mali技术成为全球出货量第一的GPU，预计2020年总计出货量就超过15亿。在移动图形硬件发展史上，ARM mail是必谈的技术。</p>
<p>​    Mali GPU架构发展了3代，Utgard、Midgard和Bifrost。Utgard的代表是Mali-400 MP，三星的Exynos4412用的就是这款GPU，Mali-450至今的一些电视芯片还在使用（例如小米电视）。Midgard的型号是Mali-T系列，联发科Helio X20就用的是Mali-T880，而Bifrost的型号是Mali-G系列。</p>
<p>​    ARM的Mali可以说是ARM CPU的“黄金搭档”，架构上不是最先进，普及率非常高，低廉的授权费是芯片厂商比较喜欢的。ARM科技与方案的授权，保证了技术纯粹，降低了经营风险。</p>
<p>​    Mali是一款高端GPU，将图形IP视觉娱乐变为现实，市场占安卓智能手机30%以上，可与PowerVR SGX系列GPU对比。</p>
<p>​    应用基于ARM体系结构的移动设备上，得益于CPU占有率发展迅猛。ARM® Mali™ 系列 GPU 为所有嵌入式图形 IP 和视频 IP 提供完善的解决方案，使设备制造商和内容开发商能够为最广泛的消费类设备（手机、游戏机、智能本、HDTV）提供最高质量的尖端多媒体解决方案。GPU是近些年硬件最重要的应用之一，当年ARM收购Falanx简直是神来之笔，为ARM的做大做强埋下了伏笔。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192146348.png" alt="img" /></p>
<p>​    Mali 嵌入式图形 IP 设计用于提高能源效率和解决性能问题，包括世界上最小的 GPU、完整多核可扩展性（最高可达 1080p）、用于可视计算的 GPU 的通用计算 (GPGPU) 以及多用途应用程序。所有 Mali GPU 都受预先集成的 Mali 图形驱动程序软件支持。</p>
<p>​    灵活性是要考虑的一个重要因素，支持的业界标准开放式 API 包括OpenVG、OpenGL ES、OpenCL以及DirectX®。这些是ARM成功的基础。</p>
<p>​    ARM在芯片架构设计上，有多见的经验积累。高通在通讯领域里，有最好的技术产品。</p>
<h3 id="522-qualcomm"><a class="markdownIt-Anchor" href="#522-qualcomm"></a> 5.2.2、Qualcomm</h3>
<p>​    高通（Qualcomm）的英文是Quality Communications，翻译就是高质量通信。创始人雅各布斯是搞通信工程搞到卫星领域的男人，高通今天“连接万物”的使命从创立那天就奠定了。这是一家超强的公司，其技术延续性与强大性首屈一指。在这个年代的人，都用过高通的产品或者技术。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192146324.png" alt="img" /></p>
<p>​    1985年成立的公司，在1989开始推广CDMA。业界的注意力都在TDMA技术上（后来演变成GSM），高通靠着自己的实验和测试，让CDMA在1993年成为行业标准并和GSM分庭抗礼，这就是高通的水平。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192146383.png" alt="img" /></p>
<p>​    高通研发投入占比常年在收入的20%以上。前30年，高通累计投入了超过440亿美元的研发经费，获得了超过13万项全球专利。</p>
<p>​    2007年，那一年发生了两件改变世界的事情：乔布斯发布iPhone，高通推出了骁龙芯片Snapdragon S1。</p>
<p>​    13年间，高通在移动SoC领域打赢过两次重大战役，第一次让德州仪器、英伟达这些业界大厂退出了移动高端市场。第二次则是让联发科败走中高端。中途还插播过英特尔靠着Atom+补贴，打了几年酱油的历史。这些恐怖成绩的存在，是高通对硬件技术的不懈追求。</p>
<p>​    时间线调回2007年，从那时开始，高通每年的SoC，都会带着新的制程、新的CPU、GPU和调制解调器亮相。高通在调制解调器上的优势，犹如不可逾越的鸿沟，把其它大厂排挤在千里之外。高通把调制解调器分为两种，一种骁龙，一种其它。</p>
<p>​    2007年安卓和Windows Mobile的蛮荒时代，高通MSM7225/7625这些上古的SoC连GPU都已经支持3G了，比国内称为3G元年的2009年还早了整整2年。作为移动技术的顶级元老，这个不让人意外。</p>
<p>​    移动GPU，特别是Adreno系列，在近10几年一直维持着远超摩尔定律的性能增速。这个故事出现得最密集的词，就是“暴涨”二字。在众多公司中，高通像一个工程师一样，坚守硬件设计的阵地。</p>
<p>​    2009年，MSM7227（隶属骁龙S1）搭载的Adreno 200，其浮点性能是2.1GFLOPS。而2012年初的Adreno 225上，浮点性能已经暴涨了10数倍，达到25 GFLOPS。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192146377.png" alt="img" /></p>
<p>​    手机GPU和电脑有一定的区别，手机GPU是整合到SoC内的，电脑可以有独立显卡。高通的adreno的技术部分源自高通从AMD收购的移动GPU部门。</p>
<p>​    高通的GPU市场占有率很高，adreno的表现也足够优秀，支持足够多的新特性，性能比较强，功耗表现也很理想。</p>
<p>​    如果说2015年之前，其他厂商的GPU还算和高通追得很紧的话，那在骁龙820/821的Adreno 530开始，高通就进入了无人之境。或是从绝对性能，或是从能耗比上，拉开了和苹果、三星、海思、联发科的差距。现在唯一能在GPU性能上跟着高通的，就只剩苹果了。但同代产品上，高通总是能在能耗比上压苹果一头。</p>
<p>​    让人疯狂的是，除了能耗比其它公司占优之外，高通的Adreno几乎常年都是用着同代面积最小的GPU芯片面积。三星Exynos 9810上的GPU面积达到了25 mm2，Kirin 970上也有18 mm2，但高通硬生生只用了10 mm2出头的芯片面积，做到了更强的性能更低的能耗。</p>
<p>​    高通在嵌入式技术上的能力是有目共睹的，嵌入式硬件对移动端提供了核心的支持。在图形图像视频硬件技术上，高通道高一丈。、</p>
<p>​    在互联网众多科技公司中，高通算是厚积薄发。在企业发展上，稳健踏实，在芯片领域具有举足轻重的地位。在互联网、人工智能高速发展的今天，高通的硬实力展现出来。</p>
<p>​    苹果感谢高通，高通的存在，阻击了一线科技公司对苹果的围剿。在技术大潮中，高通不断为苹果输送技术的血液，成就了苹果的万亿帝国。</p>
<h3 id="523-apple"><a class="markdownIt-Anchor" href="#523-apple"></a> 5.2.3、Apple</h3>
<p>​    2006年到2013年，AMD和NVIDIA在移动市场竞争中完全失策。丢掉全球移动GPU主要供应商的同时，苹果一步步取代他们并成为最强大、最主流的GPU处理器的生产者。AMD和NVIDIA重蹈Intel的覆辙，丢掉移动GPU市场。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192146543.png" alt="img" /></p>
<p>​    当年Intel未能预料iPhone的潜力，忽视了移动市场。让ARM从一家基础移动处理器生产商一跃成为智能手机和平板处理器的主要生产商，而移动GPU的发展也十分相似。历史不断的给苹果机会，并给与其把握机会的能力。</p>
<p>​    iOS符合用户知觉，视觉美观，图形环境(归功于GPU加速)，这是iPhone销量居高不下的因素。Google完全没有意识到iPhone成功的关键。</p>
<p>​    iPhone对GPU的重视，让iPhone适合游戏。从一开始，游戏是苹果应用商店里的主角，改变了大众对苹果“没有游戏”的印象。iPhone、iPod touch还有2010年的iPad，均作为独立的移动游戏设备颠覆了游戏市场。</p>
<p>​    苹果推出了新的API：Metal。很多优秀的开发者都利用了这套新的API开发新应用。Metal可以让游戏和其他需要图形性能的应用绕过OpenGL，利用苹果64位处理器的强大GPU。苹果在图形处理速度上有很大优势，在移动游戏方面尤其明显；而Metal则让优势进一步增加。</p>
<p>​    苹果把Imagination的人挖了之后自研了GPU，然后把这帮人解散了。这件事情告诉我们，苹果是靠不住的，不知道哪天又会卸磨杀驴。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192146606.png" alt="img" /></p>
<p>​    近些年苹果GPU走向自研道路。未来谁掌握了最强的手机图形性能，谁就可以在市场上获得更大主动权，苹果深谙此道。在进行技术拓展的同时，进一步巩固A系列芯片的性能优势。</p>
<p>​    A11尽管采用的是和骁龙835一样的10nm工艺，整体性能仍然强于骁龙835。GPU相比A10提升了30%，三核心设计，并对沉浸式 3D 游戏和 AR 增强现实进行了优化。这是苹果第一代自研GPU，苹果真正能把自己的GPU完善起来还需要1-2年时间。那时A系列GPU和CPU融合的会更加紧密，在性能和能耗上会有更大的突破。</p>
<p>​    发展的关键时刻，上帝偏爱苹果。面临技术抉择时，苹果往往押宝成功。看似孤傲独行，重大战役到来时，总有友军出现。这些因素的综合，使苹果稳坐科技公司第一宝座。</p>
<h3 id="524-imagination-technologies"><a class="markdownIt-Anchor" href="#524-imagination-technologies"></a> 5.2.4、Imagination Technologies</h3>
<p>​    Imagination Technologies前身是video logic公司。曾经的全球移动 GPU IP龙头，深耕GPU 内核研发和设计，曾是苹果御用图形技术提供商，总部位于英国。2018年被中资背景企业收购，未来发展不明。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192146692.png" alt="img" /></p>
<p>​    Imagination Technologies的核心产品是IMG A系列产品，被设计为可应用于各种场景的GPU，支持自动驾驶、AIoT、数字电视、机顶盒、移动设备等智能应用。</p>
<p>​    IMG A系列在多个市场中授权客户，这点和ARM相像。首批搭载该IP的SoC器件在2020年供货。Imagination Technologies宣布，紫光已获得最新一代神经网络加速器（NNA）PowerVR Series3NX半导体IP授权许可，是面向中高端移动设备市场的系统级芯片。</p>
<p>​    散热条件限制，大多数移动GPU很难提供持续一致的游戏体验，芯片发热其性能下降到不可接受的水平。IMG A系列则以一致的帧速提供持续可靠的性能以及更长游戏时间，避免了因芯片过热导致时钟降频甚至故障等过热情况，IMG A系列有一定的技术优势。</p>
<p>​    IMG A系列采用Imagination的HyperLane技术，独立的硬件控制通道被隔离在内存中，将不同的任务同时提交给GPU，实现GPU多任务处理。</p>
<p>​    通过AI Synergy，GPU在可以提供图形处理功能的同时，使用备用资源支持可编程AI以及固定功能，即高度优化的Imagination神经网络加速器。AI Synergy在最小的芯片面积中提供可编程的人工智能，统一的软件栈可实现灵活出色的性能。</p>
<p>​    PowerVR曾经是苹果“御用”的GPU，性能表现强大、架构先进，不仅在iOS领域，在安卓领域使用也很广泛。当年的一代神U联发科MT6577就使用了大幅度超频的SGX531，性能是低端机里的翘楚。</p>
<p>​    但是，因为较高的授权费用，PVR逐渐失去了安卓市场，客户纷纷转向更廉价的ARM Mali。虽然有联发科Helio X30等的支持，PVR仍然是强弩之末。再加上苹果的抛弃（苹果宣布自研GPU）和挖墙脚，等待Imagination的只有卖身的悲惨命运。</p>
<p>​    GPU技术的选择，是很多芯片公司做强做大的基础。尤其是智能时代的带来，GPU的应用汹涌澎湃，风卷云涌。</p>
<h3 id="525-vivante"><a class="markdownIt-Anchor" href="#525-vivante"></a> 5.2.5、Vivante</h3>
<p>​    Vivante(图芯)曾经是嵌入式图形处理器（GPU）的技术先行者。总部位于加州，为全球移动设备和家庭娱乐市场提供顶级应用，超级处理器解决方案。曾经拥有种类繁多的2D/3D图形处理器。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192146625.png" alt="img" /></p>
<p>​    用硅印模，为业界标准应用程序接口提供强大支持。图芯芯片技术将桌面质量图象和性能带入汽车、手掌中的屏幕。优秀可升级的嵌入式解决方案是可升级的，建立在业界标准之上，且优化功耗、性能和大小。</p>
<p>​    图芯不断增长的产品系列，与全球多家公司成功合作。对移动视觉逼真和高清视觉逼真的核心技术，成为当年顶级移动端图形图像技术供应商。</p>
<p>​    2016年01月08日，图芯被中国芯原收购，产品开始沉默。对OpenGL ES、OpenVG、DirectX的成功支持，是图芯前期成功的核心要素。</p>
<h3 id="526-nvidia-amd-intel"><a class="markdownIt-Anchor" href="#526-nvidia-amd-intel"></a> 5.2.6、NVIDIA、AMD、Intel</h3>
<p>​    移动端图形技术的快速发展，加速了移动时代的到来。当年PC端显示技术的大佬们，变得孤单与寂寞，这能告诉我们什么呢？</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192146638.png" alt="img" /></p>
<p>​    手机gpu不能单卖，需要可用的基带，NVIDIA并没有基带。在不需要基带的移动gpu上，NVIDIA做的很好，例如switch gpu。</p>
<p>​    英伟达开发过手机芯片——Tegra系列，现在Tegra已经谢幕，当年使用Tegra芯片手机风行一时。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192146708.png" alt="img" /></p>
<p>​    英伟达在Tegra4及之前的GPU架构叫GeForce ULP，Tegra4号称“72核GPU”，但架构十分老旧，是DX9时代的分离渲染架构。Tegra因为基带芯片问题退出手机市场，后来推出了Tegra K1用上先进的Kepler架构，但是一切都太晚了。</p>
<p>​    NVIDIA现在和可预见的将来都没有手机产品，这是NVIDIA不能接受的。期望有一天，在移动端显示芯片上，上演王者归来。AMD不仅缺少移动GPU，还几乎没有市场份额。Intel在补贴硬件厂商让它们使用Intel产品(造成了每年400亿美元的损失)。</p>
<p>​    世界上影响力最大的两个GPU厂家，AMD和NVIDIA。两个微处理器的发明者Intel和德州仪器，几乎全都被苹果逐出了移动市场。现在市场中只有低端零件厂商、苹果高端、高销量的iOS设备竞争。这令人感叹，苹果跳出了时代的局限性，在桌面端和移动端成为最成功的企业，上帝太偏爱苹果了。</p>
<p>​    当年Nvidia买了Icera，i500之后，折腾SoC，没有下文。15年宣告放弃，现在想用只能外挂基带。黄药师仰天长啸，移动端报国无门。</p>
<p>​    外挂是可以的，DrivePX2上接GPU用PCIE 4x，然后GPU有自己显存，这个不是手机能接受的。如果用CCI，访问内存没有问题，但有其它局限性。Tegra X1后黄总就不用CCI互联了。</p>
<p>​    AMD、INTEL和英伟达道路相似，3D时代雄起，移动时代沉寂，智能时代奋起。每一家公司都有各自的领地。那些成功的跨界，成就了技术的艳遇。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192146815.png" alt="img" /></p>
<p>​    就工艺而言，相对于CPU，GPU技术难度低一些。这也是众多小厂开始向GPU迈进的原因。在移动时代，科技的发展创造机会，很多传统的CPU、GPU大厂由于固守轨道，错过了GPU发展的黄金时代。</p>
<h2 id="53-移动图形库"><a class="markdownIt-Anchor" href="#53-移动图形库"></a> 5.3、移动图形库</h2>
<p>​    移动手机图形接口上，没有桌面端的万马奔腾、百舸争流，整体相对平稳与自然。无论Android还是IOS，都是Linux的内核。所以在移动图形库的选型与发展上，和桌面端图形库有一个很好的承接。OpenGL桌面端不可撼动的地位，移动端，OpenGL的简化版OpenGL ES应运而生。</p>
<h3 id="531-opengl-es"><a class="markdownIt-Anchor" href="#531-opengl-es"></a> 5.3.1、OpenGL ES</h3>
<p>​    OpenGL ES 是 OpenGL三维图形 API 的子集，针对手机、PDA和游戏主机等嵌入式设备而设计。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192146838.png" alt="img" /></p>
<p>​    OpenGL ES 是 OpenGL 裁剪定制而来，去除了复杂图元等非绝对必要的特性。OpenGL ES 2.0 参照 OpenGL 2.0 规范定义。</p>
<p>​    OpenGL ES 免授权并且跨平台，强大的2D和3D图形应用程序接口API，针对多种嵌入式系统专门设计，包括控制台、移动电话、手持设备、家电设备和汽车。由精心定义的桌面OpenGL子集组成，实现了软件与图形加速间灵活强大的底层交互接口。</p>
<h4 id="5311-opengl-es-版本与功能"><a class="markdownIt-Anchor" href="#5311-opengl-es-版本与功能"></a> 5.3.1.1、OpenGL ES 版本与功能</h4>
<p>​    OpenGL ES包含浮点运算和顶点运算，及EGL便携设备的本地视窗系统规范。</p>
<p>​    OpenGL ES 1.X 面向功能固定的硬件所设计，并提供加速支持、图形质量及性能标准，也就是固定管线编程。OpenGL ES 2.X 提供包括遮盖器技术在内的全可编程3D图形算法。OpenGL ES 3.x则在可编程管线上进行了增强。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192146870.png" alt="img" /></p>
<p>​    OpenGL ES提高了不同消费电子设备的3D图形渲染速度，在嵌入式系统上实现了全面可编程的3D图形。</p>
<p>​    OpenGL ES工作组在六个月内更新OpenGL ES采纳者项目，提供兼容性测试，并提供相关源代码。目前 Corporation、Imagination、NVIDIA、高通、ZiiLABS等都表达了对OpenGL ES 3.0的大力支持。最新GPU就支持OpenGL ES 3.0。</p>
<h4 id="5312-opengl-es-30新功能"><a class="markdownIt-Anchor" href="#5312-opengl-es-30新功能"></a> 5.3.1.2、OpenGL ES 3.0新功能</h4>
<p>​    1、渲染管线多重增强，实现先进视觉效果的加速，包括遮挡查询(Occlusion Query)、变缓反馈(Transform Feedback)、实例渲染(Instanced Rendering)、更多渲染目标支持。</p>
<p>​    2、高质量ETC2/EAC纹理压缩格式成为一项标准功能，不同平台上不再需要不同的纹理集。</p>
<p>​    3、新版GLSL ES 3.0着色语言，全面支持整数和32位浮点操作。</p>
<p>​    4、纹理功能增强，支持浮点纹理、3D纹理、深度纹理、顶点纹理、NPOT纹理、R/RG单双通道纹理、不可变纹理、2D阵列纹理、无二次幂限制纹理、阴影对比、调配(swizzle)、LOD与mip level clamps、无缝立方体贴图、采样对象、纹理MSAA抗锯齿渲染器。</p>
<p>​    5、更多精确尺寸纹理和渲染缓冲格式，便携移动应用更简单。</p>
<h4 id="5313-opengl-es-示例代码"><a class="markdownIt-Anchor" href="#5313-opengl-es-示例代码"></a> 5.3.1.3、OpenGL ES 示例代码</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MainActivity extends Activity &#123;</span><br><span class="line">       private final int CONTEXT_CLIENT_VERSION = 3;</span><br><span class="line">       private GLSurfaceView mGLSurfaceView;</span><br><span class="line"></span><br><span class="line">       @Override</span><br><span class="line">       protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">              super.onCreate(savedInstanceState);</span><br><span class="line">              mGLSurfaceView = new GLSurfaceView(this);</span><br><span class="line">              if (detectOpenGLES30()) &#123;</span><br><span class="line">              mGLSurfaceView.setEGLContextClientVersion(CONTEXT_CLIENT_VERSION);</span><br><span class="line">                     mGLSurfaceView.setRenderer(new RendererJNI(this));</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                     Log.e(&quot;opengles30&quot;, &quot;OpenGL ES 3.0 not supported on device.  Exiting...&quot;);</span><br><span class="line">                     finish();</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              setContentView(mGLSurfaceView);</span><br><span class="line">       &#125;</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">       @Override</span><br><span class="line">       protected void onResume() &#123;</span><br><span class="line">              super.onResume();</span><br><span class="line">              mGLSurfaceView.onResume();</span><br><span class="line">       &#125;</span><br><span class="line">      </span><br><span class="line">       @Override</span><br><span class="line">       protected void onPause() &#123;</span><br><span class="line">              super.onPause();</span><br><span class="line">              mGLSurfaceView.onPause();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       private boolean detectOpenGLES30() &#123;</span><br><span class="line">              ActivityManager am = (ActivityManager)getSystemService(Context.ACTIVITY_SERVICE);</span><br><span class="line">              ConfigurationInfo info = am.getDeviceConfigurationInfo();        </span><br><span class="line">              return (info.reqGlEsVersion &gt;= 0x30000);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="532-其它"><a class="markdownIt-Anchor" href="#532-其它"></a> 5.3.2、其它</h3>
<p>​    Vulkan和Metal不仅是3D时代的图形框架，也是移动领域的核心图形图像框架。关于Metal和Vulkan的知识，参考前面主题。</p>
<h2 id="54-启示"><a class="markdownIt-Anchor" href="#54-启示"></a> 5.4、启示</h2>
<p>​    梳理这段历史时，我们发现，信息科技的核心是芯片，芯片技术被国外巨头垄断。偶尔有中资公司的影子，大多昙花一现。芯片技术是百年大计，很难实现弯道超车。</p>
<p>​    在计算科技白皮书里，大多是欧美科技的影子，东方公司比重较低。这注定了科技赶超是一个长期的过程。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192146955.png" alt="img" /></p>
<p>​    在软件规范制定上，面临同样的情况。未来几十年，在软件规范上，我们埋头苦干，奋勇向前。</p>
<p>​    通讯核心技术上，依然有很大不足。但在市场应用上，我们拔得头筹。在移动商务、移动支付、短视频应用上，捷报频传。</p>
<p>​    美摄科技坚持音视频核心技术研究，底层硬件技术研发。在技术接口，产业应用上乘风破浪，激流勇进。在祖国图形图像技术建设上，做出应有的贡献。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192146972.png" alt="img" /></p>
<p>​    缘聚缘散，时空变换。1978年之后，科技的春天再次到来了。从基础芯片，软件规范，到行业应用。我们流年笑掷，坚信未来可期。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192146007.png" alt="img" /></p>
<h1 id="6-人工智能时代"><a class="markdownIt-Anchor" href="#6-人工智能时代"></a> 6 人工智能时代</h1>
<h2 id="61-人工智能发展历史"><a class="markdownIt-Anchor" href="#61-人工智能发展历史"></a> 6.1、人工智能发展历史</h2>
<p>​    人工智能是科技永久的话题，计算机本身是一个工具，人工智能发展史上，计算机的出现，是人工智能发展的伟大节点。21世纪仅仅是人工智能的开端，人工智能的发展方兴未艾。</p>
<p>​    早期的人工智能偏重于理论，西方的神学大师、哲学先驱、数学巨匠一起，为人工智能奠定了文化基础，下面我们开始与大师的对话。</p>
<h3 id="611-大事记"><a class="markdownIt-Anchor" href="#611-大事记"></a> 6.1.1、大事记</h3>
<p>​    200年前，巴贝奇，一个英国数学家，设计了第一台计算二次多项式的计算机器，叫做差分机，摇动手柄，计算出x*x+a式子的值。当时的东方，大清皇朝，即将面临血色的辉煌。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192144726.png" alt="img" /></p>
<p>​    1956年，几个科学家，聚会在美国汉诺思小镇宁静的达特茅斯学院，利用暑假的两个月进行封闭式的讨论研究，主题是“达特茅斯夏季人工智能研究计划”。首次提出“人工智能（Artificial Intelligence，简称AI）”这一概念，人工智能学科应运而生了。当年简单的两个单词，成为今天科技的主旋律。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192144719.png" alt="img" /></p>
<p>​    1959年，塞缪尔讲到，计算机可以比人更好地编程，进行国际象棋游戏时，创造了“机器学习”(Machine Learning)一词。上承接人工智能，下承接自然语言与机器视觉。编程邂逅人工智能，人工智能青梅竹马的年代开始了。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192144994.png" alt="img" /></p>
<p>​    1965年，Joseph Weizenbaum，开发ELIZA，一个交互式计算机程序，用英语与人交谈。Weizenbaum有一个目标，证明人工智能思维与人类思维之间的沟通是肤浅的。这是第一个通过图灵测试的软件程序，“对话就是模式匹配”，代表着自然语言技术的开端。60年后的今天，自然语言技术应用广泛。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192144980.png" alt="img" /></p>
<p>​    1978年，卡耐基梅隆大学，开发自动选配计算机配件的程序XCON，1980年投入工厂使用，包含2500条规则，后续几年处理了超过80000条订单，准确度超过95%，每年节省超过2500万美元。这是早期的专家系统，开始于生产应用。我们今天进行自动购物时，很少有人知道半个世纪以前，在大洋彼岸已被广泛应用。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192144020.png" alt="img" /></p>
<p>​    1979年，斯坦福大学，制造了无人驾驶车Stanford Cart，这是汽车的第一次，依靠视觉感应器，在没有人工干预的情况下，自主穿过散乱扔着椅子的房间，需要几个小时才能完成。当年的视觉感应器，就是今天的机器视觉，当年的无人工干预，就是今天的自动驾驶。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192144044.png" alt="img" /></p>
<p>​    1982年，英国科学家霍普菲尔德几乎同时与杰弗里·辛顿，发现了具有学习能力的神经网络算法，沉寂10年之后，神经网络有了新的进展。从此神经网络高速发展，90年代开始商业化，用于文字图像识别和语音识别。今天的神经网络工程师们，鲜有人知道这两位大师的名字。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192144071.png" alt="img" /></p>
<p>​    1986年，梅赛德斯 - 奔驰，Ernst Dickmanns的指导下建造并发布了一辆配备摄像头和传感器的无人驾驶厢式货车。能够在没有人类驾驶员的道路上行驶高达55英里/小时。当年的神奇幻想，今天的美好现实。Ernst Dickmanns，成为了自动驾驶的鼻祖，当年的奔驰货车，也称了自动驾驶的先驱。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192144102.png" alt="img" /></p>
<p>​    1998年，Dave Hampton和Caleb Chung。发明了Furby，第一款玩具机器人。2000年前后，日本科技公司凭借着较好的工业基础，在早期智能时代占据着不可或缺的位置。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192144234.png" alt="img" /></p>
<p>​    1999年，索尼。推出AIBO，价值2000美元的机器人宠物狗，与环境，所有者和其它AIBO的互动来“学习”。功能包括能解和响应100多个语音命令并与人类所有者进行对话。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192144268.png" alt="img" /></p>
<p>​    2002年，Roomba，自动机器人真空吸尘器，避开障碍物进行清洁。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192144255.png" alt="img" /></p>
<p>​    2006年，杰弗里辛顿。出版《Learning Multiple Layers of Representation》，奠定神经网络的全新架构，今天人工智能的核心技术。短短10年间，数学冰山背后，春风化雨，夏露凝香。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192144331.png" alt="img" /></p>
<p>​    2007年，Fei Fei Li。出生于北京，美国国家工程院院士，Twitter独立董事。组建ImageNet，一个注释图像数据库，帮助物体识别。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192144320.png" alt="img" /></p>
<p>​    2009年，吴恩达，使用图形处理器（GPU而不是CPU）进行大规模无监督式机器学习。取得了惊人的成就，向世人展示了一个超强的神经网络，它在自主观看千万张图片之后，识别小猫的图像。这是历史上在没有人工干预下，自主强化学习的里程碑式事件。向世人展示了无监督学习的价值，自此AI识别，温柔了岁月，惊艳了时光。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192144408.png" alt="img" /></p>
<p>​    2011年，Watson，电视游戏中。回答IBM创建的计算机自然语言问题，击败了两个前Jeopardy冠军，肯詹宁斯和布拉德鲁特。自然语言处理逐步开始步入人类生活。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192144475.png" alt="img" /></p>
<p>​    2015-2017，AlphaGo，谷歌Go的计算机程序，击败了各种（人类）冠军。当时名噪一时，为人工智能做了最好的技术营销。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192144464.png" alt="img" /></p>
<p>​    2015年，谷歌。发力自动驾驶，Waymo今天是自动驾驶排行第一名。当年满头青丝的Ernst Dickmanns，今天已是白发苍苍。下图右为Ernst Dickmanns。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192144489.png" alt="img" /></p>
<p>​    2015 年，沈向洋，微软亚洲研究院视觉计算组开发的基于深度卷积神经网络（CNN）的计算机视觉系统，在 ImageNet1000 这项视觉识别挑战中第一个超越人类视觉能力的计算机系统。2019年，沈向洋离开微软，成为清华大学双聘教授。这位来自南京，人工智能国际巨人，把中国的人工智能技术推向一个新的高度。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192144595.png" alt="img" /></p>
<p>​    2016，微软。组建“微软人工智能与研究事业部”(MicrosoftAI and Research Group)。人工智能是微软的梦想，1991年，盖茨先生就做过人工智能的预言。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192144600.png" alt="img" /></p>
<p>​        人工智能在模拟、仿真、游戏方面也有着广泛的应用，国内2015年以前，仿真领域是人工智能最核心的领域，以后逐渐向其它领域过渡。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192144674.png" alt="img" /></p>
<h3 id="612-启示"><a class="markdownIt-Anchor" href="#612-启示"></a> 6.1.2、启示</h3>
<p>​    2020年前后，人工智能迎来了高速发展期，2019年，人工智能元年。大数据、数据挖掘、机器学习等理论百花齐放，人工智能的时代终于到来了。</p>
<p>​    凝视这段历史时，早期的人工智能偏重于模拟仿真，没有实时性。摄像与视频技术的进步，人工智能向实时性发展，实时性有着重要意义，开启了人工智能社会应用新篇章。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192144706.png" alt="img" /></p>
<p>​    人工智能代表着大数据量的到来，没有大的数据量无法进行有效的分析，数据处理是人工智能的核心要素，数据处理今天由并行计算来完成。</p>
<p>​    大的数据量不仅对算法有要求，对算力也是一个考验。人工智能需要巨大的算力，没有算力谈不上人工智能。目前在人工智能初级阶段，科技公司算力主要靠CPU、GPU。大的科技公司靠超算中心、VPG、APU、TPU、NPU等来解决。大数据的超强能力，为人工智能的算力提供强有力的支持。</p>
<p>​    人工智能目前阶段两个主要表现，第一个是自然语言处理，第二个是机器视觉。自然文字符号和音视频是人类信息两个重要的载体。</p>
<p>​    机器视觉，很多年前，国外有一些公司在做，仅限于一些专业领域。90年代进入国内后，中科院物理所引进国外专业相机，结合国内应用，开发出相关检测系统。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192144737.png" alt="img" /></p>
<p>​    新的硬件与显示标准对智能视觉处理有着很大推动，随着并行计算的发展。可以坚信的是，视觉智能是未来人工智能发展的重要方向。</p>
<h2 id="62-硬件发展"><a class="markdownIt-Anchor" href="#62-硬件发展"></a> 6.2、硬件发展</h2>
<p>​    人工智能时代需要硬件的支持，不仅仅是外设，更是数据计算。在此需求下，不仅外设的繁荣，更是芯片技术的爆发。</p>
<p>​    芯片技术为智能处理提供了基础，在数据阶段处理，为CPU、GPU提供物理计算基础，在此基础上，有了并行计算架构。无论云平台、大数据、机器学习、区块链无一不是建立在并行计算的基础上。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192147639.jpeg" alt="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3453621467,281658853&amp;fm=26&amp;gp=0.jpg" /></p>
<p>​    60年代，中国挥剑斩芯片，丧失发展先机。今天，倾国之力，十万亿级投资，发展芯片，留给我们多少启示。</p>
<p>​    下面通过芯片、相机传感器硬件角度讲述，其它层面参考相关资料。智能时代的机器视觉视频来自于相机，考虑了相机因素。</p>
<h3 id="621-aiarvr芯片"><a class="markdownIt-Anchor" href="#621-aiarvr芯片"></a> 6.2.1、AI/AR/VR芯片</h3>
<p>​    人工智能首先是硬件技术的进步，硬件技术的核心是芯片。芯片技术是集成电路的高度封装。芯片技术是半导体技术的体现，整个生产过程与产业链较长，需要多家公司合作才能完成。</p>
<p>​    顶级科技公司钟情于芯片研发，包括AI/AR/VR芯片研发。微软、特斯拉、英伟达、facebook、谷歌、NXP、华为等。人工智能时代的到来，芯片的多样性与功能性都有很大变化。技术的风起云涌，为芯片制造提供了契机。</p>
<p>​    人工智能时代，AI/AR/VR芯片快速发展，为人工智能提供澎湃动力支持。芯片技术是人工智能后续阶段的关键技术，没有芯片技术的进步，人工智能将会举步不前。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192147689.png" alt="img" /></p>
<h3 id="622-相机芯片"><a class="markdownIt-Anchor" href="#622-相机芯片"></a> 6.2.2、相机芯片</h3>
<p>​    相机，记录着社会文明。相机，留存着社会点滴。相机，助力着生产生活。相机，是机器视觉第一步的表达。</p>
<p>​    整个视频处理流程，相机是前端，机器视觉部分处理在前端实现。学习机器视觉，有必要对相机简单了解。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192147646.png" alt="img" /></p>
<p>​        对于工业视频而言，相机是重中之重，相机技术有很多分类。本部分通过传统相机和工业相机进行讲述。</p>
<h4 id="6221-传统相机"><a class="markdownIt-Anchor" href="#6221-传统相机"></a> 6.2.2.1、传统相机</h4>
<p>​    相机技术发展多年，主要是图像传感器的发展，目前分为CCD和CMOS两种。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192147725.png" alt="img" /></p>
<h5 id="62211-ccd"><a class="markdownIt-Anchor" href="#62211-ccd"></a> 6.2.2.1.1、CCD</h5>
<p>​    CCD芯片是将光信号转换成电信号的芯片，在数码相机、摄像机中，光信号转换成电信号，然后处理，编程数码照片文件。</p>
<p>​    CCD芯片，使用高感光度的半导体材料制成，把光线转变成电荷，通过模数转换器芯片转换成数字信号，数字信号经过压缩后由相机内部的存储设备保存，然后把数据传输给计算机，借助于计算机的处理手段，根据需要和想像来修改图像。</p>
<p>​    CCD芯片由感光单位组成，通常以百万像素为单位。CCD表面受到光线照射时，每个感光单位会将电荷反映在组件上，所有的感光单位所产生的信号加在一起，构成了一幅完整的画面。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192147694.png" alt="img" /></p>
<p>​    CCD图像传感器是按一定规律排列的mos（金属—氧化物—半导体）电容器组成的阵列，在p型或n型硅衬底上生长一层很薄（约120nm）的二氧化硅，再在二氧化硅薄层上依次序沉积金属或掺杂多晶硅电极（栅极），形成规则的mos电容器阵列，再加上两端的输入及输出二极管就构成了CCD芯片。</p>
<h5 id="62212-cmos"><a class="markdownIt-Anchor" href="#62212-cmos"></a> 6.2.2.1.2、CMOS</h5>
<p>​    CMOS相机采用CMOS图像传感器的设备。CMOS一般应用在普通数码设备中，CCD一般应用高档数码设备中，CCD比CMOS单位成像的效果要好。CCD镜头比CMOS分辨率要高。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192147761.png" alt="img" /></p>
<p>​    CCD和CMOS在制造上的主要区别是CCD是集成在半导体单晶材料上，而CMOS是集成在被称做金属氧化物的半导体材料上。CCD只有少数几个厂商索尼、松下等掌握这种技术。CCD制造工艺较复杂，采用CCD的摄像头价格昂贵。</p>
<p>​    相同像素下CCD的成像通透性、明锐度都很好，色彩还原、曝光可以保证基本准确。CMOS由于低廉的价格以及高度的整合性，因此在摄像头领域还是得到了广泛的应用。</p>
<p>​    CMOS的信号是以点为单位的电荷信号，而CCD是以行为单位的电流信号，前者更为敏感，速度也更快，更为省电。高级的CMOS并不比一般CCD差，CMOS工艺还不是十分成熟，普通的CMOS一般分辨率低而成像较差。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192147893.png" alt="img" /></p>
<p>​    CCD或CMOS，基本上都是利用矽感光二极体进行光与电的转换。光线越强、电力越强；反之，光线越弱、电力也越弱的道理，将光影像转换为电子数字信号。</p>
<p>​    CCD每曝光一次，在快门关闭后进行像素转移处理，将每一行中每一个像素（pixel）的电荷信号依序传入“缓冲器”中，由底端的线路引导输出至CCD旁的放大器进行放大，再串联ADC输出；相对地，CMOS的设计中每个像素旁就直接连着ADC（放大兼类比数字信号转换器），信号直接放大并转换成数字信号。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192147035.png" alt="img" /></p>
<p>​    CCD的充分保持信号传输时不失真，透过每一个像素集合至单一放大器上再做统一处理，保持资料的完整性；CMOS制程简单，没有专属通道，必须先放大再整合各个像素资料。</p>
<p>​    由于CMOS每个像素包含了放大器与A/D转换电路，过多的额外设备压缩单一像素的感光区域的表面积，因此相同像素下，同样大小之感光器尺寸，CMOS的感光度会低于CCD。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192147982.png" alt="img" /></p>
<p>​    CMOS应用半导体工业常用的MOS制程，一次整合全部周边设施于单晶片中，节省加工晶片所需负担的成本和良率的损失；CCD采用电荷传递的方式输出资讯，必须另辟传输通道，如果通道中有一个像素故障（Fail），就会导致一整排的讯号壅塞，无法传递。</p>
<p>​    CMOS每个感光二极体旁都搭配一个ADC放大器，如果以百万像素计，需要百万个以上的ADC放大器，虽然是统一制造下的产品，每个放大器或多或少都有些微的差异存在，很难达到同步放大的效果，对比单一个放大器的CCD，CMOS最终计算出的噪点就比较多。</p>
<p>​    市场销售的数码摄像头中以CMOS感光器件的为主。在采用CMOS为感光元器件的产品中，采用影像光源自动增益补强技术，自动亮度、白平衡控制技术，色饱和度、对比度、边缘增强以及伽马矫正等先进的影像控制技术，完全可以达到与CCD摄像头相媲美的效果。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192147015.png" alt="img" /></p>
<p>​    尽管CCD在影像品质等方面均优于CMOS，不可否认的CMOS具有低成本、低耗电以及高整合度的特性。CMOS的低成本和稳定供货，所以广泛使用，制造技术不断地改良更新，使得CCD与CMOS两者的差异逐渐缩小。</p>
<h4 id="6222-工业相机"><a class="markdownIt-Anchor" href="#6222-工业相机"></a> 6.2.2.2、工业相机</h4>
<p>​    工业相机是机器视觉系统中的关键组件，本质功能就是将光信号转变成有序的电信号。选择合适的相机也是机器视觉系统设计中的重要环节，相机的选择不仅直接决定所采集到的图像分辨率、图像质量等，同时与整个视觉系统的运行模式直接相关。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192147005.jpeg" alt="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1608566505281&amp;di=7b7d2283ab97792c4f33165fd0252355&amp;imgtype=0&amp;src=http%3A%2F%2Fa.img.youboy.com%2Fcoimg%2F2010%2F4%2F16%2Fg3_2764572.jpg" /></p>
<p>​    工业相机俗称摄像机，相比于传统的民用相机（摄像机）而言，它具有高的图像稳定性、高传输能力和高抗干扰能力等，市面上工业相机大多是基于CCD（Charge Coupled Device）或CMOS（Complementary Metal Oxide Semiconductor）芯片的相机。</p>
<p>​    CCD是目前机器视觉常用的图像传感器。它集光电转换及电荷存贮、电荷转移、信号读取于一体，是典型的固体成像器件。突出特点是以电荷作为信号，不同于其它器件是以电流或者电压为信号。通过光电转换形成电荷包，而后在驱动脉冲的作用下转移、放大输出图像信号。典型的CCD相机由光学镜头、时序及同步信号发生器、垂直驱动器、模拟/数字信号处理电路组成。CCD作为一种功能器件，与真空管相比，具有无灼伤、无滞后、低电压工作、低功耗等优点。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192147051.png" alt="img" /></p>
<p>​    CMOS图像传感器的开发最早出现在20世纪70 年代初，90 年代初期，超大规模集成电路 (VLSI)制造工艺技术的发展，CMOS图像传感器得到迅速发展。CMOS图像传感器将光敏元阵列、图像信号放大器、信号读取电路、模数转换电路、图像信号处理器及控制器集成在一块芯片上，还具有局部像素的编程随机访问的优点。CMOS图像传感器以其良好的集成性、低功耗、高速传输和宽动态范围等特点得到了广泛的应用。</p>
<p>​    工业视觉离不开相机的支持，在一些高端领域，必须用工业相机来处理。工业相机是民用相机的增强版，本质依然采用CCD或者CMOS技术。相对民用相机，用更高的软硬件配置，更大的功耗获得更好的质量。</p>
<h3 id="6223-总结"><a class="markdownIt-Anchor" href="#6223-总结"></a> 6.2.2.3、总结</h3>
<p>​    人工智能图像处理，工业上，对高清晰照片进行处理。其它领域，是消费级的处理。技术的进步，高清晰相机在消费级市场应用，高清照片的消费级技术处理将会显现。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192147242.png" alt="img" /></p>
<p>​    工业视频的处理靠高端硬件实现，消费级高清视频的处理，还需要新的技术框架支持。在未来几年将有新的机会出现。</p>
<h2 id="63-机器视觉"><a class="markdownIt-Anchor" href="#63-机器视觉"></a> 6.3、机器视觉</h2>
<p>​    机器视觉是人工智能快速发展的一个分支，也是智能视觉重要的一部分。机器视觉就是用机器代替人眼来做测量和判断。</p>
<p>​    机器视觉系统通过机器视觉产品(即图像摄取装置，分CMOS和CCD两种)将被摄取目标转换成图像信号，传送给专用的图像处理系统，得到被摄目标的形态信息。根据像素分布和亮度、颜色等信息，转变成数字化信号;图像系统对这些信号进行各种运算来抽取目标的特征，进而根据判别的结果控制现场的设备动作。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192147722.png" alt="img" /></p>
<p>​    机器视觉是一项综合技术，包括图像处理、机械工程技术、控制、电光源照明、光学成像、传感器、模拟与数字视频技术、计算机软硬件技术(图像增强和分析算法、图像卡、 I/O卡等)。</p>
<p>​    很多年前，机器视觉就在广泛应用。目前，在深度和广度方面拓展。未来10年，机器视觉对人类生活，将会有革命性的变化。</p>
<p>​    机器视觉是一门技术，机器视觉系统是技术的应用，下一主题，我们讲述机器视觉系统。</p>
<h2 id="64-机器视觉系统"><a class="markdownIt-Anchor" href="#64-机器视觉系统"></a> 6.4、机器视觉系统</h2>
<p>​    一个典型的机器视觉应用系统包括图像捕捉、光源系统、图像数字化模块、数字图像处理模块、智能判断决策模块和机械控制执行模块。</p>
<p>​    机器视觉系统基本的特点就是提高生产的灵活性和自动化程度。在不适于人工作业的危险工作环境或者人工视觉难以满足要求的场合，用机器视觉来替代人工视觉。在大批量重复性工业生产中，用机器视觉检测方法提高生产的效率和自动化程度。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192147712.png" alt="img" /></p>
<p>​    机器视觉系统提高生产的柔性和自动化程度。在一些不适合人工作业的危险工作环境或人工视觉难以满足要求的场合，常用机器视觉来替代人工视觉；同时在大批量工业生产过程中，用人工视觉检查产品质量效率低且精度不高，用机器视觉检测方法大大提高生产效率和自动化程度。机器视觉易于实现信息集成，是实现计算机集成制造的基础技术之一。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192147680.jpeg" alt="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1608562528401&amp;di=e64ba214572a7b1d069c2c1c0522dc5c&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.mv186.com%2Fuploads%2Fimage%2F20150902%2F1441176652869171.png" /></p>
<p>​    工业机器视觉系统包括：光源、镜头（定焦镜头、变倍镜头、远心镜头、显微镜头）、 相机（包括CCD相机和COMS相机）、图像处理单元（或图像捕获卡）、图像处理软件、监视器、通讯 / 输入输出单元等。</p>
<p>​    机器视觉检测系统采用CCD照相机将被检测的目标转换成图像信号，传送给专用的图像处理系统，依据像素分布和亮度、颜色等信息，转变成数字化信号，图像处理系统对这些信号进行各种运算来抽取目标的特征，如面积、数量、位置、长度，再根据预设的允许度和其它条件输出结果，包括尺寸、角度、个数、合格/不合格、有/无等，实现自动识别功能。</p>
<p>​    目前，机器视觉系统主要应用在工业生产领域，互联网应用正在兴起，在居家生活应用上方兴未艾。</p>
<h2 id="65-计算机视觉"><a class="markdownIt-Anchor" href="#65-计算机视觉"></a> 6.5、计算机视觉</h2>
<p>​    计算机视觉是研究如何使机器“看”的科学，用摄影机和电脑代替人眼对目标进行识别、跟踪和测量等，并进一步做图形处理，使电脑处理更适合人眼观察或传送给仪器检测的图像。计算机视觉可以看作，如何使人工系统从图像或多维数据中“感知”的科学。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192147700.png" alt="img" /></p>
<p>​    计算机视觉是一门关于如何运用照相机和计算机来获取我们所需的，被拍摄对象的数据与信息的学问。形象地说，就是给计算机安装上眼睛（照相机）和大脑（算法），让计算机能够感知环境。</p>
<p>​    计算机视觉既是工程领域，也是科学领域中重要研究领域。计算机视觉是一门综合性的学科，吸引了众多研究者参加到对它的研究之中。包括计算机科学和工程、信号处理、物理学、应用数学和统计学，神经生理学和认知科学等。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192147672.png" alt="img" /></p>
<p>​    计算机视觉开始于60年代初，80年代取得很多重大进展。计算机视觉与人类视觉密切相关，对人类视觉有正确的认识对计算机视觉的研究非常有益。</p>
<p>​    计算机视觉用各种成像系统代替视觉器官作为输入敏感手段，由计算机来代替大脑完成处理和解释。计算机视觉的研究目标就是使计算机象人那样通过视觉观察和理解世界，具有自主适应环境的能力。</p>
<p>​    计算机视觉根据计算机系统的特点进行视觉信息处理。迄今为止人类视觉系统，是功能最强大和完善的视觉系统。对人类视觉处理机制的研究将给计算机视觉的研究提供启发和指导。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192147682.jpeg" alt="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic1.zhimg.com%2Fv2-5f3ab881181f49338b21dfa143f8bffc_b.jpg&amp;refer=http%3A%2F%2Fpic1.zhimg.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1615908110&amp;t=0cc3aa72b4535c39f9657f6823f990b2" /></p>
<p>​    计算机信息处理的方法是研究人类视觉的机理，建立人类视觉计算理论。称为计算视觉（Computational Vision）。计算视觉是计算机视觉中的一个研究领域。</p>
<p>​    计算机视觉和机器视觉的定义有很多认知的区别，很多文献中有不同的论述，笔者认为，两者都是人工智能的分支，侧重点不一样。在今天学术领域，都没有严格的定义。</p>
<h2 id="66-智能时代软件发展"><a class="markdownIt-Anchor" href="#66-智能时代软件发展"></a> 6.6、智能时代软件发展</h2>
<p>​    天下事物发展一分为二，软硬件技术也不例外，第二次工业革命电磁理论，石破天惊，在后期推动了计算机技术的进步。为第四次科技革命的发展做好了硬件的铺垫。在硬件大力发展背后，智能时代软件的号角吹响了。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148933.png" alt="img" /></p>
<p>​    人类在智能科技方面的探索没有终点，也很难找到起点。人工智能探索过程中，软件方面有着天翻地覆的变化，下面从编程语言、运算平台、机器学习库等方面分别进行阐述。</p>
<h3 id="661-人工智能编程语言"><a class="markdownIt-Anchor" href="#661-人工智能编程语言"></a> 6.6.1、人工智能编程语言</h3>
<p>​    人工智能编程语言是一类适应于人工智能和知识工程领域的、具有符号处理和逻辑推理能力的计算机程序设计语言。能够用它来编写程序求解非数值计算、知识处理、推理、规划、决策等具有智能的各种复杂问题。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148892.jpeg" alt="https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=1385822726,935678861&amp;fm=26&amp;gp=0.jpg" /></p>
<p>​    事实上，已经有多种对应于各种不同知识表示方式的人工智能编程语言。按所对应的知识表示方式不同。可以区分为以下几类：</p>
<p>​    A、对应于产生式规则知识表示的语言。例如，由美国卡耐基·梅农大学的C·L·福基（C。L。Forgy）等人1977年开发的OPS(official production system)，当时用它来为DEC公司开发了一个解决VAX计算机系统配置问题的专家系统X1/XCON。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148938.png" alt="img" /></p>
<p>​    B、对应于逻辑公式知识表示的语言。一种已广为应用的逻辑语言就是PROLOG。1970年由法国马塞大学的 A。柯迈豪埃(Alain Colmerauer)所开发的。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148894.png" alt="img" /></p>
<p>​    C、对应于框架或语义网知识表示的语言。这是“面向对象”的(object-oriented)语言。其中一个有代表性的语种就是Smalltalk。1980年首创，后来版本不断更新。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148927.png" alt="img" /></p>
<p>​    D、对应于函数知识表示或函数式程序设计风格的语言的列表处理语言。函数式编程语言，理论上很完美，建立在坚实的数学基础之上，对于人工智能问题，在常规计算机上很难实现。20世纪50年代末，麻省理工学院的约翰·麦卡锡等人首先开发的列表处理语言LISP（LISt Processing）迄今仍然广泛用于编写人工智能应用程序，特别是用于开发专家系统。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148886.jpeg" alt="https://ss0.baidu.com/7Po3dSag_xI4khGko9WTAnF6hhy/baike/w%3D268%3Bg%3D0/sign=cd791b07708b4710ce2ffacafbf5a4c0/1b4c510fd9f9d72a1781f33bd62a2834349bbb2b.jpg" /></p>
<p>​    人工智能编程语言有共同特点，语言都面向要解决的问题、结合知识表示、完全脱离当代计算机的诺依曼结构特性而独立设计的；处于比面向过程的高级编程语言更高的抽象层次。</p>
<p>​    用这些语言编写的程序，在现代计算机环境中，无论是解释或编译执行，往往效率很低。尤其程序规模很大、复杂时，浪费大量系统资源，系统性能往往会下降到难以容忍的地步。</p>
<h4 id="6611-lisp"><a class="markdownIt-Anchor" href="#6611-lisp"></a> 6.6.1.1、LISP</h4>
<p>​    20世纪50年代后期，麻省理工学院的John McCarthy就开始了人工智能的研究，当时致力于设计一个用表处理的递归系统，在20世纪60年代初研制出了LISP语言。</p>
<p>​    LISP语言是一个用于处理符号表达式的、相当简单的函数式程序设计语言，以数学中的函数与函数作用的概念作为设计原理，奠定了函数式语言的基础。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148104.png" alt="img" /></p>
<p>​    LISP语言是完全非von Neumann风格的，它没有使用ALGOL60等语言中所采用的可修改变量、赋值语句、转向语句等von Neumann结构语言中的有关概念。LISP程序与其数据结构采用了相同的结构形式与处理方式。</p>
<p>​    LISP方便地编写解释程序。LISP语言除了用s一表达式来统一处理数据与程序外，还引入了前缀运算符表示法、递归数据结构、递归控制结构以及新的条件表达式形式。</p>
<h4 id="6612-prolog"><a class="markdownIt-Anchor" href="#6612-prolog"></a> 6.6.1.2、Prolog</h4>
<p>​    Prolog(Programming in Logic)是一种逻辑编程语言，建立在逻辑学的理论基础之上，最初被运用于自然语言等研究领域。现已广泛应用在人工智能的研究中，可以用来建造专家系统、自然语言理解、智能知识库等。</p>
<p>​    对一些应用程序的编写很有帮助，能够比其它语言更快速开发程序，Prolog的编程方法更像是使用逻辑语言来描述程序。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148111.png" alt="img" /></p>
<p>​    Prolog具有鲜明的逻辑编程语言特色，包括：没有特定的运行顺序，运行顺序是由计算机决定的，而不是程序员；程序中没有if、when、case、for这样的控制流程语句；Prolog程序和数据高度统一，其程序实际上是一个智能数据库；具有强大的递归功能。</p>
<p>​    1981年日本政府宣布第5代计算机系统(FGCS)项目以Prolog为基础语言以来，Prolog成为了人工智能研究领域的主导语言。</p>
<h4 id="6613-ops83"><a class="markdownIt-Anchor" href="#6613-ops83"></a> 6.6.1.3、OPS83</h4>
<p>​    OPS83是应用于专家系统的程序设计语言，支持OPS早期版本，也支持PASCAL或C这些常规程序设计语言所具有的过程设计能力。它不是对所有程序设计任务都适宜，OPS83较之OPS的早期版本，对许多问题处理的更目然、更有效。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148162.png" alt="img" /></p>
<p>​    OPS是由美国宾夕法尼亚州卡内基一梅隆大学的C.L.Forgy等人开发。最早版本是在1975年开发的，之后几经修改形成了OPSl、OPS2(1978)、OPS4(1979)、OPS5(1981)多种版本，1986年出现了OPS83。</p>
<p>​    OSP83采用产生式系统的知识表示模式和正向精确推理方式。它提供了两种交互环境：一是和用户的界面；二是和知识工程师的界面(调试环境)。OPS83包括三个主要部分：知识库、推理机和工作存贮器。</p>
<p>​    知识库又称规则库。每条规则均以0PS83语言来表示。OPS83的推理过程由若干“识别一动作”周期组成。每个周期包括三个动作或阶段：匹配、冲突解决(或选择)和执行。</p>
<p>​    匹配是数据和已有规则的匹配。匹配的结果形成了冲突集。是所有满足条件的规则的集合。然后，推理机从冲突集中选择规则执行。工作存贮器(Work Memory，WM)用来存贮推理机在推理过程中的初始状态、中间状态和目标等信息。</p>
<p>​    各个模块可作为独立的文件存放在存贮器中，单独编译，然后连接在一起运行。数据类型、语句、子程序等与一般程序设计语言类似，使用OPS83的知识工程师有一个类似于过程描述型语言的编程环境。</p>
<h4 id="6614-python"><a class="markdownIt-Anchor" href="#6614-python"></a> 6.6.1.4、Python</h4>
<p>​    1989年圣诞节期间，荷兰人吉多·范罗苏姆（Guido van Rossum），在阿姆斯特丹，为了打发圣诞节的无趣，决心开发一个新的脚本解释程序，作为ABC语言的继承。还受到了Modula-3的影响，结合了Unix shell和C的习惯。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148214.png" alt="img" /></p>
<p>​    Guido本人看来，ABC语言优美强大，为非专业程序员设计。但是ABC语言并没有成功，究其原因，Guido认为是其非开放造成的。Guido在Python中避免这一错误。同时，他还想实现在ABC中闪现过但未曾实现的东西。</p>
<p>​    Python语法和动态类型，以及解释型语言的本质，使它成为多数平台上写脚本和快速开发应用的编程语言，随着版本的更新和语言新功能的添加，逐渐被用于独立的、大型项目的开发。</p>
<p>​    Python解释器易于扩展，可以使用C或C++（或者其它可以通过C调用的语言）扩展新的功能和数据类型。Python 也可用于可定制化软件中的扩展程序语言。丰富的标准库，提供了适用于各个主要系统平台的源码或机器码。</p>
<p>​    由于Python语言的简洁性、易读性以及可扩展性，在国内外用Python做科学计算的研究机构日益增多，很多知名大学已经采用Python来教授程序设计课程。例如卡耐基梅隆大学、麻省理工学院等。</p>
<p>​    众多开源的科学计算软件包都提供了Python的调用接口，例如著名的计算机视觉库OpenCV、三维可视化库VTK、医学图像处理库ITK。Python专用的科学计算扩展库十分流行，例如如下3个经典的科学计算扩展库：NumPy、SciPy和matplotlib，它们分别为Python提供了快速数组处理、数值运算以及绘图功能。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148197.png" alt="img" /></p>
<p>​    Python语言及其众多的扩展库所构成的开发环境适合工程技术、科研人员处理实验数据、制作图表，甚至开发科学计算应用程序，并可用于机器学习领域。</p>
<p>​    让人惊奇的是，Python今天成为人工智能应用层上最主要的外部接口，尤其在图形图像领域，使用尤其广泛，例如TensorFlow和PyTorch等。这应该是Guido所不曾想到的。</p>
<h3 id="6614-启示"><a class="markdownIt-Anchor" href="#6614-启示"></a> 6.6.1.4、启示</h3>
<p>​    诚然，编程语言很多，描述这段历史时，应该认识到的是，不同的编程语言与当时的硬件环境、软件理论相照应。在今天，只需要一概而过，对于深度研发，有一定认知的必要。</p>
<p>​    人工智能是一场科技革命，不仅仅是理论的发展，更是实践的应用，随着硬件技术的进步，人工智能理念的变幻，软件方面也将有很大的发展。</p>
<p>​    编程语言发展上，人工智能有很大的发展，编程语言与硬件系统紧密结合，编程语言与框架模式协作并行，才会有更大的突破。在未来，人工智能方面编程语言的发展，有这样三个思索。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148251.png" alt="img" /></p>
<p>​    A、研制与某种语言完全适应的新一代计算机。例如LlSP机、数据流机、PROLOG机、面向对象的体系结构等。但举步维艰、前景渺茫。以诺依曼机为核心的现代通用计算机已经广泛普及而且性能不断提高，积累了巨大的软件资源。任何与现代计算机不兼容的专用机，最多满足特殊需求，难以与现代通用计算机抗衡。在没有很大商业机会的前提下，这种办法是不可能实现的。</p>
<p>​    B、把不同风格的编程语言结合起来，发展复合语言或嵌入式语言，取长补短，使系统性能得以进一步提高。把面向对象语言的设计思路融汇到常用的面向过程的高级语言中。C++语言就是一个突出的例子。这种改变相对来说影响较小，毕竟不是脱胎换骨。</p>
<p>​    C、用面向问题的人工智能编程语言的特点，先选择某种语言编写出一个简洁明了而易于调试的程序原型。通过验证、调试，再仿照这个原型，改编为某种面向过程的高级语言程序，例如C或C++，达到提高最终应用系统开发质量和执行效率的目的。用PROLOG、 LISP、OPS等来开发专家系统原型，已有不少先例。在技术变幻的前提下，这种方式有一定的价值。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148324.jpeg" alt="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1263603027,3603698295&amp;fm=26&amp;gp=0.jpg" /></p>
<p>​    计算机发展史上，基于冯·诺伊曼的硬件系统很难发生变化，计算机编程语言的发展从未停止。我们得到一个启示，思想最容易在软件方面实现，而计算机编程语言的发展也就不足为奇。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148373.png" alt="img" /></p>
<p>​    关于计算机体系结构的发展，有一定价值的是，在未来，量子计算机的体系结构将会是一个重要的方向。随着量子技术的进步，对于商业而言，再次掀起市场的沧海桑田，腥风血雨。</p>
<h3 id="663-机器学习库"><a class="markdownIt-Anchor" href="#663-机器学习库"></a> 6.6.3、机器学习库</h3>
<p>​    机器学习是人工智能的重要组成部分，机器学习是一个完善的生态环境，对于人工智能而言，算法库是重中之重。降低了智能视觉分析的门槛，加大了人工智能的应用。人工智能算法库有很多，本部分重点讨论应用广泛的两个神经网络库，TensorFlow和PyTorch。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148162.png" alt="img" /></p>
<p>​    神经网络可以指向两种，一个是生物神经网络，一个是人工神经网络。</p>
<h4 id="6631-生物神经网络"><a class="markdownIt-Anchor" href="#6631-生物神经网络"></a> 6.6.3.1、生物神经网络</h4>
<p>​    生物神经网络：一般指生物的大脑神经元，细胞，触点等组成的网络，用于产生生物的意识，帮助生物进行思考和行动。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148129.jpeg" alt="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=1907824141,1397086773&amp;fm=26&amp;gp=0.jpg" /></p>
<h4 id="6632-人工神经网络"><a class="markdownIt-Anchor" href="#6632-人工神经网络"></a> 6.6.3.2、人工神经网络</h4>
<p>​    人工神经网络（Artificial Neural Networks，简写为ANNs）也简称为神经网络（NNs）或称作连接模型（Connection Model），它是一种模仿动物神经网络行为特征，进行分布式并行信息处理的算法数学模型。这种网络依靠系统的复杂程度，通过调整内部大量节点之间相互连接的关系，从而达到处理信息的目的。</p>
<p>​    人工神经网络：是一种应用类似于大脑神经突触联接的结构进行信息处理的数学模型。在工程与学术界也常直接简称为“神经网络”或类神经网络。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148142.png" alt="img" /></p>
<p>​    人工神经网络（Artificial Neural Network，即ANN ），是20世纪80 年代以来人工智能领域兴起的研究热点。它从信息处理角度对人脑神经元网络进行抽象， 建立某种简单模型，按不同的连接方式组成不同的网络。在工程与学术界也常直接简称为神经网络或类神经网络。神经网络是一种运算模型，由大量的节点（或称神经元）之间相互联接构成。</p>
<p>​    每个节点代表一种特定的输出函数，称为激励函数（activation function）。每两个节点间的连接都代表一个对于通过该连接信号的加权值，称之为权重，这相当于人工神经网络的记忆。网络的输出则依网络的连接方式，权重值和激励函数的不同而不同。而网络自身通常都是对自然界某种算法或者函数的逼近，也可能是对一种逻辑策略的表达。</p>
<h4 id="6633-tensorflow"><a class="markdownIt-Anchor" href="#6633-tensorflow"></a> 6.6.3.3、TensorFlow</h4>
<p>​    TensorFlow™是基于数据流编程（dataflow programming）的符号数学系统，在人工智能领域，有这广泛的应用。TensorFlow是今天神经网络训练的主要平台，成就了TensorFlow在今天庞大的用户群。</p>
<p>​    用于各类机器学习（machine learning），前身是谷歌的神经网络算法库DistBelief 。谷歌不仅在大数据领域有着重要的位置，在人工智能方面，谷歌也名列前茅。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148170.png" alt="img" /></p>
<p>​    Tensorflow拥有多层级结构，使用面向各种场景，可部署于各类服务器、PC终端和网页，支持GPU和TPU高性能数值计算，开发环境友好。应用于谷歌内部的产品开发和各领域的科学研究 。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148229.png" alt="img" /></p>
<h5 id="66331-发展"><a class="markdownIt-Anchor" href="#66331-发展"></a> 6.6.3.3.1、发展</h5>
<p>​    TensorFlow由谷歌人工智能团队谷歌大脑（Google Brain）开发和维护，是谷歌核心的人工智能项目。拥有很多子项目：TensorFlow Hub、TensorFlow Lite、TensorFlow Research Cloud、各类应用程序接口。</p>
<p>​    谷歌大脑2011年成立，开展面向大规模深度学习应用研究，谷歌大脑具有自我学习功能，将1.6万处理器连接。TensorFlow的前身DistBelief。DistBelief构建各尺度下的神经网络分布式学习和交互系统，被称为“第一代机器学习系统”，为世界人工智能发展做出了卓越的贡献。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148176.jpeg" alt="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=2190712454,4261596438&amp;fm=26&amp;gp=0.jpg" /></p>
<p>​    DistBelief在谷歌和Alphabet旗下公司的产品开发中广泛使用，成果颇丰。TensorFlow拥有生态系统，从数据训练，接口导出，到工程应用。2018年4月的TensorFlow开发者峰会，有21个TensorFlow项目非常有价值和意义 。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148400.png" alt="img" /></p>
<h5 id="66332-核心组件"><a class="markdownIt-Anchor" href="#66332-核心组件"></a> 6.6.3.3.2、核心组件</h5>
<p>​    TensorFlow利用GPU做数据训练，可以进行单机也可以进行分布式部署。</p>
<p>​    合作组件互相配合，保证了TensorFlow的运转。分布式TensorFlow的核心组件如下：</p>
<p>​    分发中心（distributed master）；</p>
<p>​    执行器（dataflow executor/worker service）；</p>
<p>​    内核应用（kernel implementation）</p>
<p>​    最底端的设备层（device layer）/网络层（networking layer）。</p>
<p>​    分发中心从输入的数据流图中剪取子图（subgraph），将其划分为操作片段并启动执行器。分发中心处理数据流图时会进行预设定的操作优化，包括公共子表达式消去（common subexpression elimination）、常量折叠（constant folding）等。</p>
<p>​    执行器负责图操作（graph operation）在进程和设备中的运行、收发其它执行器的结果。分布式TensorFlow拥有参数器（parameter server）以汇总和更新其它执行器返回的模型参数。执行器在调度本地设备时会选择进行并行计算和GPU加速 。</p>
<p>​    内核应用负责单一的图操作，包括数学计算、数组操作（array manipulation）、控制流（control flow）和状态管理操作（state management operations）。内核应用使用Eigen执行张量的并行计算、cuDNN库等执行GPU加速、gemmlowp执行低数值精度计算，此外用户可以在内核应用中注册额外的内核（fused kernels）以提升基础操作，例如激励函数和其梯度计算的运行效率。</p>
<p>​    单进程TensorFlow相对简单，整体部署训练与方便，和分布式相比，维护也很方便。没有分发中心和执行器，使用特殊的会话应用（Session implementation）联系本地设备。</p>
<p>​    TensorFlow的内核是C语言的，提供的原始接口也是C语言的。其它组件/API均通过C语言API与核心组件进行交互。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148396.jpeg" alt="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=974600695,3576740431&amp;fm=15&amp;gp=0.jpg" /></p>
<h5 id="66333-组件"><a class="markdownIt-Anchor" href="#66333-组件"></a> 6.6.3.3.3、组件</h5>
<p>​    TensorFlow Hub是一个允许用户发布、共享和使用TensorFlow模块的库开发项目。用户可以将TensorFlow数据流图或其部分使用Hub进行封装并移植到其它问题中再次利用。TensorFlow Hub页面列出了由谷歌和DeepMind提供的封装模型，其主题包括字符嵌入、视频分类和图像处理。</p>
<p>​    TensorFlow Extended (TFX)，TFX是谷歌基于TensorFlow开发的产品级机器学习平台，其目标是是对产品开发中的模型实现、分析验证和业务化操作进行整合，在实时数据下完成机器学习产品的标准化生产。TFX包含三个算法库：TensorFlow Data Validation对机器学习数据进行统计描述和验证、TensorFlow Transform对模型数据进行预处理、        TensorFlow Model Analysis对机器学习模型进行分析，提供表现评分。另有TensorFlow Serving作为模型业务化的高性能系统，提供模型接口和管理。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148449.png" alt="img" /></p>
<p>​    TensorFlow Probability (TFP)，TFP是在TensorFlow Python API基础上开发的统计学算法库，其目标是方便用户将概率模型和深度学习模型相结合使用。TFP包含大量概率分布的生成器、支持构建深度网络的概率层（probabilistic layers）、提供变分贝叶斯推断（Variational inference）和马尔可夫链蒙特卡罗方法（Markov chain Monte Carlo）和一些特殊的优化器，包括Nelder-Mead方案、BFGS算法（Broyden-Fletcher-Goldfarb-Shanno algorithm）和SGLD（Stochastic Gradient Langevin Dynamics）。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148432.png" alt="https://www.yht7.com/upload/image/20200419/1354575-20200418172212742-1807272001.png" /></p>
<p>​    TensorFlow.js是TensorFlow的JavaScript API，主要用于网页端的机器学习应用开发。方便网页用户进行人工智能数据训练。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148452.png" alt="img" /></p>
<p>​    TensorFlow Lite是为移动和嵌入式设备提供人工智能支持，在Android、iOS系统下机器学习模型的响应时间并降低文件大小。TensorFlow Lite部署了大部分人工智能算法，具有很好的参考价值。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148537.png" alt="img" /></p>
<p>​    Swift for TensorFlow是开源版Swift的TensorFlow API开发项目，在深度学习和微分计算方面应用。和Eager Execution很相像，可直接执行数据流图，具备更好的性能。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148583.png" alt="img" /></p>
<p>​    TensorFlow Research Cloud是面向科学研究的机器学习TPU云计算平台。该项目拥有1000个云TPU和总计180千万亿次计算力，每个TPU拥有64 GB的高带宽内存 。可以通过互联网申请使用，进行有价值的人工智能数据训练。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148715.png" alt="img" /></p>
<h5 id="66334-其它"><a class="markdownIt-Anchor" href="#66334-其它"></a> 6.6.3.3.4、其它</h5>
<p>​    Magenta是在艺术领域使用机器学习的研究项目，该项目使用深度学习网络和强化学习算法学习生成音乐、绘画和其它艺术作品，以帮助艺术人员拓展其创作过程 。Magenta项目的研究成果包括音乐创作工具NSynth和混音工具MusicVAE。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148710.png" alt="img" /></p>
<p>​    Nucleus是将TensorFlow应用于基因组文件，例如SAM和VCF格式文件的读写和分析的库开发项目 。Nucleus使用Python和C++进行开发。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148725.png" alt="img" /></p>
<h4 id="6632-pytorch"><a class="markdownIt-Anchor" href="#6632-pytorch"></a> 6.6.3.2、PyTorch</h4>
<p>​    PyTorch是一个开源的Python机器学习库，基于Torch，用于自然语言处理等应用程序。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148729.png" alt="img" /></p>
<p>​    2017年1月，由Facebook人工智能研究院（FAIR）基于Torch推出了PyTorch。它是一个基于Python的计算包，提供两个高级功能：1、具有强大的GPU加速的张量计算（如NumPy）。2、包含自动求导系统的深度神经网络。</p>
<p>​    PyTorch使用Python重写了很多内容，更加灵活，支持动态图，提供了Python接口。它是由Torch7团队开发，是一个以Python优先的深度学习框架，实现强大的GPU加速，支持动态神经网络。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148793.jpeg" alt="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=3593097388,1004973136&amp;fm=26&amp;gp=0.jpg" /></p>
<p>​    PyTorch可以看作加入了GPU支持的numpy，也可以看成拥有自动求导功能的强大的深度神经网络。除Facebook外，已经被Twitter、CMU和Salesforce等机构采用。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148838.png" alt="img" /></p>
<p>​    PyTorch简洁高效，快速应用的框架，设计追求最少封装，符合人类思维，让用户尽可能地专注于实现自己的想法，与google的Tensorflow类似，FAIR的支持足以确保PyTorch获得持续的开发更新。</p>
<p>无论对于机器视觉，还是人工智能，相对从前，数据量发生了地覆天翻的变化。传统的运算框架不能满足现实的发展。人工智能影响不是一点一线，而是整个计算体系。</p>
<p>​    从AI/AR/VR芯片，到GPU数据处理，再到平台架构，框架编程，外部接口调用，都有巨大的变革。今天我们谈一下基于大批量数据的运算框架。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148028.png" alt="img" /></p>
<p>​    GPU的参与数据处理已经多年，多年发展过程中，GPU不过是硬件的支持(如下图)，指令的提供，传统的工程师很难进行指令级的开发。所以，运算平台出现了，拓展了技术应用，便捷了软件开发。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148094.png" alt="http://attachbak.dataguru.cn/attachments/forum/201604/24/180629knkh2kffhhwwl23f.png" /></p>
<p>​    下面讲述目前最广泛的两个运算平台，英伟达的CUDA和开放的OPENCL平台。</p>
<h4 id="6621-cuda"><a class="markdownIt-Anchor" href="#6621-cuda"></a> 6.6.2.1、CUDA</h4>
<p>​    CUDA（Compute Unified Device Architecture），CUDA™是由NVIDIA推出的并行计算架构，该架构使GPU解决复杂的计算问题。包含了CUDA指令集架构（ISA）以及GPU内部的并行计算引擎。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148827.png" alt="img" /></p>
<p>​    开发人员可以使用C语言来为CUDA™架构编写程序，C语言是应用最广泛的一种高级编程语言。编写出的程序可以在支持CUDA™的处理器上以超高性能运行。</p>
<p>​    计算行业从只使用CPU的“中央处理”向CPU与GPU并用的“协同处理”发展。为打造这一全新的计算典范，NVIDIA™（英伟达™）发明了CUDA（Compute Unified Device Architecture，统一计算设备架构）这一编程模型。</p>
<h5 id="66211-应用"><a class="markdownIt-Anchor" href="#66211-应用"></a> 6.6.2.1.1、应用</h5>
<p>​    在应用程序中充分利用CPU和GPU各自的优点。该架构已应用于GeForce™（精视™）、ION™（翼扬™）、Quadro以及Tesla GPU（图形处理器）上，对应用程序开发人员来说，这是一个巨大的市场。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148781.png" alt="http://attachbak.dataguru.cn/attachments/forum/201604/24/180626qfnnioezwoc57w15.png" /></p>
<p>​    在消费级市场上，几乎每一款重要的消费级视频应用程序都已经使用CUDA加速或很快将会利用CUDA来加速，其中包括Elemental Technologies公司、MotionDSP公司以及LoiLo公司的产品。</p>
<p>​    在科研界，CUDA一直受到热捧。例如，CUDA现已能够对AMBER进行加速。AMBER是一款分子动力学模拟程序，全世界在学术界与制药企业中有超过60，000名研究人员使用该程序来加速新药的探索工作。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148810.png" alt="img" /></p>
<p>​    在金融市场，Numerix以及CompatibL针对一款全新的对手风险应用程序发布了CUDA支持并取得了18倍速度提升。Numerix为近400家金融机构所广泛使用。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148816.png" alt="img" /></p>
<p>​    CUDA的广泛应用造就了GPU计算专用Tesla GPU的崛起。全球财富五百强企业已经安装了700多个GPU集群，这些企业涉及各个领域，例如能源领域的斯伦贝谢与雪佛龙以及银行业的法国巴黎银行，包括阿里云。</p>
<p>​    GPU计算目前成为主流。在显卡硬件上，GPU将不仅仅是图形处理器，还是应用程序均可使用的通用并行处理器。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148060.png" alt="img" /></p>
<p>​    随着显卡的发展，GPU越来越强大，GPU为图像处理做了优化。计算上超越了通用的CPU。强大的芯片不能仅仅进行显示，因此NVIDIA推出CUDA，让显卡可以用于图像计算以外的目的。</p>
<p>​    CUDA架构可以使用GPU来解决商业、工业以及科学方面的复杂计算问题。它是一个完整的GPGPU解决方案，提供了硬件的直接访问接口，而不必像传统方式一样必须依赖图形API接口来实现GPU的访问。</p>
<h5 id="66212-系统结构"><a class="markdownIt-Anchor" href="#66212-系统结构"></a> 6.6.2.1.2、系统结构</h5>
<p>​    在架构上采用了一种全新的计算体系结构来使用GPU提供的硬件资源，从而给大规模的数据计算应用提供了一种比CPU更加强大的计算能力。CUDA采用C语言作为编程语言提供大量的高性能计算指令开发能力，使开发者能够在GPU的强大计算能力的基础上建立起一种效率更高的密集数据计算解决方案。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148088.png" alt="img" /></p>
<p>​    CUDA体系结构包含三部分：开发库、运行期环境和驱动。</p>
<p>​    开发库是基于CUDA技术提供的应用开发库。CUDA1。1版提供了两个标准的数学运算库——CUFFT（离散快速傅立叶变换）和CUBLAS（离散基本线性计算）的实现。这两个数学运算库解决的是典型的大规模并行计算问题，也是在密集数据计算中非常常见的计算类型。开发人员在开发库的基础上快速、方便的建立起自己的计算应用。此外，开发人员也可以在CUDA的技术基础上实现出更多的开发库。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148086.png" alt="img" /></p>
<p>​    运行期环境提供了应用开发接口和运行期组件，包括基本数据类型的定义和各类计算、类型转换、内存管理、设备访问和执行调度等函数。基于CUDA开发的程序代码在实际执行中分为两种，一种是运行在CPU上的宿主代码（Host Code），一种是运行在GPU上的设备代码（Device Code）。不同类型代码运行的物理位置不同，访问的资源不同，对应的运行期组件也分为公共组件、宿主组件和设备组件三个部分，囊括了所有在GPGPU开发中所需要的功能和能够使用到的资源接口，开发人员通过运行期环境的编程接口实现各种类型的计算。</p>
<p>​    由于存在着多种GPU版本的NVidia显卡，不同版本的GPU之间都有不同的差异，因此驱动部分基本上可以理解为是CUDA-enable的GPU的设备抽象层，提供硬件设备的抽象访问接口。CUDA提供运行期环境通过这一层来实现各种功能。基于CUDA开发的应用必须有NVIDIA CUDA-enable的硬件支持。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148132.png" alt="http://attachbak.dataguru.cn/attachments/forum/201604/24/180626v66bl8kkukn3unfp.png" /></p>
<p>​    NVIDIA公司GPU运算事业部总经理Andy Keane在活动中表示：一个充满生命力的技术平台应该是开放的，CUDA未来也会向这个方向发展。由于CUDA的体系结构中有硬件抽象层的存在，因此今后也有可能发展成为一个通用的GPGPU标准接口，兼容不同厂商的GPU产品。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148328.png" alt="img" /></p>
<p>​    支持CUDA的GPU销量逾10亿，数以万计的开发人员正在使用免费的CUDA软件开发工具来解决各种问题。从视频与音频处理和物理效果模拟到石油天然气勘探、产品设计、医学成像以及科学研究，涵盖了各个领域。</p>
<h5 id="66213-核心"><a class="markdownIt-Anchor" href="#66213-核心"></a> 6.6.2.1.3、核心</h5>
<p>​    CUDA的核心有三个重要抽象概念： 线程组层次结构、共享存储器、屏蔽同步（barriersynchronization），轻松将其作为C语言的最小扩展级公开给程序员。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148351.png" alt="img" /></p>
<p>​    CUDA 软件堆栈由几层组成，一个硬件驱动程序，一个应用程序编程接口（API）和它的Runtime，还有二个高级的通用数学库，CUFFT 和CUBLAS。硬件被设计成支持轻量级的驱动和Runtime 层面，因而提高性能。</p>
<h5 id="66214-其它"><a class="markdownIt-Anchor" href="#66214-其它"></a> 6.6.2.1.4、其它</h5>
<p>​    NVIDIA进军高性能计算领域，推出了Tesla&amp;CUDA高性能计算系列解决方案，CUDA技术，一种基于NVIDIA图形处理器（GPU）上全新的并行计算体系架构，让科学家、工程师和其它专业技术人员能够解决以前无法解决的问题，作为一个专用高性能GPU计算解决方案，NVIDIA把超级计算能够带给任何工作站或服务器，以及标准、基于CPU的服务器集群。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148371.png" alt="img" /></p>
<p>​    CUDA是用于GPU计算的开发环境，是一个全新的软硬件架构，可以将GPU视为一个并行数据计算的设备，对计算分配和管理。CUDA的架构中，计算不再像过去所谓的GPGPU架构那样必须将计算映射到图形API（OpenGL和Direct 3D）中，对于开发者来说，CUDA的开发门槛大大降低。CUDA编程基于C语言，任何有C语言基础的用户都很容易地开发CUDA的应用程序。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148430.png" alt="img" /></p>
<p>​    GPU的特点是处理密集型数据和并行数据计算，因此CUDA非常适合需要大规模并行计算的领域。CUDA除了可以用C、C++、JAVA、Python语言开发。广泛的应用在图形动画、科学计算、地质、生物、物理模拟等领域。</p>
<p>​    计算正在从CPU&quot;中央处理&quot;向CPU与GPU&quot;协同处理&quot;的方向发展。对应用程序开发商来说，英伟达™ CUDA™ 架构拥有庞大的用户群。</p>
<h4 id="6622-opencl"><a class="markdownIt-Anchor" href="#6622-opencl"></a> 6.6.2.2、OPENCL</h4>
<p>​    OpenCL（Open Computing Language，开放运算语言）是第一个面向异构系统并行编程的开放式、免费标准，也是一个统一的编程环境。</p>
<p>​    便于软件开发人员为高性能计算服务器、桌面计算系统、手持设备编写高效轻便的代码，而且广泛适用于多核心处理器(CPU)、图形处理器(GPU)、Cell类型架构以及数字信号处理器(DSP)等其它并行处理器，在游戏、娱乐、科研、医疗等各种领域都有广阔的发展前景。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148356.png" alt="img" /></p>
<p>​    OpenCL平台可由CPU，GPU或其它类型的处理器组成。OpenCL用于编写kernels （在OpenCL设备上运行的函数）的语言（基于C99）和一组用于定义并控制平台的API组成。OpenCL提供了基于任务分割和数据分割的并行计算机制。</p>
<p>​    OpenCL类似于另外两个开放的工业标准OpenGL和OpenAL，这两个标准分别用于三维图形和计算机音频方面。OpenCL扩展了GPU用于图形生成之外的能力。OpenCL由非盈利性技术组织Khronos  Group掌管。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148590.png" alt="img" /></p>
<h5 id="66221-发展"><a class="markdownIt-Anchor" href="#66221-发展"></a> 6.6.2.2.1、发展</h5>
<p>​    OpenCL最初苹果公司开发，拥有其商标权，并在与AMD，IBM，英特尔和NVIDIA技术团队的合作之下初步完善。随后，苹果将这一草案提交至Khronos  Group。</p>
<p>​    2008年6月的WWDC大会上，苹果提出了OpenCL规范，旨在提供一个通用的开放API，在此基础上开发GPU通用计算软件。随后，Khronos  Group宣布成立GPU通用计算开放行业标准工作组，以苹果的提案为基础创立OpenCL行业规范。5个月后的2008年11月18日，该工作组完成了OpenCL 1。0规范的技术细节。2010年6月14日，OpenCL 1。1 发布。2011年11月15日，OpenCL 1。2 发布。2013年11月19日，OpenCL 2。0发布。目前，OpenCL最新版本是3。0。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148672.png" alt="img" /></p>
<p>​    2009年6月NVIDIA首家发布了支持OpenCL 1。0通用计算规范的驱动程序，支持Windows和Linux操作系统。</p>
<p>​    2009年8月初AMD首次发布了可支持IA处理器(x86和amd64/x64)的OpenCL SDK——ATI Stream SDK v2。0Beta，交由业界标准组织Khronos 进行审核。目前，该SDK更名为AMD APP SDK。</p>
<p>​    2012年2月，intel发布了The Intel® SDK for OpenCL* Applications 2012，支持OpenCL 1。1基于带HD4000/2500的显示核心的第三代酷睿CPU（i3，i5，i7)和GPU。</p>
<p>​    2013年6月，intel发布了第四代酷睿CPU haswell 其内置的HD4600/4400/4200 Iris（锐矩）5000/5100/pro 5200（自带eDRAM缓存）支持OpenCL 1。2（未来可能升级到OpenCL 2。0）</p>
<p>​    NVIDIA显卡方面 Geforce 8000\9000\100、GTX200-1000，RTX2000均支持OpenCL 1。0-1。2</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148656.png" alt="img" /></p>
<p>​    AMD显卡方面 Radeon HD 4000-7000\Rx 200\Rx 300\RX 400-500/Fury系列，Vega系列 均支持OpenCL 1。0-1。2，除Radeon HD4000-6000系列外，其余均会支持OpenCL 2。0</p>
<p>​    移动平台方面目前高通adreno320/330/400系列/500系列提供了Android上的OpenCL1。2或者2。0支持，NVIDIA的Tegra K1也提供了OpenCL 支持。</p>
<h5 id="66222-支持"><a class="markdownIt-Anchor" href="#66222-支持"></a> 6.6.2.2.2、支持</h5>
<p>​    OpenCL工作组的成员包括：3Dlabs、AMD、苹果、ARM、Codeplay、爱立信、飞思卡尔、华为、HSA基金会、GraphicRemedy、IBM、Imagination Technologies、Intel、诺基亚、NVIDIA、摩托罗拉、QNX、高通，三星、Seaweed、德州仪器、布里斯托尔大学、瑞典Ume大学。像Intel、NVIDIA和AMD都是这个标准的支持者，不过微软并不在其列。目前，NVIDIA显卡对OpenCL技术支持较好。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148659.png" alt="img" /></p>
<p>​    在NVIDIA的Quadro、Geforce系列专业显卡中，能够使用OpenCL技术。只要显卡能够达到CUDA的要求，就能够正常使用OpenCL，以获得优异的CPU运算效率。</p>
<p>​    在AMD-ATI的Stream技术中（现已经改名为AMD APP并行加速技术），已经为日常使用、办公、游戏等提供物理加速。基于OpenCL标准开发，其中，ATI Radeon HD 4000-5000、AMD Radeon HD 6000系列同时支持ATI Stream和AMD APP（由于Stream基于CAL和Brook+语言开发，更适合VLIW5和VLIW4这样的SIMD架构），AMD Radeon HD7000和Radeon Rx 200系列支持AMD APP，运算效率较老架构提升十分明显。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148635.png" alt="img" /></p>
<h5 id="66223-api"><a class="markdownIt-Anchor" href="#66223-api"></a> 6.6.2.2.3、API</h5>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148721.png" alt="img" /></p>
<p>​    OpenCL平台API：定义了宿主机程序发现OpenCL设备所用的函数以及这些函数的功能，还定义了OpenCL应用创建上下文的函数。</p>
<p>​    OpenCL运行时API：管理上下文来创建命令队列以及运行时发生的其它操作。例如，将命令提交到命令队列的函数就来自OpenCL运行时API。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148915.png" alt="img" /></p>
<p>​    OpenCL编程语言：编写内核代码的编程语言。基于ISO C99标准的一个扩展子集，通常称为OpenCL C编程语言。</p>
<h5 id="66224-总结"><a class="markdownIt-Anchor" href="#66224-总结"></a> 6.6.2.2.4、总结</h5>
<p>​    综合上述内容，形成OpenCL全景图(如下)，首先是一个定义上下文的宿主机程序。上图中的上下文包含两个OpenCL设备、一个CPU和一个GPU。接下来定义了命令队列。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148901.png" alt="img" /></p>
<p>​    这里有两个队列，一个是面向GPU的有序命令队列，另一个是面向CPU的乱序命令队列。然后宿主机程序定义一个程序对象，这个程序对象编译后将为两个OpenCL设备（CPU和GPU）生成内核。</p>
<p>​    接下来宿主机程序定义程序所需的内存对象，并把它们映射到内核的参数。最后，宿主机程序将命令放入命令队列来执行这些内核。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148953.png" alt="img" /></p>
<h3 id="664-其它相关库"><a class="markdownIt-Anchor" href="#664-其它相关库"></a> 6.6.4、其它相关库</h3>
<p>​    智能时代是百花齐放的时代，芯片技术驱动硬件技术，芯片指令提供操作接口，操作接口驱动运算平台，运算平台驱动机器学习库。本主题介绍部分机器视觉和并行计算库。</p>
<h4 id="6641-opencv"><a class="markdownIt-Anchor" href="#6641-opencv"></a> 6.6.4.1、OpenCV</h4>
<p>​    OpenCV是基于BSD许可（开源）发行的跨平台计算机视觉和机器学习软件库，运行在Linux、Windows、Android和Mac OS操作系统上。 轻量高效，由一系列 C 函数和少量 C++ 类构成，提供了Python、Ruby、MATLAB等编程接口，实现了图像处理和计算机视觉方面的通用算法。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148536.png" alt="img" /></p>
<h4 id="6641-简介"><a class="markdownIt-Anchor" href="#6641-简介"></a> 6.6.4.1、简介</h4>
<p>​    OpenCV用C++语言编写，利用MMX和SSE指令，OpenCV 为Intel® Integrated Performance Primitives（IPP）提供了透明接口。意味着如果有特定处理器优化的 IPP 库，OpenCV 在运行时自动加载这些库。</p>
<p>​    OpenCV 拥有 500 多个C函数的跨平台的中、高层 API。不依赖于其它的外部库。OpenCV 使用类BSDlicense，对非商业应用和商业应用免费（FREE）。</p>
<p>​    OpenCV的视觉处理算法丰富，部分用C语言编写，开源的特性，处理得当，不需要外部支持可以完整编译链接生成执行程序，方便算法的移植，OpenCV的代码经过适当改写可以正常的运行在DSP系统和ARM嵌入式系统中。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148544.jpeg" alt="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=974700158,1979112963&amp;fm=26&amp;gp=0.jpg" /></p>
<h4 id="6642-应用"><a class="markdownIt-Anchor" href="#6642-应用"></a> 6.6.4.2、应用</h4>
<p>​    OpenCV致力于真实世界的实时应用，通过优化C代码的编写对其执行速度带来了可观的提升，通过购买Intel的IPP高性能多媒体函数库（Integrated Performance Primitives）得到更快的处理速度。</p>
<p>​    应用领域：人机互动、物体识别、图像分割、人脸识别、动作识别、运动跟踪、机器人、运动分析、机器视觉、结构分析、汽车安全驾驶</p>
<h4 id="6643-接口"><a class="markdownIt-Anchor" href="#6643-接口"></a> 6.6.4.3、接口</h4>
<p>​    OpenCV其它接口是用C<ins>接口改编的，主要接口语言也是C</ins>语言，依然保留了大量的C语言接口。该库也有大量的Python、Java and MATLAB/OCTAVE、GO、C#、Ch、Ruby等的接口。API接口函数通过在线文档获得。一个使用CUDA的GPU接口也于2010年9月开始实现。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148521.jpeg" alt="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1001109053,1480904686&amp;fm=26&amp;gp=0.jpg" /></p>
<p>​    OpenCV可以在Windows，Android，Maemo，FreeBSD，OpenBSD，iOS，Linux 和Mac OS等平台上运行。可以在 SourceForge 获得官方版本，或者从 SVN 获得开发版本。</p>
<h4 id="6642-openmp"><a class="markdownIt-Anchor" href="#6642-openmp"></a> 6.6.4.2、OpenMP</h4>
<p>​    OpenMP是OpenMP Architecture Review Board牵头提出的，已被广泛接受，用于共享内存并行系统的多处理器程序设计，并提供一套指导性编译处理方案(Compiler Directive) 。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148438.png" alt="img" /></p>
<p>​    OpenMP支持的编程语言包括C、C++和Fortran；支持OpenMp的编译器包括Sun Compiler，GNU Compiler和Intel Compiler等。</p>
<h5 id="66421-简介"><a class="markdownIt-Anchor" href="#66421-简介"></a> 6.6.4.2.1、简介</h5>
<p>​    OpenMp提供了对并行算法的专用描述，源代码中加入专用的pragma指令来指明自己的意图，由此编译器可以自动将程序进行并行化，在必要之处加入同步互斥以及通信。在进行软件开发时间，串行化到并行化是一个提高效率最有效的方法。</p>
<p>忽略这些pragma，或者编译器不支持OpenMp时，程序又可退化为串行程序，代码仍然可以正常运作，这是考虑CPU硬件不同而设定的方案，只是不能利用多线程来加速程序执行。根据硬件支持，进行单线程和多线程的处理。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148450.png" alt="img" /></p>
<p>​    OpenMP对于并行描述的高层抽象降低了并行编程的难度和复杂度，程序员可以把更多的精力投入到并行算法本身，而非其具体实现细节，这样让程序员集中精力做某些事情。对基于数据分集的多线程程序设计，OpenMP是一个很好的选择，尤其对计算要求严格的地方。</p>
<p>​    OpenMP提供了更强的灵活性，可以适应不同的并行系统配置。线程粒度和负载平衡等是传统多线程程序设计中的难题，这些问题从前主要靠中间件来进行实现，或者从程序的框架角度来进行考虑。现在，把这些和兴的处理交给程序员直接接触的框架，从而提高了效率。OpenMP中，OpenMP库从程序员手中接管了部分这两方面的工作。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148432.png" alt="https://pic.ikafan.com/imgp/L3Byb3h5L2h0dHAvaW1hZ2VzMC5jbmJsb2dzLmNvbS9ibG9nMjAxNS81MjI0OTAvMjAxNTA2LzI3MjExMzUwNTY0ODI3NC5wbmc=.jpg" /></p>
<p>​    作为高层抽象，OpenMP不适合复杂的线程间同步和互斥的场合，这是由于OpenMp本身的结构决定的。OpenMp不能在非共享内存系统，例如计算机集群使用，如果使用，处理效果很不理想。共享内容的系统上，MPI使用较多。在项目开发过程中，技术选型非常重要。</p>
<p>​    OpenMP是作为共享存储标准而问世的。它是为在多处理机上编写并行程序而设计的一个应用编程接口。它包括一套编译指导语句和一个用来支持它的函数库。当今双核、四核的 CPU 当道，而六核的CPU也已经面世多时，所以在多处理机上编写、运行并行程序会变得相当普遍。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148459.png" alt="https://pic.ikafan.com/imgp/L3Byb3h5L2h0dHAvaW1hZ2VzMC5jbmJsb2dzLmNvbS9ibG9nMjAxNS81MjI0OTAvMjAxNTA2LzI3MjExNDQzNTgwNzM3OC5wbmc=.jpg" /></p>
<h5 id="66422-单线程与多线程"><a class="markdownIt-Anchor" href="#66422-单线程与多线程"></a> 6.6.4.2.2、单线程与多线程</h5>
<p>​    一般单线程（single thread）程序，多核心处理器没有办法提升处理效能；对于多线程（multi thread）的程序，就可以通过不同的核心同时计算，来达到加速的目的。程序员在进行开发时间，对效率要有一定的认知，如果效率较高的程序，建议进行并行程序涉及。</p>
<p>​    下面我们举例，单线程程序，一件事一次要十秒的话，要做十次，一颗核心，就是 10 秒 的 10 倍，这就是 100 秒；如果按照多线程的程序运行，可以把一件事，给两颗核心各自完成，每核心各做 5 次，时间就缩短为 50 秒，这样速度提高了1倍。</p>
<p>​    多线程的程序实际上也不简单，我们上面的计算是机械的。在工作的切割、结合上，也是要多花时间的。</p>
<p>​    现实中，在最佳状况，双核心的效能也不会是 1 + 1 = 2 这样的理想化情况，这个仅仅是我们不考虑其它情况时间的结果。</p>
<p>​    并不是所有任务都可以切割！很多任务关键在一起，直接切割给不同的处理核心各自并行运算，出来的结果会有问题，这是安全所不能容忍的。多线程的程序在编写、维护上，比单线程的程序复杂了很多。对于效率要求不高，要求健壮性能的程序，单线程稳定还是好的。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148467.png" alt="https://pic.ikafan.com/imgp/L3Byb3h5L2h0dHAvaW1hZ2VzMC5jbmJsb2dzLmNvbS9ibG9nMjAxNS81MjI0OTAvMjAxNTA2LzI3MjExNjA0NDA4MzcxOC5wbmc=.jpg" /></p>
<p>​    电脑是多处理器、多核处理器，或具备IntelHyper-ThreadingTechnology 技术，代表同一个时间处理多个线程的功能，把各自独立的工作由单线程改成多线程，执行的效率上，一般是有提升的。</p>
<p>​    微软VS，提供线程控制功能。这种方法，产生多个 thread，策略如下：主线程把工作分配，子线程去然后运算，最后主线程对结果进行整理。</p>
<p>​    OpenMP 通过高阶指令，这些指令往往是对CPU指令进行调用，演化为一系列操作，这中操作在从前是不可想象的。将程序并行化、多线程化的 API，这点免去了软件工程师的大部分工作负担；并行化处理是OpenMp的核心思想，最简单情形，只加一行指令，将循环内的程序并行化处理。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148444.png" alt="https://pic.ikafan.com/imgp/L3Byb3h5L2h0dHAvaW1hZ2VzMC5jbmJsb2dzLmNvbS9ibG9nMjAxNS81MjI0OTAvMjAxNTA2LzI3MTczNjQ2ODMwNTMzMy5wbmc=.jpg" /></p>
<h5 id="66423-openmp与mpi"><a class="markdownIt-Anchor" href="#66423-openmp与mpi"></a> 6.6.4.2.3、OpenMP与MPI</h5>
<p>​    OpenMP 是针对共享内存并行编程的 API。与之前的 MPI 不同的是，OpenMP是线程级并行，比 MPI 的进程级并行要更轻量化一些。轻量级代表更少的改动，共享内容是解决共享的重要手段之一。</p>
<p>​    MPI 的并行需要完全重写整个程序，这点相对麻烦很多，是很多程序员排斥的。将一个串行程序改造成 OpenMP 的并行进行的改动近乎可以忽略不计。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148684.png" alt="img" /></p>
<h5 id="66424-应用"><a class="markdownIt-Anchor" href="#66424-应用"></a> 6.6.4.2.4、应用</h5>
<p>​    分为Windows环境和Linux环境。</p>
<h6 id="664241-windows环境下开发"><a class="markdownIt-Anchor" href="#664241-windows环境下开发"></a> <strong>6.6.4.2.4.1、Windows环境下开发</strong></h6>
<p>​    在VC<ins>中使用OpenMP，将 Project 的Properties中C/C</ins>里Language的OpenMP Support开启（参数为 /openmp），就可以让VC++编译时支持OpenMP 的语法；</p>
<p>​    编写使用OpenMP 的程序时，则需要先include OpenMP的头文件：omp.h。</p>
<p>​    for 循环并行化处理，要在前面加上一行</p>
<p>​    #pragma omp parallel for</p>
<p>​    实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;STDIO.H&gt;</span><br><span class="line">#include &lt;STDLIB。H&gt;</span><br><span class="line">void Test(int n)</span><br><span class="line">&#123;</span><br><span class="line">    for(int i = 0; i &lt; 10000; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        //do nothing， just waste time</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d， &quot;， n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc，char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">for(int i = 0; i &lt; 10; ++i)</span><br><span class="line"></span><br><span class="line">    Test(i);</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    上面的程序，在 main() 是一个很简单的循环，十次调用Test()这个函数，把循环的执行次数传进Test() 并打印。运行结果：</p>
<p>​    0， 1， 2， 3， 4， 5， 6， 7， 8， 9，</p>
<p>​    OpenMP main() 里平行化处理，按照如下方式进行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;omp.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">void Test (int n)</span><br><span class="line">&#123;</span><br><span class="line">    for(int i = 0; i &lt; 10000; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        //do nothing， just waste time</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d， &quot;， n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc，char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    #pragma omp parallel for</span><br><span class="line"></span><br><span class="line">    for(int i = 0; i &lt; 10; ++i)</span><br><span class="line">        Test( i );</span><br><span class="line"></span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    运行结果：</p>
<p>​    0， 5， 1， 6， 2， 7， 3， 8， 4， 9，</p>
<p>​    OpenMP把循环分成两部分，拆成 0 - 4， 5 - 9，不同的线程去跑，进行交错输出。</p>
<p>​    怎么确定真的有跑多线程呢，需要从硬件的角度来进行观察。如果本来有多处理器、多核心处理器或有 Hyper Thread 的话，一个单线程程序，最多只会把一颗核心的使用量吃完。</p>
<p>​    单线程的程序，工作管理员中看到CPU使用率最多是50%，说明CPU利用率低。利用 OpenMP 把循环进行平行化处理后，把两颗核心的 CPU 都用了！也就是CPU使用率提高了，可能达到100%，这就证明并行的结果。</p>
<h6 id="664242-linux环境"><a class="markdownIt-Anchor" href="#664242-linux环境"></a> <strong>6.6.4.2.4.2、Linux环境</strong></h6>
<p>​    gcc 支持 OpenMP是这样的：使用gcc 编译时加上 -fopenmp 开关参数即可：</p>
<p>​    $ gcc -fopenmp &lt;source.c&gt; -o <exec></p>
<p>​    $ g++ -fopenmp &lt;source.cpp&gt; -o <exec></p>
<p>​    示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;omp。h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void hello()</span><br><span class="line">&#123;</span><br><span class="line">  int my_rank = omp_get_thread_num();</span><br><span class="line">  int thread_count = omp_get_num_threads();</span><br><span class="line">  printf(&quot;Hello from thread %d of %d\n&quot;， my_rank， thread_count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int thread_count = 4;</span><br><span class="line">  #pragma omp parallel num_threads(thread_count)</span><br><span class="line">  hello();</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    上面代码首先增加了一个 omp。h 头文件，然后主函数中多出来一句串行代码中没有的预处理器指令，其它的跟正常的串行程序没什么区别。</p>
<p>​    # pragma 是 C/C++ 中用以允许非 C 语言规范部分的行为，如果编译器不支持预处理器指令，那么编译时这句话就会被忽略掉。</p>
<p>​    OpenMP 依靠# pragma omp 开头的预处理器指令来进行线程级并行。预处理器指令后面加的是一些子句，用来附加额外控制信息。比如说 num_threads() 子句是用来控制接下来的代码块中需要用多少个线程进行并行。</p>
<p>​    程序编译完成之后直接打开是无法运行的，需要用 mpiexec 来调用生成好的可执行文件，mpiexec 会首先得到运行的目标机器、进程数等情况，然后启动多个进程，等到多进程全部开起来之后，并行就开始了。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192148697.png" alt="img" /></p>
<p>​    在 OpenMP 中，编译完成之后的可执行文件可以直接运行，程序在一开始是串行运行，到了需要并行的时候，单进程单线程会分裂成单进程多线程（其实是除了主线程以外，又启动了几个新的线程同时执行），执行完毕后又回到单线程串行。而且每次并行的线程数是可以在运行时指定的。</p>
<p>​    OpenMP 可以只把其中的一部分作并行处理，而且并行的时候共享的内存、变量等都是在一起的，从串行程序的基础上改造过来非常容易，可能只要加几段预处理器指令就可以了，剩下的交给编译器和处理器去解决。</p>
<h5 id="66425-同步协作"><a class="markdownIt-Anchor" href="#66425-同步协作"></a> 6.6.4.2.5、同步协作</h5>
<p>​    MPI 依靠进程间通信完成协作，OpenMP靠内存共享的解决线程写作。</p>
<p>​    OpenMP 冲突解决有四种方法：</p>
<p>A：Crirical 指令 / 归约指令</p>
<p>​    例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int sum = 0;</span><br><span class="line">#pragma omp parallel for num_threads(100)</span><br><span class="line">for (int i=0;i&lt;100;i++)</span><br><span class="line">&#123;</span><br><span class="line">       sum += i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(&quot;%d\n&quot;， sum);</span><br></pre></td></tr></table></figure>
<p>​    运行的结果是每次运行，sum 最终结果可能是不同的。这是什么原因呢，运行时多个线程同时访问 sum 变量，可能前一个线程写上去的内容马上被下一个线程给覆盖掉了，数据共享出现了问题，即出现了数据冲突。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int sum = 0;</span><br><span class="line">#pragma omp parallel for num_threads(100)</span><br><span class="line">for (int i=0;i&lt;100;i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    #pragma omp critical</span><br><span class="line">    sum += i;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d\n&quot;， sum);</span><br></pre></td></tr></table></figure>
<p>​    加上# pragma omp critical 指令，来进行数据处理，会进行特殊的处理，编译器安排线程对下面执行的代码进行互斥访问，这是一种运行约束。每次只能够有一个线程执行下面的这一句代码。这样保证数据处理的有序与安全性能。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int sum = 0;</span><br><span class="line">#pragma omp parallel for num_threads(100) reduction(+: sum)</span><br><span class="line">for (int i=0;i&lt;100;i++)</span><br><span class="line">&#123;</span><br><span class="line">    sum += i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(&quot;%d\n&quot;， sum);</span><br></pre></td></tr></table></figure>
<p>​    reduction(+: sum) 是归约子句，这是一个特定的写法。加上这一句，执行并行任务时，sum 本身是共享的，但这个共享和上面是不一样的，每个线程执行时会产生一个私有变量，在并行块运算结束后，系统会将私有变量的值整合，然后传递给共享变量。这样保证数据的共享性。</p>
<p>B：带命名的 critical 指令</p>
<p>​    用# pragma omp critical(name) 来命名不同的临界区。</p>
<p>​    同一个临界区的访问和上面一样，一次只有一个进程操作，保证数据的安全，不同的临界区有不同的进程进行同时访问，这样保证数据的同步。安全与同步是处理时间必须考虑的因素。</p>
<p>C：atomic 指令：</p>
<p>​    用# pragma omp atomic 的使用形式为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x &lt;op&gt;= &lt;expression&gt;;</span><br><span class="line">x++;</span><br><span class="line">++x;</span><br><span class="line">x--;</span><br><span class="line">--x;</span><br></pre></td></tr></table></figure>
<p>​    这些语句用 CPU 中的特殊硬件指令来实现，加快处理结果。</p>
<p>D：简单锁</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">omp_set_lock(&amp;lock);</span><br><span class="line">critical section</span><br><span class="line">omp_unset_lock(&amp;lock);</span><br></pre></td></tr></table></figure>
<p>​    锁住的区域只允许单个线程进行访问，保证数据安全。</p>
<h4 id="6643-openacc"><a class="markdownIt-Anchor" href="#6643-openacc"></a> 6.6.4.3、OpenACC</h4>
<p>OpenACC，开放式并行编程标准，程序员能够轻松利用异构 CPU/GPU 计算系统的强大能力。和CUDA一样，是并行计算的主要平台架构。</p>
<h5 id="66431-简介"><a class="markdownIt-Anchor" href="#66431-简介"></a> 6.6.4.3.1、简介</h5>
<p>OpenACC 为并行程序员给编译器提供简单的提示，通过指令，使编译器能够识别哪些代码部分需要加速，无需程序员修改或改编底层代码本身。简化并行编程标准，把计算任务映射到加速器这方面，指令向编译器呈现出并行机制，从而让编译器能够更好执行工作。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192149273.jpeg" alt="https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=1683434966,140585891&amp;fm=15&amp;gp=0.jpg" /></p>
<p>OpenACC 指令由 PGI、Cray 以及英伟达在 CAPS 的支持下开发而成，是多家企业希望利用指令来简化 GPU 编程模型的一个共同愿景。硬件厂商和技术协会一起，这些企业均致力于支持一种共同的编程标准。共同把并行编程技术推向前进。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192149296.png" alt="img" /></p>
<p>OpenACC指令与OpenMP指令工作方式很类似，都是指令级别编程，适用于高度数据并行代码。可插入标准的C，C + +和Fortran程序直接指导编译器进行某些代码段的并行。这些并行的代码，编译器会特别注意数据在CPU和GPU（或其它）之间来回转移的逻辑关系，并将计算映射到适当的处理器上。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192149279.png" alt="img" /></p>
<p>这些指令由硬件支持，不需要较大的改动，相对小的改动以标示出加速并行区域。指令设计适用于一个通用并行处理器，这样相同的代码可以运行在多核CPU、GPU或任何编译器支持的其它类型的并行硬件上。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192149269.png" alt="img" /></p>
<h5 id="66432-发展与应用"><a class="markdownIt-Anchor" href="#66432-发展与应用"></a> 6.6.4.3.2、发展与应用</h5>
<p>2015年7月，北京，全球视觉计算技术行业领袖NVIDIA发布了OpenACC工具套件，通过全新的套件，科学研究将可以做更多事情，并大幅提升计算效率。</p>
<p>虽然计算核心在短时间内不会变得更快，这是硬件的制约，但处理器的并行计算能力越来越强大。这一趋势十年里一直存在，而且还会持续下去，通过软机制提高效率。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192149332.png" alt="img" /></p>
<p>OpenACC已在HPC行业中得到广泛支持，简化GPU等现代处理器的并行编程。2011年Cray、PGI以及NVIDIA等领先的HPC供应商推出OpenACC编程标准以来，已有8000多名研究人员和科学家采用了这一标准。并取得了卓越的成绩，免费的标准</p>
<p>OpenACC工具套件应用快捷，使用方便，快速对GPU编程。全新的OpenACC工具套件行业领先，获得了广泛的应用。</p>
<p>该工具套件中，向学术开发者和研究人员免费提供这一编译器，商业用户有90天的免费试用期，黄总还是很厚道的。</p>
<p>全新的OpenACC工具套件有一个特别的工具：NVProf Profiler，指导用户如何添加 OpenACC“指令”，会进行编译器提示，以加速代码实现。通过真实案例可以方便快捷的入门。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192149302.png" alt="img" /></p>
<p>简单的指令让研究人员能够感受到并行计算，运行加速，同时不会破坏现有的CPU代码，不浪费之前所有代码编写花费的时间，这些指令与代码具有着较好的应用。</p>
<h5 id="66433-硬件独立性"><a class="markdownIt-Anchor" href="#66433-硬件独立性"></a> 6.6.4.3.3、硬件独立性</h5>
<p>硬件独立性代表一个标准，无论对于硬件厂商或者软件厂商，对于HPC用户来说特别重要，无论软件厂商还是硬件厂商，不愿意接受那种受供应商限制的，非便携式编程环境。</p>
<p>OpenACC的一大主要特性是高性能移植，这主要是硬件独立性的结果。PGI OpenACC编译器则把这一优势推向全新高度，让世人惊叹。该编译器首次能够在x86多核CPU和GPU上加速OpenACC代码，极大程度提高了效率。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192149521.png" alt="img" /></p>
<p>没有一台配备GPU的系统时，编译器会在多个 CPU核心上完成代码并行化，进而提升性能。当系统中有GPU时，该编译器将会针对GPU做代码并行化的优化，最终与多核CPU相比可带来5~10倍的性能提升。这种提升大大提高了效率，在今天得到广泛的应用。</p>
<p>OpenACC代码在C语言基础上进行修改，通过添加compiler directives 编译器指令(pragmas): #pragma 来标示。这个和前面介绍的有些相似。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192149551.png" alt="img" /></p>
<p>cuda 中 __syncthreads()进行线程同步，目前的OpenAcc还没有线程同步机制。</p>
<p>OpenACCDevice model</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192149604.png" alt="img" /></p>
<p>OpenACCexcute model</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192149618.png" alt="img" /></p>
<h5 id="66434-实例01parallel-loops"><a class="markdownIt-Anchor" href="#66434-实例01parallel-loops"></a> 6.6.4.3.4、实例01—parallel loops</h5>
<p>第一段代码和第二段代码等效，在OpenAcc中一个parallel区域有一个单个loop组成。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma acc parallel loop copyin(M[0:Mh*Mw])</span><br><span class="line">copyin(N[0:Mw*Nw]) copyout(P[0:Mh*Nw])</span><br><span class="line">for (int i=0; i&lt;Mh; i++)</span><br><span class="line">&#123;</span><br><span class="line">    。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>等价于：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma acc parallel copyin(M[0:Mh*Mw])</span><br><span class="line">copyin(N[0:Mw*Nw]) copyout(P[0:Mh*Nw])</span><br><span class="line">&#123;</span><br><span class="line">    #pragma acc loop</span><br><span class="line">    for (int i=0; i&lt;Mh; i++) &#123;</span><br><span class="line">    。。。</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果说明：</p>
<p>copyin对应拷贝内存从host到device</p>
<p>copyout对应拷贝内存从device到host</p>
<h5 id="66435-实例02gangs-and-workers"><a class="markdownIt-Anchor" href="#66435-实例02gangs-and-workers"></a> 6.6.4.3.5、实例02—gangs and workers</h5>
<p>gangs可以类比成cuda的block；</p>
<p>workers可以类比成thread。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma acc parallel num_gangs(1024) num_workers(32)</span><br><span class="line">&#123;</span><br><span class="line">    #pragma acc loop gang</span><br><span class="line">    for (int i=0; i&lt;2048; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        #pragma acc loop worker</span><br><span class="line">        for (int j=0; j&lt;512; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            foo(i，j);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解释：线程分配: 1024<em>32 = 32K 个thread，两个循环题一共是执行2048</em>512 = 1M， 每个thread执行foo()函数 1M/32K = 32 次。</p>
<p>另外一个代码：</p>
<p>结果说明：代码会分配1023*32个thread，每个gang=1024， 对于每个gang来说执行a =23 是冗余的，只需要执行一次即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma acc parallel copyout(a) num_gangs(1024) num_workers(32)</span><br><span class="line">&#123;</span><br><span class="line">    a = 23;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再看下面的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma acc parallel num_gangs(32)</span><br><span class="line">&#123;</span><br><span class="line">    Statement 1;</span><br><span class="line">    #pragma acc loop gang</span><br><span class="line">    for (int i=0; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Statement 2;</span><br><span class="line">    &#125;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<p>Statement 3;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma acc loop gang</span><br><span class="line"></span><br><span class="line">for (int i=0; i&lt;m; i++)</span><br><span class="line">&#123;</span><br><span class="line">        Statement 4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Statement 5;</span><br><span class="line"></span><br><span class="line">if (condition) Statement 6;</span><br></pre></td></tr></table></figure>
<p>结果说明：从循环次数上来说，gang32个，statement2的循环次数n，statement4循环次数是m， 最终到底分配多少个thread取决于编译器，有可能m&gt;n，则分配m个，实际情况可能更加复杂。</p>
<p>statement1， 3， 5，6 对于32gang来说是冗余的，情况和上面的相同，可以看出OpenAcc中的冗余是对于gang来说的，下面的这种写法可以消除这种冗余：取得更好的效果，在编程时间应该注意。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma acc parallel num_gangs(1)</span><br><span class="line">num_workers(32)</span><br><span class="line">&#123;</span><br><span class="line">    Statement 1;</span><br><span class="line">    #pragma acc loop gang</span><br><span class="line">    for (int i=0; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Statement 2;</span><br><span class="line">    &#125;</span><br><span class="line">    Statement 3;</span><br><span class="line"></span><br><span class="line">    #pragma acc loop gang</span><br><span class="line">    for (int i=0; i&lt;m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Statement 4;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Statement 5;</span><br><span class="line"></span><br><span class="line">    if (condition)</span><br><span class="line">    &#123;</span><br><span class="line">        Statement 6;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="66436-实例03kernel-regions"><a class="markdownIt-Anchor" href="#66436-实例03kernel-regions"></a> 6.6.4.3.6、实例03—kernel regions</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma acc kernels</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    #pragma acc loop num_gangs(1024)</span><br><span class="line">    for (int i=0; i&lt;2048; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = b[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #pragma acc loop num_gangs(512)</span><br><span class="line">    for (int j=0; j&lt;2048; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        c[j] = a[j]*2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (int k=0; k&lt;2048; k++) </span><br><span class="line">    &#123;</span><br><span class="line">        d[k] = c[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果说明：</p>
<p>和前面比较，区别是 acc kernel， 也就是指令不一样，前面代码用的是acc parallel。</p>
<p>Kernel 结构主要描述程序员意图: 当前程序适合并行，编译器根据描述会有非常灵活的表现。把决定权留给编译器。</p>
<p>编译器的参与避免了硬件的模糊性，为并行开发提供了便利。</p>
<h4 id="6645-openal"><a class="markdownIt-Anchor" href="#6645-openal"></a> 6.6.4.5、OpenAL</h4>
<p>​    OpenAL，英文全称为：Open Audio Library，自由软件界的跨平台音效API，由Loki Software，主要应用是在音效缓冲和收听中编码。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192149105.png" alt="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1282481439,2142315962&amp;fm=26&amp;gp=0.jpg" /></p>
<p>​    OpenAL设计给多通道三维位置音效的特效表现，其 API 风格模仿自OpenGL。</p>
<p>​    Loki 倒闭以后，该开发接口，开始由自由软件/开放源始码社群继续维护。最大的主导者是创新科技，并得到来自 Apple 和自由软件/开放源代码爱好者的持续支援。这是今天仍在活跃的基本原因。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192149116.png" alt="img" /></p>
<p>​    OpenAL 主要功能是在来源物体、音效缓冲和收听者中编码。来源物体包含一个指向缓冲区的指标、声音的速度、位置和方向，以及声音强度。收听者物体包含收听者的速度、位置和方向，以及全部声音的整体增益。缓冲里包含 8 或 16 位元、单声道或立体声 PCM 格式的音效资料，表现引擎进行所有必要的计算，如距离衰减、多普勒效应等。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192149120.png" alt="img" /></p>
<p>​    不同于 OpenGL 规格，OpenAL 规格包含两个API分支：这是由于OpenAL的特点决定的。以实际 OpenAL 函式组成的核心，和 ALC API，ALC 用于管理表现内容、资源使用情况，并将跨平台风格封在其中。还有ALUT库，提供高阶“易用”的功能，其定位相当于 OpenGL 的 GLUT。</p>
<p>​    支持平台包括：Mac OS X、iOS、Linux、BSD、Solaris、IRIX、Windows PlayStation、Xbox等操作系统上。在如下工具中也进行广泛的应用。Blender - 3D 建模和渲染工具。Unity - 3D 游戏引擎和 IDE。Basic4gl - 编译器和编程软件。</p>
<h4 id="6646-opengl"><a class="markdownIt-Anchor" href="#6646-opengl"></a> 6.6.4.6、OpenGL</h4>
<p>​    略（上主题已有讲述）。</p>
<h3 id="665-总结"><a class="markdownIt-Anchor" href="#665-总结"></a> 6.6.5、总结</h3>
<p>​    人工智能应用的广泛性，在机器视觉层面，不可能靠一套框架进行开发，未来在机器视觉、人工智能、音视频处理层面不排除有更多支持库的出现。</p>
<p>​    美摄SDK应用人工智能技术，在智能视觉、视音频领域进行着探索，为短视频技术的发展，写下浓重的一笔，</p>
<p>​    基于工业相机的软件编程。厂商提供驱动与程序示例。工程公司参考相关示例，通过算法对相机视频媒体数据进行加工分析。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192149159.png" alt="https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3462397246,2717035819&amp;fm=26&amp;gp=0.jpg" /></p>
<p>​    机器视觉偏向于机器学习/并行运算，运用数据挖掘技术，进行模型训练。机器视觉在硬件上往往和GPU关联，在框架支持上和大数据进行关联。</p>
<p>​    国外重点进行人工智能算法研究，人工智能方案策划，人工智能工具研发。国内重点进行工具应用。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192149173.png" alt="img" /></p>
<p>​    目前，国内应用最多的是TensorFlow和PyTorch，来进行模型训练，导出接口，在应用层面调用。形成各种人工智能系统。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192149148.jpeg" alt="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1961163947,2304056094&amp;fm=26&amp;gp=0.jpg" /></p>
<p>​    视频领域的人工智能系统是视频智能应用的主要标柱，国内人工智能发展日新月异，在视频方面也有一些完善的框架与接口，为人工智能视频系统提供算法支持。</p>
<h2 id="68-启示"><a class="markdownIt-Anchor" href="#68-启示"></a> 6.8、启示</h2>
<p>​    硬件是推动软件技术发展的原动力，在硬件技术进步的基础上，智能时代为图形图像、音视频领域添加了人工智能的成分。</p>
<p>​    从图形图像角度来说，不仅是硬性参数的提升，更是对图像数据的智能修复处理。从视频角度来说，不仅仅是摄影、录制、编排硬术的提升，更是对视频数据的深度挖掘。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192149908.png" alt="img" /></p>
<p>​    智能修复与深度处理从前是不可想象的，当流媒体技术过渡到深度处理时，代表着人类信息加工能力的显著增强。从早期自然语言处理到今天流媒体的并行运算，代表着是技术的巨大进步。</p>
<p>​    硬件水平的进步，尤其是工业相机水平的进步，促进了高清晰领域的图形图像处理。传统相机水平的提升，必将为视频处理提供新的发展方向与发展空间。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192149895.png" alt="img" /></p>
<p>​    机器视觉技术是智能时代的核心技术，机器视觉技术整体分为两部分。第一部分是基于工业相机的专业处理，第二部分是传统视频智能处理。</p>
<p>​    国外科技公司肩负着智能时代硬件发展的重任，推动GPU、TPU、NPU、专业相机等硬件功能提升。同时提供音视频、图形图像领域的算法验证，给出相关解决方案。</p>
<p>​    国内科技公司担负着人工智能终端应用的重任，以国外底层研发为基础，进行行业分类，市场整合，应用落地。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192149919.png" alt="img" /></p>
<p>​    在量子计算机发展的大背景下，不远的将来，相信技术将会发生变革，行业将会重新洗牌。人工智能的基础理论将会有翻天覆地的变化，人工智能的应用将会更深刻与广泛。今天的人工智能是量子时代的一个前走而已。真正的人工智能是量子时代人工智能。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192149904.png" alt="img" /></p>
<p>​    在第四次科技革命的智能时代，黄色面孔、东方公司逐渐增多，这个沉默了200年的民族，开始重新屹立于世界民族之林。</p>
<h1 id="7-显示标准与视频处理单元"><a class="markdownIt-Anchor" href="#7-显示标准与视频处理单元"></a> 7、显示标准与视频处理单元</h1>
<p>​    消费级视频智能处理大体有10年左右，有了巨大的发展，展望未来，对应于大厂而言，竞争是标准的竞争。包含显示标准与处理单元，竞争推动了科技的进步，市场的繁荣。</p>
<p>​    新的显示硬件也不断发展，GPU基础上，出现了GPGPU、TPU、NPU、VPU、APU等新的视频处理单元，相信未来有更多的数据硬件处理单元出现。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150530.png" alt="img" /></p>
<p>​    人工智能还处在初级阶段，标准与规范处在变化中，随着高清晰视频硬件的出现，软件算法很多方面也面临着调整。近些年各国重视人工智能的发展，资本的投入，政策的驱动增添了人工智能发展的活力。</p>
<h2 id="71-显示标准"><a class="markdownIt-Anchor" href="#71-显示标准"></a> 7.1、显示标准</h2>
<p>​    多年江湖厮杀，各路显卡被赶尽杀绝，留下英伟达和AMD，·目前显卡技术的革新，主要就是A卡与N卡技术的发展。英伟达偏重人工智能，AMD偏重于GCN与APU方向。</p>
<p>​    近期倡导的显示技术有英伟达的G-Sync和AMD的Freesync 2。在介绍G-Sync的同时，有必要介绍下V-Sync。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150439.png" alt="img" /></p>
<h4 id="711-v-sync"><a class="markdownIt-Anchor" href="#711-v-sync"></a> 7.1.1、V-Sync</h4>
<p>​    垂直同步又称场同步（Vertical synchronization），从CRT显示器的显示原理来看，单个像素组成了水平扫描线，水平扫描线在垂直方向的堆积形成了完整的画面。</p>
<p>​    屏幕的刷新过程是每一行从左到右（行刷新，水平刷新，Horizontal Scanning），从上到下（屏幕刷新，垂直刷新，Vertical Scanning）。当整个屏幕刷新完毕，即一个垂直刷新周期完成，会有短暂的空白期，此时发出 VSync 信号。所以，VSync 中的 V 指的是垂直刷新中的垂直-Vertical。</p>
<p>​    显示器的刷新率受显卡DAC控制，显卡DAC完成一帧扫描后就会产生一个垂直同步信号。打开垂直同步指的是将该信号送入显卡3D图形处理部分，这样让显卡在生成3D图形时受垂直同步信号的制约。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150488.png" alt="img" /></p>
<p>​    显示器上的图像是一线一线扫描上去的，无论隔行扫描还是逐行扫描，显示器都有2种同步参数——水平同步和垂直同步。</p>
<p>​    水平同步脉冲（Horizontal synchronization pulse， Hsync）加在两个扫描行之间。它是一个短小的脉冲，一行扫描完成之后，它就会出现，指示着这一行扫描完成，同时也指示着下一行将要开始。</p>
<p>​    水平同步脉冲出现后，会有一小段叫horizontal back porch的时间，这段时间里的像素信号不会被显示出来，过了这一小段时间之后，电子枪就开始扫描新的一行，将要显示的内容扫描到显示器上。</p>
<p>​    垂直同步脉冲（Vertical synchronization， Vsync）是加在两帧之间。跟水平同步脉冲类似，但它指示着前一帧的结束，和新一帧的开始。 垂直同步脉冲是一个持续时间比较长的脉冲，可能持续一行或几行的扫描时间，但在这段时间内，没有像素信号出现。</p>
<h4 id="712-g-sync"><a class="markdownIt-Anchor" href="#712-g-sync"></a> 7.1.2、G-Sync</h4>
<p>​    G-SYNC技术可解决V-SYNC带来的取舍问题，不论画面更新率有多快，它都可以让屏幕与GPU完全同步，提供无与伦比的PC游戏体验。通过NVIDIA G-SYNC技术游戏场景可即时呈现在玩家的眼前，物件也将更清晰锐利，游戏也变得更流畅。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150522.png" alt="img" /></p>
<p>​    2013年10月18日，NVIDIA editor’s day第二天，连续发布GameStream PC Game for Shield以及ShadowPlay两项重磅技术之后，NVIDIA在加拿大蒙特利尔正式发布了全新的针对画面连贯性的新技术——G-SYNC。</p>
<p>​    作为垂直同步技术的替代以及自适应垂直同步技术的延伸，G-SYNC技术不仅解决了画面撕裂问题，同时从根本上解决了困扰垂直同步技术许久的画面视觉卡顿问题。</p>
<p>​    G-SYNC技术在显示器中内置一枚可与GeForce硬件直接通讯的芯片，这枚自带缓存的芯片可以协调显示器与GPU outputbuffer之间的数据同步。</p>
<p>​    通过G-SYNC芯片的控制，显示器的刷新延迟将可以与GPU帧输出延迟保持完全一致，支持G-SYNC技术的显示器会根据GPU当前的性能水平自动调节刷新率，</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150502.png" alt="img" /></p>
<p>​    G-SYNC芯片侦测到GPU的帧输出延迟大于16ms时，它会自动延长显示器的刷新延迟，避免传统的帧丢弃导致的视觉卡顿现象。</p>
<p>​    G-Sync能够去除游戏垂直同步（VSync）开启时的画面滞后问题，也能够克服垂直同步关闭时画面失真问题。常规显示器会直接同步GPU的处理结果，借助G-Sync模块，只有当GPU完成一帧的渲染和画面优化后，显示器才会刷新显示内容。</p>
<p>​    很多公司都推出了支持G-Sync图像增强技术的显示器,消除了屏幕撕裂和垂直同步输入延迟等影响， 增强了现有显示器功能的同时屏幕画面呈现出场景及时出现、物体更加锐利以及游戏运行更加顺畅等出色的显示效果。G-Sync能强制显示器运行在GPU的帧速率下，甚至能让原生刷新率降到更低，提供更好的视觉效果。</p>
<h4 id="713-freesync2"><a class="markdownIt-Anchor" href="#713-freesync2"></a> 7.1.3、FreeSync2</h4>
<p>​    FreeSync 2 是AMD力推的视觉效果增强技术，可有效消除游戏中常见的撕裂(Tearing)、卡顿(Shuttering)现象，保证画面流畅、无撕裂、无卡顿、无伪影。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150545.png" alt="img" /></p>
<p>​    图像撕裂是屏幕图像看起来不连贯，这是帧速率（显示图像帧的速率）与显示器刷新率（显示器图像刷新频率）不匹配的结果。FreeSync2为显示器提供可变刷新率，即动态刷新率（VRR / DRR）。该功能使显示器的刷新率与AMD Radeon显卡的帧速率相匹配。</p>
<p>​    FreeSync2支持高达240Hz的刷新率，具体取决于显示器。这样，可以享受显卡能够达到的最大帧速率。如果眼睛够敏锐的话，你可能会发现到输入延迟，或者鼠标移动和光标实际移动之间的延迟也降低了。FreeSync基于VESA的自适应同步协议，可以在DisplayPort和HDMI上运行。</p>
<p>​    FreeSync2支持高动态范围&amp;色域支持，低延迟、低刷新率补偿技术等。让游戏显示效果更加逼真。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150733.png" alt="img" /></p>
<p>​    从HDR内容到显示器传输时需要进行Tone Mapping，这个额外的计算增加了GPU处理数据，同时增加了延时。FreeSync2取消了传输过程的转换过程，降低HDR转换带来的延迟。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150710.png" alt="img" /></p>
<p>​    FreeSync2引入的另一个新功能是LFC，Low Frame Rate Compensation低刷新率补偿技术，当游戏的FPS小于显示器最低刷新率时，通过额外插帧(GPU计算，类似MEMC)，让低FPS的画面更加流畅。LFC技术的应用，即时显卡渲染FPS较低时也可以显著的改善画面流畅度，提高游戏体验。</p>
<h4 id="714-总结"><a class="markdownIt-Anchor" href="#714-总结"></a> 7.1.4、总结</h4>
<p>​    显示器是显示部分的前端，显示标准对显示硬件的发展起着引导的作用，显示标准的变革通过传统硬件大厂来推动，目前而论，只有NVIDIA、AMD、INTEL才有这样的实力。</p>
<p>​    显示标准对于图形图像、视频、硬件都有着紧密的联系，发展过程中，标准的改变将推动软硬件的发展。</p>
<p>​    美摄SDK，支持G-Sync、V-Sync、FreeSync2标准，支持最新显示规范，彰显短视频价值。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150772.png" alt="img" /></p>
<h2 id="72-vpu"><a class="markdownIt-Anchor" href="#72-vpu"></a> 7.2 VPU</h2>
<p>VPU(Video Processing Unit，视频处理单元）是一种全新的视频处理平台核心引擎，具有硬解码功能以及减少CPU负荷的能力。VPU可以减少服务器负载和网络带宽的消耗。</p>
<p>​    VPU由ATI提出，区别于传统GPU（Graph Process Unit，图形处理单元）。图形处理单元又包括视频处理单元、外视频模块和后处理模块这三个主要模块。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150284.png" alt="img" /></p>
<h3 id="721-vpu的基础特性"><a class="markdownIt-Anchor" href="#721-vpu的基础特性"></a> 7.2.1、VPU的基础特性</h3>
<p>​    A、支持视频编解码标准类别丰富，图像高清。</p>
<p>​    B、支持多种抗误码工具、多解码和全双工多方通话同时进行。</p>
<p>​    C、提供了可编程性、柔初性，以及易于升级的解码和编码或主机接口，因为在编解码处理和主接口都实现为可编程微处理中的固件。</p>
<h3 id="722-vpu特色及应用"><a class="markdownIt-Anchor" href="#722-vpu特色及应用"></a> 7.2.2、VPU特色及应用</h3>
<p>​    VPU针对视觉处理应用而设计，在性能、功耗和功能性方面都有特别的强化，使之更贴近于实际的应用需求，其设计兼顾到多种用途，专门为视觉处理进行硬件系统的优化。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150269.png" alt="img" /></p>
<p>​    VPU也是SoC，集成多个主控RISC的CPU、许多硬件加速器单元和矢量处理器阵列，专门为视觉海量像素设计的高性能影像信号处理器(ISP)，以及丰富的高速外围接口。</p>
<p>​    保证强大性能和功能的前提下，VPU采用更先进的集成电路工艺，大大缩小了芯片的尺寸，结合有效的技术手段，降低各个运算单元的功耗。</p>
<p>​    VPU为视觉应用提供了一个强大的平台，更多的开发工作是在软件上，基于VPU的视觉应用系统开发可以充分利用片上的硬件单元及相关的软件资源。</p>
<p>​    包含工具、支持库及框架的完整VPU软件开发套件(SDK)，视频处理器中涉及视觉处理的单元得到了增强，如核心视觉处理单元、线性代数运算矩阵，还有前端影像处理单元，不仅包含ISP处理，还有ISP仿真，支持相机调试工具。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150274.png" alt="img" /></p>
<p>​    图形处理能力的提升表现在支持图形检测API，为便于多核异构芯片开发而支持OpenCL。由于在视觉应用中，与高敏感度和超高像素的传感器的接驳尤为重要，因此专门有传感器支持接口单元。</p>
<p>​    VPU特有的工具单元提供视觉调试全面支持。VPU中的主控制器、BSP、HDK等通用单元以开放为主，便于客户进行更多应用开发。</p>
<h3 id="723-movidius"><a class="markdownIt-Anchor" href="#723-movidius"></a> 7.2.3、Movidius</h3>
<p>​    作为一个行业的平台领先者需要有足够的积累和不懈的进取，当然还要有强大的财力和物力、人力的支持，VPU平台的创建和发展也绝不轻松。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150303.png" alt="img" /></p>
<p>​    Movidius在都柏林成立，位于爱尔兰，在罗马尼亚，硅谷建立研发团队。公司创始人堪称半导体和处理器行业的元老，公司设立有技术指导委员会，确立公司的技术路线和VPU平台发展总体规划。</p>
<p>​    Movidius核心管理层，来源于ATI及其它知名公司资深的高管和专家。公司员工未过百人，研发人员占了九成，五分之一负责VPU芯片硬件设计，其余从事VPU上软件构建，可见VPU应用在很大程度上依赖于软件。2016年，Movidius被intel收购。</p>
<h3 id="724-intel"><a class="markdownIt-Anchor" href="#724-intel"></a> 7.2.4、INTEL</h3>
<p>​    2019年，英特尔人工智能峰会（Intel AI Summit 2019），英特尔展示了一系列新产品，旨在加速从云端到边缘的人工智能系统开发和部署，迎接人工智能浪潮的到来。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150309.png" alt="img" /></p>
<p>​    英特尔展示了面向训练 (NNP-T1000) 和面向推理 (NNP-I1000) 的英特尔Nervana神经网络处理器 (NNP)。作为英特尔为云端和数据中心客户提供的首个针对复杂深度学习的专用 ASIC芯片，英特尔Nervana NNP具备超高扩展性和超高效率。</p>
<p>​    英特尔还发布了下一代英特尔Movidius Myriad视觉处理单元 (VPU)，用于边缘媒体、计算机视觉和推理应用。</p>
<h3 id="725-代码示例"><a class="markdownIt-Anchor" href="#725-代码示例"></a> 7.2.5、代码示例</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * VPUCoder.h</span><br><span class="line"> *</span><br><span class="line"> * Current, Only Support YUV420sp encoder and decoder</span><br><span class="line"> *</span><br><span class="line"> *  Created on: Dec 16, 2013</span><br><span class="line"> *      Author: henry</span><br><span class="line"> *</span><br><span class="line"> *  Example:</span><br><span class="line"> *</span><br><span class="line"> *  int main()</span><br><span class="line"> *  &#123;</span><br><span class="line"> *  int ret = InitCodec();</span><br><span class="line"> *  //===========encode video</span><br><span class="line"> *  ret = StartEnc(&quot;/sdcard/test.mkv&quot;, 1280, 720, 30);</span><br><span class="line"> *</span><br><span class="line"> *  while(1)</span><br><span class="line"> *  &#123;</span><br><span class="line"> *         //get data and length, //unsigned char* data; int length</span><br><span class="line"> *         ret = ProcessEnc(data, length);</span><br><span class="line"> *  &#125;</span><br><span class="line"> *  ret = StopEnc();</span><br><span class="line"> *</span><br><span class="line"> *  //===========decode video</span><br><span class="line"> *  ret = ProcessDec(&quot;/sdcard/test.mkv&quot;, 1280, 720);</span><br><span class="line"> *  return 0;</span><br><span class="line"> *  &#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">#ifndef VPUCODER_H_</span><br><span class="line">#define VPUCODER_H_</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Init encoder and decoder handle, only call once, must first call</span><br><span class="line"> *</span><br><span class="line"> * @return 0 is successful, another fail</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">int InitCodec();</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * setup encoder configure</span><br><span class="line"> * @param filePath   : save file path</span><br><span class="line"> * @param enc_width  : video width</span><br><span class="line"> * @param enc_height : video height</span><br><span class="line"> * @param enc_fps    : video fps</span><br><span class="line"> *</span><br><span class="line"> * @return 0 is successful, another fail</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">int StartEnc(const char* filePath, uint32_t enc_width, uint32_t enc_height, uint32_t enc_fps);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * stop encode video</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">void StopEnc();</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @params data   : frame data</span><br><span class="line"> * @params length : frame length</span><br><span class="line"> *</span><br><span class="line"> * @return 0 is successful, another fail</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">int ProcessEnc(const unsigned char* data, uint32_t length);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * setup decoder configure</span><br><span class="line"> * @param filePath   : source file path</span><br><span class="line"> * @param enc_width  : video width</span><br><span class="line"> * @param enc_height : video height</span><br><span class="line"> *</span><br><span class="line"> * @return 0 is successful, another fail</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">int ProcessDec(const char* filePath, uint32_t dec_width, uint32_t dec_height);</span><br><span class="line">#endif /* VPUCODER_H_ */</span><br></pre></td></tr></table></figure>
<h3 id="726-总结"><a class="markdownIt-Anchor" href="#726-总结"></a> 7.2.6、总结</h3>
<p>​    GPU的概念由NVIDIA公司提出，GPU英文全称 Graphic Processing Unit，中文译为“图形处理器”。</p>
<p>​    VPU的概念由ATI公司提出，VPU英文全称 Visual Processing Unit，中文译为“视觉处理器”。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150391.png" alt="img" /></p>
<p>​    GPU与VPU实际均为显示处理核心，GPU提供了更多图形接口，VPU提供了更多视频接口。2006年，ATI公司被AMD公司收购之后，已正式采用GPU的名字。</p>
<p>​    INTEL的加入，VPU近些年取得巨大的发展，社会发展中，视频处理愈来愈重要，VPU适应实时潮流，尤其在嵌入式领域应用广泛。</p>
<p>​    美摄SDK，国际领先的视频引擎，优秀的视频运算架构，引领短视频发展的方向。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150565.png" alt="img" /></p>
<h2 id="73-apu"><a class="markdownIt-Anchor" href="#73-apu"></a> 7.3 APU</h2>
<p>APU是“Accelerated Processing Units”的简称，中文名字叫加速处理器，是AMD融聚未来理念的产品，它第一次将处理器和独显核心做在一个晶片上。</p>
<p>​    CPU与APU协同计算、彼此加速，具有高性能处理器和最新支持DX11独立显卡的处理性能，大幅提升电脑运行效率，实现了CPU与GPU真正的融合。APU是处理器未来发展的趋势。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150692.png" alt="img" /></p>
<h3 id="731-amd与apu"><a class="markdownIt-Anchor" href="#731-amd与apu"></a> 7.3.1、AMD与APU</h3>
<p>​    从APU发展来看，AMD让CPU和GPU彻底融为一体，无论是AMD的Llano，还是Brazos，目标都是一致的。</p>
<p>​    AMD认为，CPU和GPU的融合分为四步进行：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150725.png" alt="img" /></p>
<p>​    第一步：物理整合(Physical Integration)，将CPU和GPU集成在同一块硅芯片上，利用高带宽的内部总线通讯，集成高性能的内存控制器，借助开放的软件系统促成异构计算。</p>
<p>​    第二步：平台优化(Optimized Platforms)，CPU和GPU之间互连接口进一步增强，统一进行双向电源管理，GPU支持高级编程语言。</p>
<p>​    第三步：架构整合(Architectural Integration)，实现统一的CPU/GPU寻址空间、GPU使用可分页系统内存、GPU硬件可调度、CPU/GPU/APU内存协同一致。</p>
<p>​    第四步：架构和系统整合(Architectural &amp; OS Integration)，主要特点包括GPU计算环境切换、GPU图形优先计算、独立显卡的PCI-E协同、任务并行运行实时整合等等。</p>
<p>​    AMD Fusion系列APU将多核(x86)中央处理器、支持DX11标准的强大独立显卡性能以及高速总线融合在一块芯片上，拥有并行处理引擎和专门高清视频加速模块，实现数据在不同处理核心间的加速传递。</p>
<p>​    基于AMD Fusion APU的台式机、笔记本和高清轻薄本已经销售多年。基于AMD Fusion APU的平板电脑和嵌入式电脑有很多优点。高清视频播放效果流畅，满足多种应用的突破性的计算能力，全面支持DX以及强大的电池续航能力。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150720.png" alt="img" /></p>
<p>​    AMD通过和宏碁、华硕、戴尔、富士通、惠普、联想、微星、三星、索尼、东芝等领先PC厂商合作，在电脑上推出基于AMD Fusion APU的新品。</p>
<p>AMD公司高级副总裁Rick Bergman表示：“简而言之，我认为AMD Fusion加速处理器是自从x86架构问世之后40余年来处理器领域最伟大的进步。通过这一跨越，我们让顾客能够随时随地体验高清视频、享受    超级个人计算体验，并且让笔记本电脑具备全天的电池续航能力。这是一个全新的产品系列，全新的视角，给消费者带来全新的精彩应用体验。”</p>
<h3 id="732-vision引擎"><a class="markdownIt-Anchor" href="#732-vision引擎"></a> 7.3.2、VISION引擎</h3>
<p>​    随着硬件技术的进步，高清视频的时代到来了。从YouTube视频网站到DirectX12电脑游戏再到蓝光碟片，得到广泛应用。AMD VISION引擎横空出世，一系列与高清视频相关的独特性能将使基于AMD APU的个人电脑为用户带来更加生动与逼真的高清视频体验。</p>
<p>​    VISION引擎汇集了下列功能：</p>
<ol>
<li>支持DirectX11标准</li>
<li>强大的并行处理能力加速应用性能提升</li>
<li>AMD Radeon™ HD 6800系列显卡整合UVD3视频加速模块</li>
<li>独特的图形驱动程序，每月更新，不断提高视频性能。</li>
</ol>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150709.png" alt="img" /></p>
<p>​    带有VISION引擎标识的电脑代表着更强大的性能。更流畅的上网体验；华丽、流畅、安静的高清视频播放；使标清视频播放出高清效果；将2D内容转换成更立体的3D格式；轻松高清应用；为用户带来3D游戏体验。</p>
<p>​    运算体验与软件密不可分，开发者受到CPU和GPU处理信息时各自为战进行独立计算的制约。今天，AMD Fusion APU消除了这一障碍，开发者可以利用GPU的并行处理能力。</p>
<p>​    AMD Fusion技术全天电池续航能力，续航时间长达10小时以上。单芯片设计所带来的节电效果超过我们的预料。</p>
<h3 id="733-apu新品"><a class="markdownIt-Anchor" href="#733-apu新品"></a> 7.3.3、APU新品</h3>
<p>​    锐龙7 5700G处理器采用Cezanne（塞尚）核心，与AMD路线图中一致。其最高频率大约为4.75GHz，为8核16线程，三级缓存为16MB，只有“标准版”的一半，CPU测试成绩则绝对是锐龙5000级别的，轻松压制十代酷睿和自家的锐龙3000。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150701.png" alt="img" /></p>
<h3 id="734-apu编程"><a class="markdownIt-Anchor" href="#734-apu编程"></a> 7.3.4、APU编程</h3>
<p>​    APU没有设计独立的开发环境，APU目前支持OpenCL与OpenGL、DirectX等。在并行编程领域，主要支持的是OpenCL。</p>
<p>下面是OpenCL示例代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line">#include &lt;sstream&gt;</span><br><span class="line">#include &lt;CL/cl.h&gt;</span><br><span class="line"></span><br><span class="line">const int ARRAY_SIZE = 1000;</span><br><span class="line"></span><br><span class="line">//一、 选择OpenCL平台并创建一个上下文</span><br><span class="line">cl_context CreateContext()</span><br><span class="line">&#123;</span><br><span class="line">       cl_int errNum;</span><br><span class="line">       cl_uint numPlatforms;</span><br><span class="line">       cl_platform_id firstPlatformId;</span><br><span class="line">       cl_context context = NULL;</span><br><span class="line"></span><br><span class="line">       //选择可用的平台中的第一个</span><br><span class="line">       errNum = clGetPlatformIDs(1, &amp;firstPlatformId, &amp;numPlatforms);</span><br><span class="line">       if (errNum != CL_SUCCESS || numPlatforms &lt;= 0)</span><br><span class="line">       &#123;</span><br><span class="line">              std::cerr &lt;&lt; &quot;Failed to find any OpenCL platforms.&quot; &lt;&lt; std::endl;</span><br><span class="line">              return NULL;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       //创建一个OpenCL上下文环境</span><br><span class="line">       cl_context_properties contextProperties[] =</span><br><span class="line">       &#123;</span><br><span class="line">              CL_CONTEXT_PLATFORM,</span><br><span class="line">              (cl_context_properties)firstPlatformId,</span><br><span class="line">              0</span><br><span class="line">       &#125;;</span><br><span class="line"></span><br><span class="line">       context = clCreateContextFromType(contextProperties, CL_DEVICE_TYPE_GPU,</span><br><span class="line">              NULL, NULL, &amp;errNum);</span><br><span class="line"></span><br><span class="line">       return context;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//二、 创建设备并创建命令队列</span><br><span class="line">cl_command_queue CreateCommandQueue(cl_context context, cl_device_id *device)</span><br><span class="line">&#123;</span><br><span class="line">       cl_int errNum;</span><br><span class="line">       cl_device_id *devices;</span><br><span class="line">       cl_command_queue commandQueue = NULL;</span><br><span class="line">       size_t deviceBufferSize = -1;</span><br><span class="line">       // 获取设备缓冲区大小</span><br><span class="line">       errNum = clGetContextInfo(context, CL_CONTEXT_DEVICES, 0, NULL, &amp;deviceBufferSize);</span><br><span class="line">       if (deviceBufferSize &lt;= 0)</span><br><span class="line">       &#123;</span><br><span class="line">              std::cerr &lt;&lt; &quot;No devices available.&quot;;</span><br><span class="line">              return NULL;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       // 为设备分配缓存空间</span><br><span class="line">       devices = new cl_device_id[deviceBufferSize / sizeof(cl_device_id)];</span><br><span class="line">       errNum = clGetContextInfo(context, CL_CONTEXT_DEVICES, deviceBufferSize, devices, NULL);</span><br><span class="line"></span><br><span class="line">       //选取可用设备中的第一个</span><br><span class="line">       commandQueue = clCreateCommandQueue(context, devices[0], 0, NULL);</span><br><span class="line"></span><br><span class="line">       *device = devices[0];</span><br><span class="line">       delete[] devices;</span><br><span class="line">       return commandQueue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 三、创建和构建程序对象</span><br><span class="line">cl_program CreateProgram(cl_context context, cl_device_id device, const char* fileName)</span><br><span class="line">&#123;</span><br><span class="line">       cl_int errNum;</span><br><span class="line">       cl_program program;</span><br><span class="line"></span><br><span class="line">       std::ifstream kernelFile(fileName, std::ios::in);</span><br><span class="line">       if (!kernelFile.is_open())</span><br><span class="line">       &#123;</span><br><span class="line">              std::cerr &lt;&lt; &quot;Failed to open file for reading: &quot; &lt;&lt; fileName &lt;&lt; std::endl;</span><br><span class="line">              return NULL;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       std::ostringstream oss;</span><br><span class="line">       oss &lt;&lt; kernelFile.rdbuf();</span><br><span class="line">       std::string srcStdStr = oss.str();</span><br><span class="line">       const char *srcStr = srcStdStr.c_str();</span><br><span class="line">       program = clCreateProgramWithSource(context, 1,</span><br><span class="line">              (const char**)&amp;srcStr,</span><br><span class="line">              NULL, NULL);</span><br><span class="line"></span><br><span class="line">       errNum = clBuildProgram(program, 0, NULL, NULL, NULL, NULL);</span><br><span class="line">       return program;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建和构建程序对象</span><br><span class="line">bool CreateMemObjects(cl_context context, cl_mem memObjects[3],</span><br><span class="line">       float *a, float *b)</span><br><span class="line">&#123;</span><br><span class="line">       memObjects[0] = clCreateBuffer(context, CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR,</span><br><span class="line">              sizeof(float) * ARRAY_SIZE, a, NULL);</span><br><span class="line">       memObjects[1] = clCreateBuffer(context, CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR,</span><br><span class="line">              sizeof(float) * ARRAY_SIZE, b, NULL);</span><br><span class="line">       memObjects[2] = clCreateBuffer(context, CL_MEM_READ_WRITE,</span><br><span class="line">              sizeof(float) * ARRAY_SIZE, NULL, NULL);</span><br><span class="line">       return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 释放OpenCL资源</span><br><span class="line">void Cleanup(cl_context context, cl_command_queue commandQueue,</span><br><span class="line">       cl_program program, cl_kernel kernel, cl_mem memObjects[3])</span><br><span class="line">&#123;</span><br><span class="line">       for (int i = 0; i &lt; 3; i++)</span><br><span class="line">       &#123;</span><br><span class="line">              if (memObjects[i] != 0)</span><br><span class="line">                     clReleaseMemObject(memObjects[i]);</span><br><span class="line">       &#125;</span><br><span class="line">       if (commandQueue != 0)</span><br><span class="line">              clReleaseCommandQueue(commandQueue);</span><br><span class="line"></span><br><span class="line">       if (kernel != 0)</span><br><span class="line">              clReleaseKernel(kernel);</span><br><span class="line">       if (program != 0)</span><br><span class="line">              clReleaseProgram(program);</span><br><span class="line">       if (context != 0)</span><br><span class="line">              clReleaseContext(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char** argv)</span><br><span class="line">&#123;</span><br><span class="line">       cl_context context = 0;</span><br><span class="line">       cl_command_queue commandQueue = 0;</span><br><span class="line">       cl_program program = 0;</span><br><span class="line">       cl_device_id device = 0;</span><br><span class="line">       cl_kernel kernel = 0;</span><br><span class="line">       cl_mem memObjects[3] = &#123; 0, 0, 0 &#125;;</span><br><span class="line">       cl_int errNum;</span><br><span class="line"></span><br><span class="line">       // 一、选择OpenCL平台并创建一个上下文</span><br><span class="line">       context = CreateContext();</span><br><span class="line"></span><br><span class="line">       // 二、 创建设备并创建命令队列</span><br><span class="line">       commandQueue = CreateCommandQueue(context, &amp;device);</span><br><span class="line"></span><br><span class="line">       //创建和构建程序对象</span><br><span class="line">       program = CreateProgram(context, device, &quot;HelloWorld.cl&quot;);</span><br><span class="line"></span><br><span class="line">       // 四、 创建OpenCL内核并分配内存空间</span><br><span class="line">       kernel = clCreateKernel(program, &quot;hello_kernel&quot;, NULL);</span><br><span class="line"></span><br><span class="line">       //创建要处理的数据</span><br><span class="line">       float result[ARRAY_SIZE];</span><br><span class="line">       float a[ARRAY_SIZE];</span><br><span class="line">       float b[ARRAY_SIZE];</span><br><span class="line">       for (int i = 0; i &lt; ARRAY_SIZE; i++)</span><br><span class="line">       &#123;</span><br><span class="line">              a[i] = (float)i;</span><br><span class="line">              b[i] = (float)(ARRAY_SIZE - i);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       //创建内存对象</span><br><span class="line">       if (!CreateMemObjects(context, memObjects, a, b))</span><br><span class="line">       &#123;</span><br><span class="line">              Cleanup(context, commandQueue, program, kernel, memObjects);</span><br><span class="line">              return 1;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       // 五、 设置内核数据并执行内核</span><br><span class="line">       errNum = clSetKernelArg(kernel, 0, sizeof(cl_mem), &amp;memObjects[0]);</span><br><span class="line">       errNum |= clSetKernelArg(kernel, 1, sizeof(cl_mem), &amp;memObjects[1]);</span><br><span class="line">       errNum |= clSetKernelArg(kernel, 2, sizeof(cl_mem), &amp;memObjects[2]);</span><br><span class="line"></span><br><span class="line">       size_t globalWorkSize[1] = &#123; ARRAY_SIZE &#125;;</span><br><span class="line">       size_t localWorkSize[1] = &#123; 1 &#125;;</span><br><span class="line"></span><br><span class="line">       errNum = clEnqueueNDRangeKernel(commandQueue, kernel, 1, NULL,</span><br><span class="line">              globalWorkSize, localWorkSize,</span><br><span class="line">              0, NULL, NULL);</span><br><span class="line"></span><br><span class="line">       // 六、 读取执行结果并释放OpenCL资源</span><br><span class="line">       errNum = clEnqueueReadBuffer(commandQueue, memObjects[2], CL_TRUE,</span><br><span class="line">              0, ARRAY_SIZE * sizeof(float), result,</span><br><span class="line">              0, NULL, NULL);</span><br><span class="line"></span><br><span class="line">       for (int i = 0; i &lt; ARRAY_SIZE; i++)</span><br><span class="line">       &#123;</span><br><span class="line">              std::cout &lt;&lt; result[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       std::cout &lt;&lt; std::endl;</span><br><span class="line">       std::cout &lt;&lt; &quot;Executed program succesfully.&quot; &lt;&lt; std::endl;</span><br><span class="line">       getchar();</span><br><span class="line">       Cleanup(context, commandQueue, program, kernel, memObjects);</span><br><span class="line"></span><br><span class="line">       return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="735-总结"><a class="markdownIt-Anchor" href="#735-总结"></a> 7.3.5、总结</h3>
<p>​    APU的成功，巩固了AMD的市场，和INTEL形成有力的竞争。推动处理器技术、架构技术、并行计算技术的发展。多年以来，INTEL吊打AMD，APU的出现，这一局面得到改变。</p>
<p>​    并行计算领域，APU主要支持OpenCL技术，随着时间的推移，OpenCL技术将不断完善，驱动将不断更新。</p>
<p>​    AMD有着光辉的过去，也应该有着辉煌的明天。为处理器的发展做出了卓越的贡献。图为台湾籍AMD总裁苏姿丰女士。英伟达的黄仁勋为苏姿丰的舅舅。在芯片领域，台籍华人有着卓越的贡献。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150730.png" alt="img" /></p>
<h2 id="74-gpgpu"><a class="markdownIt-Anchor" href="#74-gpgpu"></a> 7.4 gpgpu</h2>
<p>通用图形处理器（General-purpose computing on graphics processing units，简称GPGPU），利用处理图形任务的图形处理器来计算原本由中央处理器处理的通用计算任务。这些通用计算与图形处理没有关系。</p>
<p>​    现代图形处理器有强大的并行处理能力和可编程流水线，流处理器可以处理非图形数据。在面对单指令流多数据流（SIMD），且数据处理的运算量远大于数据调度和传输的需要时，通用图形处理器在性能上大大超越了传统的中央处理器应用程序。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150945.png" alt="img" /></p>
<h3 id="741-主要功能"><a class="markdownIt-Anchor" href="#741-主要功能"></a> 7.4.1、主要功能</h3>
<p>​    通用图形处理器是近年来出现的计算机芯片，在航空航天及防务应用中的高性能嵌入式计算中广泛应用。前一个十年里作为高端计算机游戏的图形处理引擎引入，是一种大规模并行处理器。不仅有助于复杂的浮点计算，而且容易编程。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150014.png" alt="img" /></p>
<p>​    通用图形处理器芯片的主要设计制造商：加利福尼亚州圣克拉拉的NVIDIA公司和加利福亚州桑尼维尔的先进微型器件公司（AMD公司）。</p>
<h3 id="742-设计优势"><a class="markdownIt-Anchor" href="#742-设计优势"></a> 7.4.2、设计优势</h3>
<p>​    通用图形处理器广泛使用，其设计支持：包括“开放性图形库”（Open Graphics Library， OpenGL）语言、NVIDIA公司创造的并行处理编程语言CUDA、最近出现的“开放性计算语言”（ Open Computing Language， OpenCL）。硬件平台的支持为软件开发提供了便利。</p>
<p>​    下图是中国天树之新推出的最新7NM GPGPU。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150926.png" alt="img" /></p>
<p>​    在OpenGL，CUDA和OpenCL编程技术出现之前，大规模并行处理的编程是一项困难的任务，为数不多的专家采用极其神秘(小众编程)语言才能够完成。新出现的软件编程框架，尤其是OpenCL有助于熟悉C语言和C++语言的程序编制人员接受通用图形处理器技术。</p>
<p>​    通用图形处理器中，多个处理核规则排列在一起，随着时间的推移，器件中处理核的数量会越来越多，通用图形处理器的软件没有必要随着处理器核数量的增加而重新编写。需要有较好的编程支持。软件框架应该适应硬件设计的改变。</p>
<h3 id="743-技术原理"><a class="markdownIt-Anchor" href="#743-技术原理"></a> 7.4.3、技术原理</h3>
<p>​    富兰克林说，通用图形处理器可以用来解析事物以得到可利用的信息，传递周围环境中的有用材料。通用图形处理器所擅长的是完成两方面的工作，一是表现事物，二是解析事物。</p>
<p>​    通用图形处理器芯片的应用领域从单一的图形处理装置扩展到了信号处理装置，通用图形处理器的软件编程语言也在向着信号处理和通用处理扩展。类似于“开放性图形库”（OpenGL）那样的图形处理语言就可以用于通用处理。</p>
<p>​    通用计算技术，让显卡参与原本CPU计算任务的技术，从提出到现在十余年时间，但是发展神速。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150899.png" alt="img" /></p>
<p>​    十年前，高清视频刚流行时，编码高清视频对于电脑来说，处理非常困难。视频编码过程中，大部分运算都是浮点类型的，CPU不善于做这种运算，GPU对于这种类型的计算相当拿手，计算起来量又大又快，那个年代人们在思索，能否用GPU来编码高清视频。</p>
<p>​    当时业界的研究重点转向了GPGPU，英伟达凭借着强大的技术实力，在硬件与计算机平台领域。英伟达第一个推出了一套比较完整的解决方案，将原本CPU的运算搬到了GPU之上，视频编码速度比原先快了几倍。</p>
<p>​    CPU有着通用性的需求，它上面单个核心会设计的非常大而全面，并且由于CPU计算的特性，核心中很大一部分面积用来构建缓存（一个核心中往往有L1和L2两级缓存）和控制单元（解码器与分支预测等前端单元）。CPU功能的强大，代表着CPU本身体量的大，尤其对于缓存的集中。</p>
<p>​    实际用来运算的单元面积可能仅仅只占整个核心的一半甚至不到（如图）。种种原因使CPU没有办法做非常大的规模，一个核心中能塞入的东西有限，总体的核心数需要控制在一个合理范围中，多了就会发生各种问题。硬件集成是很麻烦的事情，当工艺没有足够进步的时间，集成发展的大门就关闭了。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150043.png" alt="img" /></p>
<p>​    八核Coffee Lake的核心图，可以看到，四个核心的面积已经接近右边的集成GPU。而GPU的设计理念就简单很多，图形计算是一项简单直接的“粗活”，相对单调直接。复杂度远不如CPU要负责的各种各样不同类型的工作，当年想要提高图形计算速度的一个简单办法就是扩大处理器中含有的单元数量。</p>
<p>​    GPU对于特定的计算任务，有更大的计算单元，在运算能力上远超CPU，表现出来就是现在的GPU在浮点运算吞吐量上远超CPU。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150923.png" alt="img" /></p>
<p>​    CPU与GPU在构造上的不同</p>
<p>​    GPU适合大批量特定计算，尤其是并行计算，几大图形软硬件厂商都推出了自己的GPGPU计算解决方案，下面主题进行介绍。</p>
<h3 id="744-支持方"><a class="markdownIt-Anchor" href="#744-支持方"></a> 7.4.4、支持方</h3>
<h4 id="7441-ati-stream"><a class="markdownIt-Anchor" href="#7441-ati-stream"></a> 7.4.4.1、ATI Stream</h4>
<p>​    首先提出GPGPU实现的厂商是被AMD收购前的ATI，并专门提供了一套开发工具包（SDK），让程序员用该套工具调用GPU来参与计算的能力。不过由于各种限制和AMD收购ATI后支持不足，当时管理也比较混乱，这套SDK在与Nvidia CUDA的竞争中处于下风，后来AMD官方转向支持    OpenCL，这套SDK最终停止了开发。今天很少有人听到这套并行计算框架</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150205.png" alt="img" /></p>
<p>​    ATI Stream Logo</p>
<h4 id="7442-cuda"><a class="markdownIt-Anchor" href="#7442-cuda"></a> 7.4.4.2、CUDA</h4>
<p>​    CUDA是Nvidia在G80时代推出的一项技术，也是今天最流行的技术。全称Compute Unified Device Architechture，统一计算架构。从G80核心开始，Nvidia率先采用了一种统一设计的架构，将原本管线分工式设计转变为统一化的处理器设计。</p>
<p>​    CUDA伴随着G80核心的发布一起公之于众，让程序员用C和C++来编写用GPU运行的程序，学习成本比ATI Stream要低一些。今天在并行计算集群领域，CUDA有着广泛的应用。例如TensorFlow和各种音视频引擎平台。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150197.png" alt="img" /></p>
<p>​    Nvidia CUDA Logo</p>
<p>​    CUDA是目前应用最为广泛的一种GPGPU实现， Nvidia的强力推广之下，CUDA在许多领域大放异彩，今天拥有最光大的市场。英伟达曾经设计过无数成功的硬件，CUDA可以说是英伟达设计的最成功的并行计算平台。CUDA同时推动了英伟达硬件技术的应用</p>
<h4 id="7443-opencl"><a class="markdownIt-Anchor" href="#7443-opencl"></a> 7.4.4.3、OpenCL</h4>
<p>​    上面两个GPGPU的实现都是有平台针对性的，要想用他们的解决方案你就得用AMD和英伟达的硬件，而OpenCL就不一样了。所谓Open就是一个开放的标准，但是需要各家硬件厂商为OpenCL提供驱动程序。</p>
<p>​    OpenCL最早由苹果公司开发出的异构计算框架，苹果公司将这套框架的草案提交到Khronos 组织，作为开放标准供业界使用。在2008年末，1.0版本正式公开，目前Intel、AMD与Nvidia的GPU都支持这套框架。这是除了CUDA之后，另一个流行的GPGPU计算框架。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150202.png" alt="img" /></p>
<p>​    OpenCL不仅限于x86平台上提供的异构计算框架，跨平台和开放标注的特性，还可以使用专门的可编程电路来加速计算。有广泛的支持空间，业界对于它的支持非常广泛，下图是OpenCL联盟成员。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150253.png" alt="img" /></p>
<p>​    OpenCL联盟</p>
<h4 id="7444-directcompute"><a class="markdownIt-Anchor" href="#7444-directcompute"></a> 7.4.4.4、DirectCompute</h4>
<p>​    微软是软件行业的老大，在并行计算领域，微软也在进行积极的探索。DirectCompute是微软从DirectX 10开始加入的用于通用计算目的的API集，调用GPU进行加速计算。</p>
<p>​    从Vista开始，Windows的各种桌面特效就开始采用DirectCompute来加速计算。在DirectX 11中，微软完善了这套API，并且在Windows系统上更多地使用GPU来加速计算系统界面的各种特效。</p>
<p>​    不仅仅是专业的图形图像、音视频领域，在操作系统领域，对并行计算的要求也很好。当我们在使用微软的VS技术时间，VS技术的一大技术支柱就是并行计算技术。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150332.png" alt="img" /></p>
<p>​    GPU-Z显示该GPU支持的通用计算特性</p>
<h3 id="745-媒体编码加速"><a class="markdownIt-Anchor" href="#745-媒体编码加速"></a> 7.4.5、媒体编码加速</h3>
<p>​    十年前，H.264等面向高清应用的视频编码刚流行，CPU的性能限制，编码一段H.264的视频是一件相当耗费时间的事情，所以人们想到了用GPU来加速视频的编码。</p>
<p>​    Nvidia刚推出CUDA的时候，就将加速视频编码作为该技术的一大卖点，免费提供了一个支持CUDA技术来转码的软件BadaBoom。后来，Nvidia在显卡上加入了专门用于视频编解码的硬件电路，开放了名为NVENC的编码API供软件工程师调用，通用计算也就此离开了这个距离我们最近的领域。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150434.png" alt="img" /></p>
<p>​    BadaBoom加速视频转码</p>
<p>​    Adobe是图形图像、音视频技术的霸主。很早就在旗下的CS和CC软件中加入了GPGPU的支持，Premiere Pro和After Effect都支持OpenCL来加速视频实时预览和特效。Adode对并行计算技术的应用走在各家公司前列。</p>
<h3 id="746-视频补帧与画面优化"><a class="markdownIt-Anchor" href="#746-视频补帧与画面优化"></a> 7.4.6、视频补帧与画面优化</h3>
<p>​    英伟达、英特尔和AMD三家相继在自己的GPU中加入专用计算电路用以加速编解码视频之后，通用计算就离开了这个领域。不满足于既有的视频品质的人们，又相继开发出了新的可以利用GPGPU的功能：视频补帧。大大改善了视频质量。</p>
<p>​    视频补帧：是原本低帧数的视频，通过上下帧的计算，渲染出一帧原本不存在的画面补在两帧之间，使其观感更加流畅。</p>
<p>​    比如将24帧的视频补帧至60帧，视频质量圆润流畅。因为这个过程计算量过于庞大，使用CPU跟不上视频播放的速度，没法做到实时补帧，开发者就将这个功能搬到了GPU上来运行，很多人都曾经使用的SVP4，就是一个利用GPGPU的补帧软件。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150467.png" alt="img" /></p>
<p>​    SVP4补帧软件界面</p>
<p>​    科技发展永无止境，视频技术也不例外。视频画面优化领域，强大的视频渲染器MadVR也是利用GPGPU来优化视频画面。</p>
<p>​    比如视频播放中出现的色带、色环，在压制过程中出现的瑕疵等，可以使用GPGPU在视频播放过程中进行实时的弥补。使视频更加圆润与高清，视频技术的发展永无止境。</p>
<h3 id="747-人工智能与深度学习"><a class="markdownIt-Anchor" href="#747-人工智能与深度学习"></a> 7.4.7、人工智能与深度学习</h3>
<p>​    人工智能与深度学习是近年来非常热门的两个有关联的领域，训练人工智能需要非常大的数据计算量，这时候就可以利用上GPU的强大功能，谷歌的深度学习框架TensorFlow，以及FaceBook的Pytorch就使用CUDA来加速学习。</p>
<p>​    Nvidia这两年不断展示了它们在机器学习方面的一些结果，在RTX系列上引入的DLSS（深度学习抗锯齿）技术就是利用机器学习来达成的。</p>
<p>​    英伟达今天在人工智能领域占据着重要的位置，在科技发展过程中，很多公司靠软件驱动技术发展，英伟达靠硬件驱动技术的发展。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150471.png" alt="img" /></p>
<p>​    DLSS技术</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150487.png" alt="img" /></p>
<p>​    上图是CUDA在科研领域的一些应用，可以看到GPU就在我们的身边。</p>
<h3 id="748-超级计算机"><a class="markdownIt-Anchor" href="#748-超级计算机"></a> 7.4.8、超级计算机</h3>
<p>​    英伟达在G80开始就推出同架构的高品质计算卡，Tesla品牌之下。诞生了很多用Tesla计算卡来组建的超级计算机。硬件技术的优势，导致英伟达在超算领域领跑全球。</p>
<p>​    人工智能是英伟达的发展方向，相信近几年，使用英伟达技术的计算机会逐渐增多。会曾经竞争贝尔·戈登奖的六个入围者中，五个使用了NVIDIA GPU提供支持的超级计算机。</p>
<p>​    英伟达联手ARM，在超级计算机领域中继续发力，预计未来采用GPGPU技术的超级计算机将会越来越多。</p>
<p>​    近些年，超级计算机硬件领域，英伟达有着强大的技术实力。在云平台上，英伟达超级计算硬件应用较多。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150578.png" alt="img" /></p>
<p>​    GPGPU相对于PC，是新的概念，十余年的发展已经不仅局限于PC，还走向了其它领域，扎根于我们生活的每个角落。GPGPU已经在许多云计算平台上得到了应用，相信在以后，GPU会更加深入生活的更多方面，尤其与人工智能技术的结合，具有着巨大的应用空间。</p>
<h3 id="749-示例代码"><a class="markdownIt-Anchor" href="#749-示例代码"></a> 7.4.9、示例代码</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;CL/cl.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line">#include &quot;tool.h&quot;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">/** convert the kernel file into a string */</span><br><span class="line">int convertToString(const char *filename, std::string&amp; s)</span><br><span class="line">&#123;</span><br><span class="line">    size_t size;</span><br><span class="line">    char*  str;</span><br><span class="line">    std::fstream f(filename, (std::fstream::in | std::fstream::binary));</span><br><span class="line"></span><br><span class="line">    if(f.is_open())</span><br><span class="line">    &#123;</span><br><span class="line">        size_t fileSize;</span><br><span class="line">        f.seekg(0, std::fstream::end);</span><br><span class="line">        size = fileSize = (size_t)f.tellg();</span><br><span class="line">        f.seekg(0, std::fstream::beg);</span><br><span class="line">        str = new char[size+1];</span><br><span class="line">        if(!str)</span><br><span class="line">        &#123;</span><br><span class="line">            f.close();</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        f.read(str, fileSize);</span><br><span class="line">        f.close();</span><br><span class="line">        str[size] = &#x27;\0&#x27;;</span><br><span class="line">        s = str;</span><br><span class="line">        delete[] str;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;&quot;Error: failed to open file\n:&quot;&lt;&lt;filename&lt;&lt;endl;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**Getting platforms and choose an available one.*/</span><br><span class="line">int getPlatform(cl_platform_id &amp;platform)</span><br><span class="line">&#123;</span><br><span class="line">    platform = NULL;//the chosen platform</span><br><span class="line"></span><br><span class="line">    cl_uint numPlatforms;//the NO. of platforms</span><br><span class="line">    cl_int    status = clGetPlatformIDs(0, NULL, &amp;numPlatforms);</span><br><span class="line">    if (status != CL_SUCCESS)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;Error: Getting platforms!&quot;&lt;&lt;endl;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**For clarity, choose the first available platform. */</span><br><span class="line">    if(numPlatforms &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        cl_platform_id* platforms =</span><br><span class="line">            (cl_platform_id* )malloc(numPlatforms* sizeof(cl_platform_id));</span><br><span class="line">        status = clGetPlatformIDs(numPlatforms, platforms, NULL);</span><br><span class="line">        platform = platforms[0];</span><br><span class="line">        free(platforms);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">        return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**Step 2:Query the platform and choose the first GPU device if has one.*/</span><br><span class="line">cl_device_id *getCl_device_id(cl_platform_id &amp;platform)</span><br><span class="line">&#123;</span><br><span class="line">    cl_uint numDevices = 0;</span><br><span class="line">    cl_device_id *devices=NULL;</span><br><span class="line">    cl_int    status = clGetDeviceIDs(platform, CL_DEVICE_TYPE_GPU, 0, NULL, &amp;numDevices);</span><br><span class="line">    if (numDevices &gt; 0) //GPU available.</span><br><span class="line">    &#123;</span><br><span class="line">        devices = (cl_device_id*)malloc(numDevices * sizeof(cl_device_id));</span><br><span class="line">        status = clGetDeviceIDs(platform, CL_DEVICE_TYPE_GPU, numDevices, devices, NULL);</span><br><span class="line">    &#125;</span><br><span class="line">    return devices;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7410-总结"><a class="markdownIt-Anchor" href="#7410-总结"></a> 7.4.10、总结</h3>
<p>​    GPGPU，带CPU处理能力的GPU。主要是GPU的工作，GPU的能力，可以协助CPU进行运算力，GPGPU（通用图形处理）超出GPU的能力范围，完全具备通用的数据处理。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150634.png" alt="img" /></p>
<p>​    GPU，用于图形处理的芯片。（GPU也是一种CPU，相对于显卡）早期显卡是没有专门用做图形处理的GPU的，不支持3D。</p>
<p>​    CPU，用于数据处理的芯片（图形也可以认为是数据）。中央处理器，一种相对的概念。潜移默化被认定是放在主板上，通过向GPU传送指令，控制GPU。</p>
<p>​    AMD-APU，加速处理器。集成GPU核心的CPU，并且融合。不同于Intel I系（GPU与CPU独立工作）。</p>
<p>​    美摄SDK，采用CUDA、OpenCL、DirectCompute并行计算技术。基于CPU、GPU、GPGPU硬件平台，优秀的音视频引擎，推动音视频技术发展。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150707.png" alt="img" /></p>
<h2 id="75-tpu"><a class="markdownIt-Anchor" href="#75-tpu"></a> 7.5 TPU</h2>
<p>TPU（Tensor Processing Unit）张量处理单元，为机器学习定制的芯片，经过专门深度机器学习方面的训练，它有更高效能（每瓦计算能力）。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150029.png" alt="img" /></p>
<p>​    谷歌，2015年6月，I/O开发者大会上推出的计算神经网络专用芯片，为优化自身的TensorFlow机器学习框架而打造，主要用于AlphaGo系统，谷歌地图、谷歌相册和谷歌翻译等应用中。进行搜索、图像、语音等模型和技术的并行处理。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150999.png" alt="img" /></p>
<h3 id="751-tpu发展史"><a class="markdownIt-Anchor" href="#751-tpu发展史"></a> 7.5.1、TPU发展史</h3>
<p>​    2016 年，AlphaGo以4:1总分打败围棋世界冠军李世石，随后独战群雄，在与排名世界第一围棋的冠军柯洁对战胜利后宣布“隐退江湖”，背后的芯片开启了芯片产业的新篇章。</p>
<p>​    地覆天翻的四年，AI芯片领域，尤其是云端AI芯片，市场规模一路扶摇直上，成为芯片巨头和新势力虎视眈眈之地。</p>
<p>​    赛迪2019年8月发布的《中国人工智能芯片产业发展白皮书》，2018年全球云端AI芯片市场规模为62.1亿美元，这一数值预计在2021年达到221.5亿美元，巨大的市场将如火山爆发般呈现在众人眼前，芯片制造的高光时刻到来了。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150983.png" alt="img" /></p>
<p>​    这片蓝海中，有一个角色起到了划时代的意义，它就是谷歌TPU（Tensor Processing Unit，张量处理单元）。</p>
<p>​    与李世石、柯洁，以及中日韩数十位围棋高手的围棋对战中脱颖而出后，谷歌TPU曾一路狂飙突进，独步天下，现在已演进到了第四代。它的出现，无疑打破了GPU、GPGPU曾一度称霸神经网络推理和训练市场的局面。在大数据、人工智能领域，谷歌的王者之风逐渐显现。</p>
<p>​    2019年5月，谷歌I/O开发者大会上，万众瞩目的第四代TPU意外缺席，取而代之的是以1000个TPUv3组成的TPUv3 Pod，以及边缘AI芯片Edge TPU。即便如此，它仍通过一定程度的对外开放，以及辅助谷歌内部服务器应用深刻地影响着云端AI芯片市场。那次大会，后知后觉的人们意识到，谷歌卖的是方案与思想，谷歌已经脱离了技术。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150023.png" alt="img" /></p>
<p>​    从市场角度看，未来云端AI芯片巨大的发展潜力和市场机遇为谷歌TPU提供了肥沃的土壤；另一方面，紧迫的算力瓶颈和摩尔定律放缓等问题也越来越难以忽视。谷歌属于未来科技公司，有无穷的可能。</p>
<h4 id="7511-始于算力瓶颈首秀人类围棋界"><a class="markdownIt-Anchor" href="#7511-始于算力瓶颈首秀人类围棋界"></a> 7.5.1.1、始于算力瓶颈，首秀人类围棋界</h4>
<p>​    区别于GPU、GPGPU，谷歌TPU是一种ASIC芯片方案。ASIC全称为Application-Specific Integrated Circuit（应用型专用集成电路），是专为某种特定应用需求而定制的芯片。但一般来说，ASIC芯片的开发不仅需要花费数年的时间，且研发成本也极高，一直是个别公司的阵地。</p>
<p>​    对于数据中心机房中AI工作负载的高算力需求，许多厂商更愿意继续采用现有的GPU集群或GPU+CPU异构计算解决方案，也甚少在ASIC领域冒险。但谷歌说不了。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150008.png" alt="img" /></p>
<p>​    谷歌2006年起产生了要为神经网络研发一款专用芯片的想法，而这一需求在2013年也开始变得愈发急迫。谷歌这家超前的公司，在未雨绸缪。当时，谷歌提供的谷歌图像搜索、谷歌照片、谷歌云视觉API、谷歌翻译等多种产品和服务，都需要用到深度神经网络。</p>
<p>​    庞大的应用规模下，谷歌意识到，夜以继日运行的数百万台服务器，它们内部快速增长的计算需求，使得数据中心的数量需要再翻一倍才能得到满足。然而，从成本还是从算力上看，内部中心已不能依靠GPU和CPU来维持。制造芯片的冲动变成了现实。</p>
<p>​    种种因素的推动下，不差钱的谷歌正式开始了TPU的研发之旅。经过研发人员15个月的设计、验证和构建，TPU 2014年研发完成，率先部署在谷歌内部的数据中心。谷歌强大的财力保证了研发的成功，成功很大程度源于不差钱。</p>
<p>​    内部秘密运行了一年外，谷歌TPU还在围棋界“大杀四方”，斩获“人机大战”的神话。在今天，谷歌还有多少技术，还装在黑匣子中呢？</p>
<p>​    使用TPU之前，AlphaGo内置1202个CPU和176个GPU击败欧洲冠军范惠。2015年与李世石对战时，AlphaGo才开始使用TPU，而当时部署的TPU数量，只有48个。TPU大开杀戒，进入无人之境。</p>
<p>​    这场对战胜利的“秘密武器”也在一年后的谷歌I/O开发者大会上被揭开神秘面纱，TPU正式面世。在技术上，谷歌隐藏的太深。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150990.png" alt="img" /></p>
<h4 id="7512-谷歌tpu的迭代-云端构建-终端应用"><a class="markdownIt-Anchor" href="#7512-谷歌tpu的迭代-云端构建-终端应用"></a> 7.5.1.2、谷歌TPU的迭代、云端构建、终端应用</h4>
<p>​    面世后短短两年，谷歌TPU已经迭代到了第四代，性能亦不断跃升。随着研发的投入和广泛应用，谷歌也逐步推出可扩展云端超级计算机TPU Pod，以及Edge TPU。谷歌最终目的是超算领域与人工智能。今天，谷歌与英伟达成为超算领域的头狼。</p>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>发布日期</strong></th>
<th><strong>性能</strong></th>
<th><strong>应用</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>TPU V1</td>
<td>2016年</td>
<td>28nm 功耗40w，主频700MHZ</td>
<td>深度学习推理</td>
</tr>
<tr>
<td>TPU V2</td>
<td>2017年</td>
<td>180TFLOPs浮点运算、64GB高带宽内存(HBM)</td>
<td>机器学习训练和推理，开始在Google Compute Engine上运行，以用于TensorFlow应用程序</td>
</tr>
<tr>
<td>TPU V3</td>
<td>2018年</td>
<td>420TFLOPs浮点运算，128GB(HBM)</td>
<td>扩展至更广泛的深度学习训练和推理领域，已进入Alpha测试阶段。</td>
</tr>
<tr>
<td>EDGE TPU</td>
<td>2018年</td>
<td>内建EDGE TPU、网络功能和加密芯片，具有高吞吐量。</td>
<td>企业中的机器学习任务而设计，主要执行AI推理。</td>
</tr>
<tr>
<td>TPU V2 POD</td>
<td>2019年</td>
<td>每秒11.5千万亿次浮点运算，4TB (HBM)、环面网状网络</td>
<td>深度学习领域</td>
</tr>
<tr>
<td>TPU V3 POD</td>
<td>2019年</td>
<td>每秒100千万亿次浮点运算、32TB(HBM)，环面网状网络。</td>
<td>深度学习领域</td>
</tr>
</tbody>
</table>
<h5 id="75121-2016年第一代tpu"><a class="markdownIt-Anchor" href="#75121-2016年第一代tpu"></a> 7.5.1.2.1、2016年：第一代TPU</h5>
<p>​    为神经网络而研发，但谷歌最初的第一代TPU仅用于深度学习推理。从性能上看，第一代谷歌TPU采用了28nm工艺制造，功耗约为40W，主频700MHz。</p>
<p>​    研发之初，谷歌需要尽快将TPU部署到内部现有的服务器中，因此研发人员选择将处理器打包成外部加速卡，以插入SATA硬盘插槽后进行嵌入式安装。毫无疑问的是，这种设计是成功的，并很快投入了应用。</p>
<p>​    TPU通过PCIe Gen3 x16总线连接到主机，实现了12.5GB/s的有效带宽。除了在AlphaGo上应用之外，谷歌第一代TPU还用于谷歌的搜索、翻译和相册等应用的机器学习模型中。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150272.png" alt="img" /></p>
<p>​    ▲Google第一代TPU（左），在谷歌数据中心中部署的TPU（右）</p>
<h5 id="75122-2017年第二代tpu引入google-cloud"><a class="markdownIt-Anchor" href="#75122-2017年第二代tpu引入google-cloud"></a> 7.5.1.2.2、2017年：第二代TPU，引入Google Cloud</h5>
<p>​    一年更新、研发和迭代，谷歌在2017年5月发布了第二代TPU，并从这一代起能够用于机器学习模型的训练和推理。</p>
<p>​    与第一代相比，第二代TPU实现180TFLOPs浮点运算的计算能力，同时其高带宽内存（HBM）也提升到了64GB，解决了第一代TPU内存受带宽限制的问题。电子硬件的发展堪称神速。</p>
<p>​    运行AI工作负载上，谷歌第二代TPU与同期的CPU、GPU相比，性能比传统的GPU高了15倍，比CPU高了30倍，每瓦性能亦提高了30至80倍。硬件有强大的提升空间，保障谷歌思想的实现。</p>
<p>​    从第二代TPU起，谷歌第二代TPU引入Google Cloud，应用在谷歌计算引擎（Google Compute Engine ，简称GCE）中，也称为Cloud TPU，进一步优化谷歌搜索引擎、Gmail、YouTube和其他服务的运行。谷歌通过K8S进行云端软件技术处理，TPU提供硬件保障。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150286.png" alt="img" /></p>
<p>​    同时，Cloud TPU通过TensorFlow进行编程，并与CPU、GPU及基础设施和服务结合，以根据用户应用需求构建和优化机器学习系统。谷歌在云上的技术铺垫深厚，谷歌未来的主战场是云端。</p>
<p>​    谷歌第二代TPU的发布，新一轮的人机大战也再次揭开序幕。而这一代AlphaGo的芯片配置，仅用了4块TPUv2，击败当时的世界围棋冠军柯洁。</p>
<p>​    谷歌除了推出第二代TPU外，还宣布计划研发可扩展云端超级计算机TPU Pods，通过新的计算机网络将64块Cloud TPU相结合，能够提供约11500万亿次浮点运算能力。强大的运算能力为谷歌平台提供了技术保障。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150307.png" alt="img" /></p>
<h5 id="75123-2018年第三代tpu边缘ai芯片edge-tpu"><a class="markdownIt-Anchor" href="#75123-2018年第三代tpu边缘ai芯片edge-tpu"></a> 7.5.1.2.3、2018年：第三代TPU，边缘AI芯片Edge TPU</h5>
<p>​    2018年5月，谷歌不出意外地发布了第三代TPU，其各方面性能不仅实现了升级，也进一步扩展到更广泛的深度学习训练和推理领域。我们怀疑的是，第三代TPU应该在2017年研发完成。</p>
<p>​    谷歌表示，第三代TPU的性能均是第二代TPU的两倍，可实现420TFLOPs浮点运算，以及128GB的高带宽内存。同时，它还可部署在基于云计算的超级计算机TPU Pod中，其中的芯片数量是上一代的四倍。这些数据表明，微电子技术的发展方兴未艾。</p>
<p>​    与第二代TPU Pod的部署相比，第三代每个Pod的性能提高了8倍，且每个Pod最多拥有1024个芯片。这些TPU的集群，形成了强大的狼群并行处理能力。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150437.png" alt="img" /></p>
<p>​    谷歌2018年发布了用于边缘推理的微型AI加速芯片——Edge TPU，专为企业机器学习任务而设计，用于IoT设备中。市场是细分的，技术必须根据市场变动。</p>
<p>​    Edge TPU同样是一款ASIC芯片。从应用上看，它与Cloud TPU相互补，用户能够先使用Cloud TPU对机器学习模型进行加速训练，再将训练好的模型放入相关设备中，进一步用Edge TPU进行机器学习推理。TPU的芯片向纵深发展。</p>
<p>​    据了解，Edge TPU能够让IoT设备以每秒30帧以上的速度，在高分辨率视频上运行多个先进的计算机视觉模型。数据处理重要的一部分是计算机视觉，谷歌TPU这种技术，很可能在未来的某一天，这些硬件产品出现在我们身边。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150332.png" alt="img" /></p>
<p>​    谷歌还为Edge TPU推出了一套名为Cloud IoT Edge的软件平台，该平台拥有Edge IoT Core和Edge ML两大主要组件，能够帮助用户将在Google Cloud上构建和训练的机器学习模型，通过Edge TPU扩展到边缘设备中运行。技术的开源是未来的发展趋势，软件平台的出现，为谷歌技术的推广推波助澜。</p>
<h5 id="75124-2019年第二三代tpu-pod"><a class="markdownIt-Anchor" href="#75124-2019年第二三代tpu-pod"></a> 7.5.1.2.4、2019年：第二/三代TPU Pod</h5>
<p>​    这一年谷歌并未发布第四代TPU，却上演了另一个重头戏——发布第二代和第三代TPU Pod，可以配置超过1000颗TPU。强大的集群带来了强大的性能，在硬件技术突破的同时，谷歌在软件集群技术上也在进行着发展。</p>
<p>​    作为TPU的“升级版”，谷歌第二代TPU Pod能够容纳512个内核，实现每秒11.5千万亿次浮点运算；第三代TPU Pod速度则更快，可实现每秒超过100千万亿次浮点运算。这次升级之后，我们期待着谷歌新一代TPU的发布，相信带来更强大的性能。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150336.png" alt="img" /></p>
<p>​    据悉，在相同配置（265块TPU）下训练ResNet-50模型时，第二代TPU Pod需要11.3分钟，而第三代TPU Pod只需7.1分钟。这些数据的背后，是TPU集群快速增长的结果。让我们很难想象的是，谷歌TPU在集群技术路上还能走多远。</p>
<h4 id="7513-架构创新掀起云端造芯大浪潮"><a class="markdownIt-Anchor" href="#7513-架构创新掀起云端造芯大浪潮"></a> 7.5.1.3、架构创新，掀起云端造芯大浪潮</h4>
<p>​    谷歌TPU系列芯片的出现，不仅突破了最初深度学习硬件执行的瓶颈，还在一定程度上撼动了英伟达、英特尔等传统GPU芯片巨头的地位。英伟达、AMD、INTEL在PC市场上这些传统霸主地位受到了挑战。</p>
<p>​    2015年以来，与AI芯片相关的研发逐渐成为整个芯片行业的热点，在云端的深度学习训练和推理领域，已然不是GPU，尤其是英伟达独霸一方。</p>
<p>​    谷歌TPU的诞生，越来越多的公司前赴后继地尝试设计GPU之外的专用AI芯片，进一步实现更高效的性能。这是一条成功的路线，科技巨头都在进行着尝试。</p>
<p>​    技术层面看，谷歌TPU的出现在架构创新上也为行业带来了以下思考。这种影响，在未来几十年将会深刻的感受到。</p>
<h5 id="75131-大规模片上内存"><a class="markdownIt-Anchor" href="#75131-大规模片上内存"></a> 7.5.1.3.1、大规模片上内存</h5>
<p>​    谷歌看来，片外内存低是GPU能效比低的主要原因。一些GPU由于片上内存较少，因此在运行过程中需要不断地去访问片外动态随机存取存储器（DRAM），从而在一定程度上浪费了不必要的能耗。在从前，关于CPU与GPU上的内存是争论的喋喋不休的话题，在功耗等各方面都有考量。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150499.png" alt="img" /></p>
<p>​    因此，谷歌在最初设计TPU时，总共设计了占总芯片面积37%的内存，其中包括24MB的局部内存、6MB的累加器内存，以及用于与主控处理器对接的内存。谷歌反其道而行之，用功耗换取效率。</p>
<h5 id="75132-用量化技术进行整数运算"><a class="markdownIt-Anchor" href="#75132-用量化技术进行整数运算"></a> 7.5.1.3.2、用量化技术进行整数运算</h5>
<p>​    一般来说，神经网络的预测并不需要32位或16位的浮点计算精度，因此它可以通过8位低精度运算的方法，在保证适当准确度的同时，对神经网络进行预测。这种精细化的设计，适应了神经网络技术的需求。</p>
<p>​    通过量化技术，神经网络预测的成本大大减少，相应减少了内存的使用。例如，当研发人员将量化应用于流行的图像识别模型Inception时，芯片内存从91MB压缩到了23MB，约为其原始大小的四分之一。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150592.png" alt="img" /></p>
<p>​    人工智能时代每一种算法数据都有自己的特点，神经网络作为人工智能的主流算法，有自己的计算特点，谷歌深谙此道，并对硬件改进，取得了GPU的成功。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150581.png" alt="img" /></p>
<h5 id="75133-可编程性"><a class="markdownIt-Anchor" href="#75133-可编程性"></a> 7.5.1.3.3、可编程性</h5>
<p>​    虽然谷歌TPU是ASIC芯片，但却与FPGA又有些类似，它具备一定的可编程性能力。谷歌看来，TPU的研发并非只用于运行一种神经网络模型。因此，谷歌选择采用了复杂指令集（CISC）作为TPU指令集的基础，能够较为侧重地运行更复杂的任务。软硬件技术的结合是TPU成功的关键因素。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150636.png" alt="img" /></p>
<p>​    谷歌还定义了十二个专门为神经网络推理而设计的高级指令，能够在输入数据和权重之间执行矩阵乘法，并应用激活函数。今天，国内的学习是从指令开始起步。</p>
<p>​    为了能进一步对TPU进行编程，谷歌还创建了一个编译器和软件堆栈，能够调用TensorFlow图中的API，转化成TPU指令。TPU与TensorFlow的融合，让TPU开始接底气，并为TensorFlow做大规模的神经网络数据训练打下基础。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150632.png" alt="img" /></p>
<h5 id="75134-并行计算"><a class="markdownIt-Anchor" href="#75134-并行计算"></a> 7.5.1.3.4、并行计算</h5>
<p>​    谷歌为TPU设计了矩阵乘法单元（MXU）的并行计算。并行计算是数据发展的要求，今天并行计算是人工智能面临的第一个问题。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150715.png" alt="img" /></p>
<p>​    它能够在一个时钟周期内处理数十万次矩阵运算，相当于一次打印一个字符、一次打印一行字或一次打印一页文档。这种高效的形式，是成功的关键因素所在。</p>
<h5 id="75135-脉动阵列设计"><a class="markdownIt-Anchor" href="#75135-脉动阵列设计"></a> 7.5.1.3.5、脉动阵列设计</h5>
<p>​    MXU具有与传统CPU和GPU截然不同的架构，又称为脉动阵列（systolic array）。不同硬件设计带来的效果是惊人的。</p>
<p>​    脉动阵列使得在每次运算过程中，谷歌TPU能够将多个运算逻辑单元（ALU）串联在一起，并复用从一个寄存器中都取得结果。脉动阵列设计形式，大大提高了效率。</p>
<p>​    这种设计，不仅能够将数据复用实现最大化，减少芯片在运算过程中的内存访问次数，同时也降低了内存带宽压力，进而降低内存访问的能耗。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150733.png" alt="img" /></p>
<p>​    ▲TPU的矩阵乘法器单元（MXU）</p>
<p>​    谷歌TPU的一鸣惊人，不仅为AI芯片领域带来了架构创新，同时亚马逊、微软等一众科技巨头，以及寒武纪、天数智芯等新势力亦开始纷纷入局，云端AI芯片市场开始风起云涌，掀起行业云端造芯大浪潮。</p>
<p>​    这是一个芯片制造的年代，如果没有技术的积淀与雄厚资本的支持，芯片制造是水中花、镜中月，革命性芯片的研发投入在百亿以上。国内的弘芯、龙芯值得我们深思。</p>
<h3 id="752-tpu与机器学习"><a class="markdownIt-Anchor" href="#752-tpu与机器学习"></a> 7.5.2、TPU与机器学习</h3>
<p>​    TPU的出现，加速了第二代人工智能系统TensorFlow的运行，效率也大大超过GPU,Google的深层神经网络由TensorFlow引擎驱动。TPU是专为机器学习量身定做，执行每个操作所需的晶体管数量更少，自然效率更高。补充说明的是，能耗也更高。</p>
<p>​    TPU与同期的CPU和GPU相比，可以提供15-30倍的性能提升，以及30-80倍的效率（性能/瓦特）提升。在人工智能发展过程中，效率的提升可以对算法进行有效的测试。由于效率问题，很多算法暂时无法测试。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150794.png" alt="img" /></p>
<p>​    TPU每瓦能为机器学习提供比所有商用GPU和FPGA更高的量级指令，高性能计算得以在民间应用。TPU为机器学习应用特别开发，使芯片在计算精度降低的情况下更耐用。</p>
<p>​    在人工智能年代，未来，指令级编程将称为常态。对于国内大多数技术人员而言，对指令的熟悉程度影响着个人技术的发展。</p>
<p>​    每一个操作只需要更少的晶体管，用更多精密且大功率的机器学习模型，并快速应用这些模型，因此用户便能得到更正确的结果。</p>
<h3 id="753-对比说明"><a class="markdownIt-Anchor" href="#753-对比说明"></a> 7.5.3、对比说明</h3>
<p>​    CPU和GPU都是较为通用的芯片，但是有句老话是这样讲的：万能工具的效率永远比不上专用工具。而TPU就是一个专业工具。</p>
<p>​    随着社会的计算需求越来越专业化，芯片的专业化需求在增强。便产生了ASIC（专用集成电路）的概念。这个概念其实很早就出现了，但是ASIC不是任何一家公司都能尝试的，其复杂程度、集成程度堪称技术的堡垒。</p>
<p>​    ASIC是指依产品需求不同而定制化的特殊规格集成电路，由特定使用者要求和特定电子系统的需要而设计、制造。这些是定制化的芯片开发，定制化的芯片开发一直广泛存在。在这个领域，谷歌的TPU技术是成功的尝试。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150880.png" alt="img" /></p>
<p>​    因为ASIC很“专一”，只做一件事，它就比CPU、GPU等能做很多件事的芯片在某件事上做的更好，实现更高的处理速度和更低的能耗。相应的，ASIC的生产成本也非常高。</p>
<p>​    TPU就是谷歌专门为加速深层神经网络运算能力而研发的一款芯片，其实也是一款ASIC。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150903.png" alt="img" /></p>
<p>​    图：谷歌第二代TPU</p>
<p>​    原来很多的机器学习以及图像处理算法大部分都跑在GPU与FPGA（半定制化芯片）上面，但这两种芯片都还是一种通用性芯片，在效能与功耗上不能更紧密的适配机器学习算法。硬件改变的初衷便形成了</p>
<p>​    Google一直坚信伟大的软件将在伟大的硬件的帮助下更加大放异彩，所以Google便想，可不可以做出一款专用机机器学习算法的专用芯片，TPU便诞生了。</p>
<p>​    据称，TPU与同期的CPU和GPU相比，可提供15-30倍的性能提升，以及30-80倍的效率（性能/瓦特）提升。第一代TPU只能做推理，依靠Google云实时收集数据并产生结果，训练过程还需要额外的资源；第二代TPU既可以用于训练神经网络，又可以用于推理。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150940.png" alt="img" /></p>
<p>​    图：TPU 各模块的框图</p>
<p>​    如上图所示，TPU在芯片上使用了高达24MB的局部内存，6MB的累加器内存以及用于与主控处理器进行对接的内存，总共占芯片面积的37%（图中蓝色部分）。这在从前是不可想象的。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150992.png" alt="img" /></p>
<p>​    图：TPU芯片布局图</p>
<p>​    这表示谷歌充分意识到了片外内存访问是GPU能效比低的问题所在，不惜成本的在芯片上放了巨大的内存。相比之下，同时期英伟达的K80只有8MB片上内存，需要不断地去访问片外DRAM。这种设计，和传统硬件设计有巨大的区别，也许只有谷歌财大气粗的公司才有如此的魄力吧。</p>
<h3 id="754-tpu性能与应用"><a class="markdownIt-Anchor" href="#754-tpu性能与应用"></a> 7.5.4、TPU性能与应用</h3>
<p>​    TPU的高性能还来源于对于低运算精度的容忍。研究结果表明，低精度运算带来的算法准确率损失很小，但是在硬件实现上却可以带来巨大的便利，包括功耗更低、速度更快、占芯片面积更小的运算单元、更小的内存带宽需求等。TPU采用了8比特的低精度运算。</p>
<p>​    不同的技术有不同的应用，不同的应用有不同的算法，不同的算法有不同的精度，TPU的神经网络不需要传统的精度，这和从前的很多设计思路是有区别的。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150043.png" alt="img" /></p>
<p>​    目前为止，TPU已经干了很多惊天动地的事情，并且为我们服务了很多年。并且在更多领域应用。</p>
<p>​    机器学习人工智能系统RankBrain，帮助Google用户处理搜索结果；街景Street View，提高地图与导航的准确性；下围棋的计算机程序AlphaGo。这些大事记背后，代表着人工智能时代到来了。</p>
<h3 id="755-示例代码"><a class="markdownIt-Anchor" href="#755-示例代码"></a> 7.5.5、示例代码</h3>
<h4 id="7551-变分程序"><a class="markdownIt-Anchor" href="#7551-变分程序"></a> 7.5.5.1、变分程序</h4>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150067.png" alt="img" /></p>
<h4 id="7552-并行vae程序"><a class="markdownIt-Anchor" href="#7552-并行vae程序"></a> 7.5.5.2、并行VAE程序</h4>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150095.png" alt="img" /></p>
<h3 id="756-总结"><a class="markdownIt-Anchor" href="#756-总结"></a> 7.5.6、总结</h3>
<p>​    从CPU到GPU，再到如今ASIC和FPGA相继入局，云端AI芯片市场百花齐放，与谷歌TPU的推动息息相关。</p>
<p>​    今天，云端AI芯片市场杀得热火朝天，前有赛灵思和寒武纪等新老势力不断崛起，进一步蚕食非GPU领域的市场，后有科技巨头四处找寻机会“大鱼吃小鱼”，合并有潜力的新玩家，整片市场呈一派割据混战、百家争鸣之势。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150188.png" alt="img" /></p>
<p>​    不容忽视的是，随着云端AI芯片不断发展，大数据、云平台持续爆发，以及摩尔定律逐渐放缓，算力也再次来到新的瓶颈。</p>
<p>​    玩家是通过先进制程再次撕开云端AI芯片的新技术领域，还是依靠研发创新架构来实现算力的飞跃，不管走向哪条路都需直面种种挑战。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150244.png" alt="img" /></p>
<p>​    在AI芯片市场开辟之初，谷歌凭借TPU逐渐打开云端AI芯片市场新的竞争格局，但当云端AI芯片开始进入新时代，谷歌在云平台大数据的技术优势，相信TPU能再次延续过往辉煌，为市场开辟新的方向和路径。</p>
<p>​    TPU由谷歌独家提出，独家研发，独家应用，这些能给我们多少启示呢？谷歌从一个搜索科技公司，过渡到大数据、云计算公司，进而走在人工智能、硬件科技的大道上。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192150287.png" alt="img" /></p>
<h2 id="76-npu"><a class="markdownIt-Anchor" href="#76-npu"></a> 7.6 npu</h2>
<p>NPU（Neural network Processing Unit）， 即神经网络处理器。用电路模拟人类的神经元和突触结构。NPU为神经网络而生，对神经网络进行硬件支持。</p>
<p>​    嵌入式神经网络处理器（NPU）采用“数据驱动并行计算”的架构，特别擅长处理视频、图像类的海量多媒体数据。视频与图像是人工智能数据的重要组成部分，在今天有着最广泛的应用。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151451.png" alt="img" /></p>
<p>​    NPU是网络处理器，可以认为是一个组件（或者子系统），有时候也称为NPU协处理器。NPU和TPU一样，偏向于并行架构设计。</p>
<h3 id="761-生物神经网络"><a class="markdownIt-Anchor" href="#761-生物神经网络"></a> 7.6.1、生物神经网络</h3>
<p>​    生物神经系统是一个高度组织和相互作用的数量巨大的细胞组织群体。人类大脑的神经细胞大约在1011–1013个左右。神经细胞也称神经元，是神经系统的基本单元，按不同的结合方式构成复杂的神经网络。通过神经元及其联接的可塑性，使大脑具有学习、记忆和认知等各种智能。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151471.png" alt="img" /></p>
<p>​    生物神经网络由若干人工神经元结点相互连接，神经元之间通过突触两两连接，突触记录了神经元之间的联系。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151523.png" alt="img" /></p>
<p>​    生物神经元主要由以下几个部分组成：</p>
<p>​    胞体，是神经细胞的本体;</p>
<p>​    树突，用以接受来自其它细胞元的信号;</p>
<p>​    轴突，用以输出信号，与多个神经元连接;</p>
<p>​    突触，是一个神经元与另一个神经元相联系的特殊部位，神经元轴突的端部靠化学接触和电接触将信号传递给下一个神经元的树突或胞体。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151461.png" alt="img" /></p>
<h3 id="762-人类神经网络"><a class="markdownIt-Anchor" href="#762-人类神经网络"></a> 7.6.2、人类神经网络</h3>
<p>​    电路模仿人类神经元，把每个神经元抽象为一个激励函数，函数输入由与其相连的神经元输出以及连接神经元的突触共同决定。</p>
<p>​    为了表达特定的知识，使用者通过某些特定的算法，调整人工神经网络中突触的取值、网络的拓扑结构等。该过程称为“学习”。学习方法有很多，这种方法，也叫算法。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151511.png" alt="img" /></p>
<p>​    学习之后，人工神经网络通过习得的知识来解决特定的问题。生物神经网络的深度学习，基本操作是神经元和突触的处理。现在变成计算机处理，传统的处理器指令集（包括x86和ARM等）是为了进行通用计算发展起来的，其基本操作为算术操作（加减乘除）和逻辑操作（与或非），需要数百上千指令才能完成一个神经元的处理，深度学习的处理效率不高。</p>
<p>​    从通用计算到并行计算，再到神经网络计算，是近些年计算发展的一个重要特征。神经网络对人工智能的发展影响深远，人工智能科技公司的brain计划，神经网络往往占有较大成分。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151486.png" alt="img" /></p>
<p>​    经典的冯·诺伊曼结构不能满足要求，神经网络中存储和处理是一体化的，通过突触权重来体现。冯·诺伊曼结构中，存储和处理是分离的，由存储器和运算器实现，二者之间存在巨大的差异。在TPU设计上，关于存储与运算也进行了深刻的论证。</p>
<p>​    现有的基于冯·诺伊曼结构的经典计算机（如X86处理器和英伟达GPU）来跑神经网络应用时，不可避免地受到存储和处理分离式结构的制约，影响效率。这也就是专门针对人工智能的专业芯片，能够对传统芯片有一定先天优势的原因之一，NPU实现了计算与存储的结合。。</p>
<h3 id="763-出现"><a class="markdownIt-Anchor" href="#763-出现"></a> 7.6.3、出现</h3>
<p>​    国内NPU典型代表有寒武纪芯片和国外IBM的TrueNorth芯片。以寒武纪为例，DianNaoYu指令直接面对大规模神经元和突触的处理，一条指令即完成一组神经元的处理，并对神经元和突触数据在芯片上的传输提供了一系列专门的支持。</p>
<p>​    指令编程不论对于人工智能，对于大数据处理、对于音视频和图形图像都有着重要的意义。</p>
<p>​    CPU、GPU、NPU相比，有百倍以上性能或能耗比差距。寒武纪团队和Inria联合发表的DianNao论文为例——DianNao为单核处理器，主频为0.98GHz，峰值达每秒4520亿次神经网络基本运算，65nm工艺下功耗为0.485W，面积3.02平方毫米mm。这就是专业设计的优势所在。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151735.png" alt="img" /></p>
<p>​    mate10中的麒麟970芯片，集成了寒武纪的NPU，实现所谓的照片优化功能，保证手机用了很长时间后还能不卡。</p>
<p>​    华为从麒麟810芯片开始，使用自家研发的达芬奇架构集成NPU，大大提升了芯片的AI处理能力，至今采用了华为NPU的手机AI高性能计算仍是卖点之一。2018年10月，华为发布了最新的NPU芯片，包括用于云端训练的晟腾910和用于终端推理的晟腾310，晟腾系列NPU正式走入人们的视野。</p>
<p>​    华为手机使用NPU芯片，也是华为手机的成功要素之一。手机是终端，对视音频图形图像有着更多的应用，NPU的支持，保障应用的顺利进行。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151721.png" alt="img" /></p>
<p>​    2019年9月25日，“云栖大会”上阿里正式对外发布了全新的含光800芯片。含光800是一款高性能的采用ASIC技术的用于云端推理的AI芯片NPU。</p>
<p>​    1颗含光800的算力相当于10颗GPU，含光800推理性能达到78563 IPS，能效比500 IPS/W。相比传统GPU算力，性价比提升100%。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151789.png" alt="img" /></p>
<p>​    举国造芯激动人心的时刻到来了，财大气粗的阿里不再沉默，达摩院重要的使命之一，就是造芯，资本的投入推动芯片技术的发展。</p>
<p>​    嵌入式神经网络处理器（NPU）采用“数据驱动并行计算”架构，擅长处理视频、图像类的海量多媒体数据。</p>
<p>​    NPU处理器专门为物联网人工智能而设计，用于加速神经网络的运算，解决传统芯片在神经网络运算时效率低下的问题。近些年，神经网络称为人工智能算法的重要支柱。</p>
<p>​    NPU可以和CPU、GPU、MCU结合，成为其中的一部分，NPU这种组合的模式，已经广泛使用。NPU也可以进行定制，大大加强了NPU的范围应用。</p>
<p>​    GX8010中，CPU和MCU各有一个NPU，MCU中的NPU相对较小，也被称为SNPU。NPU的应用已经步入家家户户，未来还有很大的发展空间。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151773.png" alt="img" /></p>
<h3 id="764-组成"><a class="markdownIt-Anchor" href="#764-组成"></a> 7.6.4、组成</h3>
<p>​    NPU的结构充分考虑了神经网络运算的特点，专为神经网络运算而设计，各个模块通力结合，保障了神经网络算法的高效执行。</p>
<p>​    NPU处理器有如下几部分组成：乘加、激活函数、二维数据运算、解压缩等模块。</p>
<p>​    乘加模块用于计算矩阵乘加、卷积、点乘等功能，NPU内部有64个MAC，SNPU有32。</p>
<p>​    激活函数模块采用最高12阶参数拟合的方式实现神经网络中的激活函数，NPU内部有6个MAC，SNPU有3个。</p>
<p>​    二维数据运算模块用于实现对一个平面运算，如降采样、平面数据拷贝等，NPU内部有1个MAC，SNPU有1个。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151815.png" alt="img" /></p>
<p>​    解压缩模块用于对权重数据的解压。为解决物联网设备中内存带宽小的特点，在NPU编译器中会对神经网络中的权重进行压缩，在不影响精度的情况下，可以实现6-10倍的压缩效果。</p>
<p>​    专业的设计，考虑了运算的方方面面，简单直接，面向问题。对通用专业硬件设计有一定的借鉴作用。下图为高通的NPU芯片，高通一直是嵌入式领域的王者。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151847.png" alt="img" /></p>
<h3 id="765-代码示例"><a class="markdownIt-Anchor" href="#765-代码示例"></a> 7.6.5、代码示例</h3>
<p>​    华为NPU编程示例代码：</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151042.png" alt="img" /></p>
<h3 id="766-总结"><a class="markdownIt-Anchor" href="#766-总结"></a> 7.6.6、总结</h3>
<p>​    NPU在现实中有着广泛应用，尤其在智能计算、图形AI识别领域。下面总结AI场景，对NPU应用进行整理。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151053.png" alt="img" /></p>
<p>​    拍照时通过NPU实现AI场景识别，并利用NPU运算修图、.NPU判断光源和暗光细节合成超级夜景、通过NPU实现语音助手的运行、.使用NPU记录用户使用习惯杀后台。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151073.png" alt="img" /></p>
<p>​    NPU配合GPU Turbo预判下一帧实现提前渲染提高游戏流畅度、NPU预判触控提高跟手度和灵敏度、NPU判断前台后台网速需求差异配合实现Link Turbo、跑分。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151075.png" alt="img" /></p>
<p>​    NPU判断游戏渲染负载智能调整分辨率、NPU辅助清理系统18月不卡、把降低游戏时AI的运算负载交给NPU以省电、NPU实现CPU和GPU的动态调度。</p>
<p>​    利用NPU和人工智能算法定期更换壁纸的功能、NPU辅助大数据广告推送、NPU实现输入法AI智能联想词的功能。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151129.png" alt="img" /></p>
<p>​    应用场景的支持下，NPU已经成为最重要的芯片。目前，NPU技术已经成熟，已经广泛应用愈交互领域。在手机、军工、嵌入式领域广泛应用。</p>
<p>​    美摄SDK，完美支持CPU、GPU、NPU运算。20年视音频技术积淀，在短视频领域，把人工智能应用做到极致。</p>
<p>​    <img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151207.png" alt="img" /></p>
<p>时光变幻，岁月横流，计算机应用的深度与广度增大，对图形图像处理也提出了更高的要求。传统的硬件设计、计算框架、运算理论、软件接口都面临着极大的挑战。为了适应人工智能技术的发展，软硬件技术都在进行着巨变。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151523.png" alt="img" /></p>
<p>​    智能时代创造了很多机会，塑造了无数的科技巨头，公司有更大的科技自由度。智能时代技术百花齐放，硬件辈出、框架争鸣、平台显现、万马奔腾。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151543.png" alt="img" /></p>
<p>​    不同的硬件框架适应显示的需求。显示技术的后面，有着GPU架构和并行计算架构在支持。在相关专题。阐述主流的CPU、GPU架构，CPU、GPU并行计算模型。</p>
<p>​    计算显示硬件发展的历史，可以看出，专业计算显示硬件往往是民间计算显示硬件发展的前奏，专业硬件发展成熟时，民间消费应用的春天到来了。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151495.png" alt="img" /></p>
<p>​    专业性开发承担着更多的研发成本，各家公司道路不尽相同，成本相对高的项目，承担着巨大的风险。人工智能时代不仅仅是新的软件理论，计算框架，更是硬件技术的进步。</p>
<h1 id="8-前置说明"><a class="markdownIt-Anchor" href="#8-前置说明"></a> 8 前置说明：</h1>
<p>​     至此、整个主题全部结束，借鉴了一些资料，如有异议，请联系作者。下面主题，开始讲述处理器架构与指令。</p>
<p>​    材料与制造技术的进步推动了微电子技术的发展，微电子技术的进步推动集成电路的发展，集成电路的发展推动了显示芯片的发展。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151795.png" alt="img" /></p>
<p>​    显示技术发展过程中，遵从了双色芯片，2D芯片，3D芯片，再到智能芯片的发展过程，在芯片发展的背后，计算机图形学从早期的文本显示到后来2D、3D世界的呈现，再到今天机器视觉技术的发展。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151793.png" alt="img" /></p>
<p>​    硬件技术的提升，带来了显示标准的变化。显示标准从早期的MDA，EGA、VGA、V-Sync到今天的G-Sync和Freesync 2。标准的出现指导着硬件的发展，为图形图像API、引擎的出现做了铺垫。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151796.png" alt="img" /></p>
<p>​    从早期驱动编程，到API编程(GDI，GDI+，D2D，AGG，Cairo，Cocoa Drawing)，到专业图形引擎编程(Glide，OpenGL，D3D)，代表着图形图像技术的繁荣，图形图像引擎推动了音视频技术的发展。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151796.png" alt="img" /></p>
<p>​    不同的显示标准带来计算机图形学的发展变化。图形图像硬件变革上，AMD推出APU的概念，同时推出APP并行运算框架，并对OpenCI大力支持，推出VEGA架构的显卡。英伟达推出自己的CUDA并行计算技术。Intel推出了Xe图形架构的显卡，推出图形库TBB，pafor编程包。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151823.png" alt="img" /></p>
<p>​    硬件架构、运算平台、软件架构、编程框架是硬件厂商的问题，软件架构、编程框架面向终端市场。</p>
<p>​    国内大力激励半导体产业发展，寻求半导体技术的自主可控，芯片IP产业有望进入黄金时代。对于这个时代来说，选择从头做研发是很困难的事，将已有的IP放到芯片中则容易得多。</p>
<p>​    类似Imagination的这种总部在欧洲、具有中资背景，且具有几十年GPU IP积淀的半导体IP企业有望迎来新的契机。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151807.jpeg" alt="img" /></p>
<p>​    人工智能发展大背景下，神经网络异军突起。为音视频发展注入了智能因素，把音视频深度应用推向一个新的高度。</p>
<p>​    美摄科技，以音视频技术为基础，以并行计算为依托，以人工智能技术、图形图像技术为双翼，推动融媒技术发展。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151835.jpeg" alt="img" /></p>
<h1 id="9-常用术语"><a class="markdownIt-Anchor" href="#9-常用术语"></a> 9 常用术语</h1>
<h2 id="91-apu"><a class="markdownIt-Anchor" href="#91-apu"></a> 9.1、APU</h2>
<p>​    APU：Accelerated Processing Unit，加速处理器。AMD公司推出加速图像处理芯片产品。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151273.png" alt="img" /></p>
<h2 id="92-bpu"><a class="markdownIt-Anchor" href="#92-bpu"></a> 9.2、BPU</h2>
<p>​    BPU： Brain Processing Unit，大脑处理器。地平线科技提出的嵌入式人工智能处理器架构。第一代是高斯架构，第二代是伯努利架构，第三代是贝叶斯架构。目前地平线已经设计出了第一代高斯架构，并与英特尔在2017年CES展会上联合推出了ADAS系统（高级驾驶辅助系统）。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151290.png" alt="img" /></p>
<h2 id="93-cpu"><a class="markdownIt-Anchor" href="#93-cpu"></a> 9.3、CPU</h2>
<p>​    CPU：Central Processing Unit，中央处理器。目前PC 核心主流产品。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151313.png" alt="img" /></p>
<h2 id="94-dpu"><a class="markdownIt-Anchor" href="#94-dpu"></a> 9.4、DPU</h2>
<p>​    DPU：Deep learning Processing Unit，深度学习处理器。最早国内深鉴科技提出，基于Xilinx可重构特性的FPGA芯片，设计专用的深度学习处理单元，可基于已有的逻辑单元，设计并行高效的乘法器及逻辑电路，属于IP范畴，抽象出定制化的指令集和编译器，而非使用OpenCL，从而实现快速的开发与产品迭代。事实上，深鉴提出的DPU属于半定制化的FPGA。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151420.png" alt="img" /></p>
<h2 id="95-fpu"><a class="markdownIt-Anchor" href="#95-fpu"></a> 9.5、FPU</h2>
<p>​    FPU：Floating Processing Unit，浮点计算单元。通用处理器中的浮点运算模块。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151333.png" alt="img" /></p>
<h2 id="96-gpu"><a class="markdownIt-Anchor" href="#96-gpu"></a> 9.6、GPU</h2>
<p>​    GPU：Graphics Processing Unit，图形处理器。采用多线程SIMD架构，为图形处理而生。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151452.png" alt="img" /></p>
<h2 id="97-hpu"><a class="markdownIt-Anchor" href="#97-hpu"></a> 9.7、HPU</h2>
<p>​    HPU：Holographics Processing Unit，全息图像处理器。微软出品的全息计算芯片与设备。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151596.png" alt="img" /></p>
<h2 id="98-ipu"><a class="markdownIt-Anchor" href="#98-ipu"></a> 9.8、IPU</h2>
<p>​    IPU：Intelligence Processing Unit或者Image Processing Unit。与相机，显示相关。Deep Mind投资的Graphcore公司，开发出的AI处理器。包括：Display、Camera、Image Rotation, Inversion, Color Space Conversion、Image quality enhancement、 Video/graphics combining。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151623.png" alt="img" /></p>
<h4 id="99-mpu"><a class="markdownIt-Anchor" href="#99-mpu"></a> 9.9、MPU</h4>
<p>​    MPU/MCU：Microprocessor/Micro controller Unit，微处理器/微控制器。用于低计算应用的RISC计算机体系架构产品，如ARM-M系列处理器。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151616.png" alt="img" /></p>
<h2 id="910-npu"><a class="markdownIt-Anchor" href="#910-npu"></a> 9.10、NPU</h2>
<p>​    NPU：Neural Network Processing Unit，神经网络处理器。基于神经网络算法与加速的新型处理器总称，如中科院计算所/寒武纪公司出品的diannao系列。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151718.png" alt="img" /></p>
<h2 id="911-rpu"><a class="markdownIt-Anchor" href="#911-rpu"></a> 9.11、RPU</h2>
<p>​    RPU：Radio Processing Unit，无线电处理器。Imagination Technologies公司推出的集合集Wifi/蓝牙/FM/处理器为单片的处理器。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151782.png" alt="img" /></p>
<h2 id="912-tpu"><a class="markdownIt-Anchor" href="#912-tpu"></a> 9.12、TPU</h2>
<p>​    TPU：Tensor Processing Unit，张量处理器。Google 公司推出的加速人工智能算法的专用处理器。目前一代TPU面向Inference，第二代面向训练。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151725.png" alt="img" /></p>
<h2 id="913-vpu"><a class="markdownIt-Anchor" href="#913-vpu"></a> 9.13、VPU</h2>
<p>​    VPU：Vector Processing Unit，矢量处理器。Intel收购的Movidius公司推出的图像处理与人工智能的专用芯片的加速计算核心。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151878.png" alt="img" /></p>
<h2 id="914-wpu"><a class="markdownIt-Anchor" href="#914-wpu"></a> 9.14、WPU</h2>
<p>​    WPU：Wearable Processing Unit，可穿戴处理器。Ineda Systems公司推出的可穿戴片上系统产品，包含GPU/MIPS CPU等IP。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151933.png" alt="img" /></p>
<h4 id="915-xpu"><a class="markdownIt-Anchor" href="#915-xpu"></a> 9.15、XPU</h4>
<p>​    XPU：百度与Xilinx公司在2017年Hotchips大会上发布的FPGA智能云加速，含256核。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151944.png" alt="img" /></p>
<h2 id="916-zpu"><a class="markdownIt-Anchor" href="#916-zpu"></a> 9.16、ZPU</h2>
<p>​    ZPU：Zylin Processing Unit。 由挪威Zylin 公司推出的一款32位开源处理器。</p>
<h2 id="917-凸凹贴图"><a class="markdownIt-Anchor" href="#917-凸凹贴图"></a> 9.17、凸凹贴图</h2>
<p>​    凹凸贴图：计算机图形学在三维场景中凸凹处理的一个技术。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192151998.png" alt="img" /></p>
<h2 id="918-像素填充率"><a class="markdownIt-Anchor" href="#918-像素填充率"></a> 9.18、像素填充率</h2>
<p>​    像素填充率：每秒渲染的像素数量，早期10亿级别，现在100亿级别。</p>
<h2 id="919-三角形生成速度"><a class="markdownIt-Anchor" href="#919-三角形生成速度"></a> 9.19、三角形生成速度</h2>
<p>​    三角形生成速度：三角形是三维图形渲染的重要单元，当前从千万到亿级别不等。</p>
<h2 id="920-硬件tl"><a class="markdownIt-Anchor" href="#920-硬件tl"></a> 9.20、硬件T&amp;L</h2>
<p>​    硬件T&amp;L：显卡坐标转换和光源编程。</p>
<h2 id="921-ddr-显存"><a class="markdownIt-Anchor" href="#921-ddr-显存"></a> 9.21、DDR 显存</h2>
<p>​    DDR 显存：显卡的高速颗粒，有更快的数据交互速度。</p>
<h2 id="922-hyperz-技术"><a class="markdownIt-Anchor" href="#922-hyperz-技术"></a> 9.22、HyperZ 技术</h2>
<p>​    HyperZ 技术：显存优化管理单元，通过快速Z轴清除等手段优化显存的利用效率。</p>
<h2 id="923-显卡流水线"><a class="markdownIt-Anchor" href="#923-显卡流水线"></a> 9.23、显卡流水线</h2>
<p>​    显卡流水线：数量的多少决定显卡性能高低的一个很重要的指标，Nvidia和AMD-ATI也在不断地增加显卡的流处理器数量使显卡的性能达到跳跃式增长。这个和核心构建，显存带宽等因素配合，单一多，意义不大。</p>
<h2 id="924-f-buffer"><a class="markdownIt-Anchor" href="#924-f-buffer"></a> 9.24、F-Buffer</h2>
<p>​    F-Buffer：片断流缓冲区技术，处理无限制指令长度的阴影着色程序。执行原理：把需要经过渲染引擎多次处理的像素临时存储起来，而不是把它们写到帧缓冲里面。只有那些需要单通道处理的数据被写到帧缓冲。这样节省显存的带宽，从而使VPU工作得更加有效率。缺点：F-Buffer只能对所有流程都是基于同一视点的多流程渲染有效，对于用于生成不同视点图像的多流程渲染没用，在日常3D应用中，不同视点的多流程渲染十分普遍。其次F-Buffer的执行过程有可能产生溢出，一旦产生溢出其处理过程十分复杂，会影响GPU的执行效率。</p>
<h2 id="925-fpga"><a class="markdownIt-Anchor" href="#925-fpga"></a> 9.25、FPGA</h2>
<p>FPGA：可编程逻辑，计算效率高，更接近底层IO，通过冗余晶体管和连线实现逻辑可编辑。本质上是无指令、无需共享内存，计算效率比CPU、GPU高。主要应用于智能手机、便携式移动设备、汽车。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
  </entry>
  <entry>
    <title>音视频编解码相关知识学习</title>
    <url>/2023/11/19/8%20%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前些天一直在研究关于GPUi相关的知识，在周六的时候终于是写好了相应的测试手册，周一法师检测出问题的话我再加，其实也没啥可以加的东西了，不管是OPENGL还是OPENCL，只要相应的mali库成功即可，其他的倒是没啥，然后呢我也该去搞一下mpp 音视频编解码相关的东西了，后面其实还有摄像头啥的，这些都是要搞的，至少软件里面是要适配的对吧，还有那个缠绕我好久的buildroot opencv的问题，问题太多了，但是总要一点一点来，问题是一个一个解决的，总不可能一蹴而就，慢慢来呗</p>
<h1 id="音视频的基本概念"><a class="markdownIt-Anchor" href="#音视频的基本概念"></a> 音视频的基本概念</h1>
<h2 id="一-视频"><a class="markdownIt-Anchor" href="#一-视频"></a> 一 视频</h2>
<h3 id="1-码率"><a class="markdownIt-Anchor" href="#1-码率"></a> 1、码率√</h3>
<p>码率，又叫比特率，单位时间内传输的数据量，单位一般为kbps(千位每秒)。需要注意的是，这里b代表bit，而不是Byte，这里乘以8是Byte转成bit。计算公式：平均码率(kbps)=文件大小(kB)*8/时间(s)。动态码率(kbps)=每秒传输数据量(kB)*8。</p>
<p>“bps” 是 “bits per second” 的缩写，指的是数据传输速率或比特率，用于测量数据在通信或存储系统中的传输速度。它表示每秒传输的比特数，其中比特是计算机中最小的数据单位。比特率通常用于描述网络带宽、调制解调器速度、数字音频/视频流的传输速度等。</p>
<p>恒定码率：CBR，码率稳定可控，带宽要求不高，图像变化量比较大时方块效应比较明显。</p>
<p>动态码率：VBR，码率波动较大，带宽要求较高，图像变化量比较大时方块效应有所改善。发生网络抖动时，比较容易丢包，需要重传，或者FEC前向纠错，从而带来延时。</p>
<h3 id="2-分辨率"><a class="markdownIt-Anchor" href="#2-分辨率"></a> 2、分辨率</h3>
<p>分辨率又称为解析度，分辨率越高，像素越多，图像越清晰。</p>
<p>视频分辨率：又称为图像分辨率，由视频的宽高组成，表示形式宽x高，常见的视频分辨率有480P、720P、1080P、2K(2048x1080/2160x1440)、4K(4096x2160/3840x2160)，具体如下表1所示。</p>
<p>屏幕分辨率：又称为显示分辨率，描述屏幕分辨率的单位是ppi(pixel per inch，每英寸的像素数)。</p>
<p>位分辨率：又称为位深(BitDepth)，每个像素点存储信息的位数。常见的有：8位、16位、24位、32位色彩。Android的Bitmap常见的有ALPHA_8、RGB_565、ARGB_4444、ARGB_8888。</p>
<table>
<thead>
<tr>
<th style="text-align:left">显示模式</th>
<th style="text-align:left">水平像素x垂直像素</th>
<th style="text-align:left">宽高比</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">QCIF</td>
<td style="text-align:left">176x144</td>
<td style="text-align:left">11:9</td>
</tr>
<tr>
<td style="text-align:left">QVGA</td>
<td style="text-align:left">320x240</td>
<td style="text-align:left">4:3</td>
</tr>
<tr>
<td style="text-align:left">CIF</td>
<td style="text-align:left">352x288</td>
<td style="text-align:left">11:9</td>
</tr>
<tr>
<td style="text-align:left">nHD</td>
<td style="text-align:left">640x360</td>
<td style="text-align:left">16:9</td>
</tr>
<tr>
<td style="text-align:left">VGA</td>
<td style="text-align:left">640x480</td>
<td style="text-align:left">4:3</td>
</tr>
<tr>
<td style="text-align:left">HD</td>
<td style="text-align:left">1280x720</td>
<td style="text-align:left">16:9</td>
</tr>
<tr>
<td style="text-align:left">Full HD</td>
<td style="text-align:left">1920x1080</td>
<td style="text-align:left">16:9</td>
</tr>
<tr>
<td style="text-align:left">2K(FHD+)</td>
<td style="text-align:left">2048x1080</td>
<td style="text-align:left">17:9</td>
</tr>
<tr>
<td style="text-align:left">4K(UHD)</td>
<td style="text-align:left">3840x2160</td>
<td style="text-align:left">16:9</td>
</tr>
</tbody>
</table>
<h3 id="3-帧率"><a class="markdownIt-Anchor" href="#3-帧率"></a> 3、帧率</h3>
<p>视频帧率：测量显示帧数的量度，单位为每秒显示帧数(FPS，全称为Frame Per Second)。一般视频帧率为24fps，P制(PAL，德国提出，中国、印度、巴基斯坦等国家使用)为25fps，也就是每帧显示40ms，N制(NTSC，美国标准委员会提出，美国、日本、韩国等国家使用)为30fps。有些超高帧率的视频达到60fps。</p>
<p>显示帧率：以帧为单位的位图图像连续出现在显示器的频率，也称为刷新速率。Android设备刷新率一般为60Hz，也就是帧率为60fps，每帧为16ms，超过16ms能给人的肉眼带来延迟卡顿的感觉。做性能优化方面，也就是保证从测量、布局、绘制、上传指令、与GPU交换缓冲区等一系列动作在16ms完成。Android11支持120Hz的更高帧率，一般为对帧率要求极高的应用场景，比如互动游戏。</p>
<h3 id="4-像素格式"><a class="markdownIt-Anchor" href="#4-像素格式"></a> 4、像素格式</h3>
<p>像素格式：像素色彩分量的排列，由每个像素使用的总位数以及各分量的位数决定。图像的像素格式一般是RGBA四个分量通道各占8bits，组成一个32位的像素。其中R代表Red、G代表Green、B代表Blue、A代表Alpha。但是，视频压缩存储的像素格式不是RGBA，而是YUV，其中Y代表亮度(Luma)，U代表色度(Chroma)，V代表对比度(Contrast)。</p>
<h3 id="5-画质"><a class="markdownIt-Anchor" href="#5-画质"></a> 5、画质</h3>
<p>画质：画面质量，由清晰度、锐度、解析度、色彩纯度、色彩平衡等指标构成。</p>
<p>清晰度：指图像细节纹理及其边界的清晰程度。</p>
<p>锐度：反应图像平面清晰程度，以及图像边缘的锐利程度。</p>
<p>解析度：指像素点的数量，与分辨率对应，分辨率越高，解析度越高。</p>
<p>色彩纯度：指色彩的鲜艳程度。所有色彩都是三原色组成，其他颜色都是三原色混合而成，理论上可以混合出256种颜色。原色的纯度最高。色彩纯度是指原色在色彩中的百分比。</p>
<p>色彩平衡：用来控制图像的色彩分布，使得图像整体达到色彩平衡。</p>
<h3 id="6-色域与hdr"><a class="markdownIt-Anchor" href="#6-色域与hdr"></a> 6、色域与HDR</h3>
<p>色域：指某种表色模式所能表达的颜色构成的范围区域，色域空间越大，所能表现的颜色越多。</p>
<p>HDR：High Danamic Range，高动态范围，比普通图像提供更多动态范围和图像细节，能够更好反应真实环境的视觉效果。颜色值经过归一化后，范围一般是[0,1]。而HDR可以表达超出1的颜色值，拥有更大的颜色范围。</p>
<h3 id="7-旋转角度"><a class="markdownIt-Anchor" href="#7-旋转角度"></a> 7、旋转角度</h3>
<p>旋转角度：视频的YUV储存方向。一般的视频旋转角度是0°，对应的是横屏显示。后置摄像头竖屏拍的视频，旋转角度为90°，对应的是竖屏显示。Android中可以通过MediaMetaDataRetriever获取旋转角度。</p>
<h3 id="8-时长"><a class="markdownIt-Anchor" href="#8-时长"></a> 8、时长</h3>
<p>视频所有图像播放所需要的时间称为视频时长。计算公式：时长(s)=帧数x每帧时长=帧数x(1/帧率)。假设一个视频帧数为1000，帧率为25fps，那么时长为40s。</p>
<h3 id="9-封装格式"><a class="markdownIt-Anchor" href="#9-封装格式"></a> 9、封装格式</h3>
<p>封装格式（Container Format），也被称为容器格式、多媒体容器或封装协议，是用于将音频、视频、字幕等多种媒体数据进行封装和存储的文件格式。它将不同类型的媒体数据组合在一起，同时提供了文件结构、元数据、同步信息和索引等，以便播放器或解码器能够正确解析和播放媒体内容。</p>
<p>封装格式通常由以下几个主要组成部分构成：</p>
<ol>
<li>特定格式头（Format Header）：封装格式的文件头部分包含了关于文件本身的重要信息，如文件类型、版本、总体文件大小等。这些信息在解析和处理文件时起到了关键作用。</li>
<li>媒体信息（Metadata）：封装格式可以包含有关媒体内容的附加信息，例如标题、作者、描述、时长、分辨率、采样率等。这些元数据提供了有关媒体文件的描述和标识，使其能够被正确地识别和分类。</li>
<li>音视频轨（Track）：封装格式可以容纳多个音频、视频或字幕轨道。每个轨道包含相应媒体数据的编码信息、时间戳和相关参数。例如，一个视频轨道可能包含视频帧的压缩编码数据，而一个音频轨道可能包含音频样本的编码数据。</li>
<li>索引（Index）：为了快速定位和访问媒体数据，封装格式通常包含一个索引表。索引表记录了文件中各个部分的位置、时间戳和长度等信息，以便播放器能够快速定位到需要的数据位置。通过索引，播放器可以跳转到特定时间点或轨道的特定位置。</li>
<li>其他数据：除了上述主要组成部分之外，封装格式还可以包含其他数据，如字幕轨道、章节信息、描述文本、封面图像等。这些附加数据提供了更丰富的媒体体验和交互功能。</li>
</ol>
<p>不同的封装格式具有不同的特点和功能。一些封装格式具有更广泛的兼容性和流行度，例如MP4（MPEG-4 Part 14）和MKV（Matroska）。这些封装格式支持多种编码格式、多个轨道和广泛的元数据支持。其他封装格式如AVI、MOV、FLV等也有各自的特点和应用领域。</p>
<p>封装格式在数字媒体的存储、传输和播放中起到了重要的作用。它们提供了一种标准化的方式来组织和管理多媒体数据，使得不同类型的媒体可以在各种设备和平台上进行兼容性播放和交互。。</p>
<h3 id="10-编码协议"><a class="markdownIt-Anchor" href="#10-编码协议"></a> 10、编码协议</h3>
<p>编码协议是指用于将原始视频数据进行压缩和编码的特定算法和规范。这些编码协议的目的是减小视频文件的大小并提高传输和存储效率，同时尽量保持较高的视频质量。以下是对几种常见的视频编码协议的详细介绍：</p>
<ol>
<li>H.264 / AVC：H.264（也称为高级视频编码，Advanced Video Coding）是一种广泛使用的视频编码协议。它采用了先进的压缩技术，能够提供较高的视频质量和更低的比特率。H.264广泛应用于各种领域，包括互联网视频流媒体、蓝光光盘、视频会议等。</li>
<li>H.265 / HEVC：H.265（High Efficiency Video Coding）是H.264的后继者，也是一种先进的视频编码协议。相比于H.264，H.265能够进一步减小视频文件大小，并提供更高的视频质量。它在保持相同视频质量的情况下，能够将比特率降低约50%。H.265常用于4K和8K高分辨率视频、流媒体服务等。</li>
<li>VP8 / VP9：VP8和VP9是由Google开发的开放源代码视频编码协议。它们提供了高效的视频压缩和较高的视频质量，并被广泛应用于WebRTC、WebM等互联网标准中。VP9相比VP8进一步提升了压缩性能，能够在更低的比特率下保持较高的视频质量。</li>
<li>MPEG-4：MPEG-4是一系列的视频编码协议，包括MPEG-4 Part 2和MPEG-4 Part 10（也称为H.264）。MPEG-4 Part 2常用于视频的存储和传输，而MPEG-4 Part 10（H.264）被广泛使用于各种应用，包括互联网视频、移动视频等。</li>
<li>MJPEG：MJPEG（Motion JPEG）是一种将视频中的每一帧都作为独立的JPEG图像进行压缩的编码协议。它适用于一些特定应用，如摄像头和视频监控系统。尽管MJPEG在压缩率和存储效率方面比较低，但解码过程相对简单，避免了帧间预测等复杂的算法。</li>
<li>WMV3：WMV3（Windows Media Video 3）是由微软开发的一种视频编码协议。它广泛用于Windows Media Player和其他微软产品中，提供了较好的视频质量和压缩效率。WMV3支持各种分辨率和比特率，并具有较好的兼容性。</li>
</ol>
<p>这些编码协议在视频压缩方面采用了不同的算法和技术，以平衡视频质量、压缩比和解码复杂性。不同的应用场景和设备可能选择不同的编码协议，根据需求和限制来平衡视频质量和性能。</p>
<h3 id="11-视频播放整体流程"><a class="markdownIt-Anchor" href="#11-视频播放整体流程"></a> 11、视频播放整体流程</h3>
<p>当您在电脑上打开一个视频文件时，涉及到了多个步骤和组件，以确保视频能够被正确解码和显示。以下是一个详细的视频文件在电脑上显示的典型流程：</p>
<ol>
<li>文件读取：计算机首先会读取视频文件的数据。这涉及从硬盘或其他存储设备中读取文件的二进制数据，并将其加载到计算机的内存中以供后续处理。</li>
<li>封装格式解析：计算机会根据视频文件的封装格式（如MP4、MKV等）来解析文件的结构和元数据。这包括读取文件头部信息、索引表和媒体轨道的描述等。通过解析封装格式，计算机可以了解视频文件的整体结构和内容。</li>
<li>视频解码：视频解码器开始对视频轨道进行解码。它根据封装格式中存储的视频编码器信息，解码压缩的视频数据并将其转换为原始的像素数据。解码过程涉及对视频帧进行逐帧解压缩和重构，以还原出原始的图像数据。</li>
<li>音频解码：如果视频文件包含音频轨道，音频解码器将对音频轨道进行解码。类似于视频解码过程，音频解码器根据封装格式中的音频编码器信息，解码压缩的音频数据并将其转换为原始的音频样本数据。</li>
<li>同步和播放：视频解码器和音频解码器的输出需要进行同步，以确保视频和音频的播放保持一致。计算机使用时间戳、帧率和采样率等信息来确保视频和音频流的同步，并根据显示设备的刷新率来进行适当的帧率调整。</li>
<li>图像渲染：计算机使用图像渲染器将解码后的视频像素数据转换为适合显示的图像格式。这可能涉及色彩空间转换、调整图像大小、应用滤镜或效果等处理。</li>
<li>音频渲染：类似地，音频渲染器将解码后的音频样本数据转换为适合音频输出设备的音频格式。这可能包括音频混合、音量调整、空间效果等处理。</li>
<li>显示输出：最后，计算机将渲染后的视频图像和音频数据发送到显示设备和扬声器，以进行实际的播放。这可能涉及将视频图像传输到显示器，并通过显示器的硬件和软件进行显示。同时，音频数据也会被发送到扬声器或音频输出设备进行播放。</li>
</ol>
<h2 id="二-音频"><a class="markdownIt-Anchor" href="#二-音频"></a> 二 音频</h2>
<h3 id="1-采样率"><a class="markdownIt-Anchor" href="#1-采样率"></a> 1、采样率</h3>
<p>采样率：对声音信号每秒的采样次数，采样率越高，声音的还原越真实。采样率单位为Hz，常见的采样率有：8000Hz、16000Hz、44100Hz、48000Hz。人类一般能够听到的声音范围：20Hz～20000Hz。根据奈奎斯特采样定理：当采样频率大于信号中最高频率的2倍时，采样后的数字信号能够完整保留原始信号的信息。</p>
<h3 id="2-声道"><a class="markdownIt-Anchor" href="#2-声道"></a> 2、声道</h3>
<p>声道：指声音在录制或播放时，在不同空间位置采集或回放的相互独立音频信号。声道数指在录音时的音源数量，或者在播放时的扬声器数量。</p>
<h3 id="3-声道布局"><a class="markdownIt-Anchor" href="#3-声道布局"></a> 3、声道布局</h3>
<p>不同声道数对应不同声道布局。常见的声道布局有单声道(mono)、立体声道(stereo)、四声环绕、5.1声道。</p>
<p>单声道：只有一个声道，优点数据量小，amr_nb和amr_wb默认为单声道，缺点是缺乏对声音位置定位。</p>
<p>立体声道：一般为两个声道，由左声道、右声道组成，改善对声音位置定位的状况。</p>
<p>四声环绕：由前左、前右、后左、后右组成，形成立体环绕。4.1声道是在四声环绕基础上，增加一个低音。</p>
<p>5.1声道：在4.1基础上，增加一个中场声道，杜比AC3就是采用5.1声道，也就是影院宣传的杜比音效。</p>
<h3 id="4-音质"><a class="markdownIt-Anchor" href="#4-音质"></a> 4、音质</h3>
<p>音质：声音的质量，经过编码压缩后的音频信号保真度，由音量、音高和音色组成。</p>
<p>音量：音频的强度，数值范围0-100，静音时为0，最大值为100。Android中有提供音量增强LoudnessEnhancer，调节声音分贝值。</p>
<p>音高：声音的音调，即音频频率或每秒变化次数。</p>
<p>音色：音频泛音，又称为音品，不同声音表现在波形方面与众不同的特性。</p>
<h3 id="5-封装格式"><a class="markdownIt-Anchor" href="#5-封装格式"></a> 5、封装格式</h3>
<p>音频的封装格式，与视频封装格式类似，由特定格式头+媒体信息+音频轨数据组成。常见的封装格式有：mp3、m4a、ogg、amr、wma、wav、flac、aac、ape等。</p>
<ol>
<li>MP3（MPEG Audio Layer III）：MP3 是一种广泛使用的音频封装格式，具有较高的压缩比和音质，适用于音乐和语音的存储和传输。</li>
<li>M4A（MPEG-4 Audio）：M4A 是苹果公司使用的音频封装格式，它可以包含多种编码格式的音频数据，如 AAC（Advanced Audio Coding）和 ALAC（Apple Lossless Audio Codec）。M4A 格式通常与 iTunes 和 Apple 设备相关联。</li>
<li>OGG：OGG 是一种自由开放的音频封装格式，支持多种编码格式，如 Vorbis、Opus 等。它具有较好的音质和压缩比，常用于网络流媒体和游戏音效。</li>
<li>AMR（Adaptive Multi-Rate）：AMR 是一种用于语音编码和封装的格式，主要用于手机通话和语音录制。它具有较高的压缩比，适合在低比特率下传输语音数据。</li>
<li>WMA（Windows Media Audio）：WMA 是微软开发的音频封装格式，支持多种编码格式，如 WMA 标准、WMA Pro 和 WMA Lossless。它在 Windows 平台上得到广泛应用，常用于音乐和音频流媒体。</li>
<li>WAV（Waveform Audio File Format）：WAV 是一种无损音频封装格式，它存储原始音频数据，不进行压缩。WAV 格式具有较高的音质，常用于音乐制作和音频编辑。</li>
<li>FLAC（Free Lossless Audio Codec）：FLAC 是一种无损音频封装格式，它可以实现无损的音频压缩和解压缩，保留了原始音频数据的完整性。FLAC 格式适用于音乐存储和音频传输。</li>
<li>AAC（Advanced Audio Coding）：AAC 是一种高级音频编码格式，常用于音乐和视频的存储和传输。它具有较高的音质和压缩效率，是目前广泛支持的音频编码格式。</li>
<li>APE（Monkey’s Audio）：APE 是一种无损音频封装格式，类似于 FLAC，但压缩比略低。它常用于音乐存储和音频传输，提供了较高的音质和文件压缩率。</li>
</ol>
<h3 id="6-编码协议"><a class="markdownIt-Anchor" href="#6-编码协议"></a> 6、编码协议</h3>
<p>音频经过解封装得到的音频轨数据，也是经过编码的。常见的音频编码协议有：mp3、aac、amr_nb、amr_wb、ac3、vorbis、opus、flac、wmav2等。</p>
<ol>
<li>MP3（MPEG Audio Layer III）：MP3 是一种常见的有损音频编码格式，它通过移除人耳听不到或对音质影响较小的音频信号，实现了较高的压缩比。MP3 格式广泛用于音乐存储和传输。</li>
<li>AAC（Advanced Audio Coding）：AAC 是一种先进的音频编码格式，它在音质和压缩效率上优于 MP3。AAC 常用于音乐、视频和流媒体的存储和传输，被广泛支持。</li>
<li>AMR-NB（Adaptive Multi-Rate Narrowband）：AMR-NB 是一种窄带自适应多速率编码格式，用于语音编码和传输。它在低比特率下实现了较高的语音质量，常用于手机通话。</li>
<li>AMR-WB（Adaptive Multi-Rate Wideband）：AMR-WB 是一种宽带自适应多速率编码格式，也用于语音编码和传输。相比于 AMR-NB，AMR-WB 在更宽的频率范围内提供了更好的语音质量。</li>
<li>AC3（Audio Coding 3）：AC3 是一种有损音频编码格式，常用于影片音轨和 DVD 视频中。AC3 格式支持多声道音频，提供了较高的音质和环绕声效果。</li>
<li>Vorbis：Vorbis 是一种开放的无损音频编码格式，采用了无损压缩算法，可以提供高音质和较小的文件大小。Vorbis 常用于音乐存储和网络流媒体。</li>
<li>Opus：Opus 是一种开放的音频编码格式，具有低延迟、高音质和较高的压缩效率。Opus 支持多种应用场景，包括音乐、语音通信和网络流媒体。</li>
<li>FLAC（Free Lossless Audio Codec）：FLAC 是一种开放的无损音频编码格式，可以实现无损的音频压缩和解压缩。FLAC 格式保留了原始音频数据的完整性，提供了较高的音质。</li>
<li>WMA（Windows Media Audio）：WMA 是微软开发的音频编码格式，支持多种编码配置，如 WMA 标准、WMA Pro 和 WMA Lossless。WMA 常用于 Windows 平台上的音乐和音频流媒体。</li>
</ol>
<h3 id="7-采样数"><a class="markdownIt-Anchor" href="#7-采样数"></a> 7、采样数</h3>
<p>采样数，即每帧采样的数量。在FFmpeg的AVFrame中，定义为nb_samples。</p>
<h3 id="8-采样位数"><a class="markdownIt-Anchor" href="#8-采样位数"></a> 8、采样位数</h3>
<p>采样位数，即每个采样占用多少位。在RIFF(Resource Interchange File Format)资源交换文件格式有个字段bits_per_sample表示采样位数，在FFmpeg也是用这个字段表示采样位数。</p>
<h3 id="9-存储空间"><a class="markdownIt-Anchor" href="#9-存储空间"></a> 9、存储空间</h3>
<p>音频的每秒存储空间由：采样率、声道数、每个采样位数。假设采样率为44.1k，声道数为2，采样位数为16。那么，每秒所占存储空间字节数=44100 * 2 * 16 / 8</p>
<h3 id="10-帧时长"><a class="markdownIt-Anchor" href="#10-帧时长"></a> 10、帧时长</h3>
<p>音频的帧时长=采样数 / 采样率。假设采样率为44.1k，采样数为1024。那么每帧时长约等于23ms。</p>
<h4 id="11-采样格式"><a class="markdownIt-Anchor" href="#11-采样格式"></a> 11、采样格式</h4>
<p>音频的采样格式分为大端存储和小端存储。按照符号划分有：有符号与无符号。按照类型划分有：整型与浮点型。按照存储位数划分有：8位、16位、32位、64位，都是8的倍数。在FFmpeg的AVSampleFormat枚举如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">AVSampleFormat</span> &#123;</span></span><br><span class="line">    AV_SAMPLE_FMT_NONE = <span class="number">-1</span>,</span><br><span class="line">    AV_SAMPLE_FMT_U8,          <span class="comment">// unsigned 8 bits</span></span><br><span class="line">    AV_SAMPLE_FMT_S16,         <span class="comment">// signed 16 bits</span></span><br><span class="line">    AV_SAMPLE_FMT_S32,         <span class="comment">// signed 32 bits</span></span><br><span class="line">    AV_SAMPLE_FMT_FLT,         <span class="comment">// float</span></span><br><span class="line">    AV_SAMPLE_FMT_DBL,         <span class="comment">// double</span></span><br><span class="line"> </span><br><span class="line">    AV_SAMPLE_FMT_U8P,         <span class="comment">// unsigned 8 bits, planar</span></span><br><span class="line">    AV_SAMPLE_FMT_S16P,        <span class="comment">// signed 16 bits, planar</span></span><br><span class="line">    AV_SAMPLE_FMT_S32P,        <span class="comment">// signed 32 bits, planar</span></span><br><span class="line">    AV_SAMPLE_FMT_FLTP,        <span class="comment">// float, planar</span></span><br><span class="line">    AV_SAMPLE_FMT_DBLP,        <span class="comment">// double, planar</span></span><br><span class="line">    AV_SAMPLE_FMT_S64,         <span class="comment">// signed 64 bits</span></span><br><span class="line">    AV_SAMPLE_FMT_S64P,        <span class="comment">// signed 64 bits, planar</span></span><br><span class="line"> </span><br><span class="line">    AV_SAMPLE_FMT_NB           <span class="comment">// Number of sample formats</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="视频封装格式"><a class="markdownIt-Anchor" href="#视频封装格式"></a> 视频封装格式</h1>
<p>音视频的时长怎么获取，音视频的封面怎么获取，音视频的格式怎么获取呢？这些信息都以特定格式存储在文件开头或者结尾，称为多媒体信息或者多媒体元数据。通用的封装格式由：文件标识头+多媒体信息+音视频(字幕)轨+视频帧索引块组成，如果是纯音频，后面可能还有歌词。音视频的封装格式就是通过解析文件标识头进行判断的，然后解析多媒体信息从而获取时长，再解析视频帧索引块，最后根据索引块去获取对应时间戳的视频帧。</p>
<p>音视频封装格式存储的字段包括：时长、码率、音视频编码器、分辨率(宽x高)、帧率、像素格式、旋转角度、采样率、声道数等等。其中视频专有的字段是分辨率、帧率、像素格式、旋转角度，而音频专有的字段是采样率、声道数。</p>
<p>常见的视频格式有：mp4、mov、3gp、mkv、webm、flv、avi、mpg、wmv、ts等等。其中mp4、mov、3gp同属一个协议簇，目前mp4最为流行，mp4全称为MPEG-4，由国际标准化组织和国际电工委员会下属的动态图像专家组(Moving Picture Experts Group)制定，具体协议可参考：ISO/IEC14496-14协议；mkv与webm公用封装格式：matroska，对于高清视频而言，mkv/webm最受欢迎；而avi是比较古老的格式，音视频流交错(Audio Video Interleave)，可以封装各种编码格式的音视频流；mpg属于ps的一种封装格式；wmv(Windows Media Video)是微软推出的视频编解码格式统称，采用ASF(Advance System Format)作为容器，基于Object对象进行封装；而ts的全称为MPEG2-TS，即为Transport Stream的缩写，具体可参考ISO/IEC13818-1协议，作用于传输层，主要用于实时传输的节目，HLS直播协议就是基于ts切片来传输视频流的，主要特点是从视频流任一片段都可独立解码播放；ps与ts类似，全称为MPEG-PS，即为Program Stream的缩写，用于存储固定时长的节目。视频格式如下图所示：</p>
<p>整个解封装流程：从读取文件头判断视频格式开始，然后选择对应的Extractor，解析多媒体信息，再解析视频帧的索引块，最后根据索引去定位并读取音视频数据。如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192038669.png" alt="20200907235506737 (1)" /></p>
<ol>
<li>
<p>读取文件头：<br />
读取文件头是为了获取文件的基本信息和标识。文件头通常是文件的前几个字节，它包含了文件的格式信息以及其他元数据。读取文件头可以通过打开文件并读取前几个字节的方式实现。</p>
</li>
<li>
<p>判断文件格式：<br />
通过读取文件头中的信息，可以判断文件的格式。在提供的文件格式中，常见的文件格式有：</p>
<ul>
<li>视频格式：mp4、avi、mkv、flv、wmv</li>
<li>音频格式：mp3、m4a、flac、amr</li>
</ul>
</li>
<li>
<p>选择对应的解析器（Extractor）：<br />
根据判断出的文件格式，选择对应的解析器（Extractor）。解析器是用于解析文件的工具或库，它能够提取出文件中的特定信息。不同的文件格式通常需要使用不同的解析器进行解析。</p>
</li>
<li>
<p>解析多媒体信息：<br />
使用选择的解析器，对文件进行解析以获取多媒体信息。多媒体信息包括视频的分辨率、帧率、编码格式等，音频的采样率、声道数、编码格式等。解析多媒体信息可以通过解析器提供的函数或方法来实现。</p>
</li>
<li>
<p>解析视频帧索引：<br />
如果文件是视频文件，可以进一步解析视频的帧索引。视频帧索引包含了视频中每一帧的位置和时间信息。解析视频帧索引可以帮助我们定位和提取特定的视频帧。</p>
</li>
<li>
<p>读取音视频数据：<br />
最后，通过解析器提供的函数或方法，读取音视频数据。音视频数据是文件中实际存储的音频和视频内容。可以根据需要，逐帧读取视频数据或逐样本读取音频数据。</p>
<p>mp4作为目前最流行的视频封装格式，也是本篇文章的男一号主角，下面将围绕mp4格式进行展开分析。mp4是由一系列的box组成(在quick time协议中，称为atom)，box又由Header和Data组成，box的结构如图2所示：</p>
</li>
</ol>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192040157.png" alt="img" /></p>
<p>而Header由size、type、largeSize、extendType组成，其中size和type是必要字段，如表1所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192040107.png" alt="image-20231119204029085" /></p>
<p>​    full box的Header多两个字段：version、flag，一般是track box采用full box形式，如表2所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192040249.png" alt="image-20231119204051236" /></p>
<p>box分为normal box、full box、large box、extend box。如果size为1，那么表明该box为large box，使用largeSize来存储box的大小；如果size为0，那么表明该box是文件的最后一个box；如果box的类型为uuid，那么表明该box是扩展box。如下面代码段所示：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">aligned(<span class="number">8</span>) class <span class="title function_">Box</span> <span class="params">(<span class="type">unsigned</span> <span class="type">int</span>(<span class="number">32</span>) boxtype,</span></span><br><span class="line"><span class="params">    optional <span class="type">unsigned</span> <span class="type">int</span>(<span class="number">8</span>)[<span class="number">16</span>] extended_type)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="title function_">int</span><span class="params">(<span class="number">32</span>)</span> size;</span><br><span class="line">    <span class="type">unsigned</span> <span class="title function_">int</span><span class="params">(<span class="number">32</span>)</span> type = boxtype;</span><br><span class="line">    <span class="keyword">if</span> (size==<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="title function_">int</span><span class="params">(<span class="number">64</span>)</span> largesize;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (size==<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// box extends to end of file</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (boxtype==‘uuid’) &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span>(<span class="number">8</span>)[<span class="number">16</span>] usertype = extended_type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>moov box作为mp4格式的重要组成部分，根据moov box与mdat box的相对位置，分为moov前置和moov后置。如下面图3、图4所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192041850.jpeg" alt="img" /></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192041782.jpeg" alt="img" /></p>
<p>通常情况下，mp4的moov都是在mdat前面的；一般只有实时录制的mp4视频，moov才在mdat的后面。</p>
<p>ftyp box：mp4视频标识头，包含major brand、minor version、compatible brands。其中major brand一般为isom，而compatible brands包括isom、iso2、avc、mp41、mp42等。</p>
<p>moov box：存储多媒体信息，嵌套着movie box(mvhd)、track box(trak box)、usedata box(udat)；而track box分为视频轨、音频轨、字幕轨，如果有多语言，就会对应有多音轨；trak/mdia/minf/stbl/stsd存储的是音视频编码器信息，比如视频轨的是avc，音频轨是mp4a；trak/mdia/minf/stbl/stsz存储的是视频帧size；trak/mdia/minf/stbl/stco存储的是chunk offset。</p>
<p>mdat box：音视频数据，根据moov及其嵌套box解析出来的视频帧索引，去定位关键帧，然后根据帧类型读取音视频数据。</p>
<h1 id="音频封装格式"><a class="markdownIt-Anchor" href="#音频封装格式"></a> 音频封装格式</h1>
<p>音频封装格式一般由：多媒体信息+音频流+封面流+歌词流组成。有些音乐会包含封面和歌词，则对应有封面流、歌词流。多媒体信息包括：标题、艺术家、专辑、作曲、音乐风格、日期、码率、时长、声道布局、采样率、音频编码器等。而音频封装包括：mp3、m4a、ogg、amr、wma、aac、wav、flac、ape等。前面两篇文章介绍过相关概念：走进音视频的世界——音视频基本概念、走进音视频世界——视频封装格式。音频格式如下图所示：</p>
<p>以下面问题为出发点，揭开音频封装格式的面纱：</p>
<p>① 音乐封面如何获取？</p>
<p>② 音乐歌词如何获取与显示？</p>
<p>③ 有损格式与无损格式有什么区别？</p>
<p>④ 不同封装格式有什么联系，又有什么区别？</p>
<p>先从FFprobe检测到的音频metadata说起，如下图1所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192045466.jpeg" alt="img" /></p>
<p>从上图可以看出，前半部分是title标题、artist艺术家、album专辑、album_artist艺术家专辑、composer作曲者、genre音乐风格式；中间部分是lyrics歌词，每句歌词前面有对应的时间戳；后半部分是两个流，第0编号的流是音频轨，包含：音频编码器、采样率、声道布局、码率，第1编号的流是封面，其实是一帧图像，包含：图像编码器、像素格式、分辨率。接下来根据上面提出的问题进行展开分析。</p>
<p>1、获取音乐的封面<br />
音乐封面保存在视频图像流中，先解析出图像编码器、像素格式、分辨率等参数，然后根据编码器去寻找对应的解码器，并打开解码器，对图像编码压缩数据进行解码，最终解码出来的图像就是封面了。</p>
<p>2、音乐歌词的获取与显示<br />
上面有提及，每句歌词前面有显示的时间戳，以音频时钟为基准，歌词时间戳同步于音频时间戳。也就是根据音频时间戳来同步解析歌词，然后把歌词回调到应用层渲染显示。另外一个问题，当前歌词什么时候该消失呢？歌词没有具体的显示时长，等待下一个歌词的到来，把当前歌词覆盖。</p>
<p>3、有损格式与无损格式的区别<br />
(1) 无损音乐格式</p>
<p>无损音乐格式有ape、wav、flac三种，其中ape、flac都是基于wav进行压缩。而wav是微软专门为Windows开发的一种标准数字音频文件，文件扩展名wav，是WaveForm的缩写，文件大小计算公式：size=(采样率<em>量化位数</em>声道/8)/时间(秒)。一般采样率是44100Hz，量化位数为16位，声道数为2（即立体声道），1分钟的音频占用存储空间约为10M。</p>
<p>在Windows环境下，大多数媒体文件都是按照资源互换文件格式(Resource Interchange File Format)来储存信息的，简称为RIFF格式。构成RIFF的基本单位成为块(Chunk)，每个RIFF文件由若干块组成，wav基本结构如下表所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192045766.png" alt="image-20231119204555747" /></p>
<p>每个块由块标识、长度、数据组成，如下代码段：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct chunk &#123;</span><br><span class="line">    u32 id; //块标识</span><br><span class="line">    u32 size; //块大小</span><br><span class="line">    u8 data[size]; //块内容</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>其中fmt块由声道数、采样率、码率、块对齐、量化位数五个参数组成，如下表所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Num Channels	         2 Bytes	           小端存储</span><br><span class="line">SampleRate	         4 Bytes	           小端存储</span><br><span class="line">ByteRate	         4 Bytes	           小端存储</span><br><span class="line">Block Align	         2 Bytes	           小端存储</span><br><span class="line">BitsPerSample	         2 Bytes	           小端存储</span><br></pre></td></tr></table></figure>
<p>(2) 有损音乐格式</p>
<p>有损音乐格式包括：mp3、m4a、ogg、amr、wma、aac等。目前最为流行的是mp3(MPEG-1 audio layer3)，有着mp3的下一代之称的是aac(Advance Audio Coding)。有损格式压缩率比无损的高，文件占用存储空间小，但是声音还原度不如无损格式。我们下载音乐时，碰到高品质或者无损音质的音乐，通常要VIP会员或按需收费，因为越高品质越接近原声。而无损音乐从理论上能够100%保留声音细节，100%还原原声。无损音质英文简称为SQ(Super Quality，超音质)。关于无损格式与有损格式对比如下表所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192046184.png" alt="image-20231119204633159" /></p>
<h4 id="4-不同封装格式的联系与区别"><a class="markdownIt-Anchor" href="#4-不同封装格式的联系与区别"></a> 4、不同封装格式的联系与区别</h4>
<p>封装格式共同点是基本结构是相同的，都是由多媒体信息+音频流+封面流+歌词流组成。区别是不同封装格式，采用编码方式不一样，压缩率不一样，音频流子结构不一样。下面是不同封装格式的多方位对比，如表4所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192047768.png" alt="image-20231119204702747" /></p>
<h1 id="音视频编码"><a class="markdownIt-Anchor" href="#音视频编码"></a> 音视频编码</h1>
<p>音视频流是通过特定编码器压缩，由一系列的压缩图像/语音帧组成。当然可能存在多种语言多音轨，每个音轨之间的音频流相互独立。还可能存在内置字幕，常见的字幕格式有sub、smi、ssa、srt等。但是，本篇文章讨论的主角是音视频编码，常见的视频编码有h264、h265、vp9、mpeg4、mjpeg、wmv3、av1(Alliance for Open Media Video 1，由开放媒体联盟推出，对标h265，旨在成为下一代视频编码技术标准)，常见的音频编码有mp3、aac、amr_nb、amr_wb、ac3、vorbis、opus、flac、wmav2等等。音视频格式如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192049496.png" alt="img" /></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192049324.png" alt="img" /></p>
<h2 id="一-视频编码"><a class="markdownIt-Anchor" href="#一-视频编码"></a> 一、视频编码</h2>
<p>视频编码是将原始视频信号进行压缩和编码的过程，以便在存储和传输中减少数据量。下面详细解释为什么需要对视频进行编码以及视频编码的原理和过程。</p>
<p>为什么需要进行视频编码？<br />
视频数据通常由连续的图像帧组成，每一帧都包含了大量的像素数据。原始的视频数据以YUV或RGB格式存储，其中Y表示亮度分量，U和V表示色度分量。这些原始数据非常大，特别是对于高分辨率和高帧率的视频来说，它们需要大量的存储空间和传输带宽。为了有效地存储和传输视频，需要对视频进行压缩，而视频编码就是实现视频压缩的一种方式。</p>
<h3 id="1-变换与量化"><a class="markdownIt-Anchor" href="#1-变换与量化"></a> 1、变换与量化</h3>
<p>变换：把空间域的图像信号变换到频率域。常见的变换有离散余弦变换、傅里叶变换。其中，离散余弦变换又称为DCT变换，在视频压缩中得到广泛应用。</p>
<p>量化：人类对图像的低频特性的信息敏感(比如亮度)，对高频特性的信息不敏感(比如色度、对比度)，所以才编码过程中可以少用高频信息，全保留低频信息。量化过程是对低频区进行细量化，对高频区进行粗量化，减少人眼不太敏感的图像信息，从而减小数据量、提高压缩率。量化是有损的，量化参数(Quantization Parameter)越大，图像质量越低。</p>
<h3 id="2-运动补偿与运动估计"><a class="markdownIt-Anchor" href="#2-运动补偿与运动估计"></a> 2、运动补偿与运动估计</h3>
<p>运动估计：把图像分割成互不重叠的子块，然后以一定大小的窗口，在前一图像或后一图像去移动搜索相似的图像块，这个搜索过程称为运动估计。</p>
<p>运动补偿：通过先前的局部图像来预测、补偿当前的局部图像；</p>
<h3 id="3-熵编码"><a class="markdownIt-Anchor" href="#3-熵编码"></a> 3、熵编码</h3>
<p>熵编码是基于变长编码，出现概率大的符号采用短码，出现概率小的符号采用长码，最终的平均码长接近信源熵值。其他的变长编码还包括：哈夫曼编码、游程编码、算术编码等。</p>
<h3 id="4-帧内压缩与帧间压缩"><a class="markdownIt-Anchor" href="#4-帧内压缩与帧间压缩"></a> 4、帧内压缩与帧间压缩</h3>
<p>帧内压缩：每帧图像内部存在数据冗余。比如一副图像中有一块颜色相同的画布，编码时按照nxn大小的宏块进行划分，那么宏块之间存在相似性，这就使得可以从空间层面进行压缩，即帧内压缩；</p>
<p>帧间压缩：连续图像之间存在许多相似细节。比如一辆运动中的汽车，从当前时刻到下一时刻发生相对位移，从另外一个角度来说，是周边环境发生相对位移而汽车本身没有变化，这就使得可以从时间层面进行压缩，即帧间压缩；</p>
<h3 id="5-i帧-p帧-b帧"><a class="markdownIt-Anchor" href="#5-i帧-p帧-b帧"></a> 5、I帧、P帧、B帧</h3>
<p>I帧：内部编码帧，又称为关键帧，使用I帧编码可以完整还原一副图像，帧的数据量会比较大；</p>
<p>P帧：前向预测帧，又称为前向参考帧，需要参考前一个I帧进行编码，数据量会比I帧小。同理，解码时也需要参考前一个I帧进行解码；</p>
<p>B帧：双向内插帧，又称为双向参考帧，需要参考前后的I帧或P帧进行编码，压缩率会比P帧更高，数据量比P帧更小。但是，解码时需要下一个I帧或者P帧的到来，解码时序需要严格控制，解码复杂度也相对高。</p>
<h3 id="6-gop与关键帧间隔"><a class="markdownIt-Anchor" href="#6-gop与关键帧间隔"></a> 6、GOP与关键帧间隔</h3>
<p>GOP(全称Group Of Pictures)，图像序列组，由一个关键帧和若干个非关键帧组成。在编码器参数设置中，有一个参数设置GOP大小。以Android的mediacodec为例，设置关键帧间隔时间Key_Frame_Interval，也就是设置多少秒来一个关键帧。另外有一个类似的参数，关键帧间隔：多少帧来一个关键帧。</p>
<h3 id="7-码率控制"><a class="markdownIt-Anchor" href="#7-码率控制"></a> 7、码率控制</h3>
<p>码率控制，是指网络请求码流时，根据网络带宽状况来控制码率大小。分为五种控制方式：恒定码率、动态码率、平均码率、恒定质量因子、恒定量化参数。而Youtube请求网络流时，会根据网络拥挤程度来动态调整码率，得益于一种新的多媒体传输控制协议——DASH，全称为Danymic Adaptive Streaming over HTTP，即基于HTTP的动态自适应媒体流。接下来对码率控制方式进行展开分析。</p>
<p>恒定码率：CBR(Constant Bitrate)，以恒定的码率去编码，波动小，编码质量欠佳；</p>
<p>动态码率：VBR(Variable Bitrate)，以动态的码率去编码，波动大，编码质量比较稳定；</p>
<p>平均码率：ABR(Average Bitrate)，以平均的码率去编码，编码质量参差不齐；</p>
<p>恒定质量因子：CQF(Constant Quality Factor)，又称为CRF(Constant Rate Factor)，在x264和x265编码默认采用CRF，取值范围为[0,51]，数值越大表示视频压缩率越高，编码质量越低；</p>
<p>恒定量化参数：CQP(Constant Quantization Parameter)，瞬时码率会随场景复杂度有所波动，在H264定义的QP范围为[0,51]，数值越大表示量化步长越大，编码质量越低。当为QP=0时，表示无损编码；</p>
<h3 id="8-svc分级编码"><a class="markdownIt-Anchor" href="#8-svc分级编码"></a> 8、SVC分级编码</h3>
<p>SVC(全称Scalable Video Coding)，可扩展的视频编码，也称为分级编码。具有三大特性：时间可分级、空间可分级、质量可分级。</p>
<p>时间可分级：分为T0、T1、T2、T3，用来设置帧率，丢弃棕、绿、蓝得到不同帧率。如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192050136.png" alt="img" /></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192050965.png" alt="img" /></p>
<p>质量可分级：可以从码流提取不同图像质量的子码流。</p>
<p>应用领域：视频监控、流媒体直播、视频会议。</p>
<p>优点：分级码流应用灵活，一次编码多次使用，可得到不同帧率、分辨率、质量；</p>
<p>缺点：分级码流的解码复杂度增加，比单层码流的压缩率低10%左右；</p>
<h3 id="9-yuv"><a class="markdownIt-Anchor" href="#9-yuv"></a> 9、YUV</h3>
<p>视频压缩编码后，是以YUV格式进行存储的，Y代表亮度(Chroma)，U代表色度(Luma)，V代表对比度(Contrast)。常见的YUV排列格式有YUV444、YUV422、YUV420，区别如下表所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192050879.png" alt="image-20231119205039862" /></p>
<p>YUV420分为YUV420P和YUV420SP。其中，YUV420P又称为I420，P代表Planar平面，按照Y、U、V顺序排列，存储结构如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192050280.png" alt="image-20231119205051265" /></p>
<p>而YUV420SP，其中SP代表Semi Planar半独立平面，U和V是交错存储的，存储结构如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192050526.png" alt="img" /></p>
<p>能不能举个例子，经过编码和不应该编码的一部电影他们的大小能差多少？</p>
<p>当涉及到视频编码的压缩效果时，实际的压缩比例会受到多个因素的影响，包括视频内容、编码参数和压缩算法等。因此，无法给出具体的数字来表示编码前后视频大小的差异，因为结果会因情况而异。然而，我可以通过一个简化的例子来说明视频编码对文件大小的影响。</p>
<p>假设我们有一部电影，持续时间为2小时，分辨率为1920x1080像素，帧率为24帧/秒。我们将比较原始未经编码的视频（Raw Video）和经过常见有损压缩算法（如H.264）编码后的视频的文件大小。</p>
<ol>
<li>原始未经编码的视频（Raw Video）：<br />
对于每一帧，假设使用RGB颜色空间，每个像素需要3个字节（一个字节用于红色通道，一个字节用于绿色通道，一个字节用于蓝色通道）。因此，每一帧的数据大小为：1920 x 1080 x 3 = 6,220,800字节。考虑到24帧/秒，2小时长的视频将需要非常大的存储空间。</li>
<li>经过有损压缩编码的视频：<br />
使用常见的有损压缩算法（如H.264）对视频进行编码时，会应用变换、量化、运动估计、运动补偿和熵编码等技术。这些技术将减少冗余数据和舍弃视觉上较不重要的信息，从而显著减小文件大小。具体的压缩比例将取决于编码参数和视频内容。</li>
</ol>
<p>每一帧的数据大小为：1920 x 1080 x 3 = 6,220,800 字节。</p>
<p>考虑到视频的帧率为 24 帧/秒，接下来我们计算每秒的数据大小：<br />
每秒的数据大小 = 每帧的数据大小 x 帧率 = 6,220,800 字节 x 24 = 149,299,200 字节= 0.1389636993408203 GB。</p>
<p>接下来，我们计算整个视频的数据大小。视频的长度为 2 小时，即 2 x 60 x 60 = 7,200 秒：<br />
视频的数据大小 = 每秒的数据大小 x 视频长度 = 149,299,200 字节 x 7,200 = 1,074,681,600,000 字节。</p>
<p>将字节转换为更常见的单位，我们可以得到：<br />
视频的数据大小约为 1.07 TB（1 TB = 1,099,511,627,776 字节）。</p>
<p>这意味着对于一部持续 2 小时的视频，如果每帧使用 RGB 颜色空间并且每个像素需要 3 个字节来表示，未经过任何编码压缩的视频将需要约 1.07 TB 的存储空间。</p>
<p>这个数字显示了为什么视频编码在存储和传输视频时非常重要，因为原始视频数据的大小是非常庞大的。视频编码可以显著减小视频文件的大小，从而降低存储成本和传输带宽需求。</p>
<h2 id="二-音频编码"><a class="markdownIt-Anchor" href="#二-音频编码"></a> 二、音频编码</h2>
<p>人类的听觉范围为20Hz~20KHz，那么低于20Hz或者高于20KHz，这些低频或高频信号基本听不到，可以作为冗余数据，通过特定采样率进行采样、编码。</p>
<h3 id="1-采样率-2"><a class="markdownIt-Anchor" href="#1-采样率-2"></a> 1、采样率</h3>
<p>采样率描述的是每秒对原始声音信号的采样次数，常见的采样率8000Hz、16000Hz、44100Hz、48000Hz，目前使用最广泛的是44100Hz，即44.1KHz。</p>
<h3 id="2-波形编码"><a class="markdownIt-Anchor" href="#2-波形编码"></a> 2、波形编码</h3>
<p>直接把时域信号转换为数字编码，不利用任何参数，使得重构后的波形与原始信号的波形形状尽可能保持一致。基本原理是在时间轴对模拟语音信号按照一定速率采样，然后把幅度样本量化，并用代码表示。</p>
<h3 id="3-参数编码"><a class="markdownIt-Anchor" href="#3-参数编码"></a> 3、参数编码</h3>
<p>从语音波形信号中提取生成语音的参数，使用这些参数通过语音生成模型重构出语音。音质比较低，但是保密性良好，广泛应用于军事技术中，典型的参数编码为LPC(Linear Predictive Coding)。</p>
<h3 id="4-混合编码"><a class="markdownIt-Anchor" href="#4-混合编码"></a> 4、混合编码</h3>
<p>混合编码是指采用两种以上编码技术，比如波形编码与参数编码结合，形成优势互补。</p>
<h3 id="5-pcm"><a class="markdownIt-Anchor" href="#5-pcm"></a> 5、PCM</h3>
<p>PCM(Pulse Code Modulation 脉冲编码调制)，是对连续变化的模型信号抽样、量化、编码的过程，最终转换为数字信号。</p>
<h1 id="音视频解码"><a class="markdownIt-Anchor" href="#音视频解码"></a> 音视频解码</h1>
<p>音视频文件是经过编码、封装而成的。那么反过来，要播放音视频文件，首先得解封装、解码。上一篇博客讨论到音视频编码：走进音视频的世界——音视频编码，我们来个上下呼应，本文与大家探讨一下音视频解码。本质上，是按照既定的解码协议去解析编码内容，也就是编码的逆过程。常见的视频解码器有：H264、H265、VP8、VP9、MPEG4、MJPEG、WMV3、MSMPEG4V3，常见的音频解码器有：MP3、AAC、FLAC、AC3、OPUS、VORBIS、AMR、WMA。</p>
<h2 id="一-视频解码"><a class="markdownIt-Anchor" href="#一-视频解码"></a> 一、视频解码</h2>
<h3 id="1-pts与dts"><a class="markdownIt-Anchor" href="#1-pts与dts"></a> 1、pts与dts</h3>
<p>dts：Decode Timestamp，解码时间戳，决定什么时候解码该帧数据。</p>
<p>pts：Presentation Timestamp，显示时间戳，决定什么时候显示该帧图像。以参考时钟为基准，超前参考时钟则等待，落后（在30ms与500ms之间）参考时钟则快速渲染，十分落后（超过500ms）参考时钟则丢弃该帧。参考时钟分为三种：系统时钟、音频时钟、视频时钟。一般以音频时钟作为参考时钟，因为人类对声音更加敏感，相对图像而言。</p>
<h3 id="2-关键帧与非关键帧"><a class="markdownIt-Anchor" href="#2-关键帧与非关键帧"></a> 2、关键帧与非关键帧</h3>
<p>关键帧：I帧为关键帧，所以I帧可以直接解码还原出一个图像。</p>
<p>非关键帧：P帧与B帧为非关键帧，需要依赖关键帧才能解码。而B帧是双向预测帧，还要另外等待下一个I帧或P帧，才可以成功解码出来。B帧压缩率比较高，但是编解码复杂度也相对高。</p>
<h3 id="3-组包与拼帧"><a class="markdownIt-Anchor" href="#3-组包与拼帧"></a> 3、组包与拼帧</h3>
<p>有些封装格式会把一帧数据拆成若干包，因为关键帧数据可能比较大；RTP封装数据时，也会把一帧拆成若干包，因为MTU规定网络层最大传输单元为1500bytes。因此，在解封装或者接收网络数据包时，需要根据序号排列，把若干个包组成一个完整包，然后再解码。例如FFmpeg读取一帧数据过程，源码在avformat/utils.c中，如下图所示(参考雷神博客)：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192115640.png" alt="img" /></p>
<h3 id="4-特定帧头"><a class="markdownIt-Anchor" href="#4-特定帧头"></a> 4、特定帧头</h3>
<p>在解析h264/h265编码的视频帧时，需要在帧头添加起始码，一般起始码为0x00 0x00 0x01或者0x00 0x00 0x00 0x01。比如mp4封装格式，一般是以h264为<a href="https://so.csdn.net/so/search?q=%E8%A7%86%E9%A2%91%E7%BC%96%E7%A0%81&amp;spm=1001.2101.3001.7020">视频编码</a>、aac为音频编码。</p>
<h2 id="二-音频解码"><a class="markdownIt-Anchor" href="#二-音频解码"></a> 二、音频解码</h2>
<h3 id="1-planar与packed存储"><a class="markdownIt-Anchor" href="#1-planar与packed存储"></a> 1、planar与packed存储</h3>
<p>planar：每个声道数据单独存储。以立体声道为例，L表示左声道，R表示右声道。那么存储格式为LLLLRRRR。在FFmpeg中，第i个声道数据存储在frame-&gt;data[i]。类似视频的像素格式YUV420P，Y、U、V三个分量单独存储，4个Y分量对应一个U分量与一个V分量。</p>
<p>packed：所有声道数据交错存储。同样地，以立体声道数据为例。那么存储格式为LRLRLRLR。在FFmpeg中，所有声道数据都存储在frame-&gt;data[0]。类似视频的YUV420SP，Y独立存储，UV交错存储，4个Y分量对应一组UV分量。</p>
<h3 id="2-量化位数"><a class="markdownIt-Anchor" href="#2-量化位数"></a> 2、量化位数</h3>
<p>量化位数：量化位是对模拟音频信号的幅度轴数字化，它决定了模拟信号数字化的动态范围。量化位数越大，质量越好。bitsPerSample，占2bytes，一般为8bits、16bits、32bits、64bits。在WAVE的Format chunk有定义，如下表所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192115938.png" alt="image-20231119211557915" /></p>
<h3 id="3-采样率"><a class="markdownIt-Anchor" href="#3-采样率"></a> 3、采样率</h3>
<p>音频采样率是指录音设备在1秒时间内对声音信号的采样次数，采样频率越高，那么声音的还原越真实自然。常见的采样率有8000Hz、16000Hz、32000Hz、44100Hz、48000Hz。其中44100Hz可达到CD音质标准，也是目前最为常用的采样率。</p>
<h3 id="4-声道数与声道布局"><a class="markdownIt-Anchor" href="#4-声道数与声道布局"></a> 4、声道数与声道布局</h3>
<p>常见声道数有：单声道、立体声道、3声道、4声道、5声道、6声道、7声道、8声道。其中3声道以上，又称为立体环绕声道，其中杜比音效就是采用多声道同时输出，实现立体环绕效果。</p>
<p>声道布局的各个声道描述如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FC: front center</span><br><span class="line">BC: back center</span><br><span class="line">FL/FR: front left/right</span><br><span class="line">FCL/FCR: front center left/right</span><br><span class="line">FTL/FTR: front top left/right</span><br><span class="line">SL/SR: back surround left/right</span><br><span class="line">BL/BR: back left/right</span><br><span class="line">LFE: low frequency effects</span><br></pre></td></tr></table></figure>
<p>声道数与声道布局关系，如下表所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311192116640.png" alt="image-20231119211617624" /></p>
<h1 id="vpu"><a class="markdownIt-Anchor" href="#vpu"></a> VPU</h1>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
  </entry>
  <entry>
    <title>rkdeb包的制作</title>
    <url>/2023/11/14/7%20rk%20deb%E5%8C%85%E7%9A%84%E5%88%B6%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>先说一下前情提要：<br />
最近这一个月一直在制作debian和ubuntu文件系统，rk官方默认情况下只是构建了debian，好像是因为版权问题，然而呢，我肯定是要构建ubuntu镜像的，而我要做的，就是根据rk提供的debian系统的构建方法，来进行ubuntu的构建。</p>
<p>​	最大的问题出现在deb包的构建,也就是下面这些deb包：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311132050152.png" alt="image-20231113205017093" /></p>
<p>很多很多的包，根本不知道从哪里来的~~，而现在呢大约知道了，首先呢先来分析一下各个dockerfile文件。</p>
<p>几个很重要的github链接：</p>
<p><strong>docker环境的大佬链接</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/Caesar-github</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311132057450.png" alt="image-20231113205704425" /></p>
<p>各种库的大佬链接：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/JeffyCN?tab=repositories</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311132058219.png" alt="image-20231113205817179" /></p>
<p>香橙派的仓库链接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/orangepi-xunlong/rk-rootfs-build</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311132205565.png" alt="image-20231113220515527" /></p>
<h1 id="1-dockerfile-文件"><a class="markdownIt-Anchor" href="#1-dockerfile-文件"></a> 1 dockerfile 文件</h1>
<h2 id="11-debian10"><a class="markdownIt-Anchor" href="#11-debian10"></a> 1.1 debian10</h2>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:buster</span><br><span class="line"><span class="keyword">MAINTAINER</span> Caesar Wang <span class="string">&quot;wxt@rock-chips.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置多架构环境</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dpkg --add-architecture arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 apt 配置以跳过 SSL 验证</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">touch</span> /etc/apt/apt.conf.d/99verify-peer.conf &amp;&amp; <span class="built_in">echo</span> &gt;&gt;/etc/apt/apt.conf.d/99verify-peer.conf <span class="string">&quot;Acquire &#123; https::Verify-Peer false &#125;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加源列表</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> sources.list /etc/apt/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新并安装交叉编译所需的基本软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y crossbuild-essential-arm64 apt-transport-https</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 overlay 目录</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> ./overlay/  /</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装构建依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get install -y sudo locales git fakeroot devscripts cmake vim qemu-user-static:arm64 binfmt-support \</span></span><br><span class="line"><span class="language-bash">        dh-make dh-exec pkg-kde-tools device-tree-compiler:arm64 bc cpio parted dosfstools mtools libssl-dev:arm64 \</span></span><br><span class="line"><span class="language-bash">        g++-aarch64-linux-gnu dpkg-dev meson debhelper pkgconf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 arm64 架构下 libdrm 的构建依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get build-dep -y -a arm64 libdrm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 arm64 架构下 xorg-server 的构建依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get build-dep -y -a arm64 xorg-server</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 arm64 架构下的 gstreamer 相关软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get install -y gstreamer1.0-plugins-bad:arm64 gstreamer1.0-plugins-base:arm64 gstreamer1.0-tools:arm64 \</span></span><br><span class="line"><span class="language-bash">        gstreamer1.0-alsa:arm64 gstreamer1.0-plugins-base-apps:arm64 qtmultimedia5-examples:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 libdrm-dev:arm64</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libdrm-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 gstreamer-rockchip 相关软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libx11-dev:arm64 libdrm-dev:arm64 libgstreamer1.0-dev:arm64 \</span></span><br><span class="line"><span class="language-bash">        libgstreamer-plugins-base1.0-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 libmali 相关软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libstdc++6:arm64 libgbm-dev:arm64 libdrm-dev:arm64 libx11-xcb1:arm64 libxcb-dri2-0:arm64 libxdamage1:arm64 \</span></span><br><span class="line"><span class="language-bash">        libxext6:arm64 libwayland-client0:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 drm-cursor 相关软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libgbm-dev:arm64 libegl1-mesa-dev:arm64 libgles2-mesa-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 glmark2 相关软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y debhelper-compat libjpeg-dev:arm64 libpng-dev:arm64 libudev-dev:arm64  libxcb1-dev:arm64 python3 wayland-protocols libwayland-dev libwayland-bin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 rktoolkit 相关软件包</span></span><br><span class="line"><span class="comment">#RUN apt install -y libmad-ocaml-dev libmad0-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 lib4l2 相关软件包</span></span><br><span class="line"><span class="comment">#RUN apt update -y</span></span><br><span class="line"><span class="comment">#RUN apt build-dep -y libv4l-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 blueman 的构建依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get build-dep -y blueman</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 en_US.UTF-8 本地化设置</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> locale-gen en_US.UTF-8</span></span><br><span class="line"><span class="keyword">ENV</span> LANG en_US.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">ENV</span> LANGUAGE en_US:en</span><br><span class="line"><span class="keyword">ENV</span> LC_ALL en_US.UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i -e <span class="string">&#x27;s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/&#x27;</span> /etc/locale.gen &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&#x27;LANG=&quot;en_US.UTF-8&quot;&#x27;</span>&gt;/etc/default/locale &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    dpkg-reconfigure --frontend=non交互式 locales &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    update-locale LANG=en_US.UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;Update Headers!&quot;</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dpkg -i /packages/arm64/rga/*.deb</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dpkg -i /packages/arm64/mpp/*.deb</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -fy --allow-downgrades /packages/arm64/gst-rkmpp/*.deb</span></span><br><span class="line"><span class="comment">#RUN apt-get install -fy --allow-downgrades /packages/arm64/gstreamer/*.deb</span></span><br><span class="line"><span class="comment">#RUN apt-get install -fy --allow-downgrades /packages/arm64/gst-plugins-base1.0/*.deb</span></span><br><span class="line"><span class="comment">#RUN apt-get install -fy --allow-downgrades /packages/arm64/gst-plugins-bad1.0/*.deb</span></span><br><span class="line"><span class="comment">#RUN apt-get install -fy --allow-downgrades /packages/arm64/gst-plugins-good1.0/*.deb</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -fy --allow-downgrades /packages/arm64/libv4l/*.deb</span></span><br><span class="line"><span class="comment">#RUN dpkg -i /packages/arm64/gst-rkmpp/*.deb</span></span><br><span class="line"><span class="comment">#RUN dpkg -i /packages/arm64/ffmpeg/*.deb</span></span><br><span class="line"><span class="comment">#RUN dpkg -i /packages/arm64/libmali/libmali-midgard-t86x-r18p0-x11*.deb</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> find /packages/arm64/libdrm -name <span class="string">&#x27;*.deb&#x27;</span> | sudo xargs -I&#123;&#125; dpkg -x &#123;&#125; /</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;deb https://mirrors.ustc.edu.cn/debian/ bullseye main contrib non-free&quot;</span> &gt;&gt; /etc/apt/sources.list</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt install -y meson=0.56.2-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y -f</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到非 root 用户</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> useradd -c <span class="string">&#x27;rk user&#x27;</span> -m -d /home/rk -s /bin/bash rk</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i -e <span class="string">&#x27;/\%sudo/ c \%sudo ALL=(ALL) NOPASSWD: ALL&#x27;</span> /etc/sudoers</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> usermod -a -G sudo rk</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> rk</span><br></pre></td></tr></table></figure>
<h2 id="12-debian11"><a class="markdownIt-Anchor" href="#12-debian11"></a> 1.2 debian11</h2>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:bookworm</span><br><span class="line"><span class="keyword">MAINTAINER</span> Caesar Wang <span class="string">&quot;wxt@rock-chips.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置多架构环境</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dpkg --add-architecture arm64</span></span><br><span class="line"><span class="comment">#RUN echo &quot;deb-src http://deb.debian.org/debian bullseye main&quot; &gt;&gt; /etc/apt/sources.list</span></span><br><span class="line"><span class="comment">#RUN echo &quot;deb-src http://deb.debian.org/debian bullseye-updates main&quot; &gt;&gt; /etc/apt/sources.list</span></span><br><span class="line"><span class="comment">#RUN echo &quot;deb-src http://security.debian.org bullseye/updates main&quot; &gt;&gt; /etc/apt/sources.list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行apt-get update并安装ca-certificates</span></span><br><span class="line"><span class="comment">#RUN apt-get update &amp;&amp; apt-get install -y ca-certificates</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">touch</span> /etc/apt/apt.conf.d/99verify-peer.conf &amp;&amp; <span class="built_in">echo</span> &gt;&gt;/etc/apt/apt.conf.d/99verify-peer.conf <span class="string">&quot;Acquire &#123; https::Verify-Peer false &#125;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加sources.list文件到/etc/apt/目录</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> sources.list /etc/apt/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y crossbuild-essential-arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加overlay目录到根目录</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> ./overlay/  /</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装构建依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get install -y sudo locales git fakeroot devscripts cmake vim qemu-user-static:arm64 binfmt-support \</span></span><br><span class="line"><span class="language-bash">        dh-make dh-exec pkg-kde-tools device-tree-compiler:arm64 bc cpio parted dosfstools mtools libssl-dev:arm64 \</span></span><br><span class="line"><span class="language-bash">        g++-aarch64-linux-gnu dpkg-dev meson debhelper pkgconf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get build-dep -y -a arm64 libdrm</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get build-dep -y -a arm64 xorg-server</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get install -y gstreamer1.0-plugins-bad:arm64 gstreamer1.0-plugins-base:arm64 gstreamer1.0-tools:arm64 \</span></span><br><span class="line"><span class="language-bash">        gstreamer1.0-alsa:arm64 gstreamer1.0-plugins-base-apps:arm64 qtmultimedia5-examples:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装rga所需的依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libdrm-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装gstreamer-rockchip所需的依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libx11-dev:arm64 libdrm-dev:arm64 libgstreamer1.0-dev:arm64 \</span></span><br><span class="line"><span class="language-bash">        libgstreamer-plugins-base1.0-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装libmali所需的依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libstdc++6:arm64 libgbm-dev:arm64 libdrm-dev:arm64 libx11-xcb1:arm64 libxcb-dri2-0:arm64 libxdamage1:arm64 \</span></span><br><span class="line"><span class="language-bash">        libxext6:arm64 libwayland-client0:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装drm-cursor所需的依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libgbm-dev:arm64 libegl1-mesa-dev:arm64 libgles2-mesa-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装glmark2所需的依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y debhelper-compat libjpeg-dev:arm64 libpng-dev:arm64 libudev-dev:arm64  libxcb1-dev:arm64 python3 wayland-protocols libwayland-dev libwayland-bin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装rktoolkit所需的依赖项</span></span><br><span class="line"><span class="comment">#RUN apt install -y libmad-ocaml-dev libmad0-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装lib4l2所需的依赖项</span></span><br><span class="line"><span class="comment">#RUN apt update -y</span></span><br><span class="line"><span class="comment">#RUN apt build-dep -y libv4l-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成en_US.UTF-8本地化</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> locale-gen en_US.UTF-8</span></span><br><span class="line"><span class="keyword">ENV</span> LANG en_US.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">ENV</span> LANGUAGE en_US:en</span><br><span class="line"><span class="keyword">ENV</span> LC_ALL en_US.UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i -e <span class="string">&#x27;s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/&#x27;</span> /etc/locale.gen &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&#x27;LANG=&quot;en_US.UTF-8&quot;&#x27;</span>&gt;/etc/default/locale &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    dpkg-reconfigure --frontend=noninteractive locales &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    update-locale LANG=en_US.UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;Update Headers!&quot;</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dpkg -i /packages/arm64/rga/*.deb</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dpkg -i /packages/arm64/mpp/*.deb</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -fy --allow-downgrades /packages/arm64/gst-rkmpp/*.deb</span></span><br><span class="line"><span class="comment">#RUN apt-get install -fy --allow-downgrades /packages/arm64/gstreamer/*.deb</span></span><br><span class="line"><span class="comment">#RUN apt-get install -fy --allow-downgrades /packages/arm64/gst-plugins-base1.0/*.deb</span></span><br><span class="line"><span class="comment">#RUN apt-get install -fy --allow-downgrades /packages/arm64/gst-plugins-bad1.0/*.deb</span></span><br><span class="line"><span class="comment">#RUN apt-get install -fy --allow-downgrades /packages/arm64/gst-plugins-good1.0/*.deb</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#RUN apt-get install -fy --allow-downgrades /packages/arm64/libv4l/*.deb</span></span><br><span class="line"><span class="comment">#RUN dpkg -i /packages/arm64/gst-rkmpp/*.deb</span></span><br><span class="line"><span class="comment">#RUN dpkg -i /packages/arm64/ffmpeg/*.deb</span></span><br><span class="line"><span class="comment">#RUN dpkg -i /packages/arm64/libmali/libmali-midgard-t86x-r18p0-x11*.deb</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> find /packages/arm64/libdrm -name <span class="string">&#x27;*.deb&#x27;</span> | sudo xargs -I&#123;&#125; dpkg -x &#123;&#125; /</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y -f</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到非root用户</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> useradd -c <span class="string">&#x27;rk user&#x27;</span> -m -d /home/rk -s /bin/bash rk</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i -e <span class="string">&#x27;/\%sudo/ c \%sudo ALL=(ALL) NOPASSWD: ALL&#x27;</span> /etc/sudoers</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> usermod -a -G sudo rk</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> rk</span><br></pre></td></tr></table></figure>
<h2 id="13-debian12"><a class="markdownIt-Anchor" href="#13-debian12"></a> 1.3 debian12</h2>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用Debian bookworm作为基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> debian:bookworm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置镜像的维护者信息</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> Caesar Wang <span class="string">&quot;wxt@rock-chips.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加arm64架构支持</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dpkg --add-architecture arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置apt，禁用HTTPS的证书验证</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">touch</span> /etc/apt/apt.conf.d/99verify-peer.conf &amp;&amp; <span class="built_in">echo</span> &gt;&gt;/etc/apt/apt.conf.d/99verify-peer.conf <span class="string">&quot;Acquire &#123; https::Verify-Peer false &#125;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加自定义的sources.list文件到容器的/etc/apt/目录</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> sources.list /etc/apt/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新apt源并安装crossbuild-essential-arm64软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y crossbuild-essential-arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前目录下的overlay目录添加到镜像的根目录</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> ./overlay/  /</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装构建过程中需要的依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt install -fy sudo locales git fakeroot devscripts cmake vim qemu-user-static:arm64 binfmt-support \</span></span><br><span class="line"><span class="language-bash">        dh-make dh-exec device-tree-compiler:arm64 bc:arm64 cpio:arm64 parted dosfstools:arm64 mtools:arm64 libssl-dev:arm64 \</span></span><br><span class="line"><span class="language-bash">        g++-aarch64-linux-gnu dpkg-dev:arm64 meson:arm64 debhelper:arm64 pkgconf:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装构建libdrm库所需的依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get build-dep -y -a arm64 libdrm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装构建xorg-server所需的依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get build-dep -y -a arm64 xorg-server</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装GStreamer相关的依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get install -y gstreamer1.0-plugins-bad:arm64 gstreamer1.0-plugins-base:arm64 gstreamer1.0-tools:arm64 \</span></span><br><span class="line"><span class="language-bash">        gstreamer1.0-alsa:arm64 gstreamer1.0-plugins-base-apps:arm64 qtmultimedia5-examples:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装libdrm-dev依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libdrm-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装libx11-dev、libdrm-dev、libgstreamer1.0-dev、libgstreamer-plugins-base1.0-dev等依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libx11-dev:arm64 libdrm-dev:arm64 libgstreamer1.0-dev:arm64 libgstreamer-plugins-base1.0-dev:arm64 \</span></span><br><span class="line"><span class="language-bash">        libgstreamer-plugins-base1.0-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装libstdc++6、libgbm-dev、libdrm-dev、libx11-xcb1、libxcb-dri2-0、libxdamage1、libxext6、libwayland-client0等依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libstdc++6:arm64 libgbm-dev:arm64 libdrm-dev:arm64 libx11-xcb1:arm64 libxcb-dri2-0:arm64 libxdamage1:arm64 \</span></span><br><span class="line"><span class="language-bash">        libxext6:arm64 libwayland-client0:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装libgbm-dev、libegl1-mesa-dev、libgles2-mesa-dev依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libgbm-dev:arm64 libegl1-mesa-dev:arm64 libgles2-mesa-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装debhelper-compat、libjpeg-dev、libpng-dev、libudev-dev、libxcb1-dev、python3、wayland-protocols、libwayland-dev、libwayland-bin等依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y debhelper-compat libjpeg-dev:arm64 libpng-dev:arm64 libudev-dev:arm64  libxcb1-dev:arm64 python3 wayland-protocols libwayland-dev libwayland-bin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装构建weston所需的依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt build-dep -y weston:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成并设置系统的locale为en_US.UTF-8</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> locale-gen en_US.UTF-8</span></span><br><span class="line"><span class="keyword">ENV</span> LANG en_US.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">ENV</span> LANGUAGE en_US:en</span><br><span class="line"><span class="keyword">ENV</span> LC_ALL en_US.UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改locale.gen文件并重新配置locales，更新locale设置</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i -e <span class="string">&#x27;s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/&#x27;</span> /etc/locale.gen &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&#x27;LANG=&quot;en_US.UTF-8&quot;&#x27;</span>&gt;/etc/default/locale &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    dpkg-reconfigure --frontend=noninteractive locales &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    update-locale LANG=en_US.UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印日志信息</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;Update Headers!&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装rga2软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dpkg -i /packages/arm64/rga2/*.deb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装mpp软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dpkg -i /packages/arm64/mpp/*.deb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装gst-rkmpp软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -fy --allow-downgrades /packages/arm64/gst-rkmpp/*.deb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装gst-plugins-base1.0软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -fy --allow-downgrades /packages/arm64/gst-plugins-base1.0/*.deb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装libv4l软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -fy --allow-downgrades /packages/arm64/libv4l/*.deb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压libdrm软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> find /packages/arm64/libdrm -name <span class="string">&#x27;*.deb&#x27;</span> | sudo xargs -I&#123;&#125; dpkg -x &#123;&#125; /</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新apt源并安装依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y -f</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建名为rk的用户</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> useradd -c <span class="string">&#x27;rk user&#x27;</span> -m -d /home/rk -s /bin/bash rk</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改sudoers文件，允许rk用户使用sudo命令无需密码验证</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i -e <span class="string">&#x27;/\%sudo/ c \%sudo ALL=(ALL) NOPASSWD: ALL&#x27;</span> /etc/sudoers</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将rk用户添加到sudo用户组中</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> usermod -a -G sudo rk</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到rk用户</span></span><br><span class="line"><span class="keyword">USER</span> rk</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="2问题探究"><a class="markdownIt-Anchor" href="#2问题探究"></a> 2.问题探究</h1>
<p>默认情况下是不可以下载软件源码的，当取消一些特定的注释之后，是可以使用apt-get source命令进行软件包源码的下载的，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get source xorg-server</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311132118169.png" alt="image-20231113211818133" /></p>
<p>最后一句话忽略即可</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311132118188.png" alt="image-20231113211831167" /></p>
<ul>
<li><code>xorg-server-1.20.13</code>：这是一个目录，其中包含了<code>xorg-server</code>软件包的源代码文件和其他相关文件。</li>
<li><code>xorg-server_1.20.13-1ubuntu1~20.04.9.diff.gz</code>：这是一个压缩文件，其中包含了对源代码进行修改的补丁文件（diff文件）。</li>
<li><code>xorg-server_1.20.13-1ubuntu1~20.04.9.dsc</code>：这是一个文本文件，其中包含了软件包的元数据信息，例如软件包的名称、版本号、维护者等。</li>
<li><code>xorg-server_1.20.13.orig.tar.gz</code>：这是一个压缩文件，其中包含了软件包的原始源代码文件，即未经过任何修改的原始文件。</li>
<li><code>xorg-server_1.20.13.orig.tar.gz.asc</code>：这是一个数字签名文件，用于验证软件包的完整性和真实性。</li>
</ul>
<p>由于我是虚拟机上进行测试的所以我应该安装电脑amd64的，这里先安装构建xorg-server的软件包，下面需要注意的是build-dep这个参数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get build-dep -y -a amd64 xorg-server</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311132125078.png" alt="image-20231113212511030" /></p>
<p>然后使用以下命令构建deb包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -rfakeroot -b -d -uc -us -aamd64</span><br></pre></td></tr></table></figure>
<ul>
<li><code>DEB_BUILD_OPTIONS=nocheck</code>：这个选项设置构建过程中不运行自动化的测试。</li>
<li><code>dpkg-buildpackage</code>：这个命令用于构建 Debian 软件包。</li>
<li><code>-rfakeroot</code>：这个选项在构建过程中模拟 root 权限，以便可以在非特权用户下进行构建。</li>
<li><code>-b</code>：这个选项告诉 <code>dpkg-buildpackage</code> 构建二进制软件包（即生成 .deb 文件）。</li>
<li><code>-d</code>：这个选项告诉 <code>dpkg-buildpackage</code> 忽略构建依赖关系，即不检查构建依赖关系是否满足。</li>
<li><code>-uc</code>：这个选项告诉 <code>dpkg-buildpackage</code> 不使用软件包的维护者密钥进行签名。</li>
<li><code>-us</code>：这个选项告诉 <code>dpkg-buildpackage</code> 不生成源码软件包（即不生成 .dsc 文件）。</li>
<li><code>-aamd64</code>：这个选项指定了目标架构为 amd64，即构建适用于 amd64 架构的软件包。</li>
</ul>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311132126611.png" alt="image-20231113212628562" /></p>
<p>构建完成之后如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311132130327.png" alt="image-20231113213003305" /></p>
<p>根据提供的软件包列表，可以将它们分为以下几类：</p>
<ol>
<li><strong>xorg-server 相关</strong>：
<ul>
<li><code>xorg-server-source_1.20.13-1ubuntu1~20.04.9_all.deb</code>：xorg-server 的源代码包。</li>
<li><code>xorg-server_1.20.13-1ubuntu1~20.04.9_amd64.deb</code>：xorg-server 的二进制软件包。</li>
<li><code>xorg-server-dbgsym_1.20.13-1ubuntu1~20.04.9_amd64.ddeb</code>：xorg-server 的调试符号包。</li>
</ul>
</li>
<li><strong>xserver-xorg-core 相关</strong>：
<ul>
<li><code>xserver-xorg-core_1.20.13-1ubuntu1~20.04.9_amd64.deb</code>：xserver-xorg-core 的二进制软件包。</li>
<li><code>xserver-xorg-core-dbgsym_1.20.13-1ubuntu1~20.04.9_amd64.ddeb</code>：xserver-xorg-core 的调试符号包。</li>
<li><code>xserver-xorg-core-udeb_1.20.13-1ubuntu1~20.04.9_amd64.udeb</code>：xserver-xorg-core 的用于 Debian 安装程序的最小化二进制软件包。</li>
</ul>
</li>
<li><strong>xserver-xephyr 相关</strong>：
<ul>
<li><code>xserver-xephyr_1.20.13-1ubuntu1~20.04.9_amd64.deb</code>：xserver-xephyr 的二进制软件包。</li>
<li><code>xserver-xephyr-dbgsym_1.20.13-1ubuntu1~20.04.9_amd64.ddeb</code>：xserver-xephyr 的调试符号包。</li>
</ul>
</li>
<li><strong>xserver-xorg-legacy 相关</strong>：
<ul>
<li><code>xserver-xorg-legacy_1.20.13-1ubuntu1~20.04.9_amd64.deb</code>：xserver-xorg-legacy 的二进制软件包。</li>
<li><code>xserver-xorg-legacy-dbgsym_1.20.13-1ubuntu1~20.04.9_amd64.ddeb</code>：xserver-xorg-legacy 的调试符号包。</li>
</ul>
</li>
<li><strong>其他组件</strong>：
<ul>
<li><code>xdmx_1.20.13-1ubuntu1~20.04.9_amd64.deb</code>：xdmx 的二进制软件包。</li>
<li><code>xdmx-dbgsym_1.20.13-1ubuntu1~20.04.9_amd64.ddeb</code>：xdmx 的调试符号包。</li>
<li><code>xdmx-tools_1.20.13-1ubuntu1~20.04.9_amd64.deb</code>：xdmx-tools 的二进制软件包。</li>
<li><code>xdmx-tools-dbgsym_1.20.13-1ubuntu1~20.04.9_amd64.ddeb</code>：xdmx-tools 的调试符号包。</li>
<li><code>xnest_1.20.13-1ubuntu1~20.04.9_amd64.deb</code>：xnest 的二进制软件包。</li>
<li><code>xnest-dbgsym_1.20.13-1ubuntu1~20.04.9_amd64.ddeb</code>：xnest 的调试符号包。</li>
<li><code>xwayland_1.20.13-1ubuntu1~20.04.9_amd64.deb</code>：xwayland 的二进制软件包。</li>
<li><code>xwayland-dbgsym_1.20.13-1ubuntu1~20.04.9_amd64.ddeb</code>：xwayland 的调试符号包。</li>
<li><code>xserver-common_1.20.13-1ubuntu1~20.04.9_all.deb</code>：xserver 的公共文件包。</li>
<li><code>xserver-xorg-dev_1.20.13-1ubuntu1~20.04.9_amd64.deb</code>：xserver-xorg-dev 的二进制软件包。</li>
<li><code>xvfb_1.20.13-1ubuntu1~20.04.9_amd64.deb</code>：xvfb 的二进制软件包。</li>
<li><code>xvfb-dbgsym_1.20.13-1ubuntu1~20.04.9_amd64.ddeb</code>：xvfb 的调试符号包。</li>
</ul>
</li>
</ol>
<p>==为什么会有deb udeb ddeb呢有什么区别？==</p>
<p>在 Debian 系统中，软件包文件的扩展名可以有不同的形式，如 .deb、.udeb 和 .ddeb。这些扩展名代表了不同类型的软件包。</p>
<ol>
<li><strong>.deb</strong>：.deb 是最常见的 Debian 软件包扩展名，用于二进制软件包。这些软件包包含已经编译好的二进制文件，可以直接安装和使用。通常用于常规的应用程序、库和工具等。</li>
<li><strong>.udeb</strong>：.udeb 是用于 Debian 安装程序的特殊类型的软件包扩展名，它表示微型二进制软件包（microdeb）。这些软件包通常非常小，并包含了在系统安装过程中所需的最小化组件。.udeb 文件主要用于 Debian 安装程序（如 Debian Installer）期间的系统安装和配置，它们通常包含一些核心组件和驱动程序。</li>
<li><strong>.ddeb</strong>：.ddeb 是调试符号软件包的扩展名。调试符号包包含了编译后的二进制文件与调试信息的映射关系，它们用于在调试软件时进行符号解析和调试。通过将调试符号包与相应的二进制软件包结合使用，开发人员可以在调试过程中获取更详细和有用的调试信息。.ddeb 文件通常用于开发和调试目的。</li>
</ol>
<p>也就是说这些才是最重要的：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311132134590.png" alt="image-20231113213434571" /></p>
<p>那么现在我上面的那些docker镜像终于有作用了。</p>
<p>然后拉取大佬的xserver源码，拉取完成如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/JeffyCN/xorg-xserver.git</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311132213321.png" alt="image-20231113221319299" /></p>
<p>然后切换分支到1.20.4</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git chechout remotes/origin/rockchip/debian/1.20.4</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311132217566.png" alt="image-20231113221707543" /></p>
<p>然后查看一下分支：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311132217464.png" alt="image-20231113221726438" /></p>
<p>最后使用docker加载一下该源码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --privileged -it -v /home/topeet/Linux/xorg-xserver:/home/topeet/xorg-xserver debian10</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311132220805.png" alt="image-20231113222045776" /></p>
<p>然后使用以下命令构建deb包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -rfakeroot -b -d -uc -us -aarm64</span><br></pre></td></tr></table></figure>
<p>==我还以为这是aarch64，我说咋一直不对~~~==，构建完成如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311132226598.png" alt="image-20231113222638562" /></p>
<p>然后开始在上一节目录下生成了对应的deb包：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311132227725.png" alt="image-20231113222742691" /></p>
<h1 id="1debian10-dockerfile"><a class="markdownIt-Anchor" href="#1debian10-dockerfile"></a> 1.debian10 dockerfile</h1>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:buster</span><br><span class="line"><span class="keyword">MAINTAINER</span> Caesar Wang <span class="string">&quot;wxt@rock-chips.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置多架构环境</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dpkg --add-architecture arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 apt 配置以跳过 SSL 验证</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">touch</span> /etc/apt/apt.conf.d/99verify-peer.conf &amp;&amp; <span class="built_in">echo</span> &gt;&gt;/etc/apt/apt.conf.d/99verify-peer.conf <span class="string">&quot;Acquire &#123; https::Verify-Peer false &#125;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加源列表</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> sources.list /etc/apt/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新并安装交叉编译所需的基本软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y crossbuild-essential-arm64 apt-transport-https</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 overlay 目录</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> ./overlay/  /</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装构建依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get install -y sudo locales git fakeroot devscripts cmake vim qemu-user-static:arm64 binfmt-support \</span></span><br><span class="line"><span class="language-bash">        dh-make dh-exec pkg-kde-tools device-tree-compiler:arm64 bc cpio parted dosfstools mtools libssl-dev:arm64 \</span></span><br><span class="line"><span class="language-bash">        g++-aarch64-linux-gnu dpkg-dev meson debhelper pkgconf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 arm64 架构下 libdrm 的构建依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get build-dep -y -a arm64 libdrm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 arm64 架构下 xorg-server 的构建依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get build-dep -y -a arm64 xorg-server</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 arm64 架构下的 gstreamer 相关软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get install -y gstreamer1.0-plugins-bad:arm64 gstreamer1.0-plugins-base:arm64 gstreamer1.0-tools:arm64 \</span></span><br><span class="line"><span class="language-bash">        gstreamer1.0-alsa:arm64 gstreamer1.0-plugins-base-apps:arm64 qtmultimedia5-examples:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 libdrm-dev:arm64</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libdrm-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 gstreamer-rockchip 相关软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libx11-dev:arm64 libdrm-dev:arm64 libgstreamer1.0-dev:arm64 \</span></span><br><span class="line"><span class="language-bash">        libgstreamer-plugins-base1.0-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 libmali 相关软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libstdc++6:arm64 libgbm-dev:arm64 libdrm-dev:arm64 libx11-xcb1:arm64 libxcb-dri2-0:arm64 libxdamage1:arm64 \</span></span><br><span class="line"><span class="language-bash">        libxext6:arm64 libwayland-client0:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 drm-cursor 相关软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libgbm-dev:arm64 libegl1-mesa-dev:arm64 libgles2-mesa-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 glmark2 相关软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y debhelper-compat libjpeg-dev:arm64 libpng-dev:arm64 libudev-dev:arm64  libxcb1-dev:arm64 python3 wayland-protocols libwayland-dev libwayland-bin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 rktoolkit 相关软件包</span></span><br><span class="line"><span class="comment">#RUN apt install -y libmad-ocaml-dev libmad0-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 lib4l2 相关软件包</span></span><br><span class="line"><span class="comment">#RUN apt update -y</span></span><br><span class="line"><span class="comment">#RUN apt build-dep -y libv4l-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 blueman 的构建依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get build-dep -y blueman</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 en_US.UTF-8 本地化设置</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> locale-gen en_US.UTF-8</span></span><br><span class="line"><span class="keyword">ENV</span> LANG en_US.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">ENV</span> LANGUAGE en_US:en</span><br><span class="line"><span class="keyword">ENV</span> LC_ALL en_US.UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i -e <span class="string">&#x27;s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/&#x27;</span> /etc/locale.gen &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&#x27;LANG=&quot;en_US.UTF-8&quot;&#x27;</span>&gt;/etc/default/locale &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    dpkg-reconfigure --frontend=non交互式 locales &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    update-locale LANG=en_US.UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;Update Headers!&quot;</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dpkg -i /packages/arm64/rga/*.deb</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dpkg -i /packages/arm64/mpp/*.deb</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -fy --allow-downgrades /packages/arm64/gst-rkmpp/*.deb</span></span><br><span class="line"><span class="comment">#RUN apt-get install -fy --allow-downgrades /packages/arm64/gstreamer/*.deb</span></span><br><span class="line"><span class="comment">#RUN apt-get install -fy --allow-downgrades /packages/arm64/gst-plugins-base1.0/*.deb</span></span><br><span class="line"><span class="comment">#RUN apt-get install -fy --allow-downgrades /packages/arm64/gst-plugins-bad1.0/*.deb</span></span><br><span class="line"><span class="comment">#RUN apt-get install -fy --allow-downgrades /packages/arm64/gst-plugins-good1.0/*.deb</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -fy --allow-downgrades /packages/arm64/libv4l/*.deb</span></span><br><span class="line"><span class="comment">#RUN dpkg -i /packages/arm64/gst-rkmpp/*.deb</span></span><br><span class="line"><span class="comment">#RUN dpkg -i /packages/arm64/ffmpeg/*.deb</span></span><br><span class="line"><span class="comment">#RUN dpkg -i /packages/arm64/libmali/libmali-midgard-t86x-r18p0-x11*.deb</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> find /packages/arm64/libdrm -name <span class="string">&#x27;*.deb&#x27;</span> | sudo xargs -I&#123;&#125; dpkg -x &#123;&#125; /</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;deb https://mirrors.ustc.edu.cn/debian/ bullseye main contrib non-free&quot;</span> &gt;&gt; /etc/apt/sources.list</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt install -y meson=0.56.2-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y -f</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到非 root 用户</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> useradd -c <span class="string">&#x27;topeet user&#x27;</span> -m -d /home/topeet -s /bin/bash topeet</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i -e <span class="string">&#x27;/\%sudo/ c \%sudo ALL=(ALL) NOPASSWD: ALL&#x27;</span> /etc/sudoers</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> usermod -a -G sudo topeet</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> topeet</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /home/topeet</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;/bin/bash&quot;</span>]</span></span><br></pre></td></tr></table></figure>
<p>然后运行以下命令进行镜像的构建，之前都构建了一次了所以这次应该挺快的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t debian10 .</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311142043237.png" alt="image-20231114101013852" /></p>
<p>发现问题，源不太对了，所以这里先改一下源，好像不改也可以，是我自己的电脑问题，重启就好了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.huaweicloud.com/repository/debian/ buster main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free</span><br><span class="line">deb https://mirrors.huaweicloud.com/repository/debian/ buster-updates main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free</span><br><span class="line">deb https://mirrors.huaweicloud.com/repository/debian/ buster-backports main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free</span><br><span class="line">deb https://mirrors.huaweicloud.com/repository/debian-security buster/updates main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311142043278.png" alt="image-20231114102245237" /></p>
<p>构建完成如上所示，然后打包该镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker save -o debian10.tar.gz debian10</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311142043250.png" alt="image-20231114102532308" /></p>
<p>最后整体打包一下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zcvf docker-rockchip-debian-buster.tar.gz docker-rockchip-debian-buster/</span><br></pre></td></tr></table></figure>
<h1 id="2debian11-dockerfile"><a class="markdownIt-Anchor" href="#2debian11-dockerfile"></a> 2.debian11 dockerfile</h1>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:bookworm</span><br><span class="line"><span class="keyword">MAINTAINER</span> Caesar Wang <span class="string">&quot;wxt@rock-chips.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置多架构环境</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dpkg --add-architecture arm64</span></span><br><span class="line"><span class="comment">#RUN echo &quot;deb-src http://deb.debian.org/debian bullseye main&quot; &gt;&gt; /etc/apt/sources.list</span></span><br><span class="line"><span class="comment">#RUN echo &quot;deb-src http://deb.debian.org/debian bullseye-updates main&quot; &gt;&gt; /etc/apt/sources.list</span></span><br><span class="line"><span class="comment">#RUN echo &quot;deb-src http://security.debian.org bullseye/updates main&quot; &gt;&gt; /etc/apt/sources.list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行apt-get update并安装ca-certificates</span></span><br><span class="line"><span class="comment">#RUN apt-get update &amp;&amp; apt-get install -y ca-certificates</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">touch</span> /etc/apt/apt.conf.d/99verify-peer.conf &amp;&amp; <span class="built_in">echo</span> &gt;&gt;/etc/apt/apt.conf.d/99verify-peer.conf <span class="string">&quot;Acquire &#123; https::Verify-Peer false &#125;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加sources.list文件到/etc/apt/目录</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> sources.list /etc/apt/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y crossbuild-essential-arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加overlay目录到根目录</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> ./overlay/  /</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装构建依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get install -y sudo locales git fakeroot devscripts cmake vim qemu-user-static:arm64 binfmt-support \</span></span><br><span class="line"><span class="language-bash">        dh-make dh-exec pkg-kde-tools device-tree-compiler:arm64 bc cpio parted dosfstools mtools libssl-dev:arm64 \</span></span><br><span class="line"><span class="language-bash">        g++-aarch64-linux-gnu dpkg-dev meson debhelper pkgconf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get build-dep -y -a arm64 libdrm</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get build-dep -y -a arm64 xorg-server</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get install -y gstreamer1.0-plugins-bad:arm64 gstreamer1.0-plugins-base:arm64 gstreamer1.0-tools:arm64 \</span></span><br><span class="line"><span class="language-bash">        gstreamer1.0-alsa:arm64 gstreamer1.0-plugins-base-apps:arm64 qtmultimedia5-examples:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装rga所需的依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libdrm-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装gstreamer-rockchip所需的依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libx11-dev:arm64 libdrm-dev:arm64 libgstreamer1.0-dev:arm64 \</span></span><br><span class="line"><span class="language-bash">        libgstreamer-plugins-base1.0-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装libmali所需的依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libstdc++6:arm64 libgbm-dev:arm64 libdrm-dev:arm64 libx11-xcb1:arm64 libxcb-dri2-0:arm64 libxdamage1:arm64 \</span></span><br><span class="line"><span class="language-bash">        libxext6:arm64 libwayland-client0:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装drm-cursor所需的依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libgbm-dev:arm64 libegl1-mesa-dev:arm64 libgles2-mesa-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装glmark2所需的依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y debhelper-compat libjpeg-dev:arm64 libpng-dev:arm64 libudev-dev:arm64  libxcb1-dev:arm64 python3 wayland-protocols libwayland-dev libwayland-bin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装rktoolkit所需的依赖项</span></span><br><span class="line"><span class="comment">#RUN apt install -y libmad-ocaml-dev libmad0-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装lib4l2所需的依赖项</span></span><br><span class="line"><span class="comment">#RUN apt update -y</span></span><br><span class="line"><span class="comment">#RUN apt build-dep -y libv4l-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成en_US.UTF-8本地化</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> locale-gen en_US.UTF-8</span></span><br><span class="line"><span class="keyword">ENV</span> LANG en_US.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">ENV</span> LANGUAGE en_US:en</span><br><span class="line"><span class="keyword">ENV</span> LC_ALL en_US.UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i -e <span class="string">&#x27;s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/&#x27;</span> /etc/locale.gen &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&#x27;LANG=&quot;en_US.UTF-8&quot;&#x27;</span>&gt;/etc/default/locale &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    dpkg-reconfigure --frontend=noninteractive locales &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    update-locale LANG=en_US.UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;Update Headers!&quot;</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dpkg -i /packages/arm64/rga/*.deb</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dpkg -i /packages/arm64/mpp/*.deb</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -fy --allow-downgrades /packages/arm64/gst-rkmpp/*.deb</span></span><br><span class="line"><span class="comment">#RUN apt-get install -fy --allow-downgrades /packages/arm64/gstreamer/*.deb</span></span><br><span class="line"><span class="comment">#RUN apt-get install -fy --allow-downgrades /packages/arm64/gst-plugins-base1.0/*.deb</span></span><br><span class="line"><span class="comment">#RUN apt-get install -fy --allow-downgrades /packages/arm64/gst-plugins-bad1.0/*.deb</span></span><br><span class="line"><span class="comment">#RUN apt-get install -fy --allow-downgrades /packages/arm64/gst-plugins-good1.0/*.deb</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#RUN apt-get install -fy --allow-downgrades /packages/arm64/libv4l/*.deb</span></span><br><span class="line"><span class="comment">#RUN dpkg -i /packages/arm64/gst-rkmpp/*.deb</span></span><br><span class="line"><span class="comment">#RUN dpkg -i /packages/arm64/ffmpeg/*.deb</span></span><br><span class="line"><span class="comment">#RUN dpkg -i /packages/arm64/libmali/libmali-midgard-t86x-r18p0-x11*.deb</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> find /packages/arm64/libdrm -name <span class="string">&#x27;*.deb&#x27;</span> | sudo xargs -I&#123;&#125; dpkg -x &#123;&#125; /</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y -f</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到非 root 用户</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> useradd -c <span class="string">&#x27;topeet user&#x27;</span> -m -d /home/topeet -s /bin/bash topeet</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i -e <span class="string">&#x27;/\%sudo/ c \%sudo ALL=(ALL) NOPASSWD: ALL&#x27;</span> /etc/sudoers</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> usermod -a -G sudo topeet</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> topeet</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /home/topeet</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;/bin/bash&quot;</span>]</span></span><br></pre></td></tr></table></figure>
<p>然后运行以下命令进行镜像的构建，之前都构建了一次了所以这次应该挺快的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t debian11 .</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311142043356.png" alt="image-20231114103043179" /></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311142043290.png" alt="image-20231114103238803" /></p>
<p>构建完成如上所示，然后打包该镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker save -o debian11.tar.gz debian11</span><br></pre></td></tr></table></figure>
<p>最后整体打包一下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zcvf docker-rockchip-debian-bullseye.tar.gz docker-rockchip-debian-bullseye</span><br></pre></td></tr></table></figure>
<h1 id="3debian12-dockerfile"><a class="markdownIt-Anchor" href="#3debian12-dockerfile"></a> 3.debian12 dockerfile</h1>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用Debian bookworm作为基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> debian:bookworm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置镜像的维护者信息</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> Caesar Wang <span class="string">&quot;wxt@rock-chips.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加arm64架构支持</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dpkg --add-architecture arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置apt，禁用HTTPS的证书验证</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">touch</span> /etc/apt/apt.conf.d/99verify-peer.conf &amp;&amp; <span class="built_in">echo</span> &gt;&gt;/etc/apt/apt.conf.d/99verify-peer.conf <span class="string">&quot;Acquire &#123; https::Verify-Peer false &#125;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加自定义的sources.list文件到容器的/etc/apt/目录</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> sources.list /etc/apt/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新apt源并安装crossbuild-essential-arm64软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y crossbuild-essential-arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前目录下的overlay目录添加到镜像的根目录</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> ./overlay/  /</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装构建过程中需要的依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt install -fy sudo locales git fakeroot devscripts cmake vim qemu-user-static:arm64 binfmt-support \</span></span><br><span class="line"><span class="language-bash">        dh-make dh-exec device-tree-compiler:arm64 bc:arm64 cpio:arm64 parted dosfstools:arm64 mtools:arm64 libssl-dev:arm64 \</span></span><br><span class="line"><span class="language-bash">        g++-aarch64-linux-gnu dpkg-dev:arm64 meson:arm64 debhelper:arm64 pkgconf:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装构建libdrm库所需的依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get build-dep -y -a arm64 libdrm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装构建xorg-server所需的依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get build-dep -y -a arm64 xorg-server</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装GStreamer相关的依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get install -y gstreamer1.0-plugins-bad:arm64 gstreamer1.0-plugins-base:arm64 gstreamer1.0-tools:arm64 \</span></span><br><span class="line"><span class="language-bash">        gstreamer1.0-alsa:arm64 gstreamer1.0-plugins-base-apps:arm64 qtmultimedia5-examples:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装libdrm-dev依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libdrm-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装libx11-dev、libdrm-dev、libgstreamer1.0-dev、libgstreamer-plugins-base1.0-dev等依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libx11-dev:arm64 libdrm-dev:arm64 libgstreamer1.0-dev:arm64 libgstreamer-plugins-base1.0-dev:arm64 \</span></span><br><span class="line"><span class="language-bash">        libgstreamer-plugins-base1.0-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装libstdc++6、libgbm-dev、libdrm-dev、libx11-xcb1、libxcb-dri2-0、libxdamage1、libxext6、libwayland-client0等依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libstdc++6:arm64 libgbm-dev:arm64 libdrm-dev:arm64 libx11-xcb1:arm64 libxcb-dri2-0:arm64 libxdamage1:arm64 \</span></span><br><span class="line"><span class="language-bash">        libxext6:arm64 libwayland-client0:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装libgbm-dev、libegl1-mesa-dev、libgles2-mesa-dev依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libgbm-dev:arm64 libegl1-mesa-dev:arm64 libgles2-mesa-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装debhelper-compat、libjpeg-dev、libpng-dev、libudev-dev、libxcb1-dev、python3、wayland-protocols、libwayland-dev、libwayland-bin等依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y debhelper-compat libjpeg-dev:arm64 libpng-dev:arm64 libudev-dev:arm64  libxcb1-dev:arm64 python3 wayland-protocols libwayland-dev libwayland-bin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装构建weston所需的依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt build-dep -y weston:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成并设置系统的locale为en_US.UTF-8</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> locale-gen en_US.UTF-8</span></span><br><span class="line"><span class="keyword">ENV</span> LANG en_US.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">ENV</span> LANGUAGE en_US:en</span><br><span class="line"><span class="keyword">ENV</span> LC_ALL en_US.UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改locale.gen文件并重新配置locales，更新locale设置</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i -e <span class="string">&#x27;s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/&#x27;</span> /etc/locale.gen &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&#x27;LANG=&quot;en_US.UTF-8&quot;&#x27;</span>&gt;/etc/default/locale &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    dpkg-reconfigure --frontend=noninteractive locales &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    update-locale LANG=en_US.UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印日志信息</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;Update Headers!&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装rga2软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dpkg -i /packages/arm64/rga2/*.deb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装mpp软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dpkg -i /packages/arm64/mpp/*.deb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装gst-rkmpp软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -fy --allow-downgrades /packages/arm64/gst-rkmpp/*.deb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装gst-plugins-base1.0软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -fy --allow-downgrades /packages/arm64/gst-plugins-base1.0/*.deb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装libv4l软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -fy --allow-downgrades /packages/arm64/libv4l/*.deb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压libdrm软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> find /packages/arm64/libdrm -name <span class="string">&#x27;*.deb&#x27;</span> | sudo xargs -I&#123;&#125; dpkg -x &#123;&#125; /</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新apt源并安装依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y -f</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到非 root 用户</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> useradd -c <span class="string">&#x27;topeet user&#x27;</span> -m -d /home/topeet -s /bin/bash topeet</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i -e <span class="string">&#x27;/\%sudo/ c \%sudo ALL=(ALL) NOPASSWD: ALL&#x27;</span> /etc/sudoers</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> usermod -a -G sudo topeet</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> topeet</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /home/topeet</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;/bin/bash&quot;</span>]</span></span><br></pre></td></tr></table></figure>
<p>然后运行以下命令进行镜像的构建，之前都构建了一次了所以这次应该挺快的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t debian12 .</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311142043237.png" alt="image-20231114101013852" /></p>
<p>构建完成如上所示，然后打包该镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker save -o debian12.tar.gz debian12</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311142043250.png" alt="image-20231114102532308" /></p>
<p>最后整体打包一下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zcvf docker-rockchip-debian-bookworm.tar.gz docker-rockchip-debian-bookworm</span><br></pre></td></tr></table></figure>
<h1 id="4ubuntu20-dockerfile"><a class="markdownIt-Anchor" href="#4ubuntu20-dockerfile"></a> 4.ubuntu20 dockerfile</h1>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> arm64v8/ubuntu:<span class="number">20.04</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置多架构环境</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dpkg --add-architecture arm64</span></span><br><span class="line"><span class="comment"># 运行apt-get update并安装ca-certificates</span></span><br><span class="line"><span class="comment">#RUN apt-get update &amp;&amp; apt-get install -y ca-certificates</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">touch</span> /etc/apt/apt.conf.d/99verify-peer.conf &amp;&amp; <span class="built_in">echo</span> &gt;&gt;/etc/apt/apt.conf.d/99verify-peer.conf <span class="string">&quot;Acquire &#123; https::Verify-Peer false &#125;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加sources.list文件到/etc/apt/目录</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> sources.list /etc/apt/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y crossbuild-essential-arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加overlay目录到根目录</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> ./overlay/  /</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装构建依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get install -y sudo locales git fakeroot devscripts cmake vim qemu-user-static:arm64 binfmt-support \</span></span><br><span class="line"><span class="language-bash">        dh-make dh-exec pkg-kde-tools device-tree-compiler:arm64 bc cpio parted dosfstools mtools libssl-dev:arm64 \</span></span><br><span class="line"><span class="language-bash">        g++-aarch64-linux-gnu dpkg-dev meson debhelper pkgconf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get build-dep -y -a arm64 libdrm</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get build-dep -y -a arm64 xorg-server</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get install -y gstreamer1.0-plugins-bad:arm64 gstreamer1.0-plugins-base:arm64 gstreamer1.0-tools:arm64 \</span></span><br><span class="line"><span class="language-bash">        gstreamer1.0-alsa:arm64 gstreamer1.0-plugins-base-apps:arm64 qtmultimedia5-examples:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装rga所需的依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libdrm-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装gstreamer-rockchip所需的依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libx11-dev:arm64 libdrm-dev:arm64 libgstreamer1.0-dev:arm64 \</span></span><br><span class="line"><span class="language-bash">        libgstreamer-plugins-base1.0-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装libmali所需的依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libstdc++6:arm64 libgbm-dev:arm64 libdrm-dev:arm64 libx11-xcb1:arm64 libxcb-dri2-0:arm64 libxdamage1:arm64 \</span></span><br><span class="line"><span class="language-bash">        libxext6:arm64 libwayland-client0:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装drm-cursor所需的依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libgbm-dev:arm64 libegl1-mesa-dev:arm64 libgles2-mesa-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装glmark2所需的依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y debhelper-compat libjpeg-dev:arm64 libpng-dev:arm64 libudev-dev:arm64  libxcb1-dev:arm64 python3 wayland-protocols libwayland-dev libwayland-bin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装rktoolkit所需的依赖项</span></span><br><span class="line"><span class="comment">#RUN apt install -y libmad-ocaml-dev libmad0-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装lib4l2所需的依赖项</span></span><br><span class="line"><span class="comment">#RUN apt update -y</span></span><br><span class="line"><span class="comment">#RUN apt build-dep -y libv4l-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成en_US.UTF-8本地化</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> locale-gen en_US.UTF-8</span></span><br><span class="line"><span class="keyword">ENV</span> LANG en_US.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">ENV</span> LANGUAGE en_US:en</span><br><span class="line"><span class="keyword">ENV</span> LC_ALL en_US.UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i -e <span class="string">&#x27;s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/&#x27;</span> /etc/locale.gen &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&#x27;LANG=&quot;en_US.UTF-8&quot;&#x27;</span>&gt;/etc/default/locale &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    dpkg-reconfigure --frontend=noninteractive locales &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    update-locale LANG=en_US.UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;Update Headers!&quot;</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -fy --allow-downgrades /packages/arm64/rga/*.deb</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -fy --allow-downgrades /packages/arm64/mpp/*.deb</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -fy --allow-downgrades /packages/arm64/gst-rkmpp/*.deb</span></span><br><span class="line"><span class="comment">#RUN apt-get install -fy --allow-downgrades /packages/arm64/gstreamer/*.deb</span></span><br><span class="line"><span class="comment">#RUN apt-get install -fy --allow-downgrades /packages/arm64/gst-plugins-base1.0/*.deb</span></span><br><span class="line"><span class="comment">#RUN apt-get install -fy --allow-downgrades /packages/arm64/gst-plugins-bad1.0/*.deb</span></span><br><span class="line"><span class="comment">#RUN apt-get install -fy --allow-downgrades /packages/arm64/gst-plugins-good1.0/*.deb</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#RUN apt-get install -fy --allow-downgrades /packages/arm64/libv4l/*.deb</span></span><br><span class="line"><span class="comment">#RUN dpkg -i /packages/arm64/gst-rkmpp/*.deb</span></span><br><span class="line"><span class="comment">#RUN dpkg -i /packages/arm64/ffmpeg/*.deb</span></span><br><span class="line"><span class="comment">#RUN dpkg -i /packages/arm64/libmali/libmali-midgard-t86x-r18p0-x11*.deb</span></span><br><span class="line"><span class="comment">#RUN find /packages/arm64/libdrm -name &#x27;*.deb&#x27; | sudo xargs -I&#123;&#125; dpkg -x &#123;&#125; /</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y -f</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到非 root 用户</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> useradd -c <span class="string">&#x27;topeet user&#x27;</span> -m -d /home/topeet -s /bin/bash topeet</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i -e <span class="string">&#x27;/\%sudo/ c \%sudo ALL=(ALL) NOPASSWD: ALL&#x27;</span> /etc/sudoers</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> usermod -a -G sudo topeet</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> topeet</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /home/topeet</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;/bin/bash&quot;</span>]</span></span><br></pre></td></tr></table></figure>
<p>然后运行以下命令进行镜像的构建，之前都构建了一次了所以这次应该挺快的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t debian11 .</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311142043356.png" alt="image-20231114103043179" /></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311142043290.png" alt="image-20231114103238803" /></p>
<p>构建完成如上所示，然后打包该镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker save -o ubuntu20.tar.gz ubuntu20</span><br></pre></td></tr></table></figure>
<h1 id="5ubuntu22-dockerfile"><a class="markdownIt-Anchor" href="#5ubuntu22-dockerfile"></a> 5.ubuntu22 dockerfile</h1>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> arm64v8/ubuntu:<span class="number">22.04</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加arm64架构支持</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dpkg --add-architecture arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置apt，禁用HTTPS的证书验证</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">touch</span> /etc/apt/apt.conf.d/99verify-peer.conf &amp;&amp; <span class="built_in">echo</span> &gt;&gt;/etc/apt/apt.conf.d/99verify-peer.conf <span class="string">&quot;Acquire &#123; https::Verify-Peer false &#125;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加自定义的sources.list文件到容器的/etc/apt/目录</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> sources.list /etc/apt/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新apt源并安装crossbuild-essential-arm64软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y crossbuild-essential-arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前目录下的overlay目录添加到镜像的根目录</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> ./overlay/  /</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装构建过程中需要的依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt install -fy sudo locales git fakeroot devscripts cmake vim qemu-user-static:arm64 binfmt-support \</span></span><br><span class="line"><span class="language-bash">        dh-make dh-exec device-tree-compiler:arm64 bc:arm64 cpio:arm64 parted dosfstools:arm64 mtools:arm64 libssl-dev:arm64 \</span></span><br><span class="line"><span class="language-bash">        g++-aarch64-linux-gnu dpkg-dev:arm64 meson:arm64 debhelper:arm64 pkgconf:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装构建libdrm库所需的依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get build-dep -y -a arm64 libdrm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装构建xorg-server所需的依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get build-dep -y -a arm64 xorg-server</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装GStreamer相关的依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get install -y gstreamer1.0-plugins-bad:arm64 gstreamer1.0-plugins-base:arm64 gstreamer1.0-tools:arm64 \</span></span><br><span class="line"><span class="language-bash">        gstreamer1.0-alsa:arm64 gstreamer1.0-plugins-base-apps:arm64 qtmultimedia5-examples:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装libdrm-dev依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libdrm-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装libx11-dev、libdrm-dev、libgstreamer1.0-dev、libgstreamer-plugins-base1.0-dev等依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libx11-dev:arm64 libdrm-dev:arm64 libgstreamer1.0-dev:arm64 libgstreamer-plugins-base1.0-dev:arm64 \</span></span><br><span class="line"><span class="language-bash">        libgstreamer-plugins-base1.0-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装libstdc++6、libgbm-dev、libdrm-dev、libx11-xcb1、libxcb-dri2-0、libxdamage1、libxext6、libwayland-client0等依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libstdc++6:arm64 libgbm-dev:arm64 libdrm-dev:arm64 libx11-xcb1:arm64 libxcb-dri2-0:arm64 libxdamage1:arm64 \</span></span><br><span class="line"><span class="language-bash">        libxext6:arm64 libwayland-client0:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装libgbm-dev、libegl1-mesa-dev、libgles2-mesa-dev依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y libgbm-dev:arm64 libegl1-mesa-dev:arm64 libgles2-mesa-dev:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装debhelper-compat、libjpeg-dev、libpng-dev、libudev-dev、libxcb1-dev、python3、wayland-protocols、libwayland-dev、libwayland-bin等依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y debhelper-compat libjpeg-dev:arm64 libpng-dev:arm64 libudev-dev:arm64  libxcb1-dev:arm64 python3 wayland-protocols libwayland-dev libwayland-bin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装构建weston所需的依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt build-dep -y weston:arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成并设置系统的locale为en_US.UTF-8</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> locale-gen en_US.UTF-8</span></span><br><span class="line"><span class="keyword">ENV</span> LANG en_US.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">ENV</span> LANGUAGE en_US:en</span><br><span class="line"><span class="keyword">ENV</span> LC_ALL en_US.UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改locale.gen文件并重新配置locales，更新locale设置</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i -e <span class="string">&#x27;s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/&#x27;</span> /etc/locale.gen &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&#x27;LANG=&quot;en_US.UTF-8&quot;&#x27;</span>&gt;/etc/default/locale &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    dpkg-reconfigure --frontend=noninteractive locales &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    update-locale LANG=en_US.UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印日志信息</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;Update Headers!&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装rga2软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dpkg -i /packages/arm64/rga2/*.deb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装mpp软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dpkg -i /packages/arm64/mpp/*.deb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装gst-rkmpp软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -fy --allow-downgrades /packages/arm64/gst-rkmpp/*.deb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装gst-plugins-base1.0软件包</span></span><br><span class="line"><span class="comment"># RUN apt-get install -fy --allow-downgrades /packages/arm64/gst-plugins-base1.0/*.deb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装libv4l软件包</span></span><br><span class="line"><span class="comment"># RUN apt-get install -fy --allow-downgrades /packages/arm64/libv4l/*.deb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压libdrm软件包</span></span><br><span class="line"><span class="comment"># RUN find /packages/arm64/libdrm -name &#x27;*.deb&#x27; | sudo xargs -I&#123;&#125; dpkg -x &#123;&#125; /</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新apt源并安装依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y -f</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到非 root 用户</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> useradd -c <span class="string">&#x27;topeet user&#x27;</span> -m -d /home/topeet -s /bin/bash topeet</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i -e <span class="string">&#x27;/\%sudo/ c \%sudo ALL=(ALL) NOPASSWD: ALL&#x27;</span> /etc/sudoers</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> usermod -a -G sudo topeet</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> topeet</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /home/topeet</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;/bin/bash&quot;</span>]</span></span><br></pre></td></tr></table></figure>
<p>然后运行以下命令进行镜像的构建，之前都构建了一次了所以这次应该挺快的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t debian12 .</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311142043237.png" alt="image-20231114101013852" /></p>
<p>构建完成如上所示，然后打包该镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker save -o ubuntu22.tar.gz ubuntu22</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311142043250.png" alt="image-20231114102532308" /></p>
<h1 id="6继续构建"><a class="markdownIt-Anchor" href="#6继续构建"></a> 6.继续构建</h1>
<p>docker搞完了，然后继续搞deb包的构建。先使用debian10 构建xserver的，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --privileged -it -v /home/topeet/Linux/xorg-xserver:/home/topeet/ubuntu20_build debian10</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311142043305.png" alt="image-20231114125740932" /></p>
<p>然后使用以下命令构建deb包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -rfakeroot -b -d -uc -us -aarm64</span><br></pre></td></tr></table></figure>
<p>构建成功了，但是我目前仍旧不知道具体的区别所在。</p>
<p>X server 是一种实现图形用户界面的服务器软件，它允许图形应用程序在计算机上运行并与显示设备交互。“glamor” 是 X server 中的一个加速架构，它提供了对OpenGL ES 2.0的支持，可以加速图形渲染。“rga” 是一种基于 Arm Mali GPU 的图形加速器，可以提高图形渲染性能。“exa” 是 X server 的一个图形加速架构，可以提高 2D 图形操作的性能。因此，“X server with glamor hacks for gles2 and rga based exa” 意味着某种针对 OpenGL ES 2.0、rga 图形加速和 exa 图形加速的 X server 的改进版本或配置。这可能是一种优化后的 X server，可以提供更好的图形渲染性能和功能。</p>
<h1 id="7测试xserver"><a class="markdownIt-Anchor" href="#7测试xserver"></a> 7.测试xserver</h1>
<p>测试的灵感来自这个csdn <a href="https://blog.csdn.net/Neutionwei/article/details/111411023">https://blog.csdn.net/Neutionwei/article/details/111411023</a></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311142043592.png" alt="image-20231114135548345" /></p>
<p>我先来几个疑问？</p>
<p><strong>1.什么是glamor</strong>？</p>
<p>Glamor 是一个用于加速 2D 图形渲染的开源库和技术。它最初是为 <a href="http://X.Org">X.Org</a> 服务器开发的，旨在提供更高效的图形渲染方式。Glamor 的目标是通过利用现代图形硬件的能力，提供快速和高效的图形渲染，从而改善用户界面的性能和响应能力。</p>
<p>传统上，<a href="http://X.Org">X.Org</a> 服务器使用软件渲染来处理图形操作，这对于复杂的图形和动画效果可能效率较低。Glamor 的出现解决了这个问题，它利用了现代图形硬件中的 2D 加速功能，从而在支持硬件加速的系统上提供更快的图形渲染性能。</p>
<p>Glamor 的工作原理是将高级的 2D 图形操作转换为底层的图形加速接口调用，如 OpenGL 或 Vulkan。它通过将图形操作转发给底层硬件加速接口，利用 GPU 强大的并行处理能力来加速图形渲染。这种方式比传统的软件渲染更高效，可以显著提升图形渲染的性能和响应速度。</p>
<p>Glamor 提供了一个抽象层，使得开发者可以方便地在支持 Glamor 的系统上使用硬件加速的图形渲染。它可以与多种图形库和窗口系统集成，如 Xlib、Wayland 和 DirectFB。开发者可以使用 Glamor 提供的 API 来绘制图形，而无需直接操作底层的硬件加速接口。</p>
<p><strong>2.上面提到了glamor是一个硬件加速技术，那在rk3568上我要如何实现glamor硬件加速呢？</strong></p>
<p>确认硬件支持：首先，确保 RK3568 平台的图形硬件支持硬件加速。RK3568 是一款搭载了 Mali-G52 GPU 的芯片，Mali-G52 是一款支持 OpenGL ES、Vulkan 和 OpenCL 等标准的图形处理器。你需要确保该芯片在 Linux 系统上的驱动程序正确安装和配置，并支持硬件加速功能。</p>
<p>安装相关软件：为了使用硬件加速，你需要安装支持 Glamor 的图形库和驱动程序。通常，这包括 Mesa 3D 图形库、<a href="http://X.Org">X.Org</a> 服务器和相应的 DRM/KMS 驱动程序。你可以根据具体的 Linux 发行版和系统配置，使用包管理器来安装这些软件包。</p>
<p>配置 <a href="http://X.Org">X.Org</a> 服务器：Glamor 是为 <a href="http://X.Org">X.Org</a> 服务器设计的，因此你需要配置 <a href="http://X.Org">X.Org</a> 服务器以启用 Glamor。你可以编辑 <a href="http://X.Org">X.Org</a> 服务器的配置文件（通常是 <code>/etc/X11/xorg.conf</code> 或 <code>/etc/X11/xorg.conf.d/</code> 目录下的文件），添加或修改相关的配置选项来启用 Glamor。具体的配置选项可能会因不同的系统和驱动程序而有所差异，你可以参考相关文档或官方指南来了解如何正确配置 Glamor。</p>
<p>测试和验证：完成上述步骤后，你可以编写一个简单的测试程序来验证硬件加速是否正常工作。你可以使用 OpenGL 或 Vulkan 等图形库来进行绘图操作，并通过性能测试或其他指标来评估图形渲染性能的提升。你也可以尝试使用 Glamor 提供的 API 来进行图形绘制，以验证 Glamor 的功能和性能。</p>
<p><strong>3.那我用默认的ubuntu软件包和 Mali-G52驱动能正常使用glamor吗？</strong></p>
<p>在使用默认的 Ubuntu 软件包和 Mali-G52 驱动时，使用 Glamor 应该是可行的。Ubuntu 是一个广泛使用的 Linux 发行版，它通常包含了 Mesa 3D 图形库和 <a href="http://X.Org">X.Org</a> 服务器等组件，这些组件对于使用 Glamor 是必要的。</p>
<p>Mali-G52 是 ARM 公司的图形处理器，它在 Linux 系统上有对应的 DRM/KMS 驱动程序，用于与 <a href="http://X.Org">X.Org</a> 服务器和图形库进行交互。这些驱动程序通常会随着操作系统的更新和发布而更新，以确保兼容性和性能优化。</p>
<p>在大多数情况下，当你使用默认的 Ubuntu 软件包和 Mali-G52 驱动时，Glamor 应该已经预先配置并启用了。这意味着你可以直接通过 <a href="http://X.Org">X.Org</a> 服务器和相关图形库（如 OpenGL）来进行图形渲染，而无需额外的配置步骤。</p>
<p><strong>4.但我看瑞芯微已经对drm xserver等软件包进行了魔改，这是为啥呢？</strong></p>
<p>瑞芯微对 DRM（Direct Rendering Manager）和 <a href="http://X.Org">X.Org</a> 服务器等软件包进行魔改的主要目的是为了更好地适配和优化他们的芯片和硬件。这种魔改通常是为了解决特定的硬件功能、性能或兼容性问题，并确保在特定的瑞芯微平台上能够获得最佳的图形渲染性能和用户体验。</p>
<p>以下是一些可能的原因和动机：</p>
<ol>
<li>硬件优化：瑞芯微可能会对 DRM 和 <a href="http://X.Org">X.Org</a> 服务器进行修改，以最大程度地利用他们的芯片中的硬件加速功能。通过直接访问硬件特性和功能，他们可以实现更高效的图形渲染和处理，提供更好的性能和响应能力。</li>
<li>兼容性和稳定性：瑞芯微可能会对软件包进行修改，以确保其与他们的芯片和硬件之间的兼容性。这可能涉及对驱动程序的修改、参数的调整或特定硬件功能的支持。通过这些修改，他们可以提供更稳定和可靠的图形渲染环境，减少与硬件相关的问题和兼容性冲突。</li>
<li>定制化需求：瑞芯微的客户可能有特定的需求，需要定制化的图形渲染解决方案。通过对软件包进行魔改，他们可以满足客户的定制需求，提供针对特定应用场景和硬件平台的优化和定制化功能。</li>
</ol>
<p>测试程序如下所示：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;X11/Xlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawRectangleWithGlamor</span><span class="params">(<span class="type">int</span> width, <span class="type">int</span> height, <span class="type">int</span> drawCount)</span> </span>&#123;</span><br><span class="line">    Display* display = <span class="built_in">XOpenDisplay</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (display == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;无法打开 X 服务器连接&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Window rootWindow = <span class="built_in">DefaultRootWindow</span>(display);</span><br><span class="line">    Window window = <span class="built_in">XCreateSimpleWindow</span>(display, rootWindow, <span class="number">0</span>, <span class="number">0</span>, width, height, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">XSelectInput</span>(display, window, StructureNotifyMask);</span><br><span class="line">    <span class="built_in">XMapWindow</span>(display, window);</span><br><span class="line">    XEvent event;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">XNextEvent</span>(display, &amp;event);</span><br><span class="line">    &#125; <span class="keyword">while</span> (event.type != MapNotify);</span><br><span class="line"></span><br><span class="line">    GC gc = <span class="built_in">XCreateGC</span>(display, window, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> startTime = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; drawCount; ++i) &#123;</span><br><span class="line">        <span class="built_in">XSetForeground</span>(display, gc, <span class="built_in">WhitePixel</span>(display, <span class="built_in">DefaultScreen</span>(display)));</span><br><span class="line">        <span class="built_in">XFillRectangle</span>(display, window, gc, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">        <span class="built_in">XFlush</span>(display);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> endTime = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">    <span class="type">double</span> drawTime = std::chrono::<span class="built_in">duration</span>&lt;<span class="type">double</span>, std::milli&gt;(endTime - startTime).<span class="built_in">count</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> drawRate = <span class="built_in">static_cast</span>&lt;<span class="type">double</span>&gt;(drawCount) / (drawTime / <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">XFreeGC</span>(display, gc);</span><br><span class="line">    <span class="built_in">XDestroyWindow</span>(display, window);</span><br><span class="line">    <span class="built_in">XCloseDisplay</span>(display);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; width &lt;&lt; <span class="string">&quot;x&quot;</span> &lt;&lt; height &lt;&lt; <span class="string">&quot;大小的矩形（使用 glamor）：&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; drawCount &lt;&lt; <span class="string">&quot;次绘制，每次绘制耗时&quot;</span> &lt;&lt; drawTime / drawCount &lt;&lt; <span class="string">&quot;毫秒，每秒绘制次数为&quot;</span> &lt;&lt; drawRate &lt;&lt; <span class="string">&quot;次。&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawRectangleWithoutGlamor</span><span class="params">(<span class="type">int</span> width, <span class="type">int</span> height, <span class="type">int</span> drawCount)</span> </span>&#123;</span><br><span class="line">    Display* display = <span class="built_in">XOpenDisplay</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (display == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;无法打开 X 服务器连接&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Window rootWindow = <span class="built_in">DefaultRootWindow</span>(display);</span><br><span class="line">    Window window = <span class="built_in">XCreateSimpleWindow</span>(display, rootWindow, <span class="number">0</span>, <span class="number">0</span>, width, height, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">XSelectInput</span>(display, window, StructureNotifyMask);</span><br><span class="line">    <span class="built_in">XMapWindow</span>(display, window);</span><br><span class="line">    XEvent event;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">XNextEvent</span>(display, &amp;event);</span><br><span class="line">    &#125; <span class="keyword">while</span> (event.type != MapNotify);</span><br><span class="line"></span><br><span class="line">    GC gc = <span class="built_in">XCreateGC</span>(display, window, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> startTime = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; drawCount; ++i) &#123;</span><br><span class="line">        <span class="built_in">XSetForeground</span>(display, gc, <span class="built_in">WhitePixel</span>(display, <span class="built_in">DefaultScreen</span>(display)));</span><br><span class="line">        <span class="built_in">XDrawRectangle</span>(display, window, gc, <span class="number">0</span>, <span class="number">0</span>, width - <span class="number">1</span>, height - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">XFillRectangle</span>(display, window, gc, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">        <span class="built_in">XFlush</span>(display);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> endTime = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">    <span class="type">double</span> drawTime = std::chrono::<span class="built_in">duration</span>&lt;<span class="type">double</span>, std::milli&gt;(endTime - startTime).<span class="built_in">count</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> drawRate = <span class="built_in">static_cast</span>&lt;<span class="type">double</span>&gt;(drawCount) / (drawTime / <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">XFreeGC</span>(display, gc);</span><br><span class="line">    <span class="built_in">XDestroyWindow</span>(display, window);</span><br><span class="line">    <span class="built_in">XCloseDisplay</span>(display);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; width &lt;&lt; <span class="string">&quot;x&quot;</span> &lt;&lt; height &lt;&lt; <span class="string">&quot;大小的矩形（不使用 glamor）：&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; drawCount &lt;&lt; <span class="string">&quot;次绘制，每次绘制耗时&quot;</span> &lt;&lt; drawTime / drawCount &lt;&lt; <span class="string">&quot;毫秒，每秒绘制次数为&quot;</span> &lt;&lt; drawRate &lt;&lt; <span class="string">&quot;次。&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawRectangle</span><span class="params">(<span class="type">int</span> width, <span class="type">int</span> height, <span class="type">int</span> drawCount, <span class="type">bool</span> useGlamor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (useGlamor) &#123;</span><br><span class="line">        <span class="built_in">drawRectangleWithGlamor</span>(width, height, drawCount);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">drawRectangleWithoutGlamor</span>(width, height, drawCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 不使用 glamor 的测试</span></span><br><span class="line">    <span class="built_in">drawRectangle</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">50000</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">drawRectangle</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">50000</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">drawRectangle</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">50000</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">drawRectangle</span>(<span class="number">500</span>, <span class="number">500</span>, <span class="number">50000</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 glamor 的测试</span></span><br><span class="line">    <span class="built_in">drawRectangle</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">50000</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="built_in">drawRectangle</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">50000</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="built_in">drawRectangle</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">50000</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="built_in">drawRectangle</span>(<span class="number">500</span>, <span class="number">500</span>, <span class="number">50000</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后使用以下命令进行编译：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">g++ test.cpp -o test -lX11</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311142043661.png" alt="image-20231114140810933" /></p>
<p>然后运行测试，测试结果如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311142043817.png" alt="" /></p>
<p>得出的结论如下所示：使用加速（glamor）：</p>
<ul>
<li>对于1x1、10x10、100x100和500x500大小的矩形，每次绘制的耗时都在0.0057毫秒到0.0061毫秒之间。</li>
<li>每秒绘制次数在162242到175190之间。</li>
</ul>
<p>不使用加速：</p>
<ul>
<li>对于1x1、10x10、100x100和500x500大小的矩形，每次绘制的耗时在0.0028毫秒到0.0087毫秒之间。</li>
<li>每秒绘制次数在114430到357260之间。</li>
</ul>
<p>从这些数据中可以看出，使用加速（glamor）相对于不使用加速，绘制矩形的耗时更稳定且更快。而不使用加速的情况下，绘制耗时有较大的波动，并且随着矩形大小的增加，绘制次数呈现不同程度的下降。</p>
<p>总体而言，使用加速（glamor）可以提供更稳定和高效的绘制性能，特别是在处理较大尺寸的矩形时。然而，要注意这些结论仅基于你提供的数据，具体的性能差异可能会因不同的环境和配置而有所变化。</p>
<p>上面是通过程序测试的，也有一个专门的命令行进行查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /var/log/Xorg.0.log | grep glamor</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311142043734.png" alt="image-20231114145330988" /></p>
<p>显示“glamor initialized”，则表示已启用加速。</p>
<h1 id="8测试opencl"><a class="markdownIt-Anchor" href="#8测试opencl"></a> 8.测试opencl</h1>
<p>打印基础信息</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> CL_TARGET_OPENCL_VERSION 220</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;CL/cl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> <span class="comment">// 使用标准库函数需包含该头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cl_platform_id *platform;</span><br><span class="line">    cl_uint num_platform;</span><br><span class="line">    cl_int err;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取平台数量</span></span><br><span class="line">    err = <span class="built_in">clGetPlatformIDs</span>(<span class="number">0</span>, <span class="literal">NULL</span>, &amp;num_platform);</span><br><span class="line">    <span class="keyword">if</span> (err != CL_SUCCESS) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无法获取平台数量\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    platform = (cl_platform_id *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(cl_platform_id) * num_platform);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取平台ID</span></span><br><span class="line">    err = <span class="built_in">clGetPlatformIDs</span>(num_platform, platform, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (err != CL_SUCCESS) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无法获取平台ID\n&quot;</span>);</span><br><span class="line">        <span class="built_in">free</span>(platform);</span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_platform; i++) &#123;</span><br><span class="line">        <span class="type">size_t</span> size;</span><br><span class="line">        <span class="type">char</span> *name, *vendor, *version, *profile, *extensions;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取平台名称</span></span><br><span class="line">        err = <span class="built_in">clGetPlatformInfo</span>(platform[i], CL_PLATFORM_NAME, <span class="number">0</span>, <span class="literal">NULL</span>, &amp;size);</span><br><span class="line">        name = (<span class="type">char</span> *)<span class="built_in">malloc</span>(size);</span><br><span class="line">        err = <span class="built_in">clGetPlatformInfo</span>(platform[i], CL_PLATFORM_NAME, size, name, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;CL_PLATFORM_NAME: %s\n&quot;</span>, name);</span><br><span class="line">        <span class="built_in">free</span>(name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取平台供应商</span></span><br><span class="line">        err = <span class="built_in">clGetPlatformInfo</span>(platform[i], CL_PLATFORM_VENDOR, <span class="number">0</span>, <span class="literal">NULL</span>, &amp;size);</span><br><span class="line">        vendor = (<span class="type">char</span> *)<span class="built_in">malloc</span>(size);</span><br><span class="line">        err = <span class="built_in">clGetPlatformInfo</span>(platform[i], CL_PLATFORM_VENDOR, size, vendor, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;CL_PLATFORM_VENDOR: %s\n&quot;</span>, vendor);</span><br><span class="line">        <span class="built_in">free</span>(vendor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取平台版本</span></span><br><span class="line">        err = <span class="built_in">clGetPlatformInfo</span>(platform[i], CL_PLATFORM_VERSION, <span class="number">0</span>, <span class="literal">NULL</span>, &amp;size);</span><br><span class="line">        version = (<span class="type">char</span> *)<span class="built_in">malloc</span>(size);</span><br><span class="line">        err = <span class="built_in">clGetPlatformInfo</span>(platform[i], CL_PLATFORM_VERSION, size, version, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;CL_PLATFORM_VERSION: %s\n&quot;</span>, version);</span><br><span class="line">        <span class="built_in">free</span>(version);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取平台配置文件</span></span><br><span class="line">        err = <span class="built_in">clGetPlatformInfo</span>(platform[i], CL_PLATFORM_PROFILE, <span class="number">0</span>, <span class="literal">NULL</span>, &amp;size);</span><br><span class="line">        profile = (<span class="type">char</span> *)<span class="built_in">malloc</span>(size);</span><br><span class="line">        err = <span class="built_in">clGetPlatformInfo</span>(platform[i], CL_PLATFORM_PROFILE, size, profile, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;CL_PLATFORM_PROFILE: %s\n&quot;</span>, profile);</span><br><span class="line">        <span class="built_in">free</span>(profile);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取平台扩展</span></span><br><span class="line">        err = <span class="built_in">clGetPlatformInfo</span>(platform[i], CL_PLATFORM_EXTENSIONS, <span class="number">0</span>, <span class="literal">NULL</span>, &amp;size);</span><br><span class="line">        extensions = (<span class="type">char</span> *)<span class="built_in">malloc</span>(size);</span><br><span class="line">        err = <span class="built_in">clGetPlatformInfo</span>(platform[i], CL_PLATFORM_EXTENSIONS, size, extensions, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;CL_PLATFORM_EXTENSIONS: %s\n&quot;</span>, extensions);</span><br><span class="line">        <span class="built_in">free</span>(extensions);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(platform);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc opencl.cpp -o opencl_test -lmali -L/usr/lib/aarch64-linux-gnu/  -I/usr/include/CL/</span><br></pre></td></tr></table></figure>
<p>运行“<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311142043741.png" alt="image-20231114160309270" /></p>
<p>然后使用clinfo命令也可以打印opencl的信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@topeet:/home/topeet$ clinfo</span><br><span class="line">Number of platforms                               1</span><br><span class="line">  Platform Name                                   ARM Platform</span><br><span class="line">  Platform Vendor                                 ARM</span><br><span class="line">  Platform Version                                OpenCL 2.1 v1.g6p0-01eac0.efb75e2978d783a80fe78be1bfb0efc1</span><br><span class="line">  Platform Profile                                FULL_PROFILE</span><br><span class="line">  Platform Extensions                             cl_khr_global_int32_base_atomics cl_khr_global_int32_extended_atomics cl_khr_local_int32_base_atomics cl_khr_local_int32_extended_atomics cl_khr_byte_addressable_store cl_khr_3d_image_writes cl_khr_int64_base_atomics cl_khr_int64_extended_atomics cl_khr_fp16 cl_khr_icd cl_khr_egl_image cl_khr_image2d_from_buffer cl_khr_depth_images cl_khr_subgroups cl_khr_subgroup_extended_types cl_khr_subgroup_non_uniform_vote cl_khr_subgroup_ballot cl_khr_il_program cl_khr_priority_hints cl_khr_create_command_queue cl_khr_spirv_no_integer_wrap_decoration cl_khr_extended_versioning cl_khr_device_uuid cl_arm_core_id cl_arm_printf cl_arm_non_uniform_work_group_size cl_arm_import_memory cl_arm_import_memory_dma_buf cl_arm_import_memory_host cl_arm_integer_dot_product_int8 cl_arm_integer_dot_product_accumulate_int8 cl_arm_integer_dot_product_accumulate_saturate_int8 cl_arm_scheduling_controls cl_arm_controlled_kernel_termination cl_ext_cxx_for_opencl</span><br><span class="line">  Platform Extensions function suffix             ARM</span><br><span class="line">  Platform Host timer resolution                  1ns</span><br><span class="line"></span><br><span class="line">  Platform Name                                   ARM Platform</span><br><span class="line">Number of devices                                 1</span><br><span class="line">arm_release_ver of this libmali is &#x27;g6p0-01eac0&#x27;, rk_so_ver is &#x27;5&#x27;.</span><br><span class="line">  Device Name                                     Mali-LODX r0p0</span><br><span class="line">  Device Vendor                                   ARM</span><br><span class="line">  Device Vendor ID                                0xa8670000</span><br><span class="line">  Device Version                                  OpenCL 2.1 v1.g6p0-01eac0.efb75e2978d783a80fe78be1bfb0efc1</span><br><span class="line">  Device UUID                                     000067a8-0100-0000-0000-000000000000</span><br><span class="line">  Driver UUID                                     d9495bef-ea91-7c52-8a43-8a3c2f7b49cc</span><br><span class="line">  Valid Device LUID                               No</span><br><span class="line">  Device LUID                                     0000-000000000000</span><br><span class="line">  Device Node Mask                                0</span><br><span class="line">  Device Numeric Version                          0x801000 (2.1.0)</span><br><span class="line">  Driver Version                                  2.1</span><br><span class="line">  Device OpenCL C Version                         OpenCL C 2.0 v1.g6p0-01eac0.efb75e2978d783a80fe78be1bfb0efc1</span><br><span class="line">  Device C++ for OpenCL Numeric Version           0x400000 (1.0.0)</span><br><span class="line">  Device Type                                     GPU</span><br><span class="line">  Device Profile                                  FULL_PROFILE</span><br><span class="line">  Device Available                                Yes</span><br><span class="line">  Compiler Available                              Yes</span><br><span class="line">  Linker Available                                Yes</span><br><span class="line">  Max compute units                               4</span><br><span class="line">  Available core IDs                              0, 2, 16, 18</span><br><span class="line">  Max clock frequency                             1000MHz</span><br><span class="line">  Device Partition                                (core)</span><br><span class="line">    Max number of sub-devices                     0</span><br><span class="line">    Supported partition types                     None</span><br><span class="line">    Supported affinity domains                    (n/a)</span><br><span class="line">  Max work item dimensions                        3</span><br><span class="line">  Max work item sizes                             1024x1024x1024</span><br><span class="line">  Max work group size                             1024</span><br><span class="line">  Preferred work group size multiple (kernel)     16</span><br></pre></td></tr></table></figure>
<p>clpeak测试，这个源里面是没有的，所以需要先git</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/krrishnarraj/clpeak</span><br><span class="line">mkdir clpeak/build</span><br><span class="line">cd clpeak/build</span><br><span class="line">cmake ..</span><br><span class="line">make -j$(nproc)</span><br><span class="line">./clpeak</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">oot@topeet:/home/topeet/clpeak/build$ ./clpeak</span><br><span class="line"></span><br><span class="line">Platform: ARM Platform</span><br><span class="line">arm_release_ver of this libmali is &#x27;g6p0-01eac0&#x27;, rk_so_ver is &#x27;5&#x27;.</span><br><span class="line">  Device: Mali-LODX r0p0</span><br><span class="line">    Driver version  : 2.1 (Linux ARM64)</span><br><span class="line">    Compute units   : 4</span><br><span class="line">    Clock frequency : 1000 MHz</span><br><span class="line"></span><br><span class="line">    Global memory bandwidth (GBPS)</span><br><span class="line">      float   : 23.15</span><br><span class="line">      float2  : 24.43</span><br><span class="line">      float4  : 25.12</span><br><span class="line">      float8  : 12.74</span><br><span class="line">      float16 : 12.29</span><br><span class="line"></span><br><span class="line">    Single-precision compute (GFLOPS)</span><br><span class="line">      float   : 439.08</span><br><span class="line">      float2  : 467.79</span><br><span class="line">      float4  : 463.03</span><br><span class="line">      float8  : 432.98</span><br><span class="line">      float16 : 408.58</span><br><span class="line"></span><br><span class="line">    Half-precision compute (GFLOPS)</span><br><span class="line">      half   : 439.79</span><br><span class="line">      half2  : 867.20</span><br><span class="line">      half4  : 898.12</span><br><span class="line">      half8  : 875.33</span><br><span class="line">      half16 : 835.56</span><br><span class="line"></span><br><span class="line">    No double precision support! Skipped</span><br><span class="line"></span><br><span class="line">    Integer compute (GIOPS)</span><br><span class="line">      int   : 124.79</span><br><span class="line">      int2  : 125.28</span><br><span class="line">      int4  : 124.83</span><br><span class="line">      int8  : 123.36</span><br><span class="line">      int16 : 123.81</span><br><span class="line"></span><br><span class="line">    Integer compute Fast 24bit (GIOPS)</span><br><span class="line">      int   : 124.67</span><br><span class="line">      int2  : 125.32</span><br><span class="line">      int4  : 124.79</span><br><span class="line">      int8  : 123.36</span><br><span class="line">      int16 : 123.82</span><br><span class="line"></span><br><span class="line">    Transfer bandwidth (GBPS)</span><br><span class="line">      enqueueWriteBuffer              : 2.73</span><br><span class="line">      enqueueReadBuffer               : 7.82</span><br><span class="line">      enqueueWriteBuffer non-blocking : 7.26</span><br><span class="line">      enqueueReadBuffer non-blocking  : 8.16</span><br><span class="line">      enqueueMapBuffer(for read)      : 60.05</span><br><span class="line">        memcpy from mapped ptr        : 9.09</span><br><span class="line">      enqueueUnmap(after write)       : 56.96</span><br><span class="line">        memcpy to mapped ptr          : 8.79</span><br><span class="line"></span><br><span class="line">    Kernel launch latency : 40.79 us</span><br><span class="line"></span><br><span class="line">root@topeet:/home/topeet/clpeak/build$</span><br></pre></td></tr></table></figure>
<p>这个输出显示了在 ARM 平台上的 OpenCL 性能测试结果。具体来说，它提供了以下信息：</p>
<ul>
<li>平台信息：ARM 平台。</li>
<li>设备信息：Mali-LODX r0p0 设备，具有以下特性：
<ul>
<li>驱动版本：2.1 (Linux ARM64)。</li>
<li>计算单元数量：4。</li>
<li>时钟频率：1000 MHz。</li>
</ul>
</li>
</ul>
<p>然后，它提供了一系列性能指标，包括：</p>
<ul>
<li>全局内存带宽（单位：GBPS）：浮点数运算的带宽。
<ul>
<li><code>float</code>：23.15 GBPS</li>
<li><code>float2</code>：24.43 GBPS</li>
<li><code>float4</code>：25.12 GBPS</li>
<li><code>float8</code>：12.74 GBPS</li>
<li><code>float16</code>：12.29 GBPS</li>
</ul>
</li>
<li>单精度浮点数计算性能（单位：GFLOPS）：
<ul>
<li><code>float</code>：439.08 GFLOPS</li>
<li><code>float2</code>：467.79 GFLOPS</li>
<li><code>float4</code>：463.03 GFLOPS</li>
<li><code>float8</code>：432.98 GFLOPS</li>
<li><code>float16</code>：408.58 GFLOPS</li>
</ul>
</li>
<li>半精度浮点数计算性能（单位：GFLOPS）：
<ul>
<li><code>half</code>：439.79 GFLOPS</li>
<li><code>half2</code>：867.20 GFLOPS</li>
<li><code>half4</code>：898.12 GFLOPS</li>
<li><code>half8</code>：875.33 GFLOPS</li>
<li><code>half16</code>：835.56 GFLOPS</li>
</ul>
</li>
<li>不支持双精度浮点数计算。</li>
<li>整数计算性能（单位：GIOPS）：
<ul>
<li><code>int</code>：124.79 GIOPS</li>
<li><code>int2</code>：125.28 GIOPS</li>
<li><code>int4</code>：124.83 GIOPS</li>
<li><code>int8</code>：123.36 GIOPS</li>
<li><code>int16</code>：123.81 GIOPS</li>
</ul>
</li>
<li>快速 24 位整数计算性能（单位：GIOPS）：
<ul>
<li><code>int</code>：124.67 GIOPS</li>
<li><code>int2</code>：125.32 GIOPS</li>
<li><code>int4</code>：124.79 GIOPS</li>
<li><code>int8</code>：123.36 GIOPS</li>
<li><code>int16</code>：123.82 GIOPS</li>
</ul>
</li>
<li>传输带宽（单位：GBPS）：不同类型的内存传输操作的带宽。
<ul>
<li><code>enqueueWriteBuffer</code>：2.73 GBPS</li>
<li><code>enqueueReadBuffer</code>：7.82 GBPS</li>
<li><code>enqueueWriteBuffer non-blocking</code>：7.26 GBPS</li>
<li><code>enqueueReadBuffer non-blocking</code>：8.16 GBPS</li>
<li><code>enqueueMapBuffer(for read)</code>：60.05 GBPS</li>
<li><code>memcpy from mapped ptr</code>：9.09 GBPS</li>
<li><code>enqueueUnmap(after write)</code>：56.96 GBPS</li>
<li><code>memcpy to mapped ptr</code>：8.79 GBPS</li>
</ul>
</li>
<li>内核启动延迟：40.79 微秒。</li>
</ul>
<h1 id="9对比测试编译一个什么都没有的ubuntu"><a class="markdownIt-Anchor" href="#9对比测试编译一个什么都没有的ubuntu"></a> 9.对比测试（编译一个什么都没有的ubuntu）</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="10-opengl学习"><a class="markdownIt-Anchor" href="#10-opengl学习"></a> 10 opengl学习</h1>
<p>学习网址：<a href="https://blog.csdn.net/XscKernel/article/details/50158329?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169996845316800211564994%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169996845316800211564994&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-50158329-null-null.142">https://blog.csdn.net/XscKernel/article/details/50158329?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169996845316800211564994%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169996845316800211564994&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-50158329-null-null.142</a></p>
<p>==什么是opengl？==</p>
<p>OpenGL（Open Graphics Library）是一个用于渲染2D和3D图形的跨平台图形编程接口。它提供了一套函数和命令，用于管理图形数据、执行基本绘图操作和实现高级的图形效果。</p>
<p>下面是一些关于OpenGL的详细说明：</p>
<ol>
<li><strong>跨平台性</strong>: OpenGL是跨平台的，可以在不同的操作系统（如Windows、MacOS、Linux）上运行。这使得开发者可以编写与特定操作系统无关的图形应用程序。</li>
<li><strong>硬件加速</strong>: OpenGL可以利用计算机中的图形硬件（如显卡）进行硬件加速，以提高图形渲染的性能。这使得OpenGL在处理复杂的3D图形时具有出色的性能。</li>
<li><strong>图形渲染管线</strong>: OpenGL使用图形渲染管线来处理图形数据。图形渲染管线是一系列的处理阶段，将输入的3D图形数据转换为最终在屏幕上显示的2D图像。它包括几何处理、光栅化、着色和输出等阶段。</li>
<li><strong>基本几何图元</strong>: OpenGL支持绘制基本几何图元，如点、线和三角形。这些图元构成了绘制复杂3D对象的基础。</li>
<li><strong>着色器编程</strong>: OpenGL使用着色器来处理图形的顶点和像素。顶点着色器负责对每个顶点进行变换和处理，而像素着色器则在光栅化阶段对每个像素进行处理。这使得开发者可以根据需要自定义图形的外观和效果。</li>
<li><strong>纹理映射</strong>: OpenGL支持将纹理映射到3D模型的表面，以实现更加真实和详细的图形效果。纹理可以包含图像、颜色或其他数据，可以用于模拟材质、添加细节和实现纹理映射效果。</li>
<li><strong>光照和阴影</strong>: OpenGL提供了灯光模型和阴影技术，可以模拟光的交互和对象之间的阴影关系。这使得图形更加逼真和真实。</li>
<li><strong>扩展和版本</strong>: OpenGL不断发展和更新，引入新的功能和扩展，以适应不断增长的图形需求。每个OpenGL版本都有其特定的功能和支持的硬件级别。</li>
</ol>
<h2 id="101-环境搭建"><a class="markdownIt-Anchor" href="#101-环境搭建"></a> 10.1 环境搭建</h2>
<p>安装OpenGL Library</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libgl1-mesa-dev</span><br></pre></td></tr></table></figure>
<p>安装OpenGL Utilities</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libglu1-mesa-dev</span><br></pre></td></tr></table></figure>
<p>OpenGL Utilities 是一组建构于 OpenGL Library 之上的工具组，提供许多很方便的函式，使 OpenGL 更强大且更容易使用。</p>
<p>安装OpenGL Utility Toolkit</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install freeglut3-dev</span><br></pre></td></tr></table></figure>
<p>OpenGL Utility Toolkit 是建立在 OpenGL Utilities 上面的工具箱，除了强化了 OpenGL Utilities 的不足之外，也增加了 OpenGL 对于视窗介面支援。</p>
<p>测试程序</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;GL/glut.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">myDisplay</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line">    glRectf(<span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.5f</span>);</span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    glutInit(&amp;argc, argv);</span><br><span class="line">    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);</span><br><span class="line">    glutInitWindowPosition(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">    glutInitWindowSize(<span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">    glutCreateWindow(<span class="string">&quot;the first opengL test&quot;</span>);</span><br><span class="line">    glutDisplayFunc(&amp;myDisplay);</span><br><span class="line">    glutMainLoop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -o test test.c -lGL -lGLU -lglut</span><br></pre></td></tr></table></figure>
<p>演示效果如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311142139102.png" alt="image-20231114213934062" /></p>
<h2 id="102画一个圆"><a class="markdownIt-Anchor" href="#102画一个圆"></a> 10.2：画一个圆</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;GL/glut.h&gt;</span>  <span class="comment">// 引入OpenGL库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> n = <span class="number">20</span>;  <span class="comment">// 定义多边形的边数</span></span><br><span class="line"><span class="type">const</span> GLfloat R = <span class="number">0.5f</span>;  <span class="comment">// 多边形的半径</span></span><br><span class="line"><span class="type">const</span> GLfloat Pi = <span class="number">3.1415926536f</span>;  <span class="comment">// 圆周率Pi</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">myDisplay</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT);  <span class="comment">// 清空颜色缓冲区</span></span><br><span class="line"></span><br><span class="line">    glBegin(GL_POLYGON);  <span class="comment">// 开始绘制多边形</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 计算多边形每个顶点的坐标</span></span><br><span class="line">        GLfloat x = R * <span class="built_in">cos</span>(<span class="number">2</span> * Pi / n * i);</span><br><span class="line">        GLfloat y = R * <span class="built_in">sin</span>(<span class="number">2</span> * Pi / n * i);</span><br><span class="line">        glVertex2f(x, y);  <span class="comment">// 添加顶点</span></span><br><span class="line">    &#125;</span><br><span class="line">    glEnd();  <span class="comment">// 结束绘制多边形</span></span><br><span class="line"></span><br><span class="line">    glFlush();  <span class="comment">// 清空OpenGL命令缓冲区，强制执行绘图命令</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    glutInit(&amp;argc, argv);  <span class="comment">// 初始化GLUT库</span></span><br><span class="line"></span><br><span class="line">    glutInitDisplayMode(GLUT_RGB);  <span class="comment">// 设置显示模式为RGB颜色模式</span></span><br><span class="line">    glutInitWindowSize(<span class="number">400</span>, <span class="number">400</span>);  <span class="comment">// 设置窗口大小</span></span><br><span class="line">    glutCreateWindow(<span class="string">&quot;OpenGL Polygon&quot;</span>);  <span class="comment">// 创建窗口，并设置标题为 &quot;OpenGL Polygon&quot;</span></span><br><span class="line"></span><br><span class="line">    glutDisplayFunc(myDisplay);  <span class="comment">// 注册显示回调函数</span></span><br><span class="line"></span><br><span class="line">    glutMainLoop();  <span class="comment">// 进入主循环，开始事件处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -o test test.c -lGL -lGLU -lglut</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311142142229.png" alt="image-20231114214250208" /></p>
<h2 id="103-画一个五角星"><a class="markdownIt-Anchor" href="#103-画一个五角星"></a> 10.3 画一个五角星</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;GL/glut.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> GLfloat Pi = <span class="number">3.1415926536f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">myDisplay</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 计算五角星的相关坐标</span></span><br><span class="line">    GLfloat a = <span class="number">1</span> / (<span class="number">2</span> - <span class="number">2</span> * <span class="built_in">cos</span>(<span class="number">72</span> * Pi / <span class="number">180</span>));</span><br><span class="line">    GLfloat bx = a * <span class="built_in">cos</span>(<span class="number">18</span> * Pi / <span class="number">180</span>);</span><br><span class="line">    GLfloat by = a * <span class="built_in">sin</span>(<span class="number">18</span> * Pi / <span class="number">180</span>);</span><br><span class="line">    GLfloat cy = -a * <span class="built_in">cos</span>(<span class="number">18</span> * Pi / <span class="number">180</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义五个顶点的坐标</span></span><br><span class="line">    GLfloat PointA[<span class="number">2</span>] = &#123;<span class="number">0</span>, a&#125;;</span><br><span class="line">    GLfloat PointB[<span class="number">2</span>] = &#123;bx, by&#125;;</span><br><span class="line">    GLfloat PointC[<span class="number">2</span>] = &#123;<span class="number">0.5</span>, cy&#125;;</span><br><span class="line">    GLfloat PointD[<span class="number">2</span>] = &#123;<span class="number">-0.5</span>, cy&#125;;</span><br><span class="line">    GLfloat PointE[<span class="number">2</span>] = &#123;-bx, by&#125;;</span><br><span class="line"></span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按照A-&gt;C-&gt;E-&gt;B-&gt;D-&gt;A的顺序，绘制五角星</span></span><br><span class="line">    glBegin(GL_LINE_LOOP);</span><br><span class="line">    glVertex2fv(PointA);</span><br><span class="line">    glVertex2fv(PointC);</span><br><span class="line">    glVertex2fv(PointE);</span><br><span class="line">    glVertex2fv(PointB);</span><br><span class="line">    glVertex2fv(PointD);</span><br><span class="line">    glEnd();</span><br><span class="line"></span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    glutInit(&amp;argc, argv);</span><br><span class="line">    glutInitDisplayMode(GLUT_RGB);</span><br><span class="line">    glutInitWindowSize(<span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">    glutCreateWindow(<span class="string">&quot;OpenGL Star&quot;</span>);</span><br><span class="line"></span><br><span class="line">    glutDisplayFunc(myDisplay);</span><br><span class="line"></span><br><span class="line">    glutMainLoop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -o test test.c -lm -lGL -lGLU -lglut</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311142146381.png" alt="image-20231114214602345" /></p>
<h2 id="104-画一个正弦"><a class="markdownIt-Anchor" href="#104-画一个正弦"></a> 10.4 画一个正弦</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;GL/glut.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> GLfloat factor = <span class="number">0.1f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">myDisplay</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GLfloat x;</span><br><span class="line"></span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制坐标轴</span></span><br><span class="line">    glBegin(GL_LINES);</span><br><span class="line">    glVertex2f(<span class="number">-1.0f</span>, <span class="number">0.0f</span>); <span class="comment">// x轴起点</span></span><br><span class="line">    glVertex2f(<span class="number">1.0f</span>, <span class="number">0.0f</span>);  <span class="comment">// x轴终点</span></span><br><span class="line">    glVertex2f(<span class="number">0.0f</span>, <span class="number">-1.0f</span>); <span class="comment">// y轴起点</span></span><br><span class="line">    glVertex2f(<span class="number">0.0f</span>, <span class="number">1.0f</span>);  <span class="comment">// y轴终点</span></span><br><span class="line">    glEnd();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制正弦曲线</span></span><br><span class="line">    glBegin(GL_LINE_STRIP);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">-1.0f</span> / factor; x &lt; <span class="number">1.0f</span> / factor; x += <span class="number">0.01f</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        glVertex2f(x * factor, <span class="built_in">sin</span>(x) * factor);</span><br><span class="line">    &#125;</span><br><span class="line">    glEnd();</span><br><span class="line"></span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    glutInit(&amp;argc, argv);</span><br><span class="line">    glutInitDisplayMode(GLUT_RGB);</span><br><span class="line">    glutInitWindowSize(<span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">    glutCreateWindow(<span class="string">&quot;OpenGL Sine Curve&quot;</span>);</span><br><span class="line"></span><br><span class="line">    glutDisplayFunc(myDisplay);</span><br><span class="line"></span><br><span class="line">    glutMainLoop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -o test test.c -lm -lGL -lGLU -lglut</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311142147823.png" alt="image-20231114214746801" /></p>
<h2 id="105-指定着色模型"><a class="markdownIt-Anchor" href="#105-指定着色模型"></a> 10.5 指定着色模型</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;GL/glut.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> GLdouble Pi = <span class="number">3.1415926536</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">myDisplay</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    glBegin(GL_TRIANGLE_FAN);</span><br><span class="line"></span><br><span class="line">    glColor3f(<span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>);</span><br><span class="line">    glVertex2f(<span class="number">0.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">8</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        glColor3f((i &amp; <span class="number">0x04</span>) ? <span class="number">1.0f</span> : <span class="number">0.0f</span>, (i &amp; <span class="number">0x02</span>) ? <span class="number">1.0f</span> : <span class="number">0.0f</span>, (i &amp; <span class="number">0x01</span>) ? <span class="number">1.0f</span> : <span class="number">0.0f</span>);</span><br><span class="line">        glVertex2f(<span class="built_in">cos</span>(i * Pi / <span class="number">4</span>), <span class="built_in">sin</span>(i * Pi / <span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    glEnd();</span><br><span class="line"></span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    glutInit(&amp;argc, argv);</span><br><span class="line">    glutInitDisplayMode(GLUT_RGB);</span><br><span class="line">    glutInitWindowSize(<span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">    glutCreateWindow(<span class="string">&quot;OpenGL Colorful Triangle&quot;</span>);</span><br><span class="line"></span><br><span class="line">    glutDisplayFunc(myDisplay);</span><br><span class="line"></span><br><span class="line">    glutMainLoop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -o test test.c -lm -lGL -lGLU -lglut</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311142149974.png" alt="image-20231114214959931" /></p>
<p>这个图形渲染出来就很慢，这可能就是GPU的作用了</p>
<h2 id="106-三维变换"><a class="markdownIt-Anchor" href="#106-三维变换"></a> 10.6 三维变换</h2>
<p>模型变换和视图变换</p>
<p>投影变换</p>
<p>视口变换</p>
<p>操作矩阵堆栈</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;GL/glut.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> day = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">myDisplay</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    glEnable(GL_DEPTH_TEST);</span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    glMatrixMode(GL_PROJECTION);</span><br><span class="line">    glLoadIdentity();</span><br><span class="line">    gluPerspective(<span class="number">75</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">400000000</span>);</span><br><span class="line"></span><br><span class="line">    glMatrixMode(GL_MODELVIEW);</span><br><span class="line">    glLoadIdentity();</span><br><span class="line">    gluLookAt(<span class="number">0</span>, <span class="number">-200000000</span>, <span class="number">200000000</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    glColor3f(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">    glutSolidSphere(<span class="number">69600000</span>, <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    glColor3f(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>);</span><br><span class="line">    glRotatef(day / <span class="number">360.0f</span> * <span class="number">360.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">-1.0f</span>);</span><br><span class="line">    glTranslatef(<span class="number">150000000</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">    glutSolidSphere(<span class="number">15945000</span>, <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    glColor3f(<span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">    glRotatef(day / <span class="number">30.0f</span> * <span class="number">360.0f</span> - day / <span class="number">360.0f</span> * <span class="number">360.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">-1.0f</span>);</span><br><span class="line">    glTranslatef(<span class="number">38000000</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">    glutSolidSphere(<span class="number">4345000</span>, <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    glutInit(&amp;argc, argv);</span><br><span class="line">    glutInitDisplayMode(GLUT_RGB | GLUT_DEPTH);</span><br><span class="line">    glutInitWindowSize(<span class="number">800</span>, <span class="number">800</span>);</span><br><span class="line">    glutCreateWindow(<span class="string">&quot;Solar System&quot;</span>);</span><br><span class="line"></span><br><span class="line">    glutDisplayFunc(myDisplay);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加深度测试函数</span></span><br><span class="line">    glEnable(GL_DEPTH_TEST);</span><br><span class="line">    glDepthFunc(GL_EQUAL);</span><br><span class="line"></span><br><span class="line">    glutMainLoop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -o test test.c -lm -lGL -lGLU -lglut</span><br></pre></td></tr></table></figure>
<h2 id="107-动起来"><a class="markdownIt-Anchor" href="#107-动起来"></a> 10.7 动起来</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;GL/glut.h&gt;</span><br><span class="line"></span><br><span class="line">// 太阳、地球和月亮</span><br><span class="line">// 假设每个月都是30天</span><br><span class="line">// 一年12个月，共是360天</span><br><span class="line">static int day = 200; // day的变化：从0到359</span><br><span class="line"></span><br><span class="line">void myDisplay(void)</span><br><span class="line">&#123;</span><br><span class="line">    glEnable(GL_DEPTH_TEST);</span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    glMatrixMode(GL_PROJECTION);</span><br><span class="line">    glLoadIdentity();</span><br><span class="line">    gluPerspective(75, 1, 1, 400000000);</span><br><span class="line"></span><br><span class="line">    glMatrixMode(GL_MODELVIEW);</span><br><span class="line">    glLoadIdentity();</span><br><span class="line">    gluLookAt(0, -200000000, 200000000, 0, 0, 0, 0, 0, 1);</span><br><span class="line"></span><br><span class="line">    // 绘制红色的“太阳”</span><br><span class="line">    glColor3f(1.0f, 0.0f, 0.0f);</span><br><span class="line">    glutSolidSphere(69600000, 20, 20);</span><br><span class="line"></span><br><span class="line">    // 绘制蓝色的“地球”</span><br><span class="line">    glColor3f(0.0f, 0.0f, 1.0f);</span><br><span class="line">    glRotatef(day / 360.0f * 360.0f, 0.0f, 0.0f, -1.0f);</span><br><span class="line">    glTranslatef(150000000, 0.0f, 0.0f);</span><br><span class="line">    glutSolidSphere(15945000, 20, 20);</span><br><span class="line"></span><br><span class="line">    // 绘制黄色的“月亮”</span><br><span class="line">    glColor3f(1.0f, 1.0f, 0.0f);</span><br><span class="line">    glRotatef(day / 30.0f * 360.0f - day / 360.0f * 360.0f, 0.0f, 0.0f, -1.0f);</span><br><span class="line">    glTranslatef(38000000, 0.0f, 0.0f);</span><br><span class="line">    glutSolidSphere(4345000, 20, 20);</span><br><span class="line"></span><br><span class="line">    glFlush();</span><br><span class="line">    glutSwapBuffers();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void myIdle(void)</span><br><span class="line">&#123;</span><br><span class="line">    /* 新的函数，在空闲时调用，作用是把日期往后移动一天并重新绘制，达到动画效果 */</span><br><span class="line">    ++day;</span><br><span class="line">    if (day &gt;= 360)</span><br><span class="line">        day = 0;</span><br><span class="line">    glutPostRedisplay(); // 通知系统重新绘制窗口，触发显示回调函数 myDisplay()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    glutInit(&amp;argc, argv);</span><br><span class="line">    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);</span><br><span class="line">    glutInitWindowPosition(100, 100);</span><br><span class="line">    glutInitWindowSize(400, 400);</span><br><span class="line">    glutCreateWindow(&quot;太阳，地球和月亮&quot;);</span><br><span class="line"></span><br><span class="line">    glutDisplayFunc(myDisplay);</span><br><span class="line">    glutIdleFunc(myIdle);</span><br><span class="line"></span><br><span class="line">    glutMainLoop();</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -o test test.c -lm -lGL -lGLU -lglut</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311142156920.png" alt="image-20231114215605879" /></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;GL/glut.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setLight</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> GLfloat light_position[] = &#123;<span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">-1.0f</span>, <span class="number">1.0f</span>&#125;;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> GLfloat light_ambient[] = &#123;<span class="number">0.2f</span>, <span class="number">0.2f</span>, <span class="number">0.2f</span>, <span class="number">1.0f</span>&#125;;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> GLfloat light_diffuse[] = &#123;<span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>&#125;;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> GLfloat light_specular[] = &#123;<span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>&#125;;</span><br><span class="line"></span><br><span class="line">    glLightfv(GL_LIGHT0, GL_POSITION, light_position);</span><br><span class="line">    glLightfv(GL_LIGHT0, GL_AMBIENT, light_ambient);</span><br><span class="line">    glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse);</span><br><span class="line">    glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular);</span><br><span class="line"></span><br><span class="line">    glEnable(GL_LIGHT0);</span><br><span class="line">    glEnable(GL_LIGHTING);</span><br><span class="line">    glEnable(GL_DEPTH_TEST);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setMaterial</span><span class="params">(<span class="type">const</span> GLfloat mat_diffuse[<span class="number">4</span>], GLfloat mat_shininess)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> GLfloat mat_specular[] = &#123;<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>&#125;;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> GLfloat mat_emission[] = &#123;<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>&#125;;</span><br><span class="line"></span><br><span class="line">    glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, mat_diffuse);</span><br><span class="line">    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);</span><br><span class="line">    glMaterialfv(GL_FRONT, GL_EMISSION, mat_emission);</span><br><span class="line">    glMaterialf(GL_FRONT, GL_SHININESS, mat_shininess);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">myDisplay</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 定义一些材质颜色</span></span><br><span class="line">    <span class="type">const</span> <span class="type">static</span> GLfloat red_color[] = &#123;<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">static</span> GLfloat green_color[] = &#123;<span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.3333f</span>&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">static</span> GLfloat blue_color[] = &#123;<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.5f</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清除屏幕</span></span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动混合并设置混合因子</span></span><br><span class="line">    glEnable(GL_BLEND);</span><br><span class="line">    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置光源</span></span><br><span class="line">    setLight();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以(0, 0, 0.5)为中心，绘制一个半径为0.3的不透明红色球体（离观察者最远）</span></span><br><span class="line">    setMaterial(red_color, <span class="number">30.0</span>);</span><br><span class="line">    glPushMatrix();</span><br><span class="line">    glTranslatef(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.5f</span>);</span><br><span class="line">    glutSolidSphere(<span class="number">0.3</span>, <span class="number">30</span>, <span class="number">30</span>);</span><br><span class="line">    glPopMatrix();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面将绘制半透明物体了，因此将深度缓冲设置为只读</span></span><br><span class="line">    glDepthMask(GL_FALSE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以(0.2, 0, -0.5)为中心，绘制一个半径为0.2的半透明蓝色球体（离观察者最近）</span></span><br><span class="line">    setMaterial(blue_color, <span class="number">30.0</span>);</span><br><span class="line">    glPushMatrix();</span><br><span class="line">    glTranslatef(<span class="number">0.2f</span>, <span class="number">0.0f</span>, <span class="number">-0.5f</span>);</span><br><span class="line">    glutSolidSphere(<span class="number">0.2</span>, <span class="number">30</span>, <span class="number">30</span>);</span><br><span class="line">    glPopMatrix();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以(0.1, 0, 0)为中心，绘制一个半径为0.15的半透明绿色球体（在前两个球体之间）</span></span><br><span class="line">    setMaterial(green_color, <span class="number">30.0</span>);</span><br><span class="line">    glPushMatrix();</span><br><span class="line">    glTranslatef(<span class="number">0.1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    glutSolidSphere(<span class="number">0.15</span>, <span class="number">30</span>, <span class="number">30</span>);</span><br><span class="line">    glPopMatrix();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 完成半透明物体的绘制，将深度缓冲区恢复为可读可写的形式</span></span><br><span class="line">    glDepthMask(GL_TRUE);</span><br><span class="line"></span><br><span class="line">    glutSwapBuffers();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> &#123;</span><br><span class="line">    glutInit(&amp;argc, argv);</span><br><span class="line">    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);</span><br><span class="line">    glutInitWindowPosition(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">    glutInitWindowSize(<span class="number">800</span>, <span class="number">600</span>);</span><br><span class="line">    glutCreateWindow(<span class="string">&quot;Transparent Objects&quot;</span>);</span><br><span class="line"></span><br><span class="line">    glClearColor(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>);</span><br><span class="line"></span><br><span class="line">    glutDisplayFunc(myDisplay);</span><br><span class="line"></span><br><span class="line">    glutMainLoop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -o test test.c -lm -lGL -lGLU -lglut</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311142203186.png" alt="image-20231114220315130" /></p>
<h1 id="11opencl学习"><a class="markdownIt-Anchor" href="#11opencl学习"></a> 11.opencl学习</h1>
<p>==什么是opencl？==</p>
<p>OpenCL（Open Computing Language）是一个开放的跨平台编程框架，用于实现并行计算和通用计算任务的加速。它允许开发者利用多核 CPU、GPU、FPGA和其他加速器等异构计算资源，以高效地执行并行计算任务。</p>
<p>下面是对OpenCL的详细解释：</p>
<ol>
<li><strong>跨平台性</strong>: OpenCL是一个跨平台的编程框架，可在各种操作系统（如Windows、MacOS、Linux）和硬件平台上运行。这使得开发者可以编写与特定平台和硬件无关的并行计算代码。</li>
<li><strong>异构计算</strong>: OpenCL支持异构计算，利用多种计算设备（如CPU、GPU、FPGA等）的并行计算能力。这些设备以不同的方式处理数据和执行计算任务，使得开发者能够充分利用各种硬件资源。</li>
<li><strong>并行计算模型</strong>: OpenCL采用基于任务和数据并行的计算模型。开发者可以将计算任务分解为多个独立的子任务，然后并行执行这些子任务。这种并行计算模型可以在不同的设备上同时执行任务，实现高效的并行计算。</li>
<li><strong>内核函数</strong>: OpenCL使用内核函数来描述并行计算任务。内核函数是程序员编写的并行计算代码，运行在OpenCL设备上的并行处理单元上。开发者可以通过编写内核函数来定义要执行的计算任务。</li>
<li><strong>内存模型</strong>: OpenCL提供了全局内存、局部内存和私有内存等不同类型的内存来管理数据。全局内存对所有内核函数可见，局部内存用于共享数据和协同工作，而私有内存用于每个工作项的私有数据。开发者可以根据计算需求来选择合适的内存类型。</li>
<li><strong>任务调度和并行执行</strong>: OpenCL使用工作组（work-group）和工作项（work-item）的概念来管理任务的调度和并行执行。工作组是一组相关的工作项，它们可以协同工作和共享数据。工作项是最小的并行执行单元，每个工作项独立执行内核函数。</li>
<li><strong>运行时系统</strong>: OpenCL通过运行时系统来管理和调度并行计算任务。运行时系统负责加载和初始化设备驱动程序，分配和管理内存，调度并行任务的执行，以及在设备之间进行数据传输。</li>
<li><strong>扩展和版本</strong>: OpenCL不断发展和更新，引入新的功能和扩展，以适应不断增长的并行计算需求。每个OpenCL版本都有其特定的功能和支持的硬件级别。</li>
</ol>
<h1 id="12rga编译"><a class="markdownIt-Anchor" href="#12rga编译"></a> 12.rga编译</h1>
<p>RGA（Raster Graphic Acceleration Unit）光栅图形加速单元是一个独立的硬件加速器，专门用于加速2D图形操作。它提供了高效的点/线绘制、图像缩放、旋转、位块传输（bitBlt）、Alpha混合等常见的2D图形操作功能。</p>
<p>RGA 的设计目标是通过硬件加速来提高2D图形处理的性能和效率，减轻CPU的负担。它具有独立的硬件模块，可以通过用户空间驱动程序进行访问和控制。</p>
<p>以下是 RGA 的主要特性和功能：</p>
<ol>
<li>点/线绘制加速：RGA 提供了硬件加速的点和线绘制功能，可以快速绘制图形中的点和线条，提供更高的绘制性能。</li>
<li>图像缩放和旋转：RGA 支持硬件加速的图像缩放和旋转，可以快速执行图像的放大、缩小和旋转操作，适用于图像处理和显示应用。</li>
<li>位块传输（bitBlt）：RGA 提供了硬件加速的位块传输功能，可以高效地在内存之间传输图像数据，包括复制、填充和裁剪等操作。</li>
<li>Alpha混合：RGA 支持硬件加速的Alpha混合操作，可以实现图像的透明度混合，以实现图像叠加和特效效果。</li>
<li>用户空间驱动程序：RGA 提供了用户空间驱动程序，允许应用程序通过API访问和控制RGA硬件加速器。这样，开发者可以方便地利用RGA的功能来加速2D图形操作。</li>
</ol>
<p>RGA 的优势在于它提供了高效的硬件加速，能够加速常见的2D图形操作，从而提高图形处理和显示的性能。应用程序可以通过使用RGA的用户空间驱动程序来利用这些功能，实现更快速、流畅的图形处理和显示效果。</p>
<p>RGA（Raster Graphic Acceleration Unit）并不是一个独立的硬件加速器。实际上，RGA是一种软件技术，也可以指代一组相关的软件库和驱动程序。</p>
<p>RGA是Rockchip（瑞芯微电子）公司开发的图像处理技术，主要应用于他们的系统芯片中。RGA技术在Rockchip的芯片中集成了一个专门的硬件模块，用于加速2D图形操作。这个硬件模块通常被称为RGA硬件加速器。</p>
<p>然而，RGA并不是像GPU（图形处理单元）这样的独立硬件设备。它是与Rockchip系统芯片集成的一部分，用于提供2D图形处理的加速功能。RGA的驱动程序和软件库允许开发者通过API来访问和利用这个硬件加速器。</p>
<p>因此，RGA实际上是Rockchip芯片中的一个特定功能模块，用于加速2D图形操作，并通过软件驱动程序提供对该模块的访问和控制。</p>
<p>rockchip 的github <a href="https://github.com/orgs/rockchip-linux/repositories?type=all">https://github.com/orgs/rockchip-linux/repositories?type=all</a></p>
<p>rga的github <a href="https://github.com/JeffyCN/mirrors/tree/linux-rga-multi">https://github.com/JeffyCN/mirrors/tree/linux-rga-multi</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/Caesar-github/linux-rga.git</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --privileged -it -v /home/topeet/:/home/topeet/ ubuntu20</span><br></pre></td></tr></table></figure>
<p>使用以下命令构建deb包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -b -d -uc -us -aarm64</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>DEB_BUILD_OPTIONS=nocheck</code>: 这是一个环境变量设置，指定在构建软件包时不运行自动化测试。<code>nocheck</code> 选项告诉构建系统跳过自动化测试阶段，以加快构建过程。</p>
</li>
<li>
<p><code>dpkg-buildpackage</code>: 这是用于构建 Debian 软件包的工具。它会根据当前目录中的源代码和相关文件构建一个 .deb 文件。</p>
</li>
<li>
<p><code>-b</code>: 这是一个选项，指定只构建二进制软件包，不包括源代码。</p>
</li>
<li>
<p><code>-d</code>: 这是一个选项，告诉 dpkg-buildpackage 在构建过程中处理依赖关系。</p>
</li>
<li>
<p><code>-uc -us</code>: 这是两个选项，用于指定在构建过程中不签名软件包。<code>-uc</code> 表示不对源代码包进行签名，<code>-us</code> 表示不对二进制软件包进行签名。</p>
</li>
<li>
<p><code>-aarm64</code>: 这是一个选项，指定要构建的目标架构为 arm64（ARM 64位架构）。</p>
</li>
</ul>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311152100173.png" alt="image-20231115152331453" /></p>
<p>这就编译成功了，得到了三个包。</p>
<h1 id="13mpp编译"><a class="markdownIt-Anchor" href="#13mpp编译"></a> 13.mpp编译</h1>
<p>MPP（Media Processing Platform）是一种多媒体处理平台，用于实现音频和视频数据的处理、编解码和处理。MPP 提供了一组丰富的功能和算法，用于处理各种多媒体数据，并且能够在硬件加速的环境下提供高效的处理性能。</p>
<p>以下是 MPP 的主要作用：</p>
<p>视频编解码：MPP 提供了各种视频编解码器，如 H.264、H.265、MPEG-2 等。这些编解码器能够将视频数据进行压缩（编码）和解压缩（解码），以满足不同应用场景对视频数据的存储和传输需求。通过硬件加速，MPP 可以提供高效的视频编解码性能，减轻 CPU 的负担。</p>
<p>图像处理：MPP 包含了一系列图像处理算法，如图像缩放、旋转、裁剪、色彩空间转换等。这些算法可以对图像进行各种操作和转换，以满足不同应用场景对图像处理的需求。MPP 的硬件加速能力可以加快图像处理的速度，并提供更高的效率。</p>
<p>音频编解码：除了视频编解码，MPP 还提供了音频编解码的功能。它支持常见的音频编码格式，如 AAC、MP3、AC3 等。通过 MPP，可以对音频数据进行高效的压缩和解压缩，实现音频的存储、传输和处理。</p>
<p>多媒体处理流程管理：MPP 提供了一个统一的框架和接口，用于管理和控制多媒体处理流程。它可以对多个媒体处理单元进行调度和协调，实现复杂的多媒体处理任务。MPP 还提供了丰富的配置选项和参数设置，以满足不同应用场景的需求。</p>
<p>总之，MPP 是一个强大的多媒体处理平台，提供了视频编解码、图像处理、音频编解码等功能。它通过硬件加速，能够实现高效的多媒体数据处理和处理性能，满足各种应用场景对多媒体处理的需求。</p>
<p><a href="https://github.com/rockchip-linux/mpp">https://github.com/rockchip-linux/mpp</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone  https://github.com/rockchip-linux/mpp</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --privileged -it -v /home/topeet/:/home/topeet/ ubuntu20</span><br></pre></td></tr></table></figure>
<p>使用以下命令构建deb包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -b -d -uc -us -aarm64</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311152100221.png" alt="image-20231115153242539" /></p>
<h1 id="14drm-cursor编译"><a class="markdownIt-Anchor" href="#14drm-cursor编译"></a> 14.drm-cursor编译</h1>
<p>drm-cursor 模块的作用是在 Linux 内核中管理和控制硬件光标的显示和操作。它提供了对硬件光标平面（cursor plane）的支持，允许用户在图形界面中显示和操作硬件加速的光标。</p>
<p>具体而言，drm-cursor 模块负责以下功能：</p>
<ol>
<li>硬件光标位置控制：它允许用户在屏幕上drm-cursor 模块的作用是在 Linux 内核中管理和控制硬件光标的显示和操作。它提供了对硬件光标平面（cursor plane）的支持，允许用户在图形界面中显示和操作硬件加速的光标。</li>
</ol>
<p>具体而言，drm-cursor 模块负责以下功能：</p>
<ol>
<li>硬件光标位置控制：它允许用户在屏幕上设置光标的位置，使光标能够随着鼠标移动而移动。</li>
<li>硬件光标外观设置：它允许用户定义光标的外观，包括光标的形状、大小、颜色等。</li>
<li>硬件光标的显示和更新：它负责将光标的图像数据传递给显示硬件，以便在屏幕上显示光标。它还负责在光标位置发生变化时更新光标的显示。</li>
<li>硬件光标的交互响应：它监听用户的鼠标输入，并将相应的事件传递给应用程序，以实现光标的交互操作，如点击、拖动等。</li>
</ol>
<p>通过硬件加速的光标显示和操作，drm-cursor 模块提供了更高效、更平滑和更响应的光标体验，从而提升了图形界面的用户体验。</p>
<p><a href="https://github.com/JeffyCN/drm-cursor.git">https://github.com/JeffyCN/drm-cursor.git</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone  https://github.com/JeffyCN/drm-cursor.git</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --privileged -it -v /home/topeet/:/home/topeet/ ubuntu20</span><br></pre></td></tr></table></figure>
<p>使用以下命令构建deb包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -b -d -uc -us -aarm64</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311152100215.png" alt="image-20231115173657884" /></p>
<h1 id="15mali编译"><a class="markdownIt-Anchor" href="#15mali编译"></a> 15.mali编译</h1>
<p><a href="https://github.com/JeffyCN/mirrors/tree/libmali">https://github.com/JeffyCN/mirrors/tree/libmali</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/JeffyCN/mirrors/tree/libmali</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --privileged -it -v /home/topeet/:/home/topeet/ ubuntu20</span><br></pre></td></tr></table></figure>
<p>使用以下命令构建deb包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -b -d -uc -us -aarm64</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install pip</span><br><span class="line">pip3 install meson==0.54.0 -i https://pypi.mirrors.ustc.edu.cn/simple/</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311152100218.png" alt="image-20231115173447296" /></p>
<h1 id="16libv4l-mpp编译目前没这个还不需要"><a class="markdownIt-Anchor" href="#16libv4l-mpp编译目前没这个还不需要"></a> 16.libv4l-mpp编译(目前没这个，还不需要)</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/JeffyCN/libv4l-rkmpp.git</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --privileged -it -v /home/topeet/:/home/topeet/ ubuntu20</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -b -d -uc -us -aarm64</span><br></pre></td></tr></table></figure>
<h1 id="17gst-rk编译目前没这个还不需要"><a class="markdownIt-Anchor" href="#17gst-rk编译目前没这个还不需要"></a> 17.gst-rk编译(目前没这个，还不需要)</h1>
<p><a href="https://github.com/JeffyCN/mirrors/tree/gstreamer-rockchip">https://github.com/JeffyCN/mirrors/tree/gstreamer-rockchip</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone  https://github.com/JeffyCN/mirrors/tree/gstreamer-rockchip</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --privileged -it -v /home/topeet/:/home/topeet/ ubuntu20</span><br></pre></td></tr></table></figure>
<p>使用以下命令构建deb包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -b -d -uc -us -aarm64</span><br></pre></td></tr></table></figure>
<h1 id="18xserver编译"><a class="markdownIt-Anchor" href="#18xserver编译"></a> 18.xserver编译</h1>
<p>xserver这个我看瑞芯微并没有提供ubuntu20 和ubuntu22的，所以这里就使用它提供好的xserver来代替。现在就先这样了，也没有其他好办法。首先拉取提供好的源码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/JeffyCN/xorg-xserver.git</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>==上面的不对，看了看瑞芯微的直播课找到了方法==</p>
<p>获取ubuntu的xserver源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get source xorg-server</span><br></pre></td></tr></table></figure>
<p>获取rk的xserver源码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/JeffyCN/xorg-xserver.git</span><br></pre></td></tr></table></figure>
<p>切换版本，这里切换到1.20.11：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout remotes/origin/rockchip/debian/1.20.11</span><br></pre></td></tr></table></figure>
<p>获取补丁包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git format-patch e4f4521ca</span><br></pre></td></tr></table></figure>
<p>打补丁的脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">PATCHES_DIR=&quot;$1&quot;  # 补丁文件所在目录</span><br><span class="line">SOURCE_DIR=&quot;$2&quot;  # 源码目录</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查补丁文件目录是否存在</span></span><br><span class="line">if [ ! -d &quot;$PATCHES_DIR&quot; ]; then</span><br><span class="line">  echo &quot;补丁文件目录不存在: $PATCHES_DIR&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查源码目录是否存在</span></span><br><span class="line">if [ ! -d &quot;$SOURCE_DIR&quot; ]; then</span><br><span class="line">  echo &quot;源码目录不存在: $SOURCE_DIR&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取补丁文件列表，并按文件名排序</span></span><br><span class="line">PATCH_FILES=$(find &quot;$PATCHES_DIR&quot; -type f -name &quot;*.patch&quot; | sort)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">应用每个补丁文件到源码中</span></span><br><span class="line">for PATCH_FILE in $PATCH_FILES; do</span><br><span class="line">  echo &quot;应用补丁文件: $PATCH_FILE&quot;</span><br><span class="line">  patch -d &quot;$SOURCE_DIR&quot; -p1 --no-backup-if-mismatch -f &lt; &quot;$PATCH_FILE&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">检查应用补丁是否成功</span></span><br><span class="line">  if [ $? -eq 0 ]; then</span><br><span class="line">    echo &quot;补丁文件已成功应用&quot;</span><br><span class="line">  else</span><br><span class="line">    echo &quot;应用补丁文件时出错&quot;</span><br><span class="line">  fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>脚本运行如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311162144402.png" alt="image-20231116173059788" /></p>
<p>到这里就修改完成了，然后加载docker镜像，挂载相应的目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --privileged -it -v /home/topeet/tmp/xorg:/home/topeet/ ubuntu20</span><br></pre></td></tr></table></figure>
<p>接下来修改一些版本号，<a href="http://xn--configure-u22on35pv54h.ac">首先是configure.ac</a>，将原来的1.20.8修改为1.20.13</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim configure.ac</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311162144390.png" alt="image-20231116141046609" /></p>
<p>然后修改meson.build文件，通样修改版本号，修改完成如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311162144393.png" alt="image-20231116141249595" /></p>
<p>最后修改构建deb包的debain文件，其中的debian/changelog用来控制构建的名称，然后添加上下面这个，这样最后生成的就是对应名称的的包了。</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">xorg-server (2:1.20.13-1ubuntu1~20.04.9) focal-security; urgency=medium</span><br><span class="line"></span><br><span class="line">  * SECURITY UPDATE: OOB write in XIChangeDeviceProperty and</span><br><span class="line">    RRChangeOutputProperty</span><br><span class="line">    - debian/patches/CVE-2023-5367.patch: fix handling of PropModeAppend</span><br><span class="line">      and PropModePrepend in Xi/xiproperty.c, randr/rrproperty.c.</span><br><span class="line">    - CVE-2023-5367</span><br><span class="line">  * SECURITY UPDATE: Use-after-free bug in DestroyWindow</span><br><span class="line">    - debian/patches/CVE-2023-5380.patch: reset the PointerWindows</span><br><span class="line">      reference on screen switch in dix/enterleave.h, <span class="keyword">include</span>/eventstr.h,</span><br><span class="line">      mi/mipointer.c.</span><br><span class="line">    - CVE-2023-5380</span><br></pre></td></tr></table></figure>
<p>到这里就修改完成了，然后加载docker镜像，挂载相应的目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --privileged -it -v /home/topeet/:/home/topeet/ ubuntu20</span><br></pre></td></tr></table></figure>
<p>然后进行构建即可，构建完成如下所示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo quilt refresh -f</span><br><span class="line">sudo quilt pop -a -f</span><br><span class="line">sudo debian/rules clean</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -b -d -uc -us -aarm64</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311162144432.png" alt="image-20231116142000186" /></p>
<p>无论是ubuntu20还是ubutnu22应该都能以同样的方式进行构建xserver的包，安装gpu驱动之后会黑屏，这时候上面构建的deb包就需要安装了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -b -d -uc -us -aarm64</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311162144432.png" alt="image-20231116142000186" /></p>
<p>自己做的deb包：<br />
1.20.13</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1237Qxwq0u7s6cJwTDF5oyQ </span><br><span class="line">提取码：gh2p </span><br><span class="line">--来自百度网盘超级会员V6的分享</span><br></pre></td></tr></table></figure>
<p>明天再做ubuntu22的</p>
<h1 id="19firefly-网址"><a class="markdownIt-Anchor" href="#19firefly-网址"></a> 19.firefly 网址</h1>
<p><a href="https://wiki.t-firefly.com/zh_CN/Firefly-Linux-Guide/manual_ubuntu.html#shi-pin-ying-jian-bian-jie-ma-zhi-chi">https://wiki.t-firefly.com/zh_CN/Firefly-Linux-Guide/manual_ubuntu.html#shi-pin-ying-jian-bian-jie-ma-zhi-chi</a></p>
<h1 id="20rockchip-graphics介绍"><a class="markdownIt-Anchor" href="#20rockchip-graphics介绍"></a> 20.Rockchip Graphics介绍</h1>
<p><a href="https://bbs.elecfans.com/jishu_2275817_1_1.html">https://bbs.elecfans.com/jishu_2275817_1_1.html</a></p>
<h1 id="21ubuntu20-qt的编译"><a class="markdownIt-Anchor" href="#21ubuntu20-qt的编译"></a> 21.ubuntu20 qt的编译</h1>
<p>docker加载镜像和源码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --privileged -it -v /home/topeet/Linux/qt/:/home/topeet/ ubuntu20</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311162144377.png" alt="image-20231116143753225" /></p>
<h1 id="22开发调试流程简介"><a class="markdownIt-Anchor" href="#22开发调试流程简介"></a> 22.开发调试流程简介</h1>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311162144550.png" alt="image-20231116162242671" /></p>
<p>Rockchip_Developer_Guide_Third_Party_System_Adaptation_CN.pdf<br />
这个pdf文件很重要。</p>
]]></content>
      <categories>
        <category>瑞芯微</category>
      </categories>
  </entry>
  <entry>
    <title>PCB学习</title>
    <url>/2023/11/12/6%20ad%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>从今天开始学习一下PCB的学习，我当然也是想画一些高速PCB板子，那些8层的、10层的，但是路还很远，很长，所以慢慢的加油吧。</p>
<p>11月12 日，今天来学习第一部分，软件的安装，由于使用的是两层板，版本是AD19,所以这里要先进行软件的安装和设置，后续的内容，下一个星期日再见。</p>
<h1 id="1-ad-19软件安装和配置"><a class="markdownIt-Anchor" href="#1-ad-19软件安装和配置"></a> 1 AD 19软件安装和配置</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1gznZRe00REAmoUThExJrCQ </span><br><span class="line">提取码：gtqh </span><br><span class="line">--来自百度网盘超级会员V6的分享</span><br></pre></td></tr></table></figure>
<p>下载之后如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311122054070.png" alt="image-20231112205457032" /></p>
<p>先来安装：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311122058090.png" alt="image-20231112205829074" /></p>
<p>这里的安装倒是没啥，换个中文然后下一步即可，等待安装完成：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311122059776.png" alt="image-20231112205938748" /></p>
<p>然后来到License文件</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311122100769.png" alt="image-20231112210025754" /></p>
<p>将两个用于破解和验证的文件放到安装的AD目录，</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311122118366.png" alt="image-20231112211807344" /></p>
<p>然后打开AD软件，找到add licence</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311122119378.png" alt="image-20231112211923345" /></p>
<p>然后找到拷贝过去的alf文件，点击确定，破解完成如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311122123467.png" alt="image-20231112212333451" /></p>
<p>然后进行中文的切换，点击右上角的小齿轮，进入设置界面，如下图所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311122124175.png" alt="image-20231112212448161" /></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311122125573.png" alt="image-20231112212500549" /></p>
<p>点击使用本地资源，如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311122125233.png" alt="image-20231112212529208" /></p>
<p>设置完成之后，重启ad软件即可，可以看到已经是中文了。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311122126032.png" alt="image-20231112212617017" /></p>
<p><a href="http://www.baidu.com/link?url=g5y-7qzhA8Qmd06DRFxhB5NMwanpnh580e8Dyaa7qAnmN373vLCa5UQZL42gPzCSzdfLiKF4PSbBsMfZ7DzTnq"><em>navigation</em></a> 导航，这里可以通过原理图去寻找PCB，需要注意的是右面只是保存了元件，其他两个可能并不好用</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311122130017.png" alt="image-20231112213052978" /></p>
<p>然后是design insight，将这些全部取消勾选</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311122132319.png" alt="image-20231112213241293" /></p>
<p>然后是data 的自动保存，这里设置十分钟自动保存：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311122133235.png" alt="image-20231112213355211" /></p>
<p>原理图中的\代表负信号，进行勾选</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311122135497.png" alt="image-20231112213527468" /></p>
<p>PCB中的设置，这里的光标类型选择Large 90，然后文件报告忽略都打开<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311122137017.png" alt="image-20231112213743978" /></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311122138876.png" alt="image-20231112213854832" /></p>
<p>显示抬头颜色这里取消：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311122140678.png" alt="image-20231112214002651" /></p>
<p>颜色选择实心覆盖：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311122140402.png" alt="image-20231112214048376" /></p>
<p>过孔大小设置为12 和 24，并且i勾选盖油</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311122143733.png" alt="image-20231112214328703" /></p>
<p>铜皮操作，设置大小为4和5，移除死铜</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311122144991.png" alt="image-20231112214442963" /></p>
<p>保存好的ad配置网盘链接如下所示：<br />
链接：<a href="https://pan.baidu.com/s/1EKzwbSOtfkkl_NPCFTDGCw">https://pan.baidu.com/s/1EKzwbSOtfkkl_NPCFTDGCw</a><br />
提取码：sd8a<br />
–来自百度网盘超级会员V6的分享</p>
<p>可以直接进行导入即可，省去了这一系列的设置，还是挺方便的。</p>
<p>==11月12日 21：48学习完成，下一次学习就是下个周日了，希望不会忘记==</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
  </entry>
  <entry>
    <title>docker学习</title>
    <url>/2023/11/09/5%20docker%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这是我学习docker的一个前提条件，在之前的一些时间，我也是简单的看了一下docker，当时我是想用docker来进行deb包的构建的，为什么想到用docker了呢，这是因为我看大佬的github和瑞芯微的指导手册里都使用的docker，其实这个就跟开发板直接编译的效果是一样的，只是docker是在本机上，所以操作更流畅一些，而且开发板的编译速度以及方便程度，是有些区别的，所以docker就出现了，再然后我发现源码的编译里也是可以用到docker的，毕竟也就仅仅是一些环境而已，所以我又萌发了用docker编译源码的想法，所以docker的学习正式开始。</p>
<p><strong>弱小和无知不是生存的障碍，傲慢才是</strong></p>
<p><strong>唯有出现需求，你的目标和需求相匹配，才是学习最快速的路径。</strong></p>
<h1 id="docker为什么出现"><a class="markdownIt-Anchor" href="#docker为什么出现"></a> Docker为什么出现</h1>
<p>在我看来，我不是运维人员，我是嵌入式软件工程师，现在编译一个系统，换一个开发板，他们的环境都是不一样的，这就很烦，然而docker呢就很方便的解决了依赖这些相关的问题，而且还很小，这也是我学习docker的原因。</p>
<p>Docker的思想来自于集装箱，集装箱解决了什么问题？在一艘大船上，可以把货物规整的摆放起来。并且各种各样的货物被集装箱标准化了，集装箱和集装箱之间不会互相影响。那么我就不需要专门运送水果的船和专门运送化学品的船了。只要这些货物在集装箱里封装的好好的，那我就可以用一艘大船把他们都运走。</p>
<p>Docker是基于Go语言实现的云开源项目。</p>
<p>Docker的主要目标是“Build，Ship and Run Any App , Anywhere”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或数据库应用等等）及其运行环境能够做到“一次封装，到处运行”。Linux 容器技术的出现就解决了这样一个问题，而 Docker 就是在它的基础上发展过来的。将应用运行在Docker 容器上面，而 Docker 容器在任何操作系统上都是一致的，这就实现了跨平台、跨服务器。只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作。</p>
<p><strong>虚拟机的缺点：</strong></p>
<p>1、资源占用多</p>
<p>2、冗余步骤多</p>
<p>3 、启动慢</p>
<p>容器虚拟化技术</p>
<p>由于前面虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。</p>
<p>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。容器与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。</p>
<p>比较了 Docker 和传统虚拟化方式的不同之处：</p>
<ul>
<li>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；</li>
<li>而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</li>
<li>每个容器之间互相隔离，每个容器有自己的文件系统 ，容器之间进程不会相互影响，能区分计算资源。</li>
</ul>
<p>学习途径</p>
<p>Docker官网：<a href="http://www.docker.com">http://www.docker.com</a></p>
<p>Docker中文网站：<a href="https://www.docker-cn.com">https://www.docker-cn.com</a></p>
<p>Docker Hub官网：<a href="https://hub.docker.com">https://hub.docker.com</a> （仓库）</p>
<p>还是我那句话，只要学不死，就往死里学！</p>
<h1 id="docker安装"><a class="markdownIt-Anchor" href="#docker安装"></a> Docker安装</h1>
<p>我这里就直接使用ubuntu20 ，也就是3588的虚拟机了，我要虚拟一个ubuntu20的docker容器，这是我的第一个目的。</p>
<p>1.安装gcc g++相关环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get -y install gcc g++</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311102028310.png" alt="image-20231110095659265" /></p>
<p>确保之前的docker删除掉：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311102028358.png" alt="image-20231110100326456" /></p>
<p>然后设置镜像仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Add Docker<span class="string">&#x27;s official GPG key:</span></span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ca-certificates curl gnupg</span><br><span class="line">sudo install -m 0755 -d /etc/apt/keyrings</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br><span class="line">sudo chmod a+r /etc/apt/keyrings/docker.gpg</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Add the repository to Apt sources:</span></span></span><br><span class="line">echo \</span><br><span class="line">  &quot;deb [arch=&quot;$(dpkg --print-architecture)&quot; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \</span><br><span class="line">  &quot;$(. /etc/os-release &amp;&amp; echo &quot;$VERSION_CODENAME&quot;)&quot; stable&quot; | \</span><br><span class="line">  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311102028368.png" alt="image-20231110100407513" /></p>
<p>接下来安装docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311102028314.png" alt="image-20231110100446286" /></p>
<p>测试docker helloworld</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311102028319.png" alt="image-20231110100628135" /></p>
<p>首先本地是没有docker的helloworld镜像的，所以他会首先从dockerhub拉取helloworld镜像，然后开始运行，到这里docker就安装完成了。</p>
<p>然后可以使用以下命令可以查看目前系统中有哪些docker镜像。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311102028329.png" alt="image-20231110101205930" /></p>
<h1 id="阿里云镜像加速"><a class="markdownIt-Anchor" href="#阿里云镜像加速"></a> 阿里云镜像加速</h1>
<p>由于国外的dockerhub太慢了。拉取一些镜像非常慢，所以就需要更换国内的源来进行加速</p>
<p>1、介绍：<a href="https://www.aliyun.com/product/acr">https://www.aliyun.com/product/acr</a></p>
<p>2、注册一个属于自己的阿里云账户(可复用淘宝账号)</p>
<p>3、进入管理控制台设置密码，开通</p>
<p>4、查看镜像加速器自己的</p>
<p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p>
<p>针对Docker客户端版本大于 1.10.0 的用户</p>
<p>您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://4cmfmhps.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311102028744.png" alt="image-20231110101800496" /></p>
<h1 id="docker常用命令"><a class="markdownIt-Anchor" href="#docker常用命令"></a> Docker常用命令</h1>
<h2 id="帮助命令"><a class="markdownIt-Anchor" href="#帮助命令"></a> 帮助命令</h2>
<p>docker version # 显示 Docker 版本信息。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311102028784.png" alt="image-20231110101930475" /></p>
<p>docker info # 显示 Docker 系统信息，包括镜像和容器数。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311102028763.png" alt="image-20231110101954091" /></p>
<p>docker --help # 帮助</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311102028769.png" alt="image-20231110102010973" /></p>
<h2 id="镜像命令"><a class="markdownIt-Anchor" href="#镜像命令"></a> 镜像命令</h2>
<h3 id="docker-images"><a class="markdownIt-Anchor" href="#docker-images"></a> docker images</h3>
<p>列出本地主机上的镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311102028775.png" alt="image-20231110102117914" /></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解释</span></span><br><span class="line">REPOSITORY 镜像的仓库源</span><br><span class="line">TAG 镜像的标签</span><br><span class="line">IMAGE ID 镜像的ID</span><br><span class="line">CREATED 镜像创建时间</span><br><span class="line">SIZE 镜像大小</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">同一个仓库源可以有多个 TAG，代表这个仓库源的不同版本，我们使用REPOSITORY：TAG 定义不同</span></span><br><span class="line">的镜像，如果你不定义镜像的标签版本，docker将默认使用 lastest 镜像！</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选项</span></span><br><span class="line">-a： 列出本地所有镜像</span><br><span class="line">-q： 只显示镜像id</span><br><span class="line">--digests： 显示镜像的摘要信息</span><br></pre></td></tr></table></figure>
<h3 id="docker-search"><a class="markdownIt-Anchor" href="#docker-search"></a> docker search</h3>
<p>搜索镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311102028862.png" alt="image-20231110102407460" /></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker search 某个镜像的名称 对应DockerHub仓库中的镜像</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选项</span></span><br><span class="line">--filter=stars=50 ： 列出收藏数不小于指定值的镜像。</span><br></pre></td></tr></table></figure>
<h3 id="docker-pull"><a class="markdownIt-Anchor" href="#docker-pull"></a> docker pull</h3>
<p>下载镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311102028173.png" alt="image-20231110102532256" /></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">不写tag，默认是latest</span></span><br><span class="line"> sha256:61a2a33f4b8b4bc93b7b6b9e65e64044aaec594809f818aeffbff69a893d1944 #</span><br><span class="line">签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest # 真实位置</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定版本下载</span></span><br><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>
<h3 id="docker-rmi"><a class="markdownIt-Anchor" href="#docker-rmi"></a> docker rmi</h3>
<p>删除镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除镜像</span></span><br><span class="line">docker rmi -f 镜像id # 删除单个</span><br><span class="line">docker rmi -f 镜像名:tag 镜像名:tag # 删除多个</span><br><span class="line">docker rmi -f $(docker images -qa) # 删除全部</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311102028206.png" alt="image-20231110102733970" /></p>
<h2 id="容器命令"><a class="markdownIt-Anchor" href="#容器命令"></a> 容器命令</h2>
<p>有镜像才能创建容器，狂神的是cenos，我这里肯定用ubuntu，线搜索一下ubuntu</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311102028184.png" alt="image-20231110103746806" /></p>
<p>然后我这里拉取ubuntu20.04的镜像：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull ubuntu:20.04</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311102028215.png" alt="image-20231110103933502" /></p>
<h3 id="docker-run"><a class="markdownIt-Anchor" href="#docker-run"></a> docker run</h3>
<p>新建容器并启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令</span></span><br><span class="line">docker run [OPTIONS] IMAGE [COMMAND][ARG...]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用参数说明</span></span><br><span class="line">--name=&quot;Name&quot; # 给容器指定一个名字</span><br><span class="line">-d # 后台方式运行容器，并返回容器的id！</span><br><span class="line">-i # 以交互模式运行容器，通过和 -t 一起使用</span><br><span class="line">-t # 给容器重新分配一个终端，通常和 -i 一起使用</span><br><span class="line">-P # 随机端口映射（大写）</span><br><span class="line">-p # 指定端口映射（小结），一般可以有四种写法</span><br><span class="line">ip:hostPort:containerPort</span><br><span class="line">ip::containerPort</span><br><span class="line">hostPort:containerPort (常用)</span><br><span class="line">containerPort</span><br></pre></td></tr></table></figure>
<p>先使用 docker images命令查看一下拉取的镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311102028178.png" alt="image-20231110104246665" /></p>
<p>使用ubuntu进行用交互模式启动容器，在容器内执行/bin/bash命令！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it ubuntu:20.04 /bin/bash</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311102028212.png" alt="image-20231110104414762" /></p>
<p>==注意，这里要添加tag标签，不然无法成功==</p>
<p>最后使用exit退出镜像即可。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311102028464.png" alt="image-20231110104527685" /></p>
<h3 id="docker-ps"><a class="markdownIt-Anchor" href="#docker-ps"></a> docker ps</h3>
<p>列出所有容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令</span></span><br><span class="line">docker ps [OPTIONS]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用参数说明</span></span><br><span class="line">-a # 列出当前所有正在运行的容器 + 历史运行过的容器</span><br><span class="line">-l # 显示最近创建的容器</span><br><span class="line">-n=? # 显示最近n个创建的容器</span><br><span class="line">-q # 静默模式，只显示容器编号。</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311102028606.png" alt="image-20231110104629549" /></p>
<h3 id="exit"><a class="markdownIt-Anchor" href="#exit"></a> exit</h3>
<p>退出容器</p>
<h3 id="docker-start"><a class="markdownIt-Anchor" href="#docker-start"></a> docker start</h3>
<p>启动容器</p>
<p>需要注意：==<code>docker run</code>用于创建和启动新的容器，并可以指定要在容器内执行的命令，而<code>docker start</code>仅用于启动已经存在但目前停止的容器。==</p>
<h3 id="docker-restart"><a class="markdownIt-Anchor" href="#docker-restart"></a> docker restart</h3>
<p>重启容器</p>
<h3 id="docker-stop"><a class="markdownIt-Anchor" href="#docker-stop"></a> docker stop</h3>
<p>停止容器</p>
<h3 id="docker-kill"><a class="markdownIt-Anchor" href="#docker-kill"></a> docker kill</h3>
<p>强制停止容器</p>
<h3 id="docker-rm"><a class="markdownIt-Anchor" href="#docker-rm"></a> docker rm</h3>
<p>删除容器</p>
<h2 id="其他常用命令"><a class="markdownIt-Anchor" href="#其他常用命令"></a> 其他常用命令</h2>
<h3 id="docker-run-d"><a class="markdownIt-Anchor" href="#docker-run-d"></a> docker run -d</h3>
<p>后台启动容器</p>
<h3 id="docker-logs-f-t-tail"><a class="markdownIt-Anchor" href="#docker-logs-f-t-tail"></a> docker logs -f -t --tail</h3>
<p>查看日志</p>
<h3 id="docker-top"><a class="markdownIt-Anchor" href="#docker-top"></a> docker top</h3>
<p>查看容器中运行的进程信息</p>
<h3 id="docker-inspect"><a class="markdownIt-Anchor" href="#docker-inspect"></a> docker inspect</h3>
<p>查看容器/镜像的元数据</p>
<h3 id="docker-exec-it"><a class="markdownIt-Anchor" href="#docker-exec-it"></a> docker exec -it</h3>
<p>进入正在运行的容器</p>
<h3 id="docker-cp"><a class="markdownIt-Anchor" href="#docker-cp"></a> docker cp</h3>
<p>从容器内拷贝文件到主机上</p>
<p>==一般用的不多吧，一般都是直接卷的挂载==</p>
<h1 id="docker-commit"><a class="markdownIt-Anchor" href="#docker-commit"></a> <strong>docker commit</strong></h1>
<p>从容器创建一个新的镜像，类似于虚拟机的快照相关的东西，但是后面的dockerfile实现的是一个形同的目的，所以这里直接去到dockerfile</p>
<h1 id="挂载卷"><a class="markdownIt-Anchor" href="#挂载卷"></a> 挂载卷</h1>
<p>这个方法很重要，以后的挂载构建镜像以及构系统源码进行编译都要用这个，但是后面的挂载我还不是很懂，这里后面要在看看。</p>
<h1 id="dockerfile"><a class="markdownIt-Anchor" href="#dockerfile"></a> DockerFile</h1>
<p>dockerfile是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本。</p>
<p>构建步骤：</p>
<p>1、编写DockerFile文件</p>
<p>2、docker build 构建镜像</p>
<p>3、docker run</p>
<p><strong>DockerFile****构建过程</strong></p>
<p><strong>基础知识：</strong></p>
<p>1、每条保留字指令都必须为大写字母且后面要跟随至少一个参数</p>
<p>2、指令按照从上到下，顺序执行</p>
<p>3、# 表示注释</p>
<p>4、每条指令都会创建一个新的镜像层，并对镜像进行提交</p>
<p><strong>流程：</strong></p>
<p>1、docker从基础镜像运行一个容器</p>
<p>2、执行一条指令并对容器做出修改</p>
<p>3、执行类似 docker commit 的操作提交一个新的镜像层</p>
<p>4、Docker再基于刚提交的镜像运行一个新容器</p>
<p>5、执行dockerfile中的下一条指令直到所有指令都执行完成！</p>
<p><strong>说明：</strong></p>
<p>从应用软件的角度来看，DockerFile，docker镜像与docker容器分别代表软件的三个不同阶段。</p>
<p>DockerFile 是软件的原材料 （代码）</p>
<p>Docker 镜像则是软件的交付品 （.apk）</p>
<p>Docker 容器则是软件的运行状态 （客户下载安装执行）</p>
<p>DockerFile 面向开发，Docker镜像成为交付标准，Docker容器则涉及部署与运维，三者缺一不可！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM # 基础镜像，当前新镜像是基于哪个镜像的</span><br><span class="line">MAINTAINER # 镜像维护者的姓名混合邮箱地址</span><br><span class="line">RUN # 容器构建时需要运行的命令</span><br><span class="line">EXPOSE # 当前容器对外保留出的端口</span><br><span class="line">WORKDIR # 指定在创建容器后，终端默认登录的进来工作目录，一个落脚点</span><br><span class="line">ENV # 用来在构建镜像过程中设置环境变量</span><br><span class="line">ADD # 将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包</span><br><span class="line">COPY # 类似ADD，拷贝文件和目录到镜像中！</span><br><span class="line">VOLUME # 容器数据卷，用于数据保存和持久化工作</span><br><span class="line">CMD # 指定一个容器启动时要运行的命令，dockerFile中可以有多个CMD指令，但只有最</span><br><span class="line">后一个生效！</span><br><span class="line">ENTRYPOINT # 指定一个容器启动时要运行的命令！和CMD一样</span><br><span class="line">ONBUILD # 当构建一个被继承的DockerFile时运行命令，父镜像在被子镜像继承后，父镜像的</span><br><span class="line">ONBUILD被触发</span><br></pre></td></tr></table></figure>
<p>编写完一个完整的dockerfile文件如下所示：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">20.04</span></span><br><span class="line"><span class="keyword">ARG</span> DEBIAN_FRONTEND=noninteractive</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get install -y --no-install-recommends \</span></span><br><span class="line"><span class="language-bash">       gnupg \</span></span><br><span class="line"><span class="language-bash">       gnupg1 \</span></span><br><span class="line"><span class="language-bash">       gpgv1 \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/*</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dpkg --add-architecture i386</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get -y upgrade \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get install -y --no-install-recommends \</span></span><br><span class="line"><span class="language-bash">       acl \</span></span><br><span class="line"><span class="language-bash">       aptly \</span></span><br><span class="line"><span class="language-bash">       aria2 \</span></span><br><span class="line"><span class="language-bash">       bc \</span></span><br><span class="line"><span class="language-bash">       binfmt-support \</span></span><br><span class="line"><span class="language-bash">       binutils \</span></span><br><span class="line"><span class="language-bash">       bison \</span></span><br><span class="line"><span class="language-bash">       btrfs-progs \</span></span><br><span class="line"><span class="language-bash">       build-essential \</span></span><br><span class="line"><span class="language-bash">       ca-certificates \</span></span><br><span class="line"><span class="language-bash">       ccache \</span></span><br><span class="line"><span class="language-bash">       cpio \</span></span><br><span class="line"><span class="language-bash">       cryptsetup \</span></span><br><span class="line"><span class="language-bash">       cryptsetup-bin \</span></span><br><span class="line"><span class="language-bash">       curl \</span></span><br><span class="line"><span class="language-bash">       debian-archive-keyring \</span></span><br><span class="line"><span class="language-bash">       debian-keyring \</span></span><br><span class="line"><span class="language-bash">       debootstrap \</span></span><br><span class="line"><span class="language-bash">       device-tree-compiler \</span></span><br><span class="line"><span class="language-bash">       dialog \</span></span><br><span class="line"><span class="language-bash">       dosfstools \</span></span><br><span class="line"><span class="language-bash">       f2fs-tools \</span></span><br><span class="line"><span class="language-bash">       fakeroot \</span></span><br><span class="line"><span class="language-bash">       flex \</span></span><br><span class="line"><span class="language-bash">       gawk \</span></span><br><span class="line"><span class="language-bash">       git \</span></span><br><span class="line"><span class="language-bash">       imagemagick \</span></span><br><span class="line"><span class="language-bash">       kmod \</span></span><br><span class="line"><span class="language-bash">       lib32ncurses6 \</span></span><br><span class="line"><span class="language-bash">       lib32stdc++6 \</span></span><br><span class="line"><span class="language-bash">       lib32tinfo6 \</span></span><br><span class="line"><span class="language-bash">       libbison-dev \</span></span><br><span class="line"><span class="language-bash">       libc6-dev-armhf-cross \</span></span><br><span class="line"><span class="language-bash">       libc6-i386 \</span></span><br><span class="line"><span class="language-bash">       libfile-fcntllock-perl \</span></span><br><span class="line"><span class="language-bash">       libfl-dev \</span></span><br><span class="line"><span class="language-bash">       liblz4-tool \</span></span><br><span class="line"><span class="language-bash">       libncurses5-dev \</span></span><br><span class="line"><span class="language-bash">       libpython2.7-dev \</span></span><br><span class="line"><span class="language-bash">       libpython3-dev \</span></span><br><span class="line"><span class="language-bash">       libssl-dev \</span></span><br><span class="line"><span class="language-bash">       libusb-1.0-0-dev \</span></span><br><span class="line"><span class="language-bash">       linux-base \</span></span><br><span class="line"><span class="language-bash">       locales \</span></span><br><span class="line"><span class="language-bash">       lsb-release \</span></span><br><span class="line"><span class="language-bash">       lzop \</span></span><br><span class="line"><span class="language-bash">       ncurses-base \</span></span><br><span class="line"><span class="language-bash">       ncurses-term \</span></span><br><span class="line"><span class="language-bash">       nfs-kernel-server \</span></span><br><span class="line"><span class="language-bash">       ntpdate \</span></span><br><span class="line"><span class="language-bash">       p7zip-full \</span></span><br><span class="line"><span class="language-bash">       parted \</span></span><br><span class="line"><span class="language-bash">       patchutils \</span></span><br><span class="line"><span class="language-bash">       pigz \</span></span><br><span class="line"><span class="language-bash">       pixz \</span></span><br><span class="line"><span class="language-bash">       pkg-config \</span></span><br><span class="line"><span class="language-bash">       psmisc \</span></span><br><span class="line"><span class="language-bash">       pv \</span></span><br><span class="line"><span class="language-bash">       python2 \</span></span><br><span class="line"><span class="language-bash">       python3 \</span></span><br><span class="line"><span class="language-bash">       python3-dev \</span></span><br><span class="line"><span class="language-bash">       python3-distutils \</span></span><br><span class="line"><span class="language-bash">       qemu-user-static \</span></span><br><span class="line"><span class="language-bash">       rsync \</span></span><br><span class="line"><span class="language-bash">       swig \</span></span><br><span class="line"><span class="language-bash">       systemd-container \</span></span><br><span class="line"><span class="language-bash">       tzdata \</span></span><br><span class="line"><span class="language-bash">       u-boot-tools \</span></span><br><span class="line"><span class="language-bash">       udev \</span></span><br><span class="line"><span class="language-bash">       unzip \</span></span><br><span class="line"><span class="language-bash">       uuid-dev \</span></span><br><span class="line"><span class="language-bash">       wget \</span></span><br><span class="line"><span class="language-bash">       whiptail \</span></span><br><span class="line"><span class="language-bash">       xxd \</span></span><br><span class="line"><span class="language-bash">       zip \</span></span><br><span class="line"><span class="language-bash">       zlib1g-dev \</span></span><br><span class="line"><span class="language-bash">       zlib1g:i386 \</span></span><br><span class="line"><span class="language-bash">       sudo \</span></span><br><span class="line"><span class="language-bash">       vim \</span></span><br><span class="line"><span class="language-bash">       uuid \</span></span><br><span class="line"><span class="language-bash">       uuid-dev \</span></span><br><span class="line"><span class="language-bash">       zlib1g-dev \</span></span><br><span class="line"><span class="language-bash">       liblz-dev \</span></span><br><span class="line"><span class="language-bash">       liblzo2-2 \</span></span><br><span class="line"><span class="language-bash">       liblzo2-dev \</span></span><br><span class="line"><span class="language-bash">       lzop \</span></span><br><span class="line"><span class="language-bash">       git \</span></span><br><span class="line"><span class="language-bash">       curl \</span></span><br><span class="line"><span class="language-bash">       u-boot-tools \</span></span><br><span class="line"><span class="language-bash">       mtd-utils \</span></span><br><span class="line"><span class="language-bash">       openjdk-8-jdk \</span></span><br><span class="line"><span class="language-bash">       device-tree-compiler \</span></span><br><span class="line"><span class="language-bash">       gdisk \</span></span><br><span class="line"><span class="language-bash">       m4 \</span></span><br><span class="line"><span class="language-bash">       zlib1g-dev \</span></span><br><span class="line"><span class="language-bash">       git \</span></span><br><span class="line"><span class="language-bash">       gnupg \</span></span><br><span class="line"><span class="language-bash">       flex \</span></span><br><span class="line"><span class="language-bash">       bison \</span></span><br><span class="line"><span class="language-bash">       gperf \</span></span><br><span class="line"><span class="language-bash">       libsdl1.2-dev \</span></span><br><span class="line"><span class="language-bash">       libesd-java \</span></span><br><span class="line"><span class="language-bash">       squashfs-tools \</span></span><br><span class="line"><span class="language-bash">       build-essential \</span></span><br><span class="line"><span class="language-bash">       zip \</span></span><br><span class="line"><span class="language-bash">       curl \</span></span><br><span class="line"><span class="language-bash">       libncurses5-dev \</span></span><br><span class="line"><span class="language-bash">       zlib1g-dev \</span></span><br><span class="line"><span class="language-bash">       pngcrush \</span></span><br><span class="line"><span class="language-bash">       schedtool \</span></span><br><span class="line"><span class="language-bash">       libxml2 \</span></span><br><span class="line"><span class="language-bash">       libxml2-utils \</span></span><br><span class="line"><span class="language-bash">       xsltproc \</span></span><br><span class="line"><span class="language-bash">       lzop \</span></span><br><span class="line"><span class="language-bash">       libc6-dev \</span></span><br><span class="line"><span class="language-bash">       schedtool \</span></span><br><span class="line"><span class="language-bash">       g++-multilib \</span></span><br><span class="line"><span class="language-bash">       lib32z1-dev \</span></span><br><span class="line"><span class="language-bash">       lib32ncurses-dev \</span></span><br><span class="line"><span class="language-bash">       lib32readline-dev \</span></span><br><span class="line"><span class="language-bash">       gcc-multilib \</span></span><br><span class="line"><span class="language-bash">       libswitch-perl \</span></span><br><span class="line"><span class="language-bash">       libssl-dev \</span></span><br><span class="line"><span class="language-bash">       unzip \</span></span><br><span class="line"><span class="language-bash">       zip \</span></span><br><span class="line"><span class="language-bash">       liblz4-tool \</span></span><br><span class="line"><span class="language-bash">       git \</span></span><br><span class="line"><span class="language-bash">       ssh \</span></span><br><span class="line"><span class="language-bash">       make \</span></span><br><span class="line"><span class="language-bash">       gcc \</span></span><br><span class="line"><span class="language-bash">       libssl-dev \</span></span><br><span class="line"><span class="language-bash">       liblz4-tool \</span></span><br><span class="line"><span class="language-bash">       vim \</span></span><br><span class="line"><span class="language-bash">       expect \</span></span><br><span class="line"><span class="language-bash">       g++ \</span></span><br><span class="line"><span class="language-bash">       patchelf \</span></span><br><span class="line"><span class="language-bash">       chrpath \</span></span><br><span class="line"><span class="language-bash">       gawk \</span></span><br><span class="line"><span class="language-bash">       texinfo \</span></span><br><span class="line"><span class="language-bash">       chrpath \</span></span><br><span class="line"><span class="language-bash">       diffstat \</span></span><br><span class="line"><span class="language-bash">       binfmt-support \</span></span><br><span class="line"><span class="language-bash">       qemu-user-static \</span></span><br><span class="line"><span class="language-bash">       live-build \</span></span><br><span class="line"><span class="language-bash">       bison \</span></span><br><span class="line"><span class="language-bash">       flex \</span></span><br><span class="line"><span class="language-bash">       fakeroot \</span></span><br><span class="line"><span class="language-bash">       cmake \</span></span><br><span class="line"><span class="language-bash">       gcc-multilib \</span></span><br><span class="line"><span class="language-bash">       g++-multilib \</span></span><br><span class="line"><span class="language-bash">       unzip \</span></span><br><span class="line"><span class="language-bash">       device-tree-compiler \</span></span><br><span class="line"><span class="language-bash">       python3-pip \</span></span><br><span class="line"><span class="language-bash">       libncurses5-dev \</span></span><br><span class="line"><span class="language-bash">       rsync \</span></span><br><span class="line"><span class="language-bash">       subversion \</span></span><br><span class="line"><span class="language-bash">       sed \</span></span><br><span class="line"><span class="language-bash">       make \</span></span><br><span class="line"><span class="language-bash">       binutils \</span></span><br><span class="line"><span class="language-bash">       build-essential \</span></span><br><span class="line"><span class="language-bash">       gcc \</span></span><br><span class="line"><span class="language-bash">       g++ \</span></span><br><span class="line"><span class="language-bash">       wget \</span></span><br><span class="line"><span class="language-bash">       python-is-python2 \</span></span><br><span class="line"><span class="language-bash">       libncurses5 \</span></span><br><span class="line"><span class="language-bash">       bzr \</span></span><br><span class="line"><span class="language-bash">       cvs \</span></span><br><span class="line"><span class="language-bash">       git \</span></span><br><span class="line"><span class="language-bash">       mercurial \</span></span><br><span class="line"><span class="language-bash">       patch \</span></span><br><span class="line"><span class="language-bash">       gzip \</span></span><br><span class="line"><span class="language-bash">       bzip2 \</span></span><br><span class="line"><span class="language-bash">       perl \</span></span><br><span class="line"><span class="language-bash">       tar \</span></span><br><span class="line"><span class="language-bash">       cpio \</span></span><br><span class="line"><span class="language-bash">       unzip \</span></span><br><span class="line"><span class="language-bash">       rsync \</span></span><br><span class="line"><span class="language-bash">       file \</span></span><br><span class="line"><span class="language-bash">       bc \</span></span><br><span class="line"><span class="language-bash">       wget \</span></span><br><span class="line"><span class="language-bash">       qemu-user-static \</span></span><br><span class="line"><span class="language-bash">       live-build \</span></span><br><span class="line"><span class="language-bash">       android-sdk-libsparse-utils \</span></span><br><span class="line"><span class="language-bash">       android-sdk-ext4-utils \</span></span><br><span class="line"><span class="language-bash">       time \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/* \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">rm</span> -rf /usr/bin/python \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; sudo <span class="built_in">ln</span> -s /usr/bin/python3 /usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> locale-gen en_US.UTF-8</span></span><br><span class="line"><span class="keyword">ENV</span> LANG=<span class="string">&#x27;en_US.UTF-8&#x27;</span> LANGUAGE=<span class="string">&#x27;en_US:en&#x27;</span> LC_ALL=<span class="string">&#x27;en_US.UTF-8&#x27;</span> TERM=screen</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /home/topeet</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;/bin/bash&quot;</span>]</span></span><br></pre></td></tr></table></figure>
<p>运行构建docker的命令如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -f Dockerfile -t ubuntu20:1 .</span><br></pre></td></tr></table></figure>
<p>==注意最后有个.表示当前目录~~我说呢==</p>
<p>然后运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it ubuntu20:1</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311102028618.png" alt="image-20231110130235371" /></p>
<p>运行成功证明构建的没问题，然后打包ubuntu20：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker save -o image.tar.gz ubuntu20:1</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311102028624.png" alt="image-20231110135153759" /></p>
<p>r然后在其他电脑上只需要使用下面的命令加载镜像即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker load -i image.tar.gz</span><br></pre></td></tr></table></figure>
<p>最后测试挂载然后编译：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --privileged -it -v /home/topeet/Linux/ubuntu20_build:/home/topeet/ubuntu20_build ubuntu20:1</span><br></pre></td></tr></table></figure>
<p>其中  --privileged是必须要加的，否则构建系统的时候会有权限问题。构建ubuntu20文件系统通过，没有任何问题：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202311102028650.png" alt="image-20231110144134276" /></p>
<p>然后测试编译Linux源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --privileged -it -v /home/topeet/Linux/3588-linux:/home/topeet/3588-linux ubuntu20:1</span><br></pre></td></tr></table></figure>
<p>测试没有什么问题，编译的时间太长了，晚上再测。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --privileged -it -v /home/topeet/Android/3588-android12:/home/topeet/3588-android12 ubuntu20:1</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
  </entry>
  <entry>
    <title>音视频测试</title>
    <url>/2023/10/26/4%20%E9%9F%B3%E8%A7%86%E9%A2%91%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1gst-play-10测试"><a class="markdownIt-Anchor" href="#1gst-play-10测试"></a> 1.gst-play-1.0测试</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gst-play-1.0 --videosink=xvimagesink /usr/local/test.mp4</span><br></pre></td></tr></table></figure>
<p>GStreamer 的 gst-play-1.0 工具会加载指定的视频文件，并使用 xvimagesink 插件将视频渲染到 X Window 系统上的显示设备上，以实现视频的播放效果。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310260944983.png" alt="image-20231026094404955" /></p>
<h1 id="2mpv测试"><a class="markdownIt-Anchor" href="#2mpv测试"></a> 2.mpv测试</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mpv --hwdec=rkmpp --vd-lavc-software-fallback=no --vo=xv /usr/local/test.mp4        </span><br></pre></td></tr></table></figure>
<p>mpv 媒体播放器将使用 Rockchip MPP 硬件解码器进行硬件解码，禁用软件回退以确保只使用硬件解码，并使用 xv 视频输出插件渲染视频，以实现高性能的视频播放效果。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310260945251.png" alt="image-20231026094504212" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mpv --hwdec=rkmpp --vo=opengl --gpu-hwdec-interop=drmprime-drm --gpu-context=x11egl /usr/local/test.mp4</span><br></pre></td></tr></table></figure>
<p>mpv 媒体播放器将使用 Rockchip MPP 硬件解码器进行硬件解码，使用 OpenGL 作为视频输出，同时启用 DRM Prime 与 DRM 之间的 GPU 硬件解码器互操作性，并使用 X11 EGL 上下文进行 GPU 加速，以实现高性能的视频播放效果。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310260943085.png" alt="image-20231026094341042" /></p>
<h1 id="3-gst-launch-10-测试"><a class="markdownIt-Anchor" href="#3-gst-launch-10-测试"></a> 3. gst-launch-1.0 测试</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GST_DEBUG=fps*:7 gst-launch-1.0 uridecodebin uri=file:///usr/local/test.mp4 ! fpsdisplaysink video-sink=xvimagesink text-overlay=false signal-fps-measurements=true</span><br></pre></td></tr></table></figure>
<p>GStreamer 的 gst-launch-1.0 工具将创建一个简单的流水线，其中包含 <code>uridecodebin</code> 元素用于解码指定的视频文件，并通过 <code>fpsdisplaysink</code> 元素显示视频和帧率信息。帧率信息将以调试输出的形式显示在终端上。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310261008898.png" alt="image-20231026100859800" /></p>
<p>测试最大的帧率</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GST_DEBUG=fps*:7 gst-launch-1.0 uridecodebin uri=file:///usr/local/test.mp4 ! fpsdisplaysink video-sink=fakesink text-overlay=false signal-fps-measurements=true sync=false</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310261010578.png" alt="image-20231026101009531" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gst-launch-1.0 uridecodebin uri=file:///usr/local/test.mp4 ! xvimagesink</span><br></pre></td></tr></table></figure>
<h1 id="4谷歌浏览器测试"><a class="markdownIt-Anchor" href="#4谷歌浏览器测试"></a> 4.谷歌浏览器测试</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 0x100 &gt; /sys/module/rk_vcodec/parameters/mpp_dev_debug</span><br><span class="line">chromium --no-sandbox file:///usr/local/test.mp4</span><br></pre></td></tr></table></figure>
<p>Chromium 浏览器将在没有沙盒的情况下启动，并加载指定路径的 <code>test.mp4</code> 视频文件。这样，您可以在浏览器中直接播放本地视频文件。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310261014311.png" alt="image-20231026101406276" /></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310261018085.png" alt="image-20231026101842048" /></p>
<p>播放视频的时候查看GPU的利用率发现明显的上升，所以判断谷歌浏览器为硬件解码。</p>
<h1 id="5摄像头测试"><a class="markdownIt-Anchor" href="#5摄像头测试"></a> 5.摄像头测试</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/aarch64-linux-gnu/gstreamer-1.0</span><br><span class="line">gst-launch-1.0 v4l2src device=/dev/video0 ! video/x-raw,format=NV12,width=1920,height=1080, framerate=30/1 ! xvimagesink</span><br><span class="line">gst-launch-1.0 v4l2src device=/dev/video1 ! video/x-raw,format=NV12,width=1920,height=1080, framerate=30/1 ! xvimagesink</span><br></pre></td></tr></table></figure>
<p>我发现不加上第一句的库的导入会出现发绿的情况，而且是0发绿，1没事，不加第一句的话1的颜色不太对</p>
<p>gst-launch-1.0 v4l2src device=/dev/video9 ! image/jpeg, width=640, height=480, framerate=30/1 ! jpegparse ! mppjpegdec ! xvimagesink sync=false</p>
<h1 id="6mpp测试"><a class="markdownIt-Anchor" href="#6mpp测试"></a> 6.mpp测试</h1>
<p>首先要监控输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail -f /var/log/syslog</span><br></pre></td></tr></table></figure>
<p>调用mpi_dec_test，解码视频，将<a href="https://so.csdn.net/so/search?q=h264&amp;spm=1001.2101.3001.7020">h264</a>转为yuv</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mpi_dec_test -i /oem/200frames_count.h264 -t 7 -n 250 -o /home/topeet/test.yuv -w 640 -h 480</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310261707707.png" alt="image-20231026170732680" /></p>
<p>调用mpi_enc_test，编码视频，将yuv转为h264</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mpi_enc_test -i /home/topeet/test.yuv -t 7 -n 250 -o /home/topeet/test.h264 -w 640 -h 480 -fps 25</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310261712235.png" alt="image-20231026171223218" /></p>
]]></content>
      <categories>
        <category>瑞芯微</category>
      </categories>
  </entry>
  <entry>
    <title>如何构建deb包</title>
    <url>/2023/10/19/14%20%E6%9E%84%E5%BB%BAdeb%E5%8C%85.md/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1三个核心概念"><a class="markdownIt-Anchor" href="#1三个核心概念"></a> 1.三个核心概念</h1>
<p>三个最核心的概念为：</p>
<ul>
<li>上游原始代码包（upstream tarball）:
<ul>
<li>通常，人们为上游开发者（通常为第三方）编写的软件打包。</li>
<li>上游开发者会使用源代码归档软件或原始代码包的方式发放他们的软件。</li>
<li>原始代码包一般是上游制作的 <code>.tar.gz</code> 或 <code>.tgz</code> 文件，它也可能被压缩成 <code>.tar.bz2</code>，<code>.tb2</code> 或 <code>.tar.xz</code> 格式。原始代码包就是 Debian 构建包时使用的原材料。</li>
</ul>
</li>
<li>源码包：
<ul>
<li>当您拥有了上游制作的原始代码包，下一步就可以制作 Debian 源码包了。</li>
</ul>
</li>
<li>二进制包：
<ul>
<li>从源码包您可以构建 Debian 二进制包，它才是是实际上会被安装的包。</li>
</ul>
</li>
</ul>
<p>最简单的源码包由3个文件组成：</p>
<ul>
<li>上游原始代码包，需要被重命名来符合一个特定的模式。</li>
<li>一个 debian 目录，带有所有上游源代码的更改记录，外加所有为 Debian 打包系统生成的所有文件。这种包拥有 <code>.debian.tar.gz</code> 的文件名。</li>
<li>一个描述文件（以 <code>.dsc</code> 结尾），罗列了其他两个文件。</li>
</ul>
<p>听起来有些过于复杂，人们的第一印象是：所有东西都放在一个文件里会更简单。然而，保持上游代码包与 Debian 特定更改分离可以节省大量磁盘空间和带宽。对 Debian 来说，追踪必要的修改也更加简单。</p>
<h1 id="2-deb包制作流程"><a class="markdownIt-Anchor" href="#2-deb包制作流程"></a> 2. deb包制作流程</h1>
<p>首先创建一个debian目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> debian</span><br></pre></td></tr></table></figure>
<p>我们需要提供不少文件，让我们按顺序来看。</p>
<h2 id="21-debianchangelog"><a class="markdownIt-Anchor" href="#21-debianchangelog"></a> 2.1 debian/changelog</h2>
<p>第一个文件是 <code>debian/changelog</code>，这个是记录 Debian 包变化的日志文件。它无需罗列出上游代码的每一个改变，只要它能帮助用户总结这些变化即可。我们在制作第一个版本，所以这里应当什么都没有。然而，我们仍需制作一个变化日志的入口，因为打包工具会从日志里读取特定信息。最重要的是它会读取包的版本。</p>
<p><code>debian/changelog</code> 拥有一个十分特殊的格式。最简单的创建方式就是使用 <code>dch</code> 工具。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install devscripts</span><br><span class="line">dch --create -v 1.0-1 --package hithere</span><br></pre></td></tr></table></figure>
<p>会在文件中产生以下内容：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310092059083.png" alt="image-20231009205902071" /></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310092058676.png" alt="image-20231009205839642" /></p>
<p>这里有很多注意点：</p>
<p><code>hithere</code> 部分必须与源代码包的名字相同。<code>1.0-1</code> 是版本号，<code>1.0</code> 部分是上游版本号。<code>-1</code> 部分是 Debian 的版本：它是第一个上游版本为 <code>1.0</code> 的 Debian 包。如果这个 Debian 包有错误，并且被修复了，那么上游版本号仍保持相同，下一个版本应当被叫做 <code>1.0-2</code>，接下来是 <code>1.0-3</code>，依此类推。</p>
<p>UNRELEASED 被称作上传目标。它会告诉上传工具这个二进制包应当被上传到哪里。UNRELEASED 意味着这个包还没有做好上传的准备。保持 UNRELEASED 是一个好主意，以避免您错误上传它。</p>
<p>目前请先忽略 <code>urgency=medium</code>。</p>
<p><code>(Closes：#XXXXXX)</code> 作用在于上传包时关闭错误。这是在 Debian 中关闭错误的常用方法：当上传修复错误的包时，错误跟踪器会注意到这一点，并将错误标记为已关闭。我们可以删除 <code>(Closes...)</code> 位</p>
<h2 id="22-debiancontrol"><a class="markdownIt-Anchor" href="#22-debiancontrol"></a> 2.2 debian/control</h2>
<p>控制文件描述代码和二进制包，并给出他们的详细信息，比如名称、包的维护者是谁，等等。下面是一个示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Source: hithere</span><br><span class="line">Maintainer: Lars Wirzenius &lt;liw@liw.fi&gt;</span><br><span class="line">Section: misc</span><br><span class="line">Priority: optional</span><br><span class="line">Standards-Version: 3.9.2</span><br><span class="line">Build-Depends: debhelper (&gt;= 9)</span><br><span class="line"></span><br><span class="line">Package: hithere</span><br><span class="line">Architecture: any</span><br><span class="line">Depends: $&#123;shlibs:Depends&#125;, $&#123;misc:Depends&#125;</span><br><span class="line">Description: greet user</span><br><span class="line"> hithere greets the user, or the world.</span><br></pre></td></tr></table></figure>
<p>在这个文件里有许多需求的字段，但是现在您可以像对待魔法一样对待它。那么，在 <code>debian/control</code> 中有两段文字。</p>
<p>第一段文字描述了源代码包，使用以下字段：</p>
<h3 id="221-source"><a class="markdownIt-Anchor" href="#221-source"></a> 2.2.1 Source</h3>
<p>源代码包名。</p>
<h3 id="222-maintainer"><a class="markdownIt-Anchor" href="#222-maintainer"></a> 2.2.2 Maintainer</h3>
<p>维护者的姓名和电子邮箱。</p>
<h3 id="223-priority"><a class="markdownIt-Anchor" href="#223-priority"></a> 2.2.3 Priority</h3>
<p>包的重要性（‘required 可选的’, ‘important 重要的’, ‘standard 标准’ 或 ‘optional’ 其中之一）。通常，包是“可选”的，除非它对于标准系统功能是“必不可少的”，即启动或网络功能。 如果包与另一个“可选”包冲突，或者它不打算用于标准桌面安装，则应该是“额外”的而不是“可选”的。 “额外”包的显着例子是调试包。 （由Sebastian Tennant添加）。</p>
<h3 id="224-build-depends"><a class="markdownIt-Anchor" href="#224-build-depends"></a> 2.2.4 Build-Depends</h3>
<p>需要安装以构建程序包的程序包列表。实际使用包时有可能需要它们。</p>
<p>第一个之后的所有段落都描述了从此源构建的二进制包。 可以有许多从同一来源构建的二进制包; 但对于我们的例子只有一个。 我们使用这些字段：</p>
<h3 id="225-package"><a class="markdownIt-Anchor" href="#225-package"></a> 2.2.5 Package</h3>
<p>二进制包的名称。 名称可能与源包名称不同。</p>
<h3 id="226-architecture"><a class="markdownIt-Anchor" href="#226-architecture"></a> 2.2.6 Architecture</h3>
<p>指定二进制包预期使用的计算机体系结构：用于32位Intel CPU的i386，用于64位的amd64，用于ARM处理器的armel等等。 Debian总共可以处理大约十几种计算机体系结构，因此这种体系结构支持至关重要。 “Architecture”字段可以包含特定体系结构的名称，但通常它包含两个特殊值中的一个。</p>
<p>any<br />
（我们在示例中看到）意味着可以为任何体系结构构建包。 换句话说，代码是可移植的，因此它不会对硬件做太多假设。 但是，仍然需要为每个体系结构单独构建二进制包。</p>
<p>all<br />
意味着相同的二进制包将适用于所有体系结构，而无需为每个体系结构单独构建。 例如，仅包含shell脚本的包将是“all”。 Shell脚本在任何地方都可以工作，不需要编译。</p>
<h3 id="227-depends"><a class="markdownIt-Anchor" href="#227-depends"></a> 2.2.7 Depends</h3>
<p>为了让二进制包中程序能够正常运行，需要安装的包列表。手动列出这些依赖项是繁琐且容易出错的工作。为了能够让其工作，我们需要一个神奇的小东西 <code>$&#123;shlibs:Depends&#125;</code>。另一个神奇的东西是给 <code>debhelper</code> 的，它是 <code>$&#123;misc:Depends&#125;</code>。shlibs 是为了动态链接库，而 misc 是为了 <code>debherlper</code> 的一些工作。对于别的依赖，您可以将其手动加入到 <code>Depends</code> 或 <code>Build-Depends</code> 中。但请注意，<code>$&#123;...&#125;</code> 仅在 <code>Depends</code> 中有效。</p>
<h3 id="228-description"><a class="markdownIt-Anchor" href="#228-description"></a> 2.2.8 Description</h3>
<p>二进制包的完整描述。它希望对用户有所帮助。第一行用作简要概要（摘要）描述，其余部分是包的更长的描述。<br />
命令 <code>cme edit dpkg</code> 提供了一个GUI能够用来编辑大多数打包文件，包括 <code>debian/control</code>。 请参阅使用 <code>cme</code> 页面管理 <code>Debian</code> 软件包。<code>cme</code>命令在 Debian 中的 <code>cme</code> 包中提供。您也可以使用 <code>cme edit dpkg-control</code> 命令仅编辑 <code>debian/control</code> 文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Source: linux-rockchip-5.10.110</span><br><span class="line">Section: kernel</span><br><span class="line">Priority: optional</span><br><span class="line">Standards-Version: 4.6.0</span><br><span class="line">Build-Depends: bc, rsync, kmod, cpio, build-essential, u-boot-tools, bison, python3 | python, python-is-python3 | python-is-python2, flex | flex:native , , libssl-dev:native</span><br></pre></td></tr></table></figure>
<h2 id="23-debiancopyright"><a class="markdownIt-Anchor" href="#23-debiancopyright"></a> 2.3 debian/copyright</h2>
<p>这是一个非常重要的文件，但是现在我们将先使用一个空文件。<br />
对于 Debian ，此文件用于跟踪有关包的合法性、版权相关信息。但是，从技术角度来看，这并不重要。目前，我们将专注于技术方面。如果有兴趣，我们可以稍后再回到 <code>debian/copyright</code>。</p>
<h2 id="24-debianrules"><a class="markdownIt-Anchor" href="#24-debianrules"></a> 2.4 debian/rules</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/make -f</span><br><span class="line">%:</span><br><span class="line">        dh $@</span><br></pre></td></tr></table></figure>
<p><strong>注意： 最后一行应当使用一个 Tab 字符进行缩进，而不使用空格。这个文件是一个 Makefile，因此 Tab 字符是 make 所期望的。</strong></p>
<p>事实上 <code>debian/rules</code> 可能是一个相当复杂的文件。然而，在 <code>debhelper 7</code> 中的 <code>dh</code> 命令让它可以在大多数情况下变得更简单。</p>
<h2 id="25-debiansourceformat"><a class="markdownIt-Anchor" href="#25-debiansourceformat"></a> 2.5 debian/source/format</h2>
<p>最后一个我们需要的文件是 <code>debian/source/format</code>，它应当包含源代码包的版本号，这里为 <code>3.0 (quilt)</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3.0 (quilt)</span><br></pre></td></tr></table></figure>
<h1 id="3实例制作一个包"><a class="markdownIt-Anchor" href="#3实例制作一个包"></a> 3.实例制作一个包</h1>
<ul>
<li>changelog: 文件记录了deb包的作者、版本以及最后一次更新日期等信息；</li>
<li>control: 文件记录了包名、版本号、架构、维护者及描述等信息；</li>
<li>copyright: 文件记录了一些版权信息；</li>
<li>postinst: 软件在进行正常目录文件拷贝到系统后需要执行的脚本。</li>
<li>postrm文件: 软件卸载后需要执行的脚本。</li>
</ul>
<p>这里以昨天编译的opencv静态库和动态库为例进行deb的打包</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310192125627.png" alt="image-20231019212535607" /></p>
<p>为了不影响两个包，我这里就单独创建一个deb目录了，然后拷贝动态opencv库，拷贝完成如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310192129240.png" alt="image-20231019212906221" /></p>
<p>然后创建DEBIAN目录，在DEBIAN目录下创建三个文件，命令如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir DEBIAN </span><br><span class="line"></span><br><span class="line">touch DEBIAN/control</span><br></pre></td></tr></table></figure>
<p>但是我感觉我可以不用这些~~，我能安装上就行了，为啥还要有这些说明呢，现在还不需要呢，就先这样.</p>
<p>但是control这个是必须要添加的,向DEBIAN/control文件中写入以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Package: opencv-deb</span><br><span class="line">Version: 1.0.0</span><br><span class="line">Section: free</span><br><span class="line">Priority: optional</span><br><span class="line">Essential: no</span><br><span class="line">Architecture: arm64</span><br><span class="line">Maintainer: topeet &lt;topeet@topeet&gt;</span><br><span class="line">Provides: opencv_deb</span><br><span class="line">Description: opencv 4.8.0</span><br></pre></td></tr></table></figure>
<p>然后使用以下命令构建deb包：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpkg-deb -b ../deb ../opencv_4_8.0_arm64.deb</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310192137781.png" alt="image-20231019213754765" /></p>
<p>在上一级的目录下就创建了该目录</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310192138990.png" alt="image-20231019213855976" /></p>
<p>可以使用以下命令查看deb包的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpkg -c opencv_4_8.0_arm64.deb</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310192141793.png" alt="image-20231019214105760" /></p>
<p>使用以下命令查看deb包的信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpkg --info  opencv_4_8.0_arm64.deb</span><br></pre></td></tr></table></figure>
<p>可以看到该包的信息就被打印了出来，也就是我们在上面填写的DEBIAN/control的内容</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310192142227.png" alt="image-20231019214247209" /></p>
<p>我现在这个包是arm64架构的，但是我想在虚拟机ubuntu上用，那我要怎么办呢，实际上是可以强制安装的，在-i参数前面加入一个–force-depends 参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpkg --force-depends -i opencv_4_8.0_arm64.deb</span><br></pre></td></tr></table></figure>
<p>然鹅发现还是不行，看来这个架构问题是永远改不了的呀，伤心了</p>
<p>还是解包吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpkg --unpack opencv_4_8.0_arm64.deb</span><br></pre></td></tr></table></figure>
<p>因为体系不行解包都不行，因为这个也类似于安装</p>
<p>只是解压应该用这个命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpkg -x  opencv_4_8.0_arm64.deb opencv</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310192151417.png" alt="image-20231019215145390" /></p>
<p>这就好了，搞到这个地方应该就可以了，我认为。ok，那就先这样。</p>
]]></content>
      <categories>
        <category>瑞芯微</category>
      </categories>
  </entry>
  <entry>
    <title>buildroot的学习</title>
    <url>/2023/10/16/2%20buildroot%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>buildroot官网地址：<a href="https://buildroot.org/">https://buildroot.org/</a></p>
<p>github链接：<a href="https://github.com/buildroot/buildroot">https://github.com/buildroot/buildroot</a></p>
<p>两个指导文档</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310162227581.png" alt="image-20231016222739549" /></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310162227750.png" alt="image-20231016222749732" /></p>
<h1 id="1拉取buildroot"><a class="markdownIt-Anchor" href="#1拉取buildroot"></a> 1.拉取buildroot</h1>
<p>拉取下载buildroot</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/buildroot/buildroot</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310170757701.png" alt="image-20231017075747677" /></p>
<p>建议以普通用户来进行操作，buildroot管饭极力推荐普通用户</p>
<h1 id="2help帮助菜单"><a class="markdownIt-Anchor" href="#2help帮助菜单"></a> 2.help帮助菜单</h1>
<p>所有的交互都是通过在主构建根源目录中调用make来实现的，可以通过make help来获取帮助，具体内容如下所示：</p>
<p><strong>清理：</strong><br />
clean - 删除构建生成的所有文件<br />
distclean - 删除所有非源代码文件（包括.config文件）</p>
<p><strong>构建：</strong><br />
all - 构建整个系统<br />
toolchain - 构建工具链<br />
sdk - 构建可移植的SDK</p>
<p><strong>配置：</strong><br />
menuconfig - 交互式基于curses的配置工具<br />
nconfig - 交互式基于ncurses的配置工具<br />
xconfig - 交互式基于Qt的配置工具<br />
gconfig - 交互式基于GTK的配置工具<br />
oldconfig - 解决.config文件中的未解决符号<br />
syncconfig - 与oldconfig相同，但静默执行，并更新依赖关系<br />
olddefconfig - 与syncconfig相同，但将新符号设置为默认值<br />
randconfig - 随机回答所有选项的新配置<br />
<strong>defconfig - 所有选项都使用默认答案的新配置；如果在命令行上设置了BR2_DEFCONFIG，则使用其作为输入</strong><br />
<strong>savedefconfig - 将当前配置保存到BR2_DEFCONFIG（最小配置）</strong></p>
<p>​		上面的这两个应该是在配置里面最有用的那一个，默认情况下这个BR2_DEFCONFIG并不会被设置，所以只能是配置完成之后，第一次是一定要设置的。特殊记忆一下。</p>
<p>​	update-defconfig - 与savedefconfig相同<br />
​	allyesconfig - 所有选项都接受yes答案的新配置<br />
​	allnoconfig - 所有选项都使用no答案的新配置<br />
​	alldefconfig - 所有选项都设置为默认值的新配置<br />
​	randpackageconfig - 随机回答包选项的新配置<br />
​	allyespackageconfig - 所有包选项都接受yes答案的新配置<br />
​	allnopackageconfig - 所有包选项都使用no答案的新配置</p>
<p><strong>针对特定软件包：</strong><br />
<pkg> - 构建并安装<pkg>及其所有依赖项<br />
<pkg>-source - 仅下载<pkg>的源代码文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make opencv4-source</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310170818453.png" alt="image-20231017081853414" /></p>
<p>​	<pkg>-extract - 提取<pkg>的源代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make opencv4-extract</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310170819393.png" alt="image-20231017081936374" /></p>
<p>​	<pkg>-patch - 对<pkg>应用补丁</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make opencv4-patch</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310170821298.png" alt="image-20231017082105272" />	<pkg>-depends - 构建<pkg>的依赖项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make opencv4-depends</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310170821715.png" alt="image-20231017082141682" /></p>
<p>​	<pkg>-configure - 构建<pkg>到配置阶段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make opencv4-configure</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310170830641.png" alt="image-20231017083044583" /></p>
<p>​	<pkg>-build - 构建<pkg>到编译阶段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make opencv4-build</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310170831059.png" alt="image-20231017083149028" /></p>
<p>​	<pkg>-show-info - 生成关于<pkg>的信息，以JSON格式呈现<br />
​	<pkg>-show-depends - 列出<pkg>依赖的软件包<br />
​	<pkg>-show-rdepends - 列出以<pkg>为依赖的软件包<br />
​	<pkg>-show-recursive-depends 递归列出<pkg>依赖的软件包<br />
​	<pkg>-show-recursive-rdepends  递归列出以<pkg>为依赖的软件包<br />
​	<pkg>-graph-depends - 生成<pkg>依赖关系的图形<br />
​	<pkg>-graph-rdepends - 生成<pkg>反向依赖关系的图形<br />
​	<pkg>-dirclean - 删除<pkg>的构建目录<br />
​	<pkg>-reconfigure - 从配置阶段重新开始构建<br />
​	<pkg>-rebuild - 从编译阶段重新开始构建<br />
​	<pkg>-reinstall - 从安装阶段重新开始构建</p>
<p><strong>文档：</strong><br />
manual - 构建所有格式的手册<br />
manual-html - 构建HTML格式的手册<br />
manual-split-html - 构建拆分的HTML格式的手册<br />
manual-pdf - 构建PDF格式的手册<br />
manual-text - 构建文本格式的手册<br />
manual-epub - 构建ePub格式的手册<br />
graph-build - 生成构建时间的图表<br />
graph-depends - 生成依赖树的图表<br />
graph-size - 生成文件系统大小的统计信息<br />
list-defconfigs - 列出所有预配置的最小系统</p>
<p><strong>杂项：</strong><br />
source - 下载离线构建所需的所有源代码<br />
external-deps - 列出使用的外部软件包<br />
legal-info - 生成有关许可证合规性的信息<br />
show-info - 生成关于软件包的信息，以JSON格式呈现<br />
pkg-stats - 以JSON和HTML格式生成有关软件包的信息<br />
printvars - 导出通过VARS=…选择的内部变量<br />
show-vars - 以JSON格式呈现所有内部变量；使用VARS=…限制列表以匹配该模式</p>
<p>make V=0|1 - 0 =&gt; 静默构建（默认），1 =&gt; 详细构建<br />
make O=dir - 将所有输出文件定位在&quot;dir&quot;中，包括.config文件</p>
<p>有关更多详细信息，请参阅README，生成Buildroot手册或在线查阅它，网址为<a href="http://buildroot.org/docs.html">http://buildroot.org/docs.html</a></p>
]]></content>
      <categories>
        <category>瑞芯微</category>
      </categories>
  </entry>
  <entry>
    <title>挂载镜像文件</title>
    <url>/2023/10/08/18%20%E6%8C%82%E8%BD%BD%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>编译完成之后的镜像为ubuntu-22.04.3-preinstalled-desktop-arm64.img，这里面包括spl tpl uboot boot分区和文件系统分区，其中spl tpl uboot是通过dd命令写入的，而另外两个是创建的分区，现在我想的是挂载上这个img镜像，然后查看里面的系统，在CSDN上找到了这样一个博客</p>
<p><a href="https://blog.csdn.net/yangleo1987/article/details/58603205?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169677013016800184112679%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=169677013016800184112679&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-58603205-null-null.142%5Ev95%5EchatgptT3_1&amp;utm_term=linux%E4%B8%8B%E6%8C%82%E8%BD%BDimg%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6&amp;spm=1018.2226.3001.4187">挂载img分区</a></p>
<p>首先使用fdisk命令查看img镜像分区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fdisk ubuntu-22.04.3-preinstalled-desktop-arm64.img</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310082107478.png" alt="image-20231008210757445" /></p>
<p>分区是从32768和1081344开始的，然后，就可以挂载分区了，这里要用到offset参数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount -o loop,offset=$((32768*512))  ubuntu-22.04.3-preinstalled-desktop-arm64.img    1 </span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount -o loop,offset=$((61440*512))  ubuntu-22.04.3-preinstalled-desktop-arm64.img    1 </span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount -o loop,offset=$((1081344*512))  ubuntu-22.04.3-preinstalled-desktop-arm64.img    2 </span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/bin/make -f ./Makefile intdeb-pkg \</span><br><span class="line">  KERNELRELEASE=5.10.160-rockchip \</span><br><span class="line">  KDEB_PKGVERSION=5.10.160-14 \</span><br><span class="line">  CROSS_COMPILE=aarch64-linux-gnu- \</span><br><span class="line">  ARCH=arm64 \</span><br><span class="line">  -j 32</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gzip -dc ../initrd.img | cpio -idm</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lz4 -dc ../initrd.img | cpio -idm</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>瑞芯微</category>
      </categories>
  </entry>
  <entry>
    <title>适配瑞芯微官方SDK</title>
    <url>/2023/09/27/17%20%E9%80%82%E9%85%8D%E7%91%9E%E8%8A%AF%E5%BE%AE%E5%AE%98%E6%96%B9SDK/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309272155420.jpeg" alt="Rockchip bootflow.jpg" /></p>
<p>瑞芯微的分区表如上图所示，虽然在瑞芯微的wiki中提供了一些简单的开源介绍，但是我是没有见过的。，，很坑，所以还是以瑞芯微的开放SDK进行移植</p>
<h1 id="1-miniloader"><a class="markdownIt-Anchor" href="#1-miniloader"></a> 1. miniloader</h1>
<p>瑞芯微官方miniloader路径为<a href="https://github.com/rockchip-linux/rkbin.git">https://github.com/rockchip-linux/rkbin.git</a></p>
<p>首先克隆官方的rkbin，瑞芯微提供了闭源的的二进制文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/rockchip-linux/rkbin.git</span><br></pre></td></tr></table></figure>
<p>拉取完成如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309272158411.png" alt="image-20230927215856386" /></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309272159325.png" alt="image-20230927215908314" /></p>
<p>瑞芯微的README如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Rockchip loader binaries naming rule</span><br><span class="line"></span><br><span class="line">总则：</span><br><span class="line">不管单个模块，还是合并后的loader，命名都采用</span><br><span class="line">[chip]_[module]_[feature]_[version].[postfix]</span><br><span class="line"></span><br><span class="line">chip: 芯片或芯片系列名称, 必选项, 与所有kernel/uboot driver中的名称保持一致, 具体命名方式不在此讨论, 小写</span><br><span class="line">module: 模块名称, 必选项, 如loader, ddr, miniloader，usbplug,bl3x,tee,tee_ta，小写</span><br><span class="line">feature: 模块特征, 可选项, 可多个, 如ddr使用的频率, 或者只支持某个特定的ddr, miniloader的特别选项等, 小写</span><br><span class="line">version: 版本信息, 必选项, 格式采用[v1.00,], 正式发布之前为0.xx, 正式发布后为1.00以后，小写</span><br><span class="line">postfix: 后缀名, 必选项, 代码编译出来的默认为.bin, 也有可能为.elf, 合并后为.img，小写</span><br><span class="line">连接符号采用下划线“_”</span><br><span class="line">例如：</span><br><span class="line">ddr模块提供的文件</span><br><span class="line">rk3228_ddr3_800MHz_v1.06.bin</span><br><span class="line"></span><br><span class="line">特殊规则：</span><br><span class="line">1. 合并后的loader命名:</span><br><span class="line">    loader: 由ddrbin, usbplug, miniloader合并而成可用于Windows RK升级工具使用的loader;</span><br><span class="line">    ubootloader: 由ddrbin, usbplug, U-Boot合并而成可用于Windows RK升级工具使用的loader;</span><br><span class="line">    idbloader: 由ddrbin, 一级loader(miniloader或uboot)按IDB格式合并直接用于烧写到IDB区的binary;</span><br><span class="line">    注: miniloader的命名, 仅表示miniloader工程编译输出的bin, 不再延续到合并后的loader中使用;</span><br><span class="line">2. 合并后的loader的version定义:</span><br><span class="line">    vx.yy.zzz</span><br><span class="line">v:  version的意思，一直采用这个字符，小写</span><br><span class="line">x.yy: ddr所提供文件的版本号，小写</span><br><span class="line">zzz: [1]是miniloader所提供文件的版本号，去掉点号的，小写</span><br><span class="line">     [2]uboot提供的版本号</span><br><span class="line"></span><br><span class="line">3. 命名小写会引起歧义的，就用大写</span><br><span class="line">如ddr的GB，不能写成gb</span><br><span class="line">举例：</span><br><span class="line">合并好的loader命名：</span><br><span class="line">rk3328_loader_v1.03.106.bin</span><br><span class="line">其中的1.03是ddr的版本号v1.03</span><br><span class="line">106是miniloader的版本号v1.06去掉点号的</span><br></pre></td></tr></table></figure>
<p>接下来对这些目录的内容进行介绍</p>
<ol>
<li><strong>bin/</strong>：通常用于存放可执行文件（二进制文件）</li>
</ol>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309272203645.png" alt="image-20230927220321625" /></p>
<p>进入该目录之后又有一系列的子目录，我们要适配的是3588，所以要进入rk35的目录，具体内容如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309272204357.png" alt="image-20230927220422326" /></p>
<p>根据名称来看总共是有两种类型的二进制文件，分别为rk<strong>ddr*的tpl 和 rk“</strong>”spl的spl，第一个用来进行初始化内存，然后加载spl，spl用来初始化时钟等其他外设，这里我们用到的应该是rk3588_ddr_lp4_2112MHz_lp5_2736MHz_v1.12.bin和rk3588_spl_v1.12.bin两二进制文件，</p>
<p>2.**doc/**目录，通常用于存放文档文件。在这个目录下，有着更新时候的一些说明，如下图所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309272213894.png" alt="image-20230927221327879" /></p>
<p>3.img目录根3588无关不用理会。</p>
<p>4.<strong>LICENSE</strong>：通常用于存放软件或项目的许可证信息</p>
<p>5.README**：是一个简要的说明文件</p>
<p>6.<strong>RKBOOT/</strong>：它可能包含与引导（Boot）相关的文件、脚本或配置。具体内容如下所示：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309272215234.png" alt="image-20230927221534210" /></p>
<p>这个其实是后面讲到uboot make.sh时候的说明，用来将spl和tpl整合成一个完整的miniloader的，我们要用到的是RK3588MINIALL.ini，具体内容如下所示：、</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309272217736.png" alt="image-20230927221754711" /></p>
<p>Path1=bin/rk35/rk3588_ddr_lp4_2112MHz_lp5_2736MHz_v1.12.bin</p>
<p>FlashData=bin/rk35/rk3588_ddr_lp4_2112MHz_lp5_2736MHz_v1.12.bin</p>
<p>FlashBoot=bin/rk35/rk3588_spl_v1.12.bin</p>
<p>PATH=rk3588_spl_loader_v1.12.112.bin</p>
<p>7.<strong>RKBOOT.ini</strong>：不用管</p>
<p>8.<strong>RKTRUST/</strong>：这是一个目录，可能与 Rockchip 平台安全性（Trust）相关。根据目录名称，它可能包含与安全启动、安全引导或安全认证相关的文件、脚本或配置。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309272219951.png" alt="image-20230927221941937" /></p>
<p>​	这也是一些ini文件，这是基于开源的bl31和bl32来的，上面的两个流程呀，属于第二条，闭源的miniloader属于第一条。</p>
<ol>
<li><strong>scripts/</strong>：checkpatch.sh只有这一个脚本，看了一下应该没啥用，应该是瑞芯微用于检查时候的一个脚本，</li>
<li>这些脚本可以用于自动化任务、配置设置、编译构建等。</li>
<li><strong>tools/</strong>：这是一个目录，通常用于存放工具文件。工具文件可以是用于特定任务或目的的实用程序、应用程序或脚本。这些工具可以帮助你完成各种操作，如调试、分析、转换等。</li>
</ol>
<p>ddrbin_tool_user_guide.txt 是ddrbin_tool的使用说明，倒是还挺详细，我们要改的是ddr相关的tpl，重要内容整理如下</p>
<p><strong>功能 1：从 ddrbin_param.txt 修改 ddr.bin 文件。</strong></p>
<ol>
<li>修改 ‘ddrbin_param.txt’ 文件，设置你想要的 DDR 频率、UART 信息等。如果想保持默认值，请将这些项目留空。</li>
<li>运行 ‘ddrbin_tool’，并使用以下参数：参数 1 为 ddrbin_param.txt，参数 2 为 ddr.bin 文件。<br />
例如：./ddrbin_tool ddrbin_param.txt px30_ddr_333MHz_v1.13.bin</li>
</ol>
<p><strong>功能 2：将 ddr.bin 文件的配置保存到 gen_param.txt 文件中。</strong><br />
如果想要获取 ddr.bin 文件的配置，请执行以下操作：<br />
./ddrbin_tool -g gen_param.txt px30_ddr_333MHz_v1.15.bin<br />
配置信息将显示在 gen_param.txt 文件中。</p>
<p>而我要修改的是rk3588_ddr_lp4_2112MHz_lp5_2736MHz_v1.12.bin，想用功能2 保存到 gen_param.txt</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./ddrbin_tool -g  gen_param.txt rk3588_ddr_lp4_2112MHz_lp5_2736MHz_v1.12.bin</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310031753004.png" alt="image-20231003175311976" /></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310031753485.png" alt="image-20231003175354464" /></p>
<p>修改之后还需要重新生成bin文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./ddrbin_tool gen_param.txt rk3588_ddr_lp4_2112MHz_lp5_2736MHz_v1.12.bin</span><br></pre></td></tr></table></figure>
<p><strong><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310031756166.png" alt="image-20231003175617140" /></strong></p>
<p>修改的地方只有这里的115200，其他倒是没关，然后就是看看如何整合spl和tpl了，整合成一个完整的loader.bin</p>
<p>这里我就不用uboot的的make.sh了，而是找到他的命令和makefile具体内容如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">function pack_loader_image()</span><br><span class="line">&#123;</span><br><span class="line">	rm -f *loader*.bin *download*.bin *idblock*.img</span><br><span class="line">	cd $&#123;RKBIN&#125;</span><br><span class="line">	DEF_PATH=$&#123;RKBIN&#125;/`filt_val &quot;^PATH&quot; $&#123;INI_LOADER&#125;`</span><br><span class="line">	IDB_PATH=$&#123;RKBIN&#125;/`filt_val &quot;IDB_PATH&quot; $&#123;INI_LOADER&#125;`</span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">&#123;SCRIPT_LOADER&#125; --ini <span class="variable">$&#123;INI_LOADER&#125;</span></span></span><br><span class="line">	cd -</span><br><span class="line">	if [ -f $&#123;DEF_PATH&#125; ]; then</span><br><span class="line">		mv $&#123;DEF_PATH&#125; ./</span><br><span class="line">	fi</span><br><span class="line">	if [ -f $&#123;IDB_PATH&#125; ]; then</span><br><span class="line">		mv $&#123;IDB_PATH&#125; ./</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Copyright (c) 2020 Rockchip Electronics Co., Ltd</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># SPDX-License-Identifier: GPL-2.0</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"></span></span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line">if [ $# -eq 0 ]; then</span><br><span class="line">	echo &quot;ERROR: No args of $0&quot;</span><br><span class="line">	exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">while [ $# -gt 0 ]; do</span><br><span class="line">	case $1 in</span><br><span class="line">		--ini)</span><br><span class="line">			INI=$2</span><br><span class="line">			shift 2</span><br><span class="line">			;;</span><br><span class="line">		*)</span><br><span class="line">			echo &quot;ERROR: Unknown arg: $1&quot;</span><br><span class="line">			exit 1</span><br><span class="line">			;;</span><br><span class="line">	esac</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">if [ ! -f $&#123;INI&#125; ]; then</span><br><span class="line">	echo &quot;pack loader failed! Can&#x27;t find: $&#123;INI&#125;&quot;</span><br><span class="line">	exit 0</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">COUNT=`cat $&#123;INI&#125; | wc -l`</span><br><span class="line">if [ $&#123;COUNT&#125; -eq 1 ]; then</span><br><span class="line">	IMG=`sed -n &quot;/PATH=/p&quot; $&#123;INI&#125; | tr -d &#x27;\r&#x27; | cut -d &#x27;=&#x27; -f 2`</span><br><span class="line">	cp $&#123;IMG&#125; ./</span><br><span class="line">else</span><br><span class="line">	./tools/boot_merger $&#123;INI&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;pack loader okay! Input: $&#123;INI&#125;&quot;</span><br></pre></td></tr></table></figure>
<p>最后用的还是boot_merger这个工具。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./tools/boot_merger RKBOOT/RK3588MINIALL.ini</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310031810759.png" alt="image-20231003181000745" /></p>
<p>关于spl和tpl就这样了，然后是uboot</p>
<h1 id="2uboot"><a class="markdownIt-Anchor" href="#2uboot"></a> 2.uboot</h1>
<p>克隆源码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/rockchip-linux/u-boot.git</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310031845388.png" alt="image-20231003184552359" /></p>
<p>修改make menuconfig，rk3588的默认配置文件为./configs/rk3588_defconfig</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310031852329.png" alt="image-20231003185216305" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export arch=arm64</span><br><span class="line">make rk3588_defconfig</span><br><span class="line">make menuconfig</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310031855129.png" alt="image-20231003185541087" /></p>
<p>目前只需要将这里的uboot修改为115200即可，然后重新保存configs/rk3588_defconfig，重新编译</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export arch=arm64</span><br><span class="line">make rk3588_defconfig</span><br><span class="line">make CROSS_COMPILE=&quot;aarch64-linux-gnu-&quot; -j32</span><br><span class="line">modules_install</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310031858771.png" alt="image-20231003185809741" /></p>
<p>编译完这里的uboot.img就是我们需要的镜像，不对，后来发现事情并不是想的那样，理论上应该是uboot.img这里的选择不对。所以接下来去寻找uboot.img的生成流程</p>
<p>实际应该是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./make.sh rk3588 CROSS_COMPILE=aarch64-linux-gnu-</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310031920218.png" alt="image-20231003192010183" /></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译uboot.itb</span></span><br><span class="line">make CROSS_COMPILE=&quot;aarch64-linux-gnu-&quot; -j32 u-boot.itb</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310051037632.png" alt="image-20231005103717571" /></p>
<p>但是并没有找到源头，然后找一下make.sh的内容具体内容如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打包生成uboot镜像</span></span><br><span class="line">function pack_uboot_image()</span><br><span class="line">&#123;</span><br><span class="line">	rm u-boot.img u-boot-dtb.img -f</span><br><span class="line">	LOAD_ADDR=`sed -n &quot;/CONFIG_SYS_TEXT_BASE=/s/CONFIG_SYS_TEXT_BASE=//p&quot; include/autoconf.mk|tr -d &#x27;\r&#x27;`</span><br><span class="line">	if [ -z &quot;$&#123;LOAD_ADDR&#125;&quot; ]; then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">upstream U-Boot</span></span><br><span class="line">		LOAD_ADDR=`grep CONFIG_SYS_TEXT_BASE include/generated/autoconf.h | awk &#x27;&#123; print $3 &#125;&#x27; | tr -d &#x27;\r&#x27;`</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [ -z &quot;$&#123;LOAD_ADDR&#125;&quot; ]; then</span><br><span class="line">		echo &quot;ERROR: No CONFIG_SYS_TEXT_BASE for u-boot&quot;;</span><br><span class="line">		exit 1</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">&#123;SCRIPT_UBOOT&#125; --load <span class="variable">$&#123;LOAD_ADDR&#125;</span> <span class="variable">$&#123;PLAT_UBOOT_SIZE&#125;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SCRIPT_UBOOT=“${SRCTREE}/scripts/uboot.sh”</p>
<p>LOAD_ADDR=0x00200000</p>
<p>–size 2048 1</p>
<p>configs/rk3588-ramboot.config:4:CONFIG_UBOOT_SIZE_KB=2048</p>
<p>configs/rk3588-ramboot.config:5:CONFIG_UBOOT_NUM=1</p>
<p>可行的代码为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./scripts/uboot.sh --load  0x00200000 --size 2048 1</span><br></pre></td></tr></table></figure>
<p>uboot.sh内容如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Copyright (c) 2020 Rockchip Electronics Co., Ltd</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># SPDX-License-Identifier: GPL-2.0</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"></span></span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line">if [ $# -eq 0 ]; then</span><br><span class="line">        echo &quot;ERROR: No args of $0&quot;</span><br><span class="line">        exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">while [ $# -gt 0 ]; do</span><br><span class="line">        case $1 in</span><br><span class="line">                --load)</span><br><span class="line">                        LOAD_ADDR=$2</span><br><span class="line">                        shift 2</span><br><span class="line">                        ;;</span><br><span class="line">                --size)</span><br><span class="line">                        SIZE=&quot;$1 $2 $3&quot;</span><br><span class="line">                        shift 3</span><br><span class="line">                        ;;</span><br><span class="line">                *)</span><br><span class="line">                        echo &quot;ERROR: Unknown arg: $1&quot;</span><br><span class="line">                        exit 1</span><br><span class="line">                        ;;</span><br><span class="line">        esac</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">rm uboot.img -f</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$&#123;LOAD_ADDR&#125;&quot; ]; then</span><br><span class="line">        echo &quot;ERROR: No load address&quot;</span><br><span class="line">        exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">HEAD_KB=2</span><br><span class="line">BIN_KB=`ls -l u-boot.bin | awk &#x27;&#123; print $5 &#125;&#x27;`</span><br><span class="line">if [ -z &quot;$&#123;SIZE&#125;&quot; ]; then</span><br><span class="line">        MAX_KB=1046528</span><br><span class="line">else</span><br><span class="line">        MAX_KB=`echo $&#123;SIZE&#125; | awk &#x27;&#123;print strtonum($2)&#125;&#x27;`</span><br><span class="line">        MAX_KB=$(((MAX_KB-HEAD_KB)*1024))</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $&#123;BIN_KB&#125; -gt $&#123;MAX_KB&#125; ]; then</span><br><span class="line">        echo &quot;ERROR: pack uboot failed! u-boot.bin actual: $&#123;BIN_KB&#125; bytes, max limit: $&#123;MAX_KB&#125; bytes&quot;</span><br><span class="line">        exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">../rkbin/tools/loaderimage --pack --uboot u-boot.bin uboot.img $&#123;LOAD_ADDR&#125; $&#123;SIZE&#125;</span><br><span class="line">echo &quot;pack uboot okay! Input: u-boot.bin&quot;</span><br><span class="line">echo</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>而实际上使用的命令是</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">../rkbin/tools/loaderimage --pack --uboot u-boot.bin uboot.img 0x00200000 --size 2048 1</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310032021655.png" alt="image-20231003202108625" /></p>
<p>不知道他的源码呀~~~~，这就没意思了。。。先这样吧。</p>
<h1 id="3kernel"><a class="markdownIt-Anchor" href="#3kernel"></a> 3.kernel</h1>
<p>git拉取源码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/rockchip-linux/kernel.git</span><br></pre></td></tr></table></figure>
<p>查看全部分支，如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310032034502.png" alt="image-20231003203437480" /></p>
<p>我直接一步到位，直接到5.10就行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout develop-5.10</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310032036427.png" alt="image-20231003203633412" /></p>
<p>然后寻找kernel的编译过程，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建 Kernel</span></span><br><span class="line">build_kernel()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查 RK_KERNEL_DTS 和 RK_KERNEL_DEFCONFIG 配置是否存在，若不存在则返回</span></span><br><span class="line">	check_config RK_KERNEL_DTS RK_KERNEL_DEFCONFIG || return 0</span><br><span class="line"></span><br><span class="line">	echo &quot;============Start building kernel============&quot;</span><br><span class="line">	echo &quot;TARGET_KERNEL_ARCH   =$RK_KERNEL_ARCH&quot;</span><br><span class="line">	echo &quot;TARGET_KERNEL_CONFIG =$RK_KERNEL_DEFCONFIG&quot;</span><br><span class="line">	echo &quot;TARGET_KERNEL_DTS    =$RK_KERNEL_DTS&quot;</span><br><span class="line">	echo &quot;TARGET_KERNEL_CONFIG_FRAGMENT =$RK_KERNEL_DEFCONFIG_FRAGMENT&quot;</span><br><span class="line">	echo &quot;==========================================&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">设置交叉编译工具链</span></span><br><span class="line">	setup_cross_compile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">使用 KMAKE 构建 Kernel</span></span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">KMAKE <span class="variable">$RK_KERNEL_DEFCONFIG</span> <span class="variable">$RK_KERNEL_DEFCONFIG_FRAGMENT</span></span></span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">KMAKE <span class="variable">$RK_KERNEL_DTS</span>.img</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查是否存在 Kernel FIT 文件并使用 mk-fitimage.sh 创建镜像</span></span><br><span class="line">	ITS=&quot;$CHIP_DIR/$RK_KERNEL_FIT_ITS&quot;</span><br><span class="line">	if [ -f &quot;$ITS&quot; ]; then</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">COMMON_DIR/mk-fitimage.sh kernel/<span class="variable">$RK_BOOT_IMG</span> \</span></span><br><span class="line"><span class="language-bash">			<span class="string">&quot;<span class="variable">$ITS</span>&quot;</span> <span class="variable">$RK_KERNEL_IMG</span></span></span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">创建链接到 rockdev 目录的 boot.img</span></span><br><span class="line">	ln -rsf kernel/$RK_BOOT_IMG rockdev/boot.img</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">将 boot.img 复制到 u-boot 目录下，用于安全性考虑</span></span><br><span class="line">	cp rockdev/boot.img u-boot/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">构建检查电源域</span></span><br><span class="line">	build_check_power_domain</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">完成构建流程</span></span><br><span class="line">	finish_build</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">KMAKE=&quot;make ARCH=arm64 -j32&quot; </span><br><span class="line">CROSS_COMPILE=aarch64-linux-gnu-</span><br></pre></td></tr></table></figure>
<pre><code>make ARCH=arm64 -j32  CROSS_COMPILE=aarch64-linux-gnu- rockchip_linux_defconfig rk3588_linux.config
make ARCH=arm64 -j32  CROSS_COMPILE=aarch64-linux-gnu- rk3588-evb7-lp4-v10-linux.img
</code></pre>
<p>编译成功，但是还需要修改波特率，要修改的设备树为rk3588-linux.dtsi</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310032048880.png" alt="image-20231003204847848" /></p>
<p>然后修改rk3588-evb7-lp4.dtsi文件，里面有PCIE相关的内容，需要disabled不然会卡在内核</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310032056361.png" alt="image-20231003205604330" /></p>
<p>反正现在的dhmi屏幕问题不大，就先这样了。</p>
<h1 id="4image"><a class="markdownIt-Anchor" href="#4image"></a> 4.image</h1>
<p>首先git大佬的源码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/Joshua-Riek/ubuntu-rockchip.git</span><br></pre></td></tr></table></figure>
<p>我这里先以香橙派为例进行编译</p>
<p>export VENDOR=orangepi</p>
<p>export BOARD=orangepi-5b</p>
<p>build-u-boot.sh内容如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">set -eE </span><br><span class="line">trap &#x27;echo Error: in $0 on line $LINENO&#x27; ERR</span><br><span class="line"></span><br><span class="line">if [ &quot;$(id -u)&quot; -ne 0 ]; then</span><br><span class="line">    echo &quot;Please run as root&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">cd &quot;$(dirname -- &quot;$(readlink -f -- &quot;$0&quot;)&quot;)&quot; &amp;&amp; cd ..</span><br><span class="line">mkdir -p build &amp;&amp; cd build</span><br><span class="line"></span><br><span class="line">if [[ -z $&#123;VENDOR&#125; ]]; then</span><br><span class="line">    echo &quot;Error: VENDOR is not set&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ ! -d u-boot-&quot;$&#123;VENDOR&#125;&quot; ]; then</span><br><span class="line">    # shellcheck source=/dev/null</span><br><span class="line">    source ../packages/u-boot-&quot;$&#123;VENDOR&#125;&quot;-rk3588/debian/upstream</span><br><span class="line">    git clone --single-branch --progress -b &quot;$&#123;BRANCH&#125;&quot; &quot;$&#123;GIT&#125;&quot; u-boot-&quot;$&#123;VENDOR&#125;&quot;</span><br><span class="line">    git -C u-boot-&quot;$&#123;VENDOR&#125;&quot; checkout &quot;$&#123;COMMIT&#125;&quot;</span><br><span class="line">    cp -r ../packages/u-boot-&quot;$&#123;VENDOR&#125;&quot;-rk3588/debian u-boot-&quot;$&#123;VENDOR&#125;&quot;</span><br><span class="line">fi</span><br><span class="line">cd u-boot-&quot;$&#123;VENDOR&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Compile u-boot into a deb package</span></span><br><span class="line">dpkg-buildpackage -a &quot;$(cat debian/arch)&quot; -d -b -nc -uc</span><br><span class="line"></span><br><span class="line">rm -f ../*.buildinfo ../*.changes</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>build.sh内容如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">mkdir -p build/logs</span><br><span class="line">exec &gt; &gt;(tee &quot;build/logs/build-$(date +&quot;%Y%m%d%H%M%S&quot;).log&quot;) 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">if [[ $&#123;KERNEL_ONLY&#125; == &quot;Y&quot; ]]; then</span><br><span class="line">    eval &quot;$&#123;DOCKER&#125;&quot; ./scripts/build-kernel.sh</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $&#123;UBOOT_ONLY&#125; == &quot;Y&quot; ]]; then</span><br><span class="line">    eval &quot;$&#123;DOCKER&#125;&quot; ./scripts/build-u-boot.sh</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $&#123;LAUNCHPAD&#125; != &quot;Y&quot; ]]; then</span><br><span class="line">    if [[ ! -e &quot;$(find build/linux-image-*.deb | sort | tail -n1)&quot; || ! -e &quot;$(find build/linux-headers-*.deb | sort | tail -n1)&quot; ]]; then</span><br><span class="line">        eval &quot;$&#123;DOCKER&#125;&quot; ./scripts/build-kernel.sh</span><br><span class="line">    fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $&#123;LAUNCHPAD&#125; != &quot;Y&quot; ]]; then</span><br><span class="line">    if [[ ! -e &quot;$(find build/u-boot-&quot;$&#123;BOARD&#125;&quot;_*.deb | sort | tail -n1)&quot; ]]; then</span><br><span class="line">        eval &quot;$&#123;DOCKER&#125;&quot; ./scripts/build-u-boot.sh</span><br><span class="line">    fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">eval &quot;$&#123;DOCKER&#125;&quot; ./scripts/build-rootfs.sh</span><br><span class="line">eval &quot;$&#123;DOCKER&#125;&quot; ./scripts/config-image.sh</span><br><span class="line"></span><br><span class="line">exit 0</span><br><span class="line">                                                                                                                                     </span><br></pre></td></tr></table></figure>
<p>boot.cmd</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setenv bootargs &quot;console=ttyS2,115200 earlycon=uart8250,mmio32,0xff130000 root=/dev/mmcblk1p2 rw rootwait&quot;</span><br><span class="line">load mmc 1:1 $&#123;fdt_addr_r&#125; rk3588-evb7-lp4-v10-linux.dtb</span><br><span class="line">setenv kernel_comp_addr_r 0x0a000000</span><br><span class="line">load mmc 1:1 $&#123;kernel_addr_r&#125; Image.gz</span><br><span class="line">setenv kernel_comp_size $&#123;filesize&#125;</span><br><span class="line">booti $&#123;kernel_addr_r&#125; - $&#123;fdt_addr_r&#125;</span><br></pre></td></tr></table></figure>
<p>mkimage -A arm -O linux -T script -C none -a 0 -e 0 -d boot.cmd boot.scr</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310041050935.png" alt="image-20231004105004887" /></p>
<p>安装内核模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make ARCH=arm64 CROSS_COMPILE=&quot;aarch64-linux-gnu-&quot; INSTALL_MOD_STRIP=1 INSTALL_MOD_PATH=&quot;/home/topeet/rockchip/image/lib&quot; modules_install -j32</span><br></pre></td></tr></table></figure>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202310041100339.png" alt="image-20231004110040296" /></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find -name &quot;*ko&quot; -exec cp &#123;&#125; /home/topeet/rockchip/image/rootfs/lib/modules/5.10.110 \;</span><br><span class="line">find -name &quot;*ko&quot; | xargs -I &#123;&#125; cp &#123;&#125; /home/topeet/rockchip/image/rootfs/lib/modules/5.10.110</span><br></pre></td></tr></table></figure>
<p>制作完整的镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./gen_image_generic.sh &lt;file&gt; &lt;kernel size&gt; &lt;kernel directory&gt; &lt;rootfs size&gt; &lt;rootfs image&gt; [&lt;align&gt;]</span><br></pre></td></tr></table></figure>
<p>其中，<code>&lt;file&gt;</code>是要生成的镜像文件的名称，<code>&lt;kernel size&gt;</code>是内核文件系统的大小，<code>&lt;kernel directory&gt;</code>是包含内核文件系统内容的目录，<code>&lt;rootfs size&gt;</code>是根文件系统的大小，<code>&lt;rootfs image&gt;</code>是根文件系统的镜像文件，<code>&lt;align&gt;</code>是可选的对齐参数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./gen_image_generic.sh system.img 100 boot 7144 rootfs.img 32768</span><br></pre></td></tr></table></figure>
<p>写入uboot</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo dd if=uboot.img of=system.img seek=64 conv=notrunc</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo dd if=system.img of=/dev/sdc status=progress</span><br></pre></td></tr></table></figure>
<h1 id="5打包"><a class="markdownIt-Anchor" href="#5打包"></a> 5.打包</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">build_updateimg()</span><br><span class="line">&#123;</span><br><span class="line">	IMAGE_PATH=$TOP_DIR/rockdev   # 设置IMAGE_PATH变量为$TOP_DIR/rockdev，用于存储生成的镜像文件路径</span><br><span class="line">	PACK_TOOL_DIR=$TOP_DIR/tools/linux/Linux_Pack_Firmware   # 设置PACK_TOOL_DIR变量为$TOP_DIR/tools/linux/Linux_Pack_Firmware，用于存储打包工具的路径</span><br><span class="line"></span><br><span class="line">	cd $PACK_TOOL_DIR/rockdev   # 进入$PACK_TOOL_DIR/rockdev目录</span><br><span class="line"></span><br><span class="line">	if [ -f &quot;$RK_PACKAGE_FILE_AB&quot; ]; then   # 如果存在$RK_PACKAGE_FILE_AB文件</span><br><span class="line">		build_sdcard_package   # 调用build_sdcard_package函数，构建SD卡包</span><br><span class="line">		build_otapackage   # 调用build_otapackage函数，构建OTA包</span><br><span class="line"></span><br><span class="line">		cd $PACK_TOOL_DIR/rockdev   # 返回$PACK_TOOL_DIR/rockdev目录</span><br><span class="line">		echo &quot;Make Linux a/b update_ab.img.&quot;</span><br><span class="line">		source_package_file_name=`ls -lh package-file | awk -F &#x27; &#x27; &#x27;&#123;print $NF&#125;&#x27;`   # 获取package-file的文件名</span><br><span class="line">		ln -fs &quot;$RK_PACKAGE_FILE_AB&quot; package-file   # 创建软链接，将$RK_PACKAGE_FILE_AB链接到package-file</span><br><span class="line">		./mkupdate.sh   # 运行mkupdate.sh脚本，生成update.img</span><br><span class="line">		mv update.img $IMAGE_PATH/update_ab.img   # 将生成的update.img移动到$IMAGE_PATH/update_ab.img</span><br><span class="line">		ln -fs $source_package_file_name package-file   # 创建软链接，将source_package_file_name链接到package-file</span><br><span class="line">	else</span><br><span class="line">		echo &quot;Make update.img&quot;</span><br><span class="line"></span><br><span class="line">		if [ -f &quot;$RK_PACKAGE_FILE&quot; ]; then   # 如果存在$RK_PACKAGE_FILE文件</span><br><span class="line">			source_package_file_name=`ls -lh package-file | awk -F &#x27; &#x27; &#x27;&#123;print $NF&#125;&#x27;`   # 获取package-file的文件名</span><br><span class="line">			ln -fs &quot;$RK_PACKAGE_FILE&quot; package-file   # 创建软链接，将$RK_PACKAGE_FILE链接到package-file</span><br><span class="line">			./mkupdate.sh   # 运行mkupdate.sh脚本，生成update.img</span><br><span class="line">			ln -fs $source_package_file_name package-file   # 创建软链接，将source_package_file_name链接到package-file</span><br><span class="line">		else</span><br><span class="line">			./mkupdate.sh   # 运行mkupdate.sh脚本，生成update.img</span><br><span class="line">		fi</span><br><span class="line">		mv update.img $IMAGE_PATH   # 将生成的update.img移动到$IMAGE_PATH</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	finish_build   # 调用finish_build函数，进行后续的清理和处理操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>研究了一下这个玩意，这个打包完成确实是问题不大，现在我只想知道boot.img是怎样编译出来的</p>
<p>boot.img kernel.img resource.img zboot.img</p>
<p>最后找到发现是在scripts/mkimg脚本里，里面有一个repack_boot_img的函数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make_boot_img()</span><br><span class="line">&#123;</span><br><span class="line">        RAMDISK_IMG_PATH=$&#123;objtree&#125;/ramdisk.img</span><br><span class="line">        [ -f $&#123;RAMDISK_IMG_PATH&#125; ] &amp;&amp; RAMDISK_IMG=ramdisk.img &amp;&amp; RAMDISK_ARG=&quot;--ramdisk $&#123;RAMDISK_IMG_PATH&#125;&quot;</span><br><span class="line"></span><br><span class="line">        $&#123;srctree&#125;/scripts/mkbootimg \</span><br><span class="line">                $&#123;KERNEL_IMAGE_ARG&#125; \</span><br><span class="line">                $&#123;RAMDISK_ARG&#125; \</span><br><span class="line">                --second resource.img \</span><br><span class="line">                -o boot.img &amp;&amp; \</span><br><span class="line">        echo &quot;  Image:  boot.img (with Image $&#123;RAMDISK_IMG&#125; resource.img) is ready&quot;;</span><br><span class="line">        echo                 $&#123;KERNEL_IMAGE_ARG&#125; \</span><br><span class="line">                $&#123;RAMDISK_ARG&#125; \</span><br><span class="line">                --second resource.img \</span><br><span class="line">                -o boot.img &amp;&amp; \</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        $&#123;srctree&#125;/scripts/mkbootimg \</span><br><span class="line">                $&#123;KERNEL_ZIMAGE_ARG&#125; \</span><br><span class="line">                $&#123;RAMDISK_ARG&#125; \</span><br><span class="line">                --second resource.img \</span><br><span class="line">                -o zboot.img &amp;&amp; \</span><br><span class="line">        echo &quot;  Image:  zboot.img (with $&#123;ZIMAGE&#125; $&#123;RAMDISK_IMG&#125; resource.img) is ready&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>resource.img的由来</p>
<p>LOGO=logo.bmp</p>
<p>LOGO_KERNEL=logo_kernel.bmp</p>
<p>DTB_PATH=${objtree}/arch/arm/boot/dts/rk3588-evb7-lp4-v10-linux.dtb</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scripts/resource_tool $&#123;DTB_PATH&#125; $&#123;LOGO&#125; $&#123;LOGO_KERNEL&#125;</span><br><span class="line">scripts/resource_tool arch/arm64/boot/dts/rockchip/rk3588-evb7-lp4-v10-linux.dtb logo.bmp logo_kernel.bmp</span><br></pre></td></tr></table></figure>
<p>然后可以用下面的命令解包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scripts/resource_tool --verbose --unpack --image=resource.img</span><br></pre></td></tr></table></figure>
<p>而是实际的打包其实是repack-bootimg这个脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;srctree&#125;/scripts/mkbootimg \</span></span><br><span class="line"><span class="language-bash">        <span class="variable">$&#123;KERNEL_IMAGE_ARG&#125;</span> \</span></span><br><span class="line"><span class="language-bash">        <span class="variable">$&#123;RAMDISK_ARG&#125;</span> \</span></span><br><span class="line"><span class="language-bash">        --second resource.img \</span></span><br><span class="line"><span class="language-bash">        -o boot.img &amp;&amp; \</span></span><br></pre></td></tr></table></figure>
<p>打包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scripts/mkbootimg --kernel ./arch/arm64/boot/Image --second resource.img -o boot.img</span><br></pre></td></tr></table></figure>
<p>再一绕发现是mkbootimg这个脚本，，，真的6</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">srctree/scripts/mkbootimg \</span></span><br><span class="line"><span class="language-bash">--kernel <span class="variable">$kernel</span> \</span></span><br><span class="line"><span class="language-bash"><span class="variable">$SECOND</span> \</span></span><br><span class="line"><span class="language-bash">--ramdisk <span class="variable">$ramdisk</span> \</span></span><br><span class="line"><span class="language-bash"><span class="variable">$DTB</span> \</span></span><br><span class="line"><span class="language-bash"><span class="variable">$RECOVERY_DTBO</span> \</span></span><br><span class="line"><span class="language-bash">--cmdline <span class="string">&quot;<span class="variable">$&#123;cmdline&#125;</span><span class="variable">$&#123;extra_cmdline&#125;</span>&quot;</span> \</span></span><br><span class="line"><span class="language-bash">--header_version <span class="variable">$version</span> \</span></span><br><span class="line"><span class="language-bash">--os_version <span class="variable">$os_version</span> \</span></span><br><span class="line"><span class="language-bash">--os_patch_level <span class="variable">$os_patch_level</span> \</span></span><br><span class="line"><span class="language-bash">--output <span class="variable">$output</span></span></span><br><span class="line">                      </span><br></pre></td></tr></table></figure>
<p>一些相关内容如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkbootimg命令的帮助信息，它用于创建Android引导镜像。</span><br><span class="line"></span><br><span class="line">命令的用法如下：</span><br><span class="line"></span><br><span class="line">shell</span><br><span class="line">Copy</span><br><span class="line">mkbootimg [-h] [--kernel KERNEL] [--ramdisk RAMDISK] [--second SECOND]</span><br><span class="line">          [--dtb DTB] [--recovery_dtbo RECOVERY_DTBO | --recovery_acpio RECOVERY_ACPIO]</span><br><span class="line">          [--cmdline CMDLINE] [--vendor_cmdline VENDOR_CMDLINE]</span><br><span class="line">          [--base BASE] [--kernel_offset KERNEL_OFFSET]</span><br><span class="line">          [--ramdisk_offset RAMDISK_OFFSET]</span><br><span class="line">          [--second_offset SECOND_OFFSET] [--dtb_offset DTB_OFFSET]</span><br><span class="line">          [--os_version OS_VERSION] [--os_patch_level OS_PATCH_LEVEL]</span><br><span class="line">          [--tags_offset TAGS_OFFSET] [--board BOARD]</span><br><span class="line">          [--pagesize &#123;2048,4096,8192,16384&#125;] [--id]</span><br><span class="line">          [--header_version HEADER_VERSION] [-o OUTPUT]</span><br><span class="line">          [--vendor_boot VENDOR_BOOT] [--vendor_ramdisk VENDOR_RAMDISK]</span><br><span class="line">以下是参数的说明：</span><br><span class="line"></span><br><span class="line">-h, --help：显示帮助信息并退出。</span><br><span class="line">--kernel KERNEL：指定内核文件的路径。</span><br><span class="line">--ramdisk RAMDISK：指定ramdisk文件的路径。</span><br><span class="line">--second SECOND：指定第二级引导加载程序文件的路径。</span><br><span class="line">--dtb DTB：指定设备树二进制文件的路径。</span><br><span class="line">--recovery_dtbo RECOVERY_DTBO：指定恢复DTBO文件的路径。</span><br><span class="line">--recovery_acpio RECOVERY_ACPIO：指定恢复ACPIO文件的路径。</span><br><span class="line">--cmdline CMDLINE：指定传递给内核命令行的额外参数。</span><br><span class="line">--vendor_cmdline VENDOR_CMDLINE：包含在供应商引导中的内核命令行参数。</span><br><span class="line">--base BASE：指定基地址。</span><br><span class="line">--kernel_offset KERNEL_OFFSET：指定内核偏移量。</span><br><span class="line">--ramdisk_offset RAMDISK_OFFSET：指定ramdisk偏移量。</span><br><span class="line">--second_offset SECOND_OFFSET：指定第二级引导加载程序偏移量。</span><br><span class="line">--dtb_offset DTB_OFFSET：指定设备树偏移量。</span><br><span class="line">--os_version OS_VERSION：操作系统版本。</span><br><span class="line">--os_patch_level OS_PATCH_LEVEL：操作系统补丁级别。</span><br><span class="line">--tags_offset TAGS_OFFSET：标签偏移量。</span><br><span class="line">--board BOARD：板级名称。</span><br><span class="line">--pagesize &#123;2048,4096,8192,16384&#125;：页面大小。</span><br><span class="line">--id：在标准输出中打印图像ID。</span><br><span class="line">--header_version HEADER_VERSION：引导镜像头版本。</span><br><span class="line">-o OUTPUT, --output OUTPUT：输出文件名。</span><br><span class="line">--vendor_boot VENDOR_BOOT：供应商引导输出文件名。</span><br><span class="line">--vendor_ramdisk VENDOR_RAMDISK：指定供应商ramdisk文件的路径。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>瑞芯微</category>
      </categories>
  </entry>
  <entry>
    <title>U-Boot编译过程浅析</title>
    <url>/2023/09/10/15%20U-Boot%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E6%B5%85%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一-u-boot源代码获取"><a class="markdownIt-Anchor" href="#一-u-boot源代码获取"></a> 一、U-Boot源代码获取</h2>
<p>可以参考我之前输出的这篇文章：</p>
<blockquote>
<p>[<a href="https://blog.csdn.net/Neutionwei/article/details/123462959">RK356x] [Firefly-Linux] 10min带你获取、了解与编译U-Boot源代码</a></p>
</blockquote>
<p>切换成<code>linux_release_v1.2.3a</code>版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote update</span><br><span class="line">git checkout -b rk356x/linux_release_v1.2.3a rk356x/linux_release_v1.2.3a</span><br></pre></td></tr></table></figure>
<h2 id="二-编译rk3568"><a class="markdownIt-Anchor" href="#二-编译rk3568"></a> 二、编译RK3568</h2>
<p>RK356x 配置文件查看：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159362.png" alt="img" />清除历史编译状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make clean</span><br></pre></td></tr></table></figure>
<p>使用 <code>make.sh</code> 配置 <code>configs/rk3568_defconfig</code> 并编译：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./make.sh rk3568</span><br></pre></td></tr></table></figure>
<h2 id="三-编译日志分析"><a class="markdownIt-Anchor" href="#三-编译日志分析"></a> 三、编译日志分析</h2>
<p>常用编译变量说明：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>HOSTCC</code></td>
<td>PC 机 gcc 编译命令</td>
</tr>
<tr>
<td><code>HOSTCXX</code></td>
<td>PC 机 g++ 编译命令</td>
</tr>
<tr>
<td><code>HOSTLD</code></td>
<td>PC 机 ld 链接命令</td>
</tr>
<tr>
<td><code>CC</code></td>
<td>交叉工具链 gcc 编译命令</td>
</tr>
<tr>
<td><code>CPP</code></td>
<td>交叉工具链 gcc -E 编译命令</td>
</tr>
<tr>
<td><code>LD</code></td>
<td>交叉工具链 ld 链接命令</td>
</tr>
<tr>
<td><code>OBJCOPY</code></td>
<td>交叉工具链 objcopy 命令</td>
</tr>
<tr>
<td><code>OBJDUMP</code></td>
<td>交叉工具链 objdump 链接命令</td>
</tr>
<tr>
<td><code>DTC</code></td>
<td>设备树编译命令 dtc</td>
</tr>
<tr>
<td><code>CHECK</code></td>
<td>执行静态检查 sparse</td>
</tr>
</tbody>
</table>
<p>摘自顶层<code>Makefile</code>：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159859.png" alt="img" /><br />
注意：上图中的<code>cc</code>与<code>gcc</code>是同一个东西！</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159833.png" alt="img" /></p>
<p>编译日志主要分成以下几部分：</p>
<ol>
<li>配置文件生成</li>
<li>工具目录编译</li>
<li>U-Boot核心代码交叉编译</li>
<li>U-Boot目标文件生成</li>
<li>设备树编译并追加到U-Boot目标文件</li>
<li>TPL与SPL代码编译</li>
<li>TPL与SPL目标文件生成</li>
<li>最终固件打包</li>
</ol>
<h3 id="31-配置文件生成"><a class="markdownIt-Anchor" href="#31-配置文件生成"></a> 3.1 配置文件生成</h3>
<p>执行<code>make rk3568_defconfig -j8</code>命令，生成<code>.config</code>：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159751.png" alt="img" /><br />
执行<code>scripts/kconfig/conf --silentoldconfig Kconfig</code>，这个话主要是检查是否有新的配置项，这里是清除历史输出文件后进行编译，因此所有配置项都认为是新的！</p>
<p>在这个过程根据<code>config.h</code>文件配置<code>u-boot.cfg</code>、<code>spl/u-boot.cfg</code>、<code>	/u-boot.cfg</code>等文件，然后产生了各自的<code>autoconf.mk</code>文件。编译<code>sam-offsets.s</code>产生<code>u-boot.lds</code>链接脚本。</p>
<p>另外<code>include/generated/version_autogenerated.h</code>是描述版本信息的头文件。<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159822.png" alt="img" /></p>
<h3 id="32-工具目录编译"><a class="markdownIt-Anchor" href="#32-工具目录编译"></a> 3.2 工具目录编译</h3>
<p>对<code>tools</code>下的工具进行一系列编译：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159815.png" alt="img" /></p>
<h3 id="33-u-boot核心代码交叉编译"><a class="markdownIt-Anchor" href="#33-u-boot核心代码交叉编译"></a> 3.3 U-Boot核心代码交叉编译</h3>
<p>编译完成<code>tools</code>目录后，开始交叉编译核心代码，我们会看到有非常多<code>build-in.o</code>，这个输出文件很有意思，它是该文件所处目录所有<code>*.o</code>文件的集合体，例如<code>arch/arm/cpu/built-in.o</code>，那它就是<code>arch/arm/cpu/</code>目录所有<code>*.o</code>文件的集合体！</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159840.png" alt="img" /><br />
核心代码的编译过程主要涉及<code>arch</code>架构代码目录、<code>common</code>通用目录、<code>cmd</code>命令目录与<code>driver</code>驱动目录，当然还有<code>lib</code>公共库目录与<code>examles</code>例程目录，注意这个编译过程不是按照顺序编译打印的，这个因为前面使用<code>-j8</code>编译选项，这个选项的意思是打开8个线程并发编译：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159970.png" alt="img" /><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159113.png" alt="img" /><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159108.png" alt="img" /></p>
<h3 id="34-u-boot目标文件生成"><a class="markdownIt-Anchor" href="#34-u-boot目标文件生成"></a> 3.4 U-Boot目标文件生成</h3>
<p>核心代码交叉编译完毕后链接之前所有的<code>built-in.o</code>文件，通过<code>objcopy</code>命令生成<code>u-boot-nodtb.bin</code>文件与<code>u-boot.sym</code>符号表，并且使用<code>relocate-rela</code>工具对<code>u-boot-nodtb.bin</code>静态reloc（静态<code>rela.dyn</code>修复）：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159124.png" alt="img" /></p>
<h3 id="35-设备树编译并追加到u-boot目标文件"><a class="markdownIt-Anchor" href="#35-设备树编译并追加到u-boot目标文件"></a> 3.5 设备树编译并追加到U-Boot目标文件</h3>
<p>接下来是编译设备树<code>dts</code>，并且产生<code>dt.dtb</code>（u-boot设备树<code>dtb</code>文件）、<code>dt-spl.dtb</code>（spl设备树<code>dtb</code>文件）、<code>dt-tpl.dtb</code>（tpl设备树<code>dtb</code>文件），并且把<code>dtb</code>文件追加到u-boot文件生成<code>u-boot.bin</code>文件：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159130.png" alt="img" /></p>
<h3 id="36-tpl与spl代码编译"><a class="markdownIt-Anchor" href="#36-tpl与spl代码编译"></a> 3.6 TPL与SPL代码编译</h3>
<p><code>spl</code>是初始化DDR内存使用的，而<code>spl</code>相当于一个精简版u-boot，，只不过它的目的是加载u-boot固件，它们编译套路与U-Boot核心代码类似，注意的是它会把编译生成的<code>*.o</code>搬到<code>tpl</code>、<code>spl</code>目录，<code>tpl</code>、<code>spl</code>目录树的排布与U-Boot目录树一样：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159177.png" alt="img" /></p>
<h3 id="37-tpl与spl目标文件生成"><a class="markdownIt-Anchor" href="#37-tpl与spl目标文件生成"></a> 3.7 TPL与SPL目标文件生成</h3>
<p><code>u-boot-spl.lds</code>是<code>spl</code>的链接脚本，<code>u-boot-spl.dtb</code>是<code>spl</code>的设备树<code>dtb</code>文件：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159221.png" alt="img" /><br />
<code>u-boot-spl-nodtb.bin</code>是<code>spl</code>目标文件，同样地把设备树<code>dtb</code>文件追加进去并产生<code>u-boot-spl.bin</code>文件：<br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159361.png" alt="img" /><br />
<code>u-boot-tpl-nodtb.bin</code>是<code>tpl</code>目标文件，注意这里直接复制成<code>u-boot-tpl.bin</code>（没有追加设备树<code>dtb</code>文件）：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159367.png" alt="img" /></p>
<p>还有一点需要注意的是，<code>u-boot-tpl.bin</code>是不能烧录进RK356x的，这是因为<code>tpl</code>相关代码，RK官方并没有开源！我们需要使用<code>rkbin</code>的<code>ddr.bin</code>文件替换！</p>
<h3 id="38-最终固件打包"><a class="markdownIt-Anchor" href="#38-最终固件打包"></a> 3.8 最终固件打包</h3>
<p>首先通过<code>rkbin/RKTRUST/RK3568TRUST.ini</code>文件描述的内容把<code>u-boot.bin</code>打包成<code>u-boot.itb</code>，紧接着根据 FIT 描述文件的内容把 ATF、OP-TEE、U-Boot、MCU 打包到一起（当然也包括设备树 DTB）：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159407.png" alt="img" /><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159412.png" alt="img" /><br />
<img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159495.png" alt="img" /><br />
最后生成的固件为<code>uboot.img</code>，并且根据<code>rkbin/RKBOOT/RK3568MINIALL.ini</code>文件生成<code>rk356x_spl_loader_v1.12.112.bin</code>（注意这里并没有打包我们编译产生的<code>u-boot-spl.bin</code>文件，而是打包存放于<code>rkbin</code>目录下的<code>spl.bin</code>文件）</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159479.png" alt="img" /></p>
]]></content>
      <categories>
        <category>瑞芯微</category>
      </categories>
  </entry>
  <entry>
    <title>bootloader引导流程</title>
    <url>/2023/09/10/13%20bootloader%E5%BC%95%E5%AF%BC%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一-rk芯片通用引导流程"><a class="markdownIt-Anchor" href="#一-rk芯片通用引导流程"></a> 一、RK芯片通用引导流程</h1>
<p>对于RK芯片的引导流程，我们可以参考以下这张图：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122126953.jpeg" alt="img" /></p>
<p>根据两种<code>Boot Flow</code>，我们可以一次梳理两种不同的引导流程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Boot Code -&gt; idbloader.img(miniloader) -&gt; uboot.img -&gt; boot.img -&gt; rootfs.img</span><br><span class="line">Boot Code -&gt; idbloader.img(TPL/SPL) -&gt; uboot.itb -&gt; boot.img -&gt; rootfs.img</span><br></pre></td></tr></table></figure>
<p>对于<code>idbloader.img</code>，我们会发现有相似的地方：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ddr.bin &lt;-&gt; u-boot-tpl.bin</span><br><span class="line">rkxx_miniloader_vx.xx.bin &lt;-&gt; u-boot-spl.bin</span><br></pre></td></tr></table></figure>
<p>此时我们会问，为什么会有两套引导流程？</p>
<p>事实上<code>idbloader.img(miniloader)</code>这套引导方案是RK定制的，它们并没有开源的，RK发布的是二进制文件，它们都存放于<code>rkbin</code>目录下，例如<code>RK356x</code>：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122137381.png" alt="image-20230912213741344" /></p>
<p>注意上图中红方框处：rk3588_spl_v1.11.bin<code>实际上指的是</code>rkxx_miniloader_vx.xx.bin`！</p>
<h1 id="二-rk356x引导流程"><a class="markdownIt-Anchor" href="#二-rk356x引导流程"></a> 二、RK356x引导流程</h1>
<p>下面通过<code>RK356x</code>的启动日志进行简要分析！</p>
<h2 id="21-ddrbin运行"><a class="markdownIt-Anchor" href="#21-ddrbin运行"></a> 2.1 ddr.bin运行</h2>
<p><code>RK3588</code>上电后，我们看到的第一阶段日志是关于DDR的，这主要是对DDR进行初始化，我们看到使用的是<code>LPDDR4</code>，频率逐步从<code>528MHz </code>切换到<code>2112MHz</code>，并且进行一些读写训练操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DDR Version V1.08 20220617</span><br><span class="line">LPDDR4X, 2112MHz</span><br><span class="line">channel[0] BW=16 Col=10 Bk=8 CS0 Row=16 CS=1 Die BW=16 Size=1024MB</span><br><span class="line">channel[1] BW=16 Col=10 Bk=8 CS0 Row=16 CS=1 Die BW=16 Size=1024MB</span><br><span class="line">channel[2] BW=16 Col=10 Bk=8 CS0 Row=16 CS=1 Die BW=16 Size=1024MB</span><br><span class="line">channel[3] BW=16 Col=10 Bk=8 CS0 Row=16 CS=1 Die BW=16 Size=1024MB</span><br><span class="line">Manufacturer ID:0x1 Samsung</span><br><span class="line">CH0 RX Vref:33.7%, TX Vref:21.8%,0.0%</span><br><span class="line">CH1 RX Vref:32.7%, TX Vref:18.8%,0.0%</span><br><span class="line">CH2 RX Vref:30.7%, TX Vref:17.8%,0.0%</span><br><span class="line">CH3 RX Vref:34.7%, TX Vref:18.8%,0.0%</span><br><span class="line">change to F1: 528MHz</span><br><span class="line">change to F2: 1068MHz</span><br><span class="line">change to F3: 1560MHz</span><br><span class="line">change to F0: 2112MHz</span><br><span class="line">out</span><br></pre></td></tr></table></figure>
<h2 id="22-splbin运行"><a class="markdownIt-Anchor" href="#22-splbin运行"></a> 2.2 spl.bin运行</h2>
<p>​	接下来我们会看到SPL的板级初始化，紧接着逐步从<code>MMC2</code>（<code>SD</code>卡）、<code>MMC1</code>（<code>eMMC</code>）寻找<code>U-boot.img</code>（包括<code>atf-1</code>、<code>uboot</code>、<code>fdt</code>、<code>atf-2</code>、<code>atf-3</code>、<code>atf-4</code>、<code>atf-5</code>、<code>optee</code>），通过<code>atf-1</code>来运行<code>uboot</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">U-Boot SPL board init</span><br><span class="line">U-Boot SPL 2017.09-orangepi (Apr 21 2023 - 10:35:39)</span><br><span class="line">Trying to boot from MMC1</span><br><span class="line">Trying fit image at 0x4000 sector</span><br><span class="line">## Verified-boot: 0</span><br><span class="line">## Checking atf-1 0x00040000 ... sha256(806278dba1...) + OK</span><br><span class="line">## Checking uboot 0x00200000 ... sha256(a14cd96f5d...) + OK</span><br><span class="line">## Checking fdt 0x00349350 ... sha256(cf0060a3cf...) + OK</span><br><span class="line">## Checking atf-2 0x000f0000 ... sha256(c00c7fd75b...) + OK</span><br><span class="line">## Checking atf-3 0xff100000 ... sha256(71c3a5841b...) + OK</span><br><span class="line">## Checking atf-4 0xff001000 ... sha256(2301cf73be...) + OK</span><br><span class="line">Jumping to U-Boot(0x00200000) via ARM Trusted Firmware(0x00040000)</span><br><span class="line">Total: 209.584 ms</span><br></pre></td></tr></table></figure>
<p>注意<code>atf-*</code>与<code>optee</code>这些是 <code>ARM trust</code> 固件，属于另外一个领域，有兴趣可以参考以下文章：</p>
<blockquote>
<p><a href="https://blog.csdn.net/Neutionwei/article/details/111395775">https://blog.csdn.net/Neutionwei/article/details/111395775</a><br />
<a href="https://blog.csdn.net/Neutionwei/article/det">https://blog.csdn.net/Neutionwei/article/det</a></p>
</blockquote>
<h2 id="23-atf运行"><a class="markdownIt-Anchor" href="#23-atf运行"></a> 2.3 atf运行</h2>
<p>运行<code>BL31</code>，初始化与运行<code>BL32</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">INFO:    Preloader serial: 2</span><br><span class="line">NOTICE:  BL31: v2.3():v2.3-405-gb52c2eadd:derrick.huang</span><br><span class="line">NOTICE:  BL31: Built : 11:23:47, Aug 15 2022</span><br><span class="line">INFO:    spec: 0x13</span><br><span class="line">INFO:    ext 32k is valid</span><br><span class="line">INFO:    GICv3 without legacy support detected.</span><br><span class="line">INFO:    ARM GICv3 driver initialized in EL3</span><br><span class="line">INFO:    system boots from cpu-hwid-0</span><br><span class="line">INFO:    idle_st=0x21fff, pd_st=0x11fff9, repair_st=0xfff70001</span><br><span class="line">INFO:    dfs DDR fsp_params[0].freq_mhz= 2112MHz</span><br><span class="line">INFO:    dfs DDR fsp_params[1].freq_mhz= 528MHz</span><br><span class="line">INFO:    dfs DDR fsp_params[2].freq_mhz= 1068MHz</span><br><span class="line">INFO:    dfs DDR fsp_params[3].freq_mhz= 1560MHz</span><br><span class="line">INFO:    BL31: Initialising Exception Handling Framework</span><br><span class="line">INFO:    BL31: Initializing runtime services</span><br><span class="line">WARNING: No OPTEE provided by BL2 boot loader, Booting device without OPTEE initialization. SMC`s destined for OPTEE will return SMC_UNK</span><br><span class="line">ERROR:   Error initializing runtime service opteed_fast</span><br><span class="line">INFO:    BL31: Preparing for EL3 exit to normal world</span><br><span class="line">INFO:    Entry point address = 0x200000</span><br><span class="line">INFO:    SPSR = 0x3c9</span><br></pre></td></tr></table></figure>
<blockquote></blockquote>
<h2 id="24-uboot运行"><a class="markdownIt-Anchor" href="#24-uboot运行"></a> 2.4 uboot运行</h2>
<h3 id="241-设备环境初始化"><a class="markdownIt-Anchor" href="#241-设备环境初始化"></a> 2.4.1 设备环境初始化</h3>
<p>从<code>atf</code>切换到<code>uboot</code>之后，<code>uboot</code>依次执行以下操作：</p>
<ol>
<li>打印一些必要的信息：板型、串口、内存、系统内存初始化、代码重定位情况；</li>
<li>获取<code>MMC</code>存储器信息，打印当前启动的存储器（<code>atags</code>）；</li>
<li>获取存储器分区情况并加载内核设备树；</li>
<li>初始化<code>I2C0</code>、初始化<code>PMIC</code>电源芯片、相关芯片供电电压与<code>IO</code>电源域；</li>
<li>初始化<code>DRM</code>框架以及显示器接口（<code>HDMI</code>）;</li>
<li>初始化时钟树。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">U-Boot 2017.09-orangepi (Apr 21 2023 - 10:35:39 +0800)</span><br><span class="line"></span><br><span class="line">Model: Orange Pi 5B</span><br><span class="line">PreSerial: 2, raw, 0xfeb50000</span><br><span class="line">DRAM:  3.7 GiB</span><br><span class="line">Sysmem: init</span><br><span class="line">Relocation Offset: eda2d000</span><br><span class="line">Relocation fdt: eb9f9008 - eb9fecb8</span><br><span class="line">CR: M/C/I</span><br><span class="line">Using default environment</span><br><span class="line"></span><br><span class="line">mmc@fe2c0000: 0, mmc@fe2e0000: 1</span><br><span class="line">Bootdev(atags): mmc 0</span><br><span class="line">MMC0: Legacy, 52Mhz</span><br><span class="line">PartType: EFI</span><br><span class="line">DM: v2</span><br><span class="line">boot mode: None</span><br><span class="line">Model: Orange Pi 5B</span><br><span class="line">CLK: (sync kernel. arm: enter 1008000 KHz, init 1008000 KHz, kernel 0N/A)</span><br><span class="line">  b0pll 24000 KHz</span><br><span class="line">  b1pll 24000 KHz</span><br><span class="line">  lpll 24000 KHz</span><br><span class="line">  v0pll 24000 KHz</span><br><span class="line">  aupll 24000 KHz</span><br><span class="line">  cpll 1500000 KHz</span><br><span class="line">  gpll 1188000 KHz</span><br><span class="line">  npll 24000 KHz</span><br><span class="line">  ppll 1100000 KHz</span><br><span class="line">  aclk_center_root 702000 KHz</span><br><span class="line">  pclk_center_root 100000 KHz</span><br><span class="line">  hclk_center_root 396000 KHz</span><br><span class="line">  aclk_center_low_root 500000 KHz</span><br><span class="line">  aclk_top_root 750000 KHz</span><br><span class="line">  pclk_top_root 100000 KHz</span><br><span class="line">  aclk_low_top_root 396000 KHz</span><br><span class="line">Net:   No ethernet found.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="242-内核的加载"><a class="markdownIt-Anchor" href="#242-内核的加载"></a> 2.4.2 内核的加载</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">switch to partitions #0, OK</span><br><span class="line">mmc0 is current device</span><br><span class="line">mmc@fe2c0000: 0 (SD)</span><br><span class="line">mmc@fe2e0000: 1</span><br><span class="line">switch to partitions #0, OK</span><br><span class="line">mmc0 is current device</span><br><span class="line">Scanning mmc 0:1...</span><br><span class="line">Found U-Boot script /boot.scr</span><br><span class="line">reading /boot.scr</span><br><span class="line">3411 bytes read in 4 ms (832 KiB/s)</span><br><span class="line">## Executing script at 00500000</span><br><span class="line">Boot script loaded from mmc 0</span><br><span class="line">reading /orangepiEnv.txt</span><br><span class="line">222 bytes read in 3 ms (72.3 KiB/s)</span><br><span class="line">reading /uInitrd</span><br><span class="line">18641659 bytes read in 1844 ms (9.6 MiB/s)</span><br><span class="line">reading /Image</span><br><span class="line">34736640 bytes read in 3049 ms (10.9 MiB/s)</span><br><span class="line">reading /dtb/rockchip/rk3588s-orangepi-5b.dtb</span><br><span class="line">233728 bytes read in 24 ms (9.3 MiB/s)</span><br><span class="line">reading /dtb/rockchip/overlay/rk3588-fixup.scr</span><br><span class="line">2756 bytes read in 6 ms (448.2 KiB/s)</span><br><span class="line">Applying kernel provided DT fixup script (rk3588-fixup.scr)</span><br><span class="line">## Executing script at 09000000</span><br><span class="line">Fdt Ramdisk skip relocation</span><br><span class="line">## Loading init Ramdisk from Legacy Image at 0a200000 ...</span><br><span class="line">   Image Name:   uInitrd</span><br><span class="line">   Image Type:   AArch64 Linux RAMDisk Image (gzip compressed)</span><br><span class="line">   Data Size:    18641595 Bytes = 17.8 MiB</span><br><span class="line">   Load Address: 00000000</span><br><span class="line">   Entry Point:  00000000</span><br><span class="line">   Verifying Checksum ... OK</span><br><span class="line">## Flattened Device Tree blob at 0x0a100000</span><br><span class="line">   Booting using the fdt blob at 0x0a100000</span><br><span class="line">   reserving fdt memory region: addr=a100000 size=9f000</span><br><span class="line">  &#x27;reserved-memory&#x27; ramoops@110000: addr=110000 size=f0000</span><br><span class="line">   Using Device Tree in place at 000000000a100000, end 000000000a1a1fff</span><br><span class="line">Adding bank: 0x00200000 - 0xf0000000 (size: 0xefe00000)</span><br><span class="line">Total: 5283.754 ms</span><br><span class="line"></span><br><span class="line">Starting kernel ...</span><br></pre></td></tr></table></figure>
<p>从<code>Starting kernel ...</code>开始，<code>uboot</code>的生命周期结束，之后产生的打印是由内核产生的！</p>
<p>值得注意的是，加载<code>Flat Device Tree</code>设备树之后，日志还打印了相关映像加载情况，这部分非常有用，我们以后再深入分析！</p>
<h1 id="三-bootrom阶段做了什么"><a class="markdownIt-Anchor" href="#三-bootrom阶段做了什么"></a> 三、BootRom阶段做了什么？</h1>
<p><code>BootRom</code>固件是Rockchip原厂芯片出厂时烧录到内部存储器的，目的是从各个外部存储媒介中加载<code>miniloader</code>(<code>tpl</code> + <code>spl</code>)！</p>
<p>以下是摘自《Rockchip RK3568 TRM Part1 V1.1-20210301》，它很清晰地说明了BootRom阶段做了什么事情：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122155809.png" alt="img" /></p>
<p>我们按照正常引导走一遍：</p>
<ol>
<li>从<code>0x0000FFFF</code>地址读取第一条指令运行；</li>
<li>逐一检查与校验<code>Nor Flash</code>、<code>Nand Flash</code>、<code>eMMC</code>、<code>SD/MMC</code>中的<code>ID BLOCK</code>（RK 固件定义在第 <code>64</code> 扇区）；</li>
<li>假如我们的固件存放于<code>eMMC</code>，那么校验<code>ID BLOCK</code>成功后就读取<code>DDR</code>初始化代码到<code>SYSTEM_SRAM</code>；</li>
<li>紧接着运行刚刚读取的代码来初始化<code>DDR</code>；</li>
<li>初始化<code>DDR</code>后<code>DDR</code>就可以工作了，把引导代码加载到<code>DDR</code>并调到<code>DDR</code>继续运行。</li>
</ol>
<p>如果各个存储器都没有找到<code>ID BLOCK</code>，那么会执行以下操作：</p>
<ol>
<li>等待请求<code>DDR</code>程序（即在<code>RKDevTool</code>工具可以看到处于<code>Maskrom</code>模式）：</li>
</ol>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122156818.png" alt="img" /></p>
<h1 id="四-rk固件在存储器中是如何分布的"><a class="markdownIt-Anchor" href="#四-rk固件在存储器中是如何分布的"></a> 四、RK固件在存储器中是如何分布的？</h1>
<p>如下图，其中 RK356x和rk3588 是没有使用 <code>trust</code>分区，这个要注意：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122156681.png" alt="img" /></p>
<p>另外要注意的是从<code>loader2</code>分区开始所有的分区大小与起始地址是由<code>parameter.txt</code>文件进行描述，具体参考：</p>
<blockquote>
<p><a href="https://blog.csdn.net/Neutionwei/article/details/122911086">https://blog.csdn.net/Neutionwei/article/details/122911086</a></p>
</blockquote>
]]></content>
      <categories>
        <category>瑞芯微</category>
      </categories>
  </entry>
  <entry>
    <title>瑞芯微build-sh脚本分析</title>
    <url>/2023/09/10/12%20%E7%91%9E%E8%8A%AF%E5%BE%AEbuild-sh%E8%84%9A%E6%9C%AC%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>build.sh脚本内容如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置环境变量 LC_ALL，用于定义程序的本地化设置</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 LC_ALL 设置为 C，表示使用标准的C语言环境，忽略本地化设置</span></span><br><span class="line">export LC_ALL=C</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置环境变量 LD_LIBRARY_PATH，用于指定动态链接库的搜索路径</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 LD_LIBRARY_PATH 设置为空，表示清空动态链接库搜索路径</span></span><br><span class="line">export LD_LIBRARY_PATH=</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">错误处理函数</span></span><br><span class="line">err_handler()</span><br><span class="line">&#123;</span><br><span class="line">	ret=$?</span><br><span class="line">	[ &quot;$ret&quot; -eq 0 ] &amp;&amp; return</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">打印错误信息</span></span><br><span class="line">	echo &quot;ERROR: Running $&#123;FUNCNAME[1]&#125; failed!&quot;</span><br><span class="line">	echo &quot;ERROR: exit code $ret from line $&#123;BASH_LINENO[0]&#125;:&quot;</span><br><span class="line">	echo &quot;    $BASH_COMMAND&quot;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">退出脚本</span></span><br><span class="line">	exit $ret</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置错误处理函数为 <span class="built_in">trap</span> 的处理程序，当发生错误时调用 err_handler() 函数</span></span><br><span class="line">trap &#x27;err_handler&#x27; ERR</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 shell 的错误处理行为</span></span><br><span class="line">set -eE</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">完成构建操作</span></span><br><span class="line">finish_build()</span><br><span class="line">&#123;</span><br><span class="line">	echo &quot;Running $&#123;FUNCNAME[1]&#125; succeeded.&quot;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">切换到顶级目录</span></span><br><span class="line">	cd $TOP_DIR</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查配置函数</span></span><br><span class="line">check_config()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">清除变量 missing</span></span><br><span class="line">	unset missing</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">遍历传入的参数列表</span></span><br><span class="line"></span><br><span class="line">	for var in $@; do</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">使用 <span class="built_in">eval</span> 检查变量是否存在值，如果存在则跳过</span></span><br><span class="line">		eval [ \$$var ] &amp;&amp; continue</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">将缺失的配置变量记录到 missing 变量中</span></span><br><span class="line">		missing=&quot;$missing $var&quot;</span><br><span class="line">	done</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果所有配置变量均存在值，则返回0表示检查通过</span></span><br><span class="line">	[ -z &quot;$missing&quot; ] &amp;&amp; return 0</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果存在缺失的配置变量，则输出错误信息并返回1</span></span><br><span class="line">	echo &quot;Skipping $&#123;FUNCNAME[1]&#125; for missing configs: $missing.&quot;</span><br><span class="line">	return 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择板卡函数</span></span><br><span class="line">choose_board()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">获取板卡配置文件列表到 BOARD_ARRAY 数组</span></span><br><span class="line">	BOARD_ARRAY=( $(cd $&#123;CHIP_DIR&#125;/; ls BoardConfig*.mk | sort) )</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">获取板卡数组的长度</span>	</span><br><span class="line">	RK_TARGET_BOARD_ARRAY_LEN=$&#123;#BOARD_ARRAY[@]&#125;</span><br><span class="line"><span class="meta prompt_">	</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果板卡数组长度为0，则表示没有可用的板卡配置文件，输出错误信息并返回-1</span></span><br><span class="line">	if [ $RK_TARGET_BOARD_ARRAY_LEN -eq 0 ]; then</span><br><span class="line">		echo &quot;No available Board Config&quot;</span><br><span class="line">		return -1</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	echo</span><br><span class="line">	echo &quot;You&#x27;re building on Linux&quot;</span><br><span class="line">	echo &quot;Lunch menu...pick a combo:&quot;</span><br><span class="line">	echo &quot;&quot;</span><br><span class="line"><span class="meta prompt_">	</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">输出可用的板卡配置文件列表</span></span><br><span class="line">	echo &quot;0. default BoardConfig.mk&quot;</span><br><span class="line">	echo $&#123;BOARD_ARRAY[@]&#125; | xargs -n 1 | sed &quot;=&quot; | sed &quot;N;s/\n/. /&quot;</span><br><span class="line"></span><br><span class="line">	local INDEX</span><br><span class="line">	read -p &quot;Which would you like? [0]: &quot; INDEX</span><br><span class="line">	INDEX=$(($&#123;INDEX:-0&#125; - 1))</span><br><span class="line"><span class="meta prompt_">	</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">根据用户选择的索引确定所选的板卡配置文件</span></span><br><span class="line">	if echo $INDEX | grep -vq [^0-9]; then</span><br><span class="line">		BOARD=&quot;$&#123;BOARD_ARRAY[$INDEX]&#125;&quot;</span><br><span class="line">	else</span><br><span class="line">		echo &quot;Lunching for Default BoardConfig.mk boards...&quot;</span><br><span class="line">		BOARD=BoardConfig.mk</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">创建符号链接，将所选的板卡配置文件链接到 BOARD_CONFIG 变量指定的路径</span></span><br><span class="line">	ln -rsf &quot;$CHIP_DIR/$BOARD&quot; &quot;$BOARD_CONFIG&quot;</span><br><span class="line">	echo &quot;switching to board: $(realpath $BOARD_CONFIG)&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取当前脚本所在目录的绝对路径，并赋值给 COMMON_DIR 变量</span></span><br><span class="line">COMMON_DIR=&quot;$(dirname &quot;$(realpath &quot;$0&quot;)&quot;)&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据 COMMON_DIR 计算出顶级目录的绝对路径，并赋值给 TOP_DIR 变量</span></span><br><span class="line">TOP_DIR=&quot;$(realpath &quot;$COMMON_DIR/../../..&quot;)&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到顶级目录</span></span><br><span class="line">cd &quot;$TOP_DIR&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建 rockdev 目录（如果不存在）</span></span><br><span class="line">mkdir -p rockdev</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 BOARD_CONFIG 变量为顶级目录下的 device/rockchip/.BoardConfig.mk 文件的绝对路径</span></span><br><span class="line">BOARD_CONFIG=&quot;$TOP_DIR/device/rockchip/.BoardConfig.mk&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取 CHIP_DIR 变量的绝对路径，该变量指向顶级目录下的 device/rockchip/.target_product 目录</span></span><br><span class="line">CHIP_DIR=&quot;$(realpath $TOP_DIR/device/rockchip/.target_product)&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">预构建 U-Boot 函数</span></span><br><span class="line">prebuild_uboot()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">构建 U-Boot 的编译命令字符串</span></span><br><span class="line">	UBOOT_COMPILE_COMMANDS=&quot;\</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">&#123;RK_TRUST_INI_CONFIG:+../rkbin/RKTRUST/<span class="variable">$RK_TRUST_INI_CONFIG</span>&#125; \</span></span><br><span class="line"><span class="language-bash">			<span class="variable">$&#123;RK_SPL_INI_CONFIG:+../rkbin/RKBOOT/$RK_SPL_INI_CONFIG&#125;</span> \</span></span><br><span class="line"><span class="language-bash">			<span class="variable">$&#123;RK_UBOOT_SIZE_CONFIG:+--sz-uboot $RK_UBOOT_SIZE_CONFIG&#125;</span> \</span></span><br><span class="line"><span class="language-bash">			<span class="variable">$&#123;RK_TRUST_SIZE_CONFIG:+--sz-trust $RK_TRUST_SIZE_CONFIG&#125;</span><span class="string">&quot;</span></span></span><br><span class="line">	UBOOT_COMPILE_COMMANDS=&quot;$(echo $UBOOT_COMPILE_COMMANDS)&quot;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">如果启用 RAMDISK 安全启动，则添加相关的编译命令选项</span></span></span><br><span class="line">	if [ &quot;$RK_RAMDISK_SECURITY_BOOTUP&quot; = &quot;true&quot; ];then</span><br><span class="line">		UBOOT_COMPILE_COMMANDS=&quot; \</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash"><span class="string">UBOOT_COMPILE_COMMANDS \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			<span class="variable">$&#123;RK_ROLLBACK_INDEX_BOOT:+--rollback-index-boot $RK_ROLLBACK_INDEX_BOOT&#125;</span> \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			<span class="variable">$&#123;RK_ROLLBACK_INDEX_UBOOT:+--rollback-index-uboot $RK_ROLLBACK_INDEX_UBOOT&#125;</span> &quot;</span></span></span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">预构建安全启动的 U-Boot 函数</span></span><br><span class="line">prebuild_security_uboot()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">获取传入的模式参数</span></span><br><span class="line">	local mode=$1</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果启用 RAMDISK 安全启动，则添加相关的编译命令选项</span></span><br><span class="line">	if [ &quot;$RK_RAMDISK_SECURITY_BOOTUP&quot; = &quot;true&quot; ];then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">如果 RK_SECURITY_OTP_DEBUG 不等于 <span class="string">&quot;true&quot;</span>，则添加 --burn-key-hash 选项</span></span><br><span class="line">		if [ &quot;$RK_SECURITY_OTP_DEBUG&quot; != &quot;true&quot; ]; then</span><br><span class="line">			UBOOT_COMPILE_COMMANDS=&quot;$UBOOT_COMPILE_COMMANDS --burn-key-hash&quot;</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">根据传入的模式参数进行不同的处理</span></span><br><span class="line">		case &quot;$&#123;mode:-normal&#125;&quot; in</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">对于 uboot 模式，不需要额外的处理</span></span><br><span class="line">			uboot)</span><br><span class="line">				;;</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">对于 boot 模式，添加 --boot_img 选项，并设置值为 <span class="variable">$TOP_DIR</span>/u-boot/boot.img</span></span><br><span class="line">			boot)</span><br><span class="line">				UBOOT_COMPILE_COMMANDS=&quot; \</span><br><span class="line">					--boot_img $TOP_DIR/u-boot/boot.img \</span><br><span class="line">					$UBOOT_COMPILE_COMMANDS &quot;</span><br><span class="line">				;;</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">对于 recovery 模式，添加 --recovery_img 选项，并设置值为 <span class="variable">$TOP_DIR</span>/u-boot/recovery.img</span></span><br><span class="line">			recovery)</span><br><span class="line">				UBOOT_COMPILE_COMMANDS=&quot; \</span><br><span class="line">					--recovery_img $TOP_DIR/u-boot/recovery.img</span><br><span class="line">					$UBOOT_COMPILE_COMMANDS &quot;</span><br><span class="line">				;;</span><br><span class="line">			*)</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">对于其他模式，默认添加 --boot_img 选项，并设置值为 <span class="variable">$TOP_DIR</span>/u-boot/boot.img</span></span><br><span class="line">				UBOOT_COMPILE_COMMANDS=&quot; \</span><br><span class="line">					--boot_img $TOP_DIR/u-boot/boot.img \</span><br><span class="line">					$UBOOT_COMPILE_COMMANDS &quot;</span><br><span class="line">				# 如果 RK_PACKAGE_FILE_AB 为空，则添加 --recovery_img 选项，并设置值为 $TOP_DIR/u-boot/recovery.img</span><br><span class="line">				test -z &quot;$&#123;RK_PACKAGE_FILE_AB&#125;&quot; &amp;&amp; \</span><br><span class="line">					UBOOT_COMPILE_COMMANDS=&quot;$UBOOT_COMPILE_COMMANDS --recovery_img $TOP_DIR/u-boot/recovery.img&quot;</span><br><span class="line">				;;</span><br><span class="line">		esac</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">使用 <span class="built_in">echo</span> 命令重新赋值 UBOOT_COMPILE_COMMANDS 变量，去除多余空格</span></span><br><span class="line">		UBOOT_COMPILE_COMMANDS=&quot;$(echo $UBOOT_COMPILE_COMMANDS)&quot;</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用法函数，打印脚本的使用说明</span></span><br><span class="line">usage()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">打印使用说明</span></span><br><span class="line">	echo &quot;Usage: build.sh [OPTIONS]&quot;</span><br><span class="line">	echo &quot;Available options:&quot;</span><br><span class="line">	echo &quot;BoardConfig*.mk    -switch to specified board config&quot;</span><br><span class="line">	echo &quot;lunch              -list current SDK boards and switch to specified board config&quot;</span><br><span class="line">	echo &quot;wifibt             -build wifibt&quot;</span><br><span class="line">	echo &quot;uboot              -build uboot&quot;</span><br><span class="line">	echo &quot;uefi		 -build uefi&quot;</span><br><span class="line">	echo &quot;spl                -build spl&quot;</span><br><span class="line">	echo &quot;loader             -build loader&quot;</span><br><span class="line">	echo &quot;kernel-4.4         -build kernel 4.4&quot;</span><br><span class="line">	echo &quot;kernel-4.19        -build kernel 4.19&quot;</span><br><span class="line">	echo &quot;kernel-5.10        -build kernel 5.10&quot;</span><br><span class="line">	echo &quot;kernel             -build kernel&quot;</span><br><span class="line">	echo &quot;modules            -build kernel modules&quot;</span><br><span class="line">	echo &quot;rootfs             -build rootfs (default is buildroot)&quot;</span><br><span class="line">	echo &quot;buildroot          -build buildroot rootfs&quot;</span><br><span class="line">	echo &quot;yocto              -build yocto rootfs&quot;</span><br><span class="line">	echo &quot;debian             -build debian rootfs&quot;</span><br><span class="line">	echo &quot;pcba               -build pcba&quot;</span><br><span class="line">	echo &quot;recovery           -build recovery&quot;</span><br><span class="line">	echo &quot;all                -build uboot, kernel, rootfs, recovery image&quot;</span><br><span class="line">	echo &quot;cleanall           -clean uboot, kernel, rootfs, recovery&quot;</span><br><span class="line">	echo &quot;firmware           -pack all the image we need to boot up system&quot;</span><br><span class="line">	echo &quot;updateimg          -pack update image&quot;</span><br><span class="line">	echo &quot;otapackage         -pack ab update otapackage image (update_ota.img)&quot;</span><br><span class="line">	echo &quot;sdpackage          -pack update sdcard package image (update_sdcard.img)&quot;</span><br><span class="line">	echo &quot;save               -save images, patches, commands used to debug&quot;</span><br><span class="line">	echo &quot;allsave            -build all &amp; firmware &amp; updateimg &amp; save&quot;</span><br><span class="line">	echo &quot;info               -see the current board building information&quot;</span><br><span class="line">	echo &quot;&quot;</span><br><span class="line">	echo &quot;createkeys         -create secureboot root keys&quot;</span><br><span class="line">	echo &quot;security_rootfs    -build rootfs and some relevant images with security paramter (just for dm-v)&quot;</span><br><span class="line">	echo &quot;security_boot      -build boot with security paramter&quot;</span><br><span class="line">	echo &quot;security_uboot     -build uboot with security paramter&quot;</span><br><span class="line">	echo &quot;security_recovery  -build recovery with security paramter&quot;</span><br><span class="line">	echo &quot;security_check     -check security paramter if it&#x27;s good&quot;</span><br><span class="line">	echo &quot;&quot;</span><br><span class="line">	echo &quot;Default option is &#x27;allsave&#x27;.&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建信息函数，打印当前构建的相关信息</span></span><br><span class="line">build_info()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果 CHIP_DIR 路径不存在，则打印错误信息，表示未找到目标芯片</span></span><br><span class="line">	if [ ! -L $CHIP_DIR ];then</span><br><span class="line">		echo &quot;No found target chip!!!&quot;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果 BOARD_CONFIG 路径不存在，则打印错误信息，表示未找到目标板级配置</span></span><br><span class="line">	if [ ! -L $BOARD_CONFIG ];then</span><br><span class="line">		echo &quot;No found target board config!!!&quot;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果存在 .repo/manifest.xml 文件，则获取 SDK 版本号，并打印构建的 SDK 版本</span></span><br><span class="line">	if [ -f .repo/manifest.xml ]; then</span><br><span class="line">		local sdk_ver=&quot;&quot;</span><br><span class="line">		sdk_ver=`grep &quot;include name&quot;  .repo/manifest.xml | awk -F\&quot; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">		sdk_ver=`realpath .repo/manifests/$&#123;sdk_ver&#125;`</span><br><span class="line">		echo &quot;Build SDK version: `basename $&#123;sdk_ver&#125;`&quot;</span><br><span class="line">	else</span><br><span class="line">		echo &quot;Not found .repo/manifest.xml [ignore] !!!&quot;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">打印当前构建的信息，包括目标芯片、目标板级配置和一些目标的其他配置参数</span></span><br><span class="line">	echo &quot;Current Building Information:&quot;</span><br><span class="line">	echo &quot;Target Chip: $CHIP_DIR&quot;</span><br><span class="line">	echo &quot;Target BoardConfig: `realpath $BOARD_CONFIG`&quot;</span><br><span class="line">	echo &quot;Target Misc config:&quot;</span><br><span class="line">	echo &quot;`env |grep &quot;^RK_&quot; | grep -v &quot;=$&quot; | sort`&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">根据 RK_KERNEL_ARCH 变量的值确定设备树（dtb）的路径，并删除已存在的 dtb 文件</span></span><br><span class="line">	if [ &quot;$RK_KERNEL_ARCH&quot; == &quot;arm&quot; ]; then</span><br><span class="line">		dtb=&quot;kernel/arch/arm/boot/dts/$&#123;RK_KERNEL_DTS&#125;.dtb&quot;</span><br><span class="line">	else</span><br><span class="line">		dtb=&quot;kernel/arch/arm64/boot/dts/rockchip/$&#123;RK_KERNEL_DTS&#125;.dtb&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	rm -f $dtb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">使用 <span class="variable">$KMAKE</span> dtbs 命令生成设备树（dtb）文件</span></span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">KMAKE dtbs</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">调用 build_check_power_domain 函数检查电源域</span></span><br><span class="line">	build_check_power_domain</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建检查电源域函数，用于检查电源域配置是否正确</span></span><br><span class="line">build_check_power_domain()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">定义临时文件和变量</span></span><br><span class="line">	local dump_kernel_dtb_file</span><br><span class="line">	local tmp_phandle_file</span><br><span class="line">	local tmp_io_domain_file</span><br><span class="line">	local tmp_regulator_microvolt_file</span><br><span class="line">	local tmp_final_target</span><br><span class="line">	local tmp_none_item</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">根据 RK_KERNEL_ARCH 变量的值确定设备树（dts）文件的路径</span></span><br><span class="line">	if [ &quot;$RK_KERNEL_ARCH&quot; == &quot;arm&quot; ]; then</span><br><span class="line">		dts=&quot;kernel/arch/arm/boot/dts/$RK_KERNEL_DTS&quot;</span><br><span class="line">	else</span><br><span class="line">		dts=&quot;kernel/arch/arm64/boot/dts/rockchip/$RK_KERNEL_DTS&quot;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">定义临时文件的路径</span></span><br><span class="line">	dump_kernel_dtb_file=$&#123;dts&#125;.dump.dts</span><br><span class="line">	tmp_phandle_file=`mktemp`</span><br><span class="line">	tmp_io_domain_file=`mktemp`</span><br><span class="line">	tmp_regulator_microvolt_file=`mktemp`</span><br><span class="line">	tmp_final_target=`mktemp`</span><br><span class="line">	tmp_grep_file=`mktemp`</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">将设备树二进制文件转换为文本格式，并保存为 dump_kernel_dtb_file</span></span><br><span class="line">	dtc -I dtb -O dts -o $&#123;dump_kernel_dtb_file&#125; $&#123;dts&#125;.dtb 2&gt;/dev/null</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果 RK_SYSTEM_CHECK_METHOD 变量的值为 <span class="string">&quot;DM-E&quot;</span>，则检查是否在设备树中添加了 optee-tz 的兼容性</span></span><br><span class="line">	if [ &quot;$RK_SYSTEM_CHECK_METHOD&quot; = &quot;DM-E&quot; ] ; then</span><br><span class="line">		if ! grep &quot;compatible = \&quot;linaro,optee-tz\&quot;;&quot; $dump_kernel_dtb_file &gt; /dev/null 2&gt;&amp;1 ; then</span><br><span class="line">			echo &quot;Please add: &quot;</span><br><span class="line">			echo &quot;        optee: optee &#123;&quot;</span><br><span class="line">			echo &quot;                compatible = \&quot;linaro,optee-tz\&quot;;&quot;</span><br><span class="line">			echo &quot;                method = \&quot;smc\&quot;;&quot;</span><br><span class="line">			echo &quot;                status = \&quot;okay\&quot;;&quot;</span><br><span class="line">			echo &quot;        &#125;&quot;</span><br><span class="line">			echo &quot;To your dts file&quot;</span><br><span class="line">			return -1;</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">使用正则表达式从设备树中提取 io-domains 配置，并保存到临时文件 tmp_io_domain_file 和 tmp_grep_file</span></span><br><span class="line">	if ! grep -Pzo &quot;io-domains\s*&#123;(\n|\w|-|;|=|&lt;|&gt;|\&quot;|_|\s|,)*&#125;;&quot; $dump_kernel_dtb_file 1&gt;$tmp_grep_file 2&gt;/dev/null; then</span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;Not Found io-domains in <span class="variable">$&#123;dts&#125;</span>.dts&quot;</span></span></span><br><span class="line">		rm -f $tmp_grep_file</span><br><span class="line">		return 0</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">从临时文件 tmp_grep_file 中提取供电（supply）信息，并保存到临时文件 tmp_io_domain_file</span></span><br><span class="line">	grep -a supply $tmp_grep_file &gt; $tmp_io_domain_file</span><br><span class="line">	rm -f $tmp_grep_file</span><br><span class="line">	awk &#x27;&#123;print &quot;phandle = &quot; $3&#125;&#x27; $tmp_io_domain_file &gt; $tmp_phandle_file</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">逐行读取临时文件 tmp_phandle_file 和 tmp_io_domain_file，并进行处理</span></span><br><span class="line">	while IFS= read -r item_phandle &amp;&amp; IFS= read -u 3 -r item_domain</span><br><span class="line">	do</span><br><span class="line">		echo &quot;$&#123;item_domain% *&#125;&quot; &gt;&gt; $tmp_regulator_microvolt_file</span><br><span class="line">		tmp_none_item=$&#123;item_domain% *&#125;</span><br><span class="line">		cmds=&quot;grep -Pzo \&quot;&#123;(\\n|\w|-|;|=|&lt;|&gt;|\\\&quot;|_|\s)*&quot;$item_phandle\&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">使用 <span class="built_in">eval</span> 执行命令，从设备树中提取相应的 regulator-m..-microvolt 配置，并将结果保存到临时文件 tmp_regulator_microvolt_file</span></span><br><span class="line">		eval &quot;$cmds $dump_kernel_dtb_file | strings | grep &quot;regulator-m..-microvolt&quot; &gt;&gt; $tmp_regulator_microvolt_file&quot; || \</span><br><span class="line">			eval &quot;sed -i \&quot;/$&#123;tmp_none_item&#125;/d\&quot; $tmp_regulator_microvolt_file&quot; &amp;&amp; continue</span><br><span class="line"></span><br><span class="line">		echo &gt;&gt; $tmp_regulator_microvolt_file</span><br><span class="line">	done &lt; $tmp_phandle_file 3&lt;$tmp_io_domain_file</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">逐行读取临时文件 tmp_regulator_microvolt_file，生成最终的目标文件 tmp_final_target</span></span><br><span class="line">	while read -r regulator_val</span><br><span class="line">	do</span><br><span class="line">		if echo $&#123;regulator_val&#125; | grep supply &amp;&gt;/dev/null; then</span><br><span class="line">			echo -e &quot;\n\n\e[1;33m$&#123;regulator_val%*=&#125;\e[0m&quot; &gt;&gt; $tmp_final_target</span><br><span class="line">		else</span><br><span class="line">			tmp_none_item=$&#123;regulator_val##*&lt;&#125;</span><br><span class="line">			tmp_none_item=$&#123;tmp_none_item%%&gt;*&#125;</span><br><span class="line">			echo -e &quot;$&#123;regulator_val%%&lt;*&#125; \e[1;31m$(( $tmp_none_item / 1000 ))mV\e[0m&quot; &gt;&gt; $tmp_final_target</span><br><span class="line">		fi</span><br><span class="line">	done &lt; $tmp_regulator_microvolt_file</span><br><span class="line"></span><br><span class="line">	echo -e &quot;\e[41;1;30m PLEASE CHECK BOARD GPIO POWER DOMAIN CONFIGURATION !!!!!\e[0m&quot;</span><br><span class="line">	echo -e &quot;\e[41;1;30m &lt;&lt;&lt; ESPECIALLY Wi-Fi/Flash/Ethernet IO power domain &gt;&gt;&gt; !!!!!\e[0m&quot;</span><br><span class="line">	echo -e &quot;\e[41;1;30m Check Node [pmu_io_domains] in the file: $&#123;dts&#125;.dts \e[0m&quot;</span><br><span class="line">	echo</span><br><span class="line">	echo -e &quot;\e[41;1;30m 请再次确认板级的电源域配置！！！！！！\e[0m&quot;</span><br><span class="line">	echo -e &quot;\e[41;1;30m &lt;&lt;&lt; 特别是Wi-Fi，FLASH，以太网这几路IO电源的配置 &gt;&gt;&gt; ！！！！！\e[0m&quot;</span><br><span class="line">	echo -e &quot;\e[41;1;30m 检查内核文件 $&#123;dts&#125;.dts 的节点 [pmu_io_domains] \e[0m&quot;</span><br><span class="line">	cat $tmp_final_target</span><br><span class="line"></span><br><span class="line">	rm -f $tmp_phandle_file</span><br><span class="line">	rm -f $tmp_regulator_microvolt_file</span><br><span class="line">	rm -f $tmp_io_domain_file</span><br><span class="line">	rm -f $tmp_final_target</span><br><span class="line">	rm -f $dump_kernel_dtb_file</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置交叉编译工具链和相关参数</span></span><br><span class="line">setup_cross_compile()</span><br><span class="line">&#123;</span><br><span class="line">	if [ &quot;$RK_CHIP&quot; = &quot;rv1126_rv1109&quot; ]; then</span><br><span class="line">		TOOLCHAIN_OS=rockchip</span><br><span class="line">	else</span><br><span class="line">		TOOLCHAIN_OS=none</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">将 RK_KERNEL_ARCH 中的 arm64 替换为 aarch64</span></span><br><span class="line">	TOOLCHAIN_ARCH=$&#123;RK_KERNEL_ARCH/arm64/aarch64&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">查找匹配的 GCC 工具链路径</span></span><br><span class="line">	TOOLCHAIN_DIR=&quot;$(realpath prebuilts/gcc/*/$TOOLCHAIN_ARCH/gcc-arm-*)&quot;</span><br><span class="line">	GCC=&quot;$(find &quot;$TOOLCHAIN_DIR&quot; -name &quot;*$TOOLCHAIN_OS*-gcc&quot;)&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查是否存在可执行的 GCC 工具链</span></span><br><span class="line">	if [ ! -x &quot;$GCC&quot; ]; then</span><br><span class="line">		echo &quot;No prebuilt GCC toolchain!&quot;</span><br><span class="line">		return 1</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">设置交叉编译前缀</span></span><br><span class="line">	export CROSS_COMPILE=&quot;$&#123;GCC%gcc&#125;&quot;</span><br><span class="line">	echo &quot;Using prebuilt GCC toolchain: $CROSS_COMPILE&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">获取可用的处理器核心数量</span></span><br><span class="line">	NUM_CPUS=$(getconf _NPROCESSORS_ONLN 2&gt;/dev/null || echo 1)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">设置并发编译任务数，默认为处理器核心数量加一</span></span><br><span class="line">	JLEVEL=$&#123;RK_JOBS:-$(( $NUM_CPUS + 1 ))&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">定义内核编译命令</span></span><br><span class="line">	KMAKE=&quot;make -C kernel/ ARCH=$RK_KERNEL_ARCH -j$JLEVEL&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建 UEFI</span></span><br><span class="line">build_uefi()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">设置交叉编译工具链和相关参数</span></span><br><span class="line">	setup_cross_compile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">根据 RK_KERNEL_ARCH 的值确定 dtb 文件路径</span></span><br><span class="line">	if [ &quot;$RK_KERNEL_ARCH&quot; == &quot;arm&quot; ]; then</span><br><span class="line">		dtb=&quot;kernel/arch/arm/boot/dts/$&#123;RK_KERNEL_DTS&#125;.dtb&quot;</span><br><span class="line">	else</span><br><span class="line">		dtb=&quot;kernel/arch/arm64/boot/dts/rockchip/$&#123;RK_KERNEL_DTS&#125;.dtb&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	echo &quot;============Start building uefi============&quot;</span><br><span class="line">	echo &quot;Copy kernel dtb $dtb to uefi/edk2-platforms/Platform/Rockchip/DeviceTree/rk3588.dtb&quot;</span><br><span class="line">	echo &quot;=========================================&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查 dtb 文件是否存在</span></span><br><span class="line">	if [ ! -f $dtb ]; then</span><br><span class="line">		echo &quot;Please compile the kernel before&quot;</span><br><span class="line">		return -1</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">将 dtb 文件复制到 uefi 目录</span></span><br><span class="line">	cp $dtb uefi/edk2-platforms/Platform/Rockchip/DeviceTree/rk3588.dtb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">进入 uefi 目录并执行构建脚本</span></span><br><span class="line">	cd uefi</span><br><span class="line">	./make.sh $RK_UBOOT_DEFCONFIG</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">完成构建流程</span></span><br><span class="line">	finish_build</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建 U-Boot</span></span><br><span class="line">build_uboot()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查 RK_UBOOT_DEFCONFIG 配置是否存在，若不存在则返回</span></span><br><span class="line">	check_config RK_UBOOT_DEFCONFIG || return 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">设置交叉编译工具链和相关参数</span></span><br><span class="line">	setup_cross_compile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">准备 U-Boot 构建所需的文件</span></span><br><span class="line">	prebuild_uboot</span><br><span class="line">	prebuild_security_uboot $@</span><br><span class="line"></span><br><span class="line">	echo &quot;============Start building uboot============&quot;</span><br><span class="line">	echo &quot;TARGET_UBOOT_CONFIG=$RK_UBOOT_DEFCONFIG&quot;</span><br><span class="line">	echo &quot;=========================================&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">进入 u-boot 目录并删除旧的 *_loader_*.bin 文件</span></span><br><span class="line">	cd u-boot</span><br><span class="line">	rm -f *_loader_*.bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">构建 U-Boot</span></span><br><span class="line">	if [ -n &quot;$RK_UBOOT_DEFCONFIG_FRAGMENT&quot; ]; then</span><br><span class="line">		if [ -f &quot;configs/$&#123;RK_UBOOT_DEFCONFIG&#125;_defconfig&quot; ]; then</span><br><span class="line">			UBOOT_CONFIGS=&quot;$&#123;RK_UBOOT_DEFCONFIG&#125;_defconfig&quot;</span><br><span class="line">		else</span><br><span class="line">			UBOOT_CONFIGS=&quot;$&#123;RK_UBOOT_DEFCONFIG&#125;.config&quot;</span><br><span class="line">		fi</span><br><span class="line">		UBOOT_CONFIGS=&quot;$UBOOT_CONFIGS $RK_UBOOT_DEFCONFIG_FRAGMENT&quot;</span><br><span class="line">	else</span><br><span class="line">		UBOOT_CONFIGS=&quot;$RK_UBOOT_DEFCONFIG&quot;</span><br><span class="line">	fi</span><br><span class="line">	./make.sh $UBOOT_CONFIGS $UBOOT_COMPILE_COMMANDS \</span><br><span class="line">		CROSS_COMPILE=$CROSS_COMPILE</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果需要更新 RK_IDBLOCK_SPL，则执行带有 --idblock 和 --spl 参数的 make.sh</span></span><br><span class="line">	if [ &quot;$RK_IDBLOCK_UPDATE_SPL&quot; = &quot;true&quot; ]; then</span><br><span class="line">		./make.sh --idblock --spl</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	cd ..</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果需要进行 RAMDISK 安全启动，则创建链接到 rockdev 目录的 boot.img 和 recovery.img</span></span><br><span class="line">	if [ &quot;$RK_RAMDISK_SECURITY_BOOTUP&quot; = &quot;true&quot; ];then</span><br><span class="line">		ln -rsf u-boot/boot.img rockdev/</span><br><span class="line">		test -z &quot;$&#123;RK_PACKAGE_FILE_AB&#125;&quot; &amp;&amp; \</span><br><span class="line">			ln -rsf u-boot/recovery.img rockdev/ || true</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">创建链接到 rockdev 目录的 MiniLoaderAll.bin、uboot.img 和 trust.img（如果存在）</span></span><br><span class="line">	LOADER=&quot;$(echo u-boot/*_loader_*v*.bin | head -1)&quot;</span><br><span class="line">	SPL=&quot;$(echo u-boot/*_loader_spl.bin | head -1)&quot;</span><br><span class="line">	ln -rsf &quot;$&#123;LOADER:-$SPL&#125;&quot; rockdev/MiniLoaderAll.bin</span><br><span class="line">	ln -rsf u-boot/uboot.img rockdev/</span><br><span class="line">	[ ! -e u-boot/trust.img ] || \</span><br><span class="line">		ln -rsf u-boot/trust.img rockdev/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">完成构建流程</span></span><br><span class="line">	finish_build</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建 SPL</span></span><br><span class="line">build_spl()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查 RK_SPL_DEFCONFIG 配置是否存在，若不存在则返回</span></span><br><span class="line">	check_config RK_SPL_DEFCONFIG || return 0</span><br><span class="line"></span><br><span class="line">	echo &quot;============Start building spl============&quot;</span><br><span class="line">	echo &quot;TARGET_SPL_CONFIG=$RK_SPL_DEFCONFIG&quot;</span><br><span class="line">	echo &quot;=========================================&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">进入 u-boot 目录并删除旧的 spl.bin 文件</span></span><br><span class="line">	cd u-boot</span><br><span class="line">	rm -f *spl.bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">构建 SPL</span></span><br><span class="line">	./make.sh $RK_SPL_DEFCONFIG</span><br><span class="line">	./make.sh --spl</span><br><span class="line">	cd ..</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">创建链接到 rockdev 目录的 MiniLoaderAll.bin</span></span><br><span class="line">	SPL=&quot;$(echo u-boot/*_loader_spl.bin | head -1)&quot;</span><br><span class="line">	ln -rsf &quot;$SPL&quot; rockdev/MiniLoaderAll.bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">完成构建流程</span></span><br><span class="line">	finish_build</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建 Loader</span></span><br><span class="line">build_loader()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查 RK_LOADER_BUILD_TARGET 配置是否存在，若不存在则返回</span></span><br><span class="line">	check_config RK_LOADER_BUILD_TARGET || return 0</span><br><span class="line"></span><br><span class="line">	echo &quot;============Start building loader============&quot;</span><br><span class="line">	echo &quot;RK_LOADER_BUILD_TARGET=$RK_LOADER_BUILD_TARGET&quot;</span><br><span class="line">	echo &quot;==========================================&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">进入 loader 目录并执行 build.sh 构建 Loader</span></span><br><span class="line">	cd loader</span><br><span class="line">	./build.sh $RK_LOADER_BUILD_TARGET</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">完成构建流程</span></span><br><span class="line">	finish_build</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建 Kernel</span></span><br><span class="line">build_kernel()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查 RK_KERNEL_DTS 和 RK_KERNEL_DEFCONFIG 配置是否存在，若不存在则返回</span></span><br><span class="line">	check_config RK_KERNEL_DTS RK_KERNEL_DEFCONFIG || return 0</span><br><span class="line"></span><br><span class="line">	echo &quot;============Start building kernel============&quot;</span><br><span class="line">	echo &quot;TARGET_KERNEL_ARCH   =$RK_KERNEL_ARCH&quot;</span><br><span class="line">	echo &quot;TARGET_KERNEL_CONFIG =$RK_KERNEL_DEFCONFIG&quot;</span><br><span class="line">	echo &quot;TARGET_KERNEL_DTS    =$RK_KERNEL_DTS&quot;</span><br><span class="line">	echo &quot;TARGET_KERNEL_CONFIG_FRAGMENT =$RK_KERNEL_DEFCONFIG_FRAGMENT&quot;</span><br><span class="line">	echo &quot;==========================================&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">设置交叉编译工具链</span></span><br><span class="line">	setup_cross_compile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">使用 KMAKE 构建 Kernel</span></span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">KMAKE <span class="variable">$RK_KERNEL_DEFCONFIG</span> <span class="variable">$RK_KERNEL_DEFCONFIG_FRAGMENT</span></span></span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">KMAKE <span class="variable">$RK_KERNEL_DTS</span>.img</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查是否存在 Kernel FIT 文件并使用 mk-fitimage.sh 创建镜像</span></span><br><span class="line">	ITS=&quot;$CHIP_DIR/$RK_KERNEL_FIT_ITS&quot;</span><br><span class="line">	if [ -f &quot;$ITS&quot; ]; then</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">COMMON_DIR/mk-fitimage.sh kernel/<span class="variable">$RK_BOOT_IMG</span> \</span></span><br><span class="line"><span class="language-bash">			<span class="string">&quot;<span class="variable">$ITS</span>&quot;</span> <span class="variable">$RK_KERNEL_IMG</span></span></span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">创建链接到 rockdev 目录的 boot.img</span></span><br><span class="line">	ln -rsf kernel/$RK_BOOT_IMG rockdev/boot.img</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">将 boot.img 复制到 u-boot 目录下，用于安全性考虑</span></span><br><span class="line">	cp rockdev/boot.img u-boot/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">构建检查电源域</span></span><br><span class="line">	build_check_power_domain</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">完成构建流程</span></span><br><span class="line">	finish_build</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建 Wi-Fi 和蓝牙</span></span><br><span class="line">build_wifibt()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">设置交叉编译工具链</span></span><br><span class="line">	setup_cross_compile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">设置 Buildroot 相关路径</span></span><br><span class="line">	BUILDROOT_OUTDIR=$TOP_DIR/buildroot/output/$RK_CFG_BUILDROOT/</span><br><span class="line">	BUILDROOT_HOST_DIR=$BUILDROOT_OUTDIR/host/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查 Buildroot 架构</span></span><br><span class="line">	if grep -wq aarch64 &quot;$BUILDROOT_OUTDIR/.config&quot; 2&gt;/dev/null; then</span><br><span class="line">		BUILDROOT_ARCH=arm64</span><br><span class="line">	else</span><br><span class="line">		BUILDROOT_ARCH=arm</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">获取 Buildroot GCC 和 SYSROOT 路径</span></span><br><span class="line">	BUILDROOT_GCC=&quot;$(echo $BUILDROOT_HOST_DIR/bin/*buildroot*-gcc)&quot;</span><br><span class="line">	BUILDROOT_SYSROOT=&quot;$(echo $BUILDROOT_HOST_DIR/*/sysroot/)&quot;</span><br><span class="line">	if [ ! -x &quot;$BUILDROOT_GCC&quot; -o ! -d &quot;$BUILDROOT_SYSROOT&quot; ]; then</span><br><span class="line">		echo &quot;ERROR: Buildroot not ready!&quot;</span><br><span class="line">		exit -1</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">设置 Wi-Fi 和蓝牙芯片类型和 TTY 设备</span></span><br><span class="line">	if [ -n &quot;$1&quot; ]; then</span><br><span class="line">		WIFI_CHIP=$1</span><br><span class="line">	elif [ -n &quot;$RK_WIFIBT_CHIP&quot; ]; then</span><br><span class="line">		WIFI_CHIP=$RK_WIFIBT_CHIP</span><br><span class="line">	else</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">默认为 ALL_AP</span></span><br><span class="line">		echo &quot;=== WARNNING WIFI_CHIP is NULL so default to ALL_AP ===&quot;</span><br><span class="line">		WIFI_CHIP=ALL_AP</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [ -n &quot;$2&quot; ]; then</span><br><span class="line">		BT_TTY_DEV=$2</span><br><span class="line">	elif [ -n &quot;$RK_WIFIBT_TTY&quot; ]; then</span><br><span class="line">		BT_TTY_DEV=$RK_WIFIBT_TTY</span><br><span class="line">	else</span><br><span class="line">		echo &quot;=== WARNNING BT_TTY is NULL so default to ttyS0 ===&quot;</span><br><span class="line">		BT_TTY_DEV=ttyS0</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查内核 .config 配置</span></span><br><span class="line">	WIFI_USB=$(grep &quot;CONFIG_USB=y&quot; $TOP_DIR/kernel/.config || true)</span><br><span class="line">	WIFI_SDIO=$(grep &quot;CONFIG_MMC=y&quot; $TOP_DIR/kernel/.config || true)</span><br><span class="line">	WIFI_PCIE=$(grep &quot;CONFIG_PCIE_DW_ROCKCHIP=y&quot; $TOP_DIR/kernel/.config || true)</span><br><span class="line">	WIFI_RFKILL=$(grep &quot;CONFIG_RFKILL=y&quot; $TOP_DIR/kernel/.config || true)</span><br><span class="line">	if [ -z &quot;$WIFI_SDIO&quot; ]; then</span><br><span class="line">		echo &quot;=== WARNNING CONFIG_MMC not set !!! ===&quot;</span><br><span class="line">	fi</span><br><span class="line">	if [ -z &quot;$WIFI_RFKILL&quot; ]; then</span><br><span class="line">		echo &quot;=== WARNNING CONFIG_USB not set !!! ===&quot;</span><br><span class="line">	fi</span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; =~ &quot;U&quot; ]]; then</span><br><span class="line">		if [ -z &quot;$WIFI_USB&quot; ]; then</span><br><span class="line">			echo &quot;=== WARNNING CONFIG_USB not set so ABORT!!! ===&quot;</span><br><span class="line">			exit 0</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line">	echo &quot;kernel config: $WIFI_USB $WIFI_SDIO $WIFI_RFKILL&quot;</span><br><span class="line"></span><br><span class="line">	TARGET_CC=$&#123;CROSS_COMPILE&#125;gcc</span><br><span class="line">	RKWIFIBT=$TOP_DIR/external/rkwifibt</span><br><span class="line">	RKWIFIBT_APP=$TOP_DIR/external/rkwifibt-app</span><br><span class="line">	TARGET_ROOTFS_DIR=$TOP_DIR/buildroot/output/$RK_CFG_BUILDROOT/target</span><br><span class="line"></span><br><span class="line">	echo &quot;========build wifibt info=======&quot;</span><br><span class="line">	echo CROSS_COMPILE=$CROSS_COMPILE</span><br><span class="line">	echo WIFI_CHIP=$WIFI_CHIP</span><br><span class="line">	echo BT_TTY_DEV=$BT_TTY_DEV</span><br><span class="line">	echo TARGET_ROOTFS_DIR=$TARGET_ROOTFS_DIR</span><br><span class="line">	echo BUILDROOT_GCC=$BUILDROOT_GCC</span><br><span class="line">	echo BUILDROOT_SYSROOT=$BUILDROOT_SYSROOT</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; =~ &quot;ALL_AP&quot; ]];then</span><br><span class="line">		echo &quot;building bcmdhd sdio&quot;</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/bcmdhd CONFIG_BCMDHD=m CONFIG_BCMDHD_SDIO=y CONFIG_BCMDHD_PCIE=</span></span><br><span class="line">		if [ -n &quot;$WIFI_PCIE&quot; ]; then</span><br><span class="line">			echo &quot;building bcmdhd pcie&quot;</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/bcmdhd CONFIG_BCMDHD=m CONFIG_BCMDHD_PCIE=y CONFIG_BCMDHD_SDIO=</span></span><br><span class="line">		fi</span><br><span class="line">		if [ -n &quot;$WIFI_USB&quot; ]; then</span><br><span class="line">			echo &quot;building rtl8188fu usb&quot;</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8188fu modules</span></span><br><span class="line">		fi</span><br><span class="line">		echo &quot;building rtl8189fs sdio&quot;</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8189fs modules</span></span><br><span class="line">		echo &quot;building rtl8723ds sdio&quot;</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8723ds modules</span></span><br><span class="line">		echo &quot;building rtl8821cs sdio&quot;</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8821cs modules</span></span><br><span class="line">		echo &quot;building rtl8822cs sdio&quot;</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8822cs modules</span></span><br><span class="line">		echo &quot;building rtl8852bs sdio&quot;</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8852bs modules DRV_PATH=<span class="variable">$RKWIFIBT</span>/drivers/rtl8852bs</span></span><br><span class="line">		if [ -n &quot;$WIFI_PCIE&quot; ]; then</span><br><span class="line">			echo &quot;building rtl8852be pcie&quot;</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8852be modules DRV_PATH=<span class="variable">$RKWIFIBT</span>/drivers/rtl8852be</span></span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; =~ &quot;ALL_CY&quot; ]];then</span><br><span class="line">		echo &quot;building CYW4354&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/chips/CYW4354_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">		echo &quot;building CYW4373&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/chips/CYW4373_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">		echo &quot;building CYW43438&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/chips/CYW43438_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">		echo &quot;building CYW43455&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/chips/CYW43455_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">		echo &quot;building CYW5557X&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/chips/CYW5557X_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">		if [ -n &quot;$WIFI_PCIE&quot; ]; then</span><br><span class="line">			echo &quot;building CYW5557X_PCIE&quot;</span><br><span class="line">			cp $RKWIFIBT/drivers/infineon/chips/CYW5557X_PCIE_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">			echo &quot;building CYW54591_PCIE&quot;</span><br><span class="line">			cp $RKWIFIBT/drivers/infineon/chips/CYW54591_PCIE_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">		fi</span><br><span class="line">		echo &quot;building CYW54591&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/chips/CYW54591_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">		KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line"></span><br><span class="line">		if [ -n &quot;$WIFI_USB&quot; ]; then</span><br><span class="line">			echo &quot;building rtl8188fu usb&quot;</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8188fu modules</span></span><br><span class="line">		fi</span><br><span class="line">		echo &quot;building rtl8189fs sdio&quot;</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8189fs modules</span></span><br><span class="line">		echo &quot;building rtl8723ds sdio&quot;</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8723ds modules</span></span><br><span class="line">		echo &quot;building rtl8821cs sdio&quot;</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8821cs modules</span></span><br><span class="line">		echo &quot;building rtl8822cs sdio&quot;</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8822cs modules</span></span><br><span class="line">		echo &quot;building rtl8852bs sdio&quot;</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8852bs modules DRV_PATH=<span class="variable">$RKWIFIBT</span>/drivers/rtl8852bs</span></span><br><span class="line">		if [ -n &quot;$WIFI_PCIE&quot; ]; then</span><br><span class="line">			echo &quot;building rtl8852be pcie&quot;</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8852be modules DRV_PATH=<span class="variable">$RKWIFIBT</span>/drivers/rtl8852be</span></span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; =~ &quot;AP6&quot; ]];then</span><br><span class="line">		if [[ &quot;$WIFI_CHIP&quot; = &quot;AP6275_PCIE&quot; ]];then</span><br><span class="line">			echo &quot;building bcmdhd pcie driver&quot;</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/bcmdhd CONFIG_BCMDHD=m CONFIG_BCMDHD_PCIE=y CONFIG_BCMDHD_SDIO=</span></span><br><span class="line">		else</span><br><span class="line">			echo &quot;building bcmdhd sdio driver&quot;</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/bcmdhd CONFIG_BCMDHD=m CONFIG_BCMDHD_SDIO=y CONFIG_BCMDHD_PCIE=</span></span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;CYW4354&quot; ]];then</span><br><span class="line">		echo &quot;building CYW4354&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/chips/CYW4354_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;CYW4373&quot; ]];then</span><br><span class="line">		echo &quot;building CYW4373&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/chips/CYW4373_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;CYW43438&quot; ]];then</span><br><span class="line">		echo &quot;building CYW43438&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/chips/CYW43438_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;CYW43455&quot; ]];then</span><br><span class="line">		echo &quot;building CYW43455&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/chips/CYW43455_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;CYW5557X&quot; ]];then</span><br><span class="line">		echo &quot;building CYW5557X&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/chips/CYW5557X_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;CYW5557X_PCIE&quot; ]];then</span><br><span class="line">		echo &quot;building CYW5557X_PCIE&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/chips/CYW5557X_PCIE_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;CYW54591&quot; ]];then</span><br><span class="line">		echo &quot;building CYW54591&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/chips/CYW54591_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;CYW54591_PCIE&quot; ]];then</span><br><span class="line">		echo &quot;building CYW54591_PCIE&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/chips/CYW54591_PCIE_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;RTL8188FU&quot; ]];then</span><br><span class="line">		echo &quot;building rtl8188fu driver&quot;</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8188fu modules</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;RTL8189FS&quot; ]];then</span><br><span class="line">		echo &quot;building rtl8189fs driver&quot;</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8189fs modules</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;RTL8723DS&quot; ]];then</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8723ds modules</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;RTL8821CS&quot; ]];then</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8821cs modules</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;RTL8822CS&quot; ]];then</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8822cs modules</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;RTL8852BS&quot; ]];then</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8852bs modules</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;RTL8852BE&quot; ]];then</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8852be modules</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	echo &quot;building brcm_tools&quot;</span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">TARGET_CC -o <span class="variable">$RKWIFIBT</span>/tools/brcm_tools/brcm_patchram_plus1 <span class="variable">$RKWIFIBT</span>/tools/brcm_tools/brcm_patchram_plus1.c</span></span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">TARGET_CC -o <span class="variable">$RKWIFIBT</span>/tools/brcm_tools/dhd_priv <span class="variable">$RKWIFIBT</span>/tools/brcm_tools/dhd_priv.c</span></span><br><span class="line"></span><br><span class="line">	echo &quot;building rk_wifibt_init&quot;</span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">TARGET_CC -o <span class="variable">$RKWIFIBT</span>/src/rk_wifibt_init <span class="variable">$RKWIFIBT</span>/src/rk_wifi_init.c</span></span><br><span class="line"></span><br><span class="line">	echo &quot;building realtek_tools&quot;</span><br><span class="line">	make -C $RKWIFIBT/tools/rtk_hciattach/ CC=$TARGET_CC</span><br><span class="line"></span><br><span class="line">	echo &quot;building realtek bt drivers&quot;</span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/bluetooth_uart_driver</span></span><br><span class="line">	if [ -n &quot;$WIFI_USB&quot; ]; then</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/bluetooth_usb_driver</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [ &quot;$RK_CHIP&quot; = &quot;rv1126_rv1109&quot; ];then</span><br><span class="line">		echo &quot;target is rv1126_rv1109, skip $RKWIFIBT_APP&quot;</span><br><span class="line">	else</span><br><span class="line">		echo &quot;building rkwifibt-app&quot;</span><br><span class="line">		make -C $RKWIFIBT_APP CC=$BUILDROOT_GCC \</span><br><span class="line">			SYSROOT=$BUILDROOT_SYSROOT ARCH=$BUILDROOT_ARCH || true</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	echo &quot;chmod +x tools&quot;</span><br><span class="line">	chmod 755 $RKWIFIBT/tools/brcm_tools/brcm_patchram_plus1</span><br><span class="line">	chmod 755 $RKWIFIBT/tools/brcm_tools/dhd_priv</span><br><span class="line">	chmod 755 $RKWIFIBT/src/rk_wifibt_init</span><br><span class="line">	chmod 755 $RKWIFIBT/tools/rtk_hciattach/rtk_hciattach</span><br><span class="line"></span><br><span class="line">	echo &quot;mkdir rootfs dir&quot; $TARGET_ROOTFS_DIR</span><br><span class="line">	rm -rf $TARGET_ROOTFS_DIR/system/lib/modules/</span><br><span class="line">	rm -rf $TARGET_ROOTFS_DIR/system/etc/firmware/</span><br><span class="line">	rm -rf $TARGET_ROOTFS_DIR/vendor/</span><br><span class="line">	rm -rf $TARGET_ROOTFS_DIR/usr/lib/modules/</span><br><span class="line">	mkdir -p $TARGET_ROOTFS_DIR/usr/lib/modules/</span><br><span class="line">	mkdir -p $TARGET_ROOTFS_DIR/system/lib/modules/</span><br><span class="line">	mkdir -p $TARGET_ROOTFS_DIR/system/etc/firmware/</span><br><span class="line">	mkdir -p $TARGET_ROOTFS_DIR/lib/firmware/rtlbt/</span><br><span class="line"></span><br><span class="line">	echo &quot;create link system-&gt;vendor&quot;</span><br><span class="line">	cd $TARGET_ROOTFS_DIR/</span><br><span class="line">	rm -rf $TARGET_ROOTFS_DIR/vendor</span><br><span class="line">	ln -rsf system $TARGET_ROOTFS_DIR/vendor</span><br><span class="line">	cd -</span><br><span class="line"></span><br><span class="line">	echo &quot;copy tools/sh to rootfs&quot;</span><br><span class="line">	cp $RKWIFIBT/bin/$BUILDROOT_ARCH/* $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">	cp $RKWIFIBT/sh/wifi_start.sh $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">	cp $RKWIFIBT/sh/wifi_ap6xxx_rftest.sh $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">	cp $RKWIFIBT/conf/wpa_supplicant.conf $TARGET_ROOTFS_DIR/etc/</span><br><span class="line">	cp $RKWIFIBT/conf/dnsmasq.conf $TARGET_ROOTFS_DIR/etc/</span><br><span class="line">	cp $RKWIFIBT/tools/brcm_tools/dhd_priv $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">	cp $RKWIFIBT/tools/brcm_tools/brcm_patchram_plus1 $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">	cp $RKWIFIBT/src/rk_wifibt_init $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;ALL_CY&quot; ]];then</span><br><span class="line">		echo &quot;copy infineon/realtek firmware/nvram to rootfs&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/*.ko $TARGET_ROOTFS_DIR/system/lib/modules/ || true</span><br><span class="line">		cp $RKWIFIBT/firmware/infineon/*/* $TARGET_ROOTFS_DIR/system/etc/firmware/ || true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">todo rockchip</span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"><span class="built_in">cp</span> <span class="variable">$RKWIFIBT</span>/firmware/rockchip/* <span class="variable">$TARGET_ROOTFS_DIR</span>/system/etc/firmware/</span></span><br><span class="line">		cp $RKWIFIBT/sh/bt_load_broadcom_firmware $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">		cp $TARGET_ROOTFS_DIR/usr/bin/bt_load_broadcom_firmware $TARGET_ROOTFS_DIR/usr/bin/bt_init.sh</span><br><span class="line">		cp $TARGET_ROOTFS_DIR/usr/bin/bt_load_broadcom_firmware $TARGET_ROOTFS_DIR/usr/bin/bt_pcba_test</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">reatek</span></span><br><span class="line">		cp $RKWIFIBT/firmware/realtek/*/* $TARGET_ROOTFS_DIR/lib/firmware/</span><br><span class="line">		cp $RKWIFIBT/firmware/realtek/*/* $TARGET_ROOTFS_DIR/lib/firmware/rtlbt/</span><br><span class="line">		cp $RKWIFIBT/tools/rtk_hciattach/rtk_hciattach $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">		cp $RKWIFIBT/drivers/bluetooth_uart_driver/hci_uart.ko $TARGET_ROOTFS_DIR/usr/lib/modules/</span><br><span class="line">		if [ -n &quot;$WIFI_USB&quot; ]; then</span><br><span class="line">			cp $RKWIFIBT/drivers/bluetooth_usb_driver/rtk_btusb.ko $TARGET_ROOTFS_DIR/usr/lib/modules/</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		rm -rf $TARGET_ROOTFS_DIR/etc/init.d/S36load_wifi_modules</span><br><span class="line">		cp $RKWIFIBT/S36load_all_wifi_modules $TARGET_ROOTFS_DIR/etc/init.d/</span><br><span class="line">		sed -i &quot;s/BT_TTY_DEV/\/dev\/$&#123;BT_TTY_DEV&#125;/g&quot; $TARGET_ROOTFS_DIR/etc/init.d/S36load_all_wifi_modules</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;ALL_AP&quot; ]];then</span><br><span class="line">		echo &quot;copy ap6xxx/realtek firmware/nvram to rootfs&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/bcmdhd/*.ko $TARGET_ROOTFS_DIR/system/lib/modules/</span><br><span class="line">		cp $RKWIFIBT/firmware/broadcom/*/wifi/* $TARGET_ROOTFS_DIR/system/etc/firmware/ || true</span><br><span class="line">		cp $RKWIFIBT/firmware/broadcom/*/bt/* $TARGET_ROOTFS_DIR/system/etc/firmware/ || true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">todo rockchip</span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"><span class="built_in">cp</span> <span class="variable">$RKWIFIBT</span>/firmware/rockchip/* <span class="variable">$TARGET_ROOTFS_DIR</span>/system/etc/firmware/</span></span><br><span class="line">		cp $RKWIFIBT/sh/bt_load_broadcom_firmware $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">		cp $TARGET_ROOTFS_DIR/usr/bin/bt_load_broadcom_firmware $TARGET_ROOTFS_DIR/usr/bin/bt_init.sh</span><br><span class="line">		cp $TARGET_ROOTFS_DIR/usr/bin/bt_load_broadcom_firmware $TARGET_ROOTFS_DIR/usr/bin/bt_pcba_test</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">reatek</span></span><br><span class="line">		cp -rf $RKWIFIBT/firmware/realtek/*/* $TARGET_ROOTFS_DIR/lib/firmware/</span><br><span class="line">		cp -rf $RKWIFIBT/firmware/realtek/*/* $TARGET_ROOTFS_DIR/lib/firmware/rtlbt/</span><br><span class="line">		cp $RKWIFIBT/tools/rtk_hciattach/rtk_hciattach $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">		cp $RKWIFIBT/drivers/bluetooth_uart_driver/hci_uart.ko $TARGET_ROOTFS_DIR/usr/lib/modules/</span><br><span class="line">		if [ -n &quot;$WIFI_USB&quot; ]; then</span><br><span class="line">			cp $RKWIFIBT/drivers/bluetooth_usb_driver/rtk_btusb.ko $TARGET_ROOTFS_DIR/usr/lib/modules/</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		rm -rf $TARGET_ROOTFS_DIR/etc/init.d/S36load_wifi_modules</span><br><span class="line">		cp $RKWIFIBT/S36load_all_wifi_modules $TARGET_ROOTFS_DIR/etc/init.d/</span><br><span class="line">		sed -i &quot;s/BT_TTY_DEV/\/dev\/$&#123;BT_TTY_DEV&#125;/g&quot; $TARGET_ROOTFS_DIR/etc/init.d/S36load_all_wifi_modules</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; =~ &quot;RTL&quot; ]];then</span><br><span class="line">		echo &quot;Copy RTL file to rootfs&quot;</span><br><span class="line">		if [ -d &quot;$RKWIFIBT/firmware/realtek/$WIFI_CHIP&quot; ]; then</span><br><span class="line">			cp $RKWIFIBT/firmware/realtek/$WIFI_CHIP/* $TARGET_ROOTFS_DIR/lib/firmware/rtlbt/</span><br><span class="line">			cp $RKWIFIBT/firmware/realtek/$WIFI_CHIP/* $TARGET_ROOTFS_DIR/lib/firmware/</span><br><span class="line">		else</span><br><span class="line">			echo &quot;INFO: $WIFI_CHIP isn&#x27;t bluetooth?&quot;</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		WIFI_KO_DIR=$(echo $WIFI_CHIP | tr &#x27;[A-Z]&#x27; &#x27;[a-z]&#x27;)</span><br><span class="line"></span><br><span class="line">		cp $RKWIFIBT/drivers/$WIFI_KO_DIR/*.ko $TARGET_ROOTFS_DIR/system/lib/modules/</span><br><span class="line"></span><br><span class="line">		cp $RKWIFIBT/sh/bt_load_rtk_firmware $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">		sed -i &quot;s/BT_TTY_DEV/\/dev\/$&#123;BT_TTY_DEV&#125;/g&quot; $TARGET_ROOTFS_DIR/usr/bin/bt_load_rtk_firmware</span><br><span class="line">		if [ -n &quot;$WIFI_USB&quot; ]; then</span><br><span class="line">			cp $RKWIFIBT/drivers/bluetooth_usb_driver/rtk_btusb.ko $TARGET_ROOTFS_DIR/usr/lib/modules/</span><br><span class="line">			sed -i &quot;s/BT_DRV/rtk_btusb/g&quot; $TARGET_ROOTFS_DIR/usr/bin/bt_load_rtk_firmware</span><br><span class="line">		else</span><br><span class="line">			cp $RKWIFIBT/drivers/bluetooth_uart_driver/hci_uart.ko $TARGET_ROOTFS_DIR/usr/lib/modules/</span><br><span class="line">			sed -i &quot;s/BT_DRV/hci_uart/g&quot; $TARGET_ROOTFS_DIR/usr/bin/bt_load_rtk_firmware</span><br><span class="line">		fi</span><br><span class="line">		cp $TARGET_ROOTFS_DIR/usr/bin/bt_load_rtk_firmware $TARGET_ROOTFS_DIR/usr/bin/bt_init.sh</span><br><span class="line">		cp $TARGET_ROOTFS_DIR/usr/bin/bt_load_rtk_firmware $TARGET_ROOTFS_DIR/usr/bin/bt_pcba_test</span><br><span class="line">		cp $RKWIFIBT/tools/rtk_hciattach/rtk_hciattach $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">		rm -rf $TARGET_ROOTFS_DIR/etc/init.d/S36load_all_wifi_modules</span><br><span class="line">		cp $RKWIFIBT/S36load_wifi_modules $TARGET_ROOTFS_DIR/etc/init.d/</span><br><span class="line">		sed -i &quot;s/WIFI_KO/\/system\/lib\/modules\/$WIFI_CHIP.ko/g&quot; $TARGET_ROOTFS_DIR/etc/init.d/S36load_wifi_modules</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; =~ &quot;CYW&quot; ]];then</span><br><span class="line">		echo &quot;Copy CYW file to rootfs&quot;</span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">tools</span></span><br><span class="line">		cp $RKWIFIBT/tools/brcm_tools/dhd_priv $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">		cp $RKWIFIBT/tools/brcm_tools/brcm_patchram_plus1 $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">firmware</span></span><br><span class="line">		cp $RKWIFIBT/firmware/infineon/$WIFI_CHIP/* $TARGET_ROOTFS_DIR/system/etc/firmware/</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/*.ko $TARGET_ROOTFS_DIR/system/lib/modules/</span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">bt</span></span><br><span class="line">		cp $RKWIFIBT/sh/bt_load_broadcom_firmware $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">		sed -i &quot;s/BT_TTY_DEV/\/dev\/$&#123;BT_TTY_DEV&#125;/g&quot; $TARGET_ROOTFS_DIR/usr/bin/bt_load_broadcom_firmware</span><br><span class="line">		sed -i &quot;s/BTFIRMWARE_PATH/\/system\/etc\/firmware\//g&quot; $TARGET_ROOTFS_DIR/usr/bin/bt_load_broadcom_firmware</span><br><span class="line">		cp $TARGET_ROOTFS_DIR/usr/bin/bt_load_broadcom_firmware $TARGET_ROOTFS_DIR/usr/bin/bt_init.sh</span><br><span class="line">		cp $TARGET_ROOTFS_DIR/usr/bin/bt_load_broadcom_firmware $TARGET_ROOTFS_DIR/usr/bin/bt_pcba_test</span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">wifi</span></span><br><span class="line">		rm -rf $TARGET_ROOTFS_DIR/etc/init.d/S36load_all_wifi_modules</span><br><span class="line">		cp $RKWIFIBT/S36load_wifi_modules $TARGET_ROOTFS_DIR/etc/init.d/</span><br><span class="line">		sed -i &quot;s/WIFI_KO/\/system\/lib\/modules\/$WIFI_CHIP.ko/g&quot; $TARGET_ROOTFS_DIR/etc/init.d/S36load_wifi_modules</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; =~ &quot;AP6&quot; ]];then</span><br><span class="line">		echo &quot;Copy AP file to rootfs&quot;</span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">tools</span></span><br><span class="line">		cp $RKWIFIBT/tools/brcm_tools/dhd_priv $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">		cp $RKWIFIBT/tools/brcm_tools/brcm_patchram_plus1 $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">firmware</span></span><br><span class="line">		cp $RKWIFIBT/firmware/broadcom/$WIFI_CHIP/wifi/* $TARGET_ROOTFS_DIR/system/etc/firmware/</span><br><span class="line">		cp $RKWIFIBT/firmware/broadcom/$WIFI_CHIP/bt/* $TARGET_ROOTFS_DIR/system/etc/firmware/</span><br><span class="line">		cp $RKWIFIBT/drivers/bcmdhd/*.ko $TARGET_ROOTFS_DIR/system/lib/modules/</span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">bt</span></span><br><span class="line">		cp $RKWIFIBT/sh/bt_load_broadcom_firmware $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">		sed -i &quot;s/BT_TTY_DEV/\/dev\/$&#123;BT_TTY_DEV&#125;/g&quot; $TARGET_ROOTFS_DIR/usr/bin/bt_load_broadcom_firmware</span><br><span class="line">		sed -i &quot;s/BTFIRMWARE_PATH/\/system\/etc\/firmware\//g&quot; $TARGET_ROOTFS_DIR/usr/bin/bt_load_broadcom_firmware</span><br><span class="line">		cp $TARGET_ROOTFS_DIR/usr/bin/bt_load_broadcom_firmware $TARGET_ROOTFS_DIR/usr/bin/bt_init.sh</span><br><span class="line">		cp $TARGET_ROOTFS_DIR/usr/bin/bt_load_broadcom_firmware $TARGET_ROOTFS_DIR/usr/bin/bt_pcba_test</span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">wifi</span></span><br><span class="line">		rm -rf $TARGET_ROOTFS_DIR/etc/init.d/S36load_all_wifi_modules</span><br><span class="line">		cp $RKWIFIBT/S36load_wifi_modules $TARGET_ROOTFS_DIR/etc/init.d/</span><br><span class="line">		if [[ &quot;$WIFI_CHIP&quot; =~ &quot;AP&quot; ]];then</span><br><span class="line">			sed -i &quot;s/WIFI_KO/\/system\/lib\/modules\/bcmdhd.ko/g&quot; $TARGET_ROOTFS_DIR/etc/init.d/S36load_wifi_modules</span><br><span class="line">		else</span><br><span class="line">			sed -i &quot;s/WIFI_KO/\/system\/lib\/modules\/bcmdhd_pcie.ko/g&quot; $TARGET_ROOTFS_DIR/etc/init.d/S36load_wifi_modules</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line">	finish_build</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">exit</span> 0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建内核模块</span></span><br><span class="line">build_modules()</span><br><span class="line">&#123;</span><br><span class="line">	check_config RK_KERNEL_DEFCONFIG || return 0</span><br><span class="line"></span><br><span class="line">	echo &quot;============Start building kernel modules============&quot;</span><br><span class="line">	echo &quot;TARGET_KERNEL_ARCH   =$RK_KERNEL_ARCH&quot;</span><br><span class="line">	echo &quot;TARGET_KERNEL_CONFIG =$RK_KERNEL_DEFCONFIG&quot;</span><br><span class="line">	echo &quot;TARGET_KERNEL_CONFIG_FRAGMENT =$RK_KERNEL_DEFCONFIG_FRAGMENT&quot;</span><br><span class="line">	echo &quot;==================================================&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">设置交叉编译工具链</span></span><br><span class="line">	setup_cross_compile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">使用指定的内核配置和片段进行构建</span></span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">KMAKE <span class="variable">$RK_KERNEL_DEFCONFIG</span> <span class="variable">$RK_KERNEL_DEFCONFIG_FRAGMENT</span></span></span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">KMAKE modules</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">完成构建</span></span><br><span class="line">	finish_build</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建 Buildroot 根文件系统</span></span><br><span class="line">build_buildroot()</span><br><span class="line">&#123;</span><br><span class="line">	check_config RK_CFG_BUILDROOT || return 0</span><br><span class="line"></span><br><span class="line">	ROOTFS_DIR=$1</span><br><span class="line"></span><br><span class="line">	echo &quot;==========Start building buildroot rootfs ==========&quot;</span><br><span class="line">	echo &quot;TARGET_BUILDROOT_CONFIG=$RK_CFG_BUILDROOT&quot;</span><br><span class="line">	echo &quot;=========================================&quot;</span><br><span class="line"></span><br><span class="line">	DST_DIR=.buildroot</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">使用 mk-buildroot.sh 脚本构建 Buildroot 根文件系统</span></span><br><span class="line">	/usr/bin/time -f &quot;you take %E to build buildroot&quot; \</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">COMMON_DIR/mk-buildroot.sh <span class="variable">$RK_CFG_BUILDROOT</span> <span class="variable">$DST_DIR</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">删除旧的根文件系统目录并创建新的符号链接</span></span><br><span class="line">	rm -rf $ROOTFS_DIR</span><br><span class="line">	ln -rsf $DST_DIR $ROOTFS_DIR</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">完成构建</span></span><br><span class="line">	finish_build</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">kernel_version()</span><br><span class="line">&#123;</span><br><span class="line">	[ -d &quot;$1&quot; ] || return 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">定义内核版本号的关键字</span></span><br><span class="line">	VERSION_KEYS=&quot;VERSION PATCHLEVEL&quot;</span><br><span class="line">	VERSION=&quot;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">遍历关键字，获取内核版本号的各个部分</span></span><br><span class="line">	for k in $VERSION_KEYS; do</span><br><span class="line">		v=$(grep &quot;^$k = &quot; $1/Makefile | cut -d&#x27; &#x27; -f3)</span><br><span class="line">		VERSION=$&#123;VERSION:+$&#123;VERSION&#125;.&#125;$v</span><br><span class="line">	done</span><br><span class="line">	echo $VERSION</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建 Yocto rootfs</span></span><br><span class="line">build_yocto()</span><br><span class="line">&#123;</span><br><span class="line">	check_config RK_YOCTO_MACHINE || return 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">开始构建 Yocto rootfs</span></span><br><span class="line">	echo &quot;=========开始构建 Yocto rootfs=========&quot;</span><br><span class="line">	echo &quot;目标机器：$RK_YOCTO_MACHINE&quot;</span><br><span class="line">	echo &quot;=====================================&quot;</span><br><span class="line"></span><br><span class="line">	KERNEL_VERSION=$(kernel_version kernel/)</span><br><span class="line"></span><br><span class="line">	cd yocto</span><br><span class="line">	ln -rsf $RK_YOCTO_MACHINE.conf build/conf/local.conf</span><br><span class="line">	source oe-init-build-env</span><br><span class="line">	LANG=en_US.UTF-8 LANGUAGE=en_US.en LC_ALL=en_US.UTF-8 \</span><br><span class="line">		bitbake core-image-minimal -r conf/include/rksdk.conf \</span><br><span class="line">		-r conf/include/kernel-$KERNEL_VERSION.conf</span><br><span class="line"></span><br><span class="line">	finish_build</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建 debian rootfs</span></span><br><span class="line">build_debian()</span><br><span class="line">&#123;</span><br><span class="line">	ARCH=$&#123;RK_DEBIAN_ARCH:-$&#123;RK_KERNEL_ARCH&#125;&#125;</span><br><span class="line">	case $ARCH in</span><br><span class="line">		arm|armhf) ARCH=armhf ;;</span><br><span class="line">		*) ARCH=arm64 ;;</span><br><span class="line">	esac</span><br><span class="line"></span><br><span class="line">	echo &quot;=========开始构建 Debian ($ARCH) 根文件系统=========&quot;</span><br><span class="line"></span><br><span class="line">	cd debian</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查是否存在 linaro 版本的 Debian 根文件系统压缩包，如果不存在则执行 mk-base-debian.sh 脚本构建</span></span><br><span class="line">	if [ ! -f linaro-$RK_DEBIAN_VERSION-alip-*.tar.gz ]; then</span><br><span class="line">		RELEASE=$RK_DEBIAN_VERSION TARGET=desktop ARCH=$ARCH ./mk-base-debian.sh</span><br><span class="line">		ln -rsf linaro-$RK_DEBIAN_VERSION-alip-*.tar.gz linaro-$RK_DEBIAN_VERSION-$ARCH.tar.gz</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	VERSION=debug ARCH=$ARCH ./mk-rootfs-$RK_DEBIAN_VERSION.sh</span><br><span class="line">	./mk-image.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">完成构建</span></span><br><span class="line">	finish_build</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译文件系统</span></span><br><span class="line">build_rootfs()</span><br><span class="line">&#123;</span><br><span class="line">	check_config RK_ROOTFS_TYPE || return 0</span><br><span class="line"></span><br><span class="line">	ROOTFS=$&#123;1:-$&#123;RK_ROOTFS_SYSTEM:-buildroot&#125;&#125;</span><br><span class="line">	ROOTFS_IMG=rootfs.$&#123;RK_ROOTFS_TYPE&#125;</span><br><span class="line">	ROOTFS_DIR=.rootfs</span><br><span class="line"></span><br><span class="line">	echo &quot;==========开始构建根文件系统($ROOTFS)，输出到$ROOTFS_DIR==========&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">删除旧的根文件系统目录并创建新的目录</span></span><br><span class="line">	rm -rf $ROOTFS_DIR</span><br><span class="line">	mkdir -p $ROOTFS_DIR</span><br><span class="line"></span><br><span class="line">	case &quot;$ROOTFS&quot; in</span><br><span class="line">		yocto)</span><br><span class="line">			build_yocto</span><br><span class="line">			ln -rsf yocto/build/latest/rootfs.img \</span><br><span class="line">				$ROOTFS_DIR/rootfs.ext4</span><br><span class="line">			;;</span><br><span class="line">		debian)</span><br><span class="line">			build_debian</span><br><span class="line">			ln -rsf debian/linaro-rootfs.img \</span><br><span class="line">				$ROOTFS_DIR/rootfs.ext4</span><br><span class="line">			;;</span><br><span class="line">		buildroot)</span><br><span class="line">			build_buildroot $ROOTFS_DIR</span><br><span class="line">			build_wifibt</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">为 wifibt 重新编译</span></span><br><span class="line">			build_buildroot $ROOTFS_DIR</span><br><span class="line">			;;</span><br><span class="line">		*)</span><br><span class="line">			echo &quot;$ROOTFS 不支持！&quot;</span><br><span class="line">			exit 1</span><br><span class="line">			;;</span><br><span class="line">	esac</span><br><span class="line"></span><br><span class="line">	if [ ! -f &quot;$ROOTFS_DIR/$ROOTFS_IMG&quot; ]; then</span><br><span class="line">		echo &quot;未生成 $ROOTFS_IMG...&quot;</span><br><span class="line">		exit 1</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	ln -rsf $ROOTFS_DIR/$ROOTFS_IMG rockdev/rootfs.img</span><br><span class="line"></span><br><span class="line">	[ ! -f $ROOTFS_DIR/oem.img ] || ln -rsf $ROOTFS_DIR/oem.img rockdev/</span><br><span class="line"></span><br><span class="line">	if [ &quot;$RK_RAMBOOT&quot; ]; then</span><br><span class="line">		/usr/bin/time -f &quot;you take %E to pack ramboot image&quot; \</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">COMMON_DIR/mk-ramdisk.sh rockdev/rootfs.img \</span></span><br><span class="line"><span class="language-bash">			<span class="variable">$ROOTFS_DIR</span>/ramboot.img</span></span><br><span class="line">		ln -rsf $ROOTFS_DIR/ramboot.img rockdev/boot.img</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">用于安全性</span></span><br><span class="line">		cp rockdev/boot.img u-boot/</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [ &quot;$RK_RAMDISK_SECURITY_BOOTUP&quot; = &quot;true&quot; ]; then</span><br><span class="line">		echo &quot;尝试为 $RK_SYSTEM_CHECK_METHOD 构建 init&quot;</span><br><span class="line"></span><br><span class="line">		if [ &quot;$RK_SYSTEM_CHECK_METHOD&quot; = &quot;DM-V&quot; ]; then</span><br><span class="line">			SYSTEM_IMG=rootfs.squashfs</span><br><span class="line">		else</span><br><span class="line">			SYSTEM_IMG=$ROOTFS_IMG</span><br><span class="line">		fi</span><br><span class="line">		if [ ! -f &quot;$ROOTFS_DIR/$SYSTEM_IMG&quot; ]; then</span><br><span class="line">			echo &quot;未生成 $SYSTEM_IMG...&quot;</span><br><span class="line">			exit -1</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">COMMON_DIR/mk-dm.sh <span class="variable">$RK_SYSTEM_CHECK_METHOD</span> \</span></span><br><span class="line"><span class="language-bash">			<span class="variable">$ROOTFS_DIR</span>/<span class="variable">$SYSTEM_IMG</span></span></span><br><span class="line">		ln -rsf $ROOTFS_DIR/security-system.img rockdev/rootfs.img</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">完成构建</span></span><br><span class="line">	finish_build</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build_recovery()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查是否启用了主备份(A/B)模式的SD卡更新</span></span><br><span class="line">	if [ &quot;$RK_UPDATE_SDCARD_ENABLE_FOR_AB&quot; = &quot;true&quot; ] ;then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">如果是启用了主备份(A/B)模式的SD卡更新，则使用相应的恢复配置</span></span><br><span class="line">		RK_CFG_RECOVERY=$RK_UPDATE_SDCARD_CFG_RECOVERY</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查是否存在主备份(A/B)模式的包文件</span></span><br><span class="line">	if [ ! -z &quot;$RK_PACKAGE_FILE_AB&quot; ]; then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">如果存在主备份(A/B)模式的包文件，则直接返回，不进行构建</span></span><br><span class="line">		return 0</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查恢复配置是否已配置</span></span><br><span class="line">	check_config RK_CFG_RECOVERY || return 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">打印构建恢复镜像的提示信息</span></span><br><span class="line">	echo &quot;==========开始构建恢复镜像(buildroot)==========&quot;</span><br><span class="line">	echo &quot;TARGET_RECOVERY_CONFIG=$RK_CFG_RECOVERY&quot;</span><br><span class="line">	echo &quot;========================================&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">设置目标目录</span></span><br><span class="line">	DST_DIR=.recovery</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">构建恢复镜像(buildroot)</span></span><br><span class="line">	/usr/bin/time -f &quot;用时 %E 构建恢复镜像(buildroot)&quot; \</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">COMMON_DIR/mk-buildroot.sh <span class="variable">$RK_CFG_RECOVERY</span> <span class="variable">$DST_DIR</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">打包恢复镜像</span></span><br><span class="line">	/usr/bin/time -f &quot;用时 %E 打包恢复镜像&quot; \</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">COMMON_DIR/mk-ramdisk.sh <span class="variable">$DST_DIR</span>/rootfs.cpio.gz \</span></span><br><span class="line"><span class="language-bash">		<span class="variable">$DST_DIR</span>/recovery.img \</span></span><br><span class="line"><span class="language-bash">		<span class="string">&quot;<span class="variable">$CHIP_DIR</span>/<span class="variable">$RK_RECOVERY_FIT_ITS</span>&quot;</span></span></span><br><span class="line">	ln -rsf $DST_DIR/recovery.img rockdev/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">为了安全起见，将恢复镜像复制到u-boot目录</span></span><br><span class="line">	cp rockdev/recovery.img u-boot/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">完成构建</span></span><br><span class="line">	finish_build</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建PCBA</span></span><br><span class="line">build_pcba()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查PCBA配置是否已配置</span></span><br><span class="line">	check_config RK_CFG_PCBA || return 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">打印构建PCBA镜像的提示信息</span></span><br><span class="line">	echo &quot;==========开始构建PCBA镜像(buildroot)==========&quot;</span><br><span class="line">	echo &quot;TARGET_PCBA_CONFIG=$RK_CFG_PCBA&quot;</span><br><span class="line">	echo &quot;====================================&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">设置目标目录</span></span><br><span class="line">	DST_DIR=.pcba</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">构建PCBA镜像(buildroot)</span></span><br><span class="line">	/usr/bin/time -f &quot;用时 %E 构建PCBA镜像(buildroot)&quot; \</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">COMMON_DIR/mk-buildroot.sh <span class="variable">$RK_CFG_PCBA</span> <span class="variable">$DST_DIR</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">打包PCBA镜像</span></span><br><span class="line">	/usr/bin/time -f &quot;用时 %E 打包PCBA镜像&quot; \</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">COMMON_DIR/mk-ramdisk.sh <span class="variable">$DST_DIR</span>/rootfs.cpio.gz \</span></span><br><span class="line"><span class="language-bash">		<span class="variable">$DST_DIR</span>/pcba.img</span></span><br><span class="line">	ln -rsf $DST_DIR/pcba.img rockdev/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">完成构建</span></span><br><span class="line">	finish_build</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOT_FIXED_CONFIGS=&quot;</span><br><span class="line">	CONFIG_BLK_DEV_DM                # 启用设备映射（Device Mapper）</span><br><span class="line">	CONFIG_DM_CRYPT                  # 启用设备映射加密模块</span><br><span class="line">	CONFIG_BLK_DEV_CRYPTOLOOP        # 启用块设备加密循环设备</span><br><span class="line">	CONFIG_DM_VERITY                 # 启用设备映射完整性校验模块&quot;</span><br><span class="line"></span><br><span class="line">BOOT_OPTEE_FIXED_CONFIGS=&quot;</span><br><span class="line">	CONFIG_TEE                       # 启用可信执行环境（Trusted Execution Environment）</span><br><span class="line">	CONFIG_OPTEE                     # 启用OP-TEE（Open Portable Trusted Execution Environment）&quot;</span><br><span class="line"></span><br><span class="line">UBOOT_FIXED_CONFIGS=&quot;</span><br><span class="line">	CONFIG_FIT_SIGNATURE             # 启用FIT（Flattened Image Tree）签名支持</span><br><span class="line">	CONFIG_SPL_FIT_SIGNATURE         # 启用SPL（Secondary Program Loader）FIT签名支持&quot;</span><br><span class="line"></span><br><span class="line">UBOOT_AB_FIXED_CONFIGS=&quot;</span><br><span class="line">	CONFIG_ANDROID_AB                # 启用Android A/B分区支持&quot;</span><br><span class="line"></span><br><span class="line">ROOTFS_UPDATE_ENGINEBIN_CONFIGS=&quot;</span><br><span class="line">	BR2_PACKAGE_RECOVERY             # 启用恢复系统包</span><br><span class="line">	BR2_PACKAGE_RECOVERY_UPDATEENGINEBIN&quot;  # 启用恢复系统更新引擎二进制文件</span><br><span class="line"></span><br><span class="line">ROOTFS_AB_FIXED_CONFIGS=&quot;</span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">ROOTFS_UPDATE_ENGINEBIN_CONFIGS     <span class="comment"># 包括ROOTFS_UPDATE_ENGINEBIN_CONFIGS中的配置</span></span></span><br><span class="line">	BR2_PACKAGE_RECOVERY_BOOTCONTROL&quot;    # 启用恢复系统引导控制</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查默认配置</span></span><br><span class="line">defconfig_check()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">1. defconfig 2. fixed config</span></span><br><span class="line">	echo debug-$1   # 调试输出，显示传入的参数1</span><br><span class="line">	for i in $2   # 遍历参数2中的每个配置选项</span><br><span class="line">	do</span><br><span class="line">		echo &quot;查找 $i&quot;   # 输出正在查找的配置选项</span><br><span class="line">		result=$(cat $1 | grep &quot;$&#123;i&#125;=y&quot; -w || echo &quot;未找到&quot;)   # 在配置文件中查找配置选项，将结果存储在变量result中</span><br><span class="line">		if [ &quot;$result&quot; = &quot;未找到&quot; ]; then   # 如果未找到配置选项</span><br><span class="line">			echo -e &quot;\e[41;1;37m错误：在 $1 中未找到配置项 $&#123;i&#125; \e[0m&quot;   # 输出错误信息，配置项未找到</span><br><span class="line">			echo &quot;请确保您的配置文件包含以下列表中的选项&quot;</span><br><span class="line">			echo &quot;---------------------------------------&quot;</span><br><span class="line">			echo &quot;$2&quot;   # 输出参数2中的配置选项列表</span><br><span class="line">			echo &quot;---------------------------------------&quot;</span><br><span class="line">			return -1;   # 返回-1表示检查失败</span><br><span class="line">		fi</span><br><span class="line">	done</span><br><span class="line">	return 0   # 返回0表示检查通过</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从默认配置文件中查找字符串</span></span><br><span class="line">find_string_in_config()</span><br><span class="line">&#123;</span><br><span class="line">	result=$(cat &quot;$2&quot; | grep &quot;$1&quot; || echo &quot;No found&quot;)   # 在文件$2中查找字符串$1，将结果存储在变量result中</span><br><span class="line">	if [ &quot;$result&quot; = &quot;No found&quot; ]; then   # 如果未找到字符串</span><br><span class="line">		echo &quot;Security: No found string $1 in $2&quot;   # 输出错误信息，未找到字符串</span><br><span class="line">		return -1;   # 返回-1表示未找到</span><br><span class="line">	fi</span><br><span class="line">	return 0;   # 返回0表示找到了字符串</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">check_security_condition()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">check security enabled</span></span><br><span class="line">	test -z &quot;$RK_SYSTEM_CHECK_METHOD&quot; &amp;&amp; return 0</span><br><span class="line"></span><br><span class="line">	if [ ! -d u-boot/keys ]; then</span><br><span class="line">		echo &quot;ERROR: No root keys(u-boot/keys) found in u-boot&quot;</span><br><span class="line">		echo &quot;       Create it by ./build.sh createkeys or move your key to it&quot;</span><br><span class="line">		return -1</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [ &quot;$RK_SYSTEM_CHECK_METHOD&quot; = &quot;DM-E&quot; ]; then</span><br><span class="line">		if [ ! -f u-boot/keys/root_passwd ]; then</span><br><span class="line">			echo &quot;ERROR: No root passwd(u-boot/keys/root_passwd) found in u-boot&quot;</span><br><span class="line">			echo &quot;       echo your root key for sudo to u-boot/keys/root_passwd&quot;</span><br><span class="line">			echo &quot;       some operations need supper user permission when create encrypt image&quot;</span><br><span class="line">			return -1</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		if [ ! -f u-boot/keys/system_enc_key ]; then</span><br><span class="line">			echo &quot;ERROR: No enc key(u-boot/keys/system_enc_key) found in u-boot&quot;</span><br><span class="line">			echo &quot;       Create it by ./build.sh createkeys or move your key to it&quot;</span><br><span class="line">			return -1</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		BOOT_FIXED_CONFIGS=&quot;$&#123;BOOT_FIXED_CONFIGS&#125;</span><br><span class="line">				    $&#123;BOOT_OPTEE_FIXED_CONFIGS&#125;&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	echo &quot;check kernel defconfig&quot;</span><br><span class="line">	defconfig_check \</span><br><span class="line"><span class="meta prompt_">		kernel/arch/$</span><span class="language-bash">RK_KERNEL_ARCH/configs/<span class="variable">$RK_KERNEL_DEFCONFIG</span> \</span></span><br><span class="line"><span class="language-bash">		<span class="string">&quot;<span class="variable">$BOOT_FIXED_CONFIGS</span>&quot;</span></span></span><br><span class="line"></span><br><span class="line">	if [ ! -z &quot;$&#123;RK_PACKAGE_FILE_AB&#125;&quot; ]; then</span><br><span class="line">		UBOOT_FIXED_CONFIGS=&quot;$&#123;UBOOT_FIXED_CONFIGS&#125;</span><br><span class="line">				     $&#123;UBOOT_AB_FIXED_CONFIGS&#125;&quot;</span><br><span class="line"></span><br><span class="line">		defconfig_check buildroot/configs/$&#123;RK_CFG_BUILDROOT&#125;_defconfig &quot;$ROOTFS_AB_FIXED_CONFIGS&quot;</span><br><span class="line">	fi</span><br><span class="line">	echo &quot;check uboot defconfig&quot;</span><br><span class="line">	defconfig_check u-boot/configs/$&#123;RK_UBOOT_DEFCONFIG&#125;_defconfig &quot;$UBOOT_FIXED_CONFIGS&quot;</span><br><span class="line"></span><br><span class="line">	if [ &quot;$RK_SYSTEM_CHECK_METHOD&quot; = &quot;DM-E&quot; ]; then</span><br><span class="line">		echo &quot;check ramdisk defconfig&quot;</span><br><span class="line">		defconfig_check buildroot/configs/$&#123;RK_CFG_BUILDROOT&#125;_defconfig &quot;$ROOTFS_UPDATE_ENGINEBIN_CONFIGS&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	echo &quot;check rootfs defconfig&quot;</span><br><span class="line">	find_string_in_config &quot;BR2_ROOTFS_OVERLAY=\&quot;.*board/rockchip/common/security-system-overlay.*&quot; &quot;buildroot/configs/$&#123;RK_CFG_BUILDROOT&#125;_defconfig&quot;</span><br><span class="line"></span><br><span class="line">	echo &quot;Security: finish check&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">check_security_condition函数用于检查安全条件</span></span><br><span class="line">check_security_condition()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查是否启用了安全选项，如果未启用则直接返回0</span></span><br><span class="line">	test -z &quot;$RK_SYSTEM_CHECK_METHOD&quot; &amp;&amp; return 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查是否存在u-boot/keys目录，如果不存在则输出错误信息并返回-1</span></span><br><span class="line">	if [ ! -d u-boot/keys ]; then</span><br><span class="line">		echo &quot;错误：在u-boot中未找到根密钥（u-boot/keys）&quot;</span><br><span class="line">		echo &quot;      请通过./build.sh createkeys创建或将您的密钥移动到该目录中&quot;</span><br><span class="line">		return -1</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果RK_SYSTEM_CHECK_METHOD的值为DM-E，则继续进行下一步检查</span></span><br><span class="line">	if [ &quot;$RK_SYSTEM_CHECK_METHOD&quot; = &quot;DM-E&quot; ]; then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">检查是否存在u-boot/keys/root_passwd文件，如果不存在则输出错误信息并返回-1</span></span><br><span class="line">		if [ ! -f u-boot/keys/root_passwd ]; then</span><br><span class="line">			echo &quot;错误：在u-boot中未找到根口令（u-boot/keys/root_passwd）&quot;</span><br><span class="line">			echo &quot;      请将您的根密钥（用于sudo）echo到u-boot/keys/root_passwd中&quot;</span><br><span class="line">			echo &quot;      创建加密镜像时某些操作需要超级用户权限&quot;</span><br><span class="line">			return -1</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">检查是否存在u-boot/keys/system_enc_key文件，如果不存在则输出错误信息并返回-1</span></span><br><span class="line">		if [ ! -f u-boot/keys/system_enc_key ]; then</span><br><span class="line">			echo &quot;错误：在u-boot中未找到加密密钥（u-boot/keys/system_enc_key）&quot;</span><br><span class="line">			echo &quot;      请通过./build.sh createkeys创建或将您的密钥移动到该目录中&quot;</span><br><span class="line">			return -1</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">将BOOT_OPTEE_FIXED_CONFIGS添加到BOOT_FIXED_CONFIGS变量中</span></span><br><span class="line">		BOOT_FIXED_CONFIGS=&quot;$&#123;BOOT_FIXED_CONFIGS&#125;</span><br><span class="line">				    $&#123;BOOT_OPTEE_FIXED_CONFIGS&#125;&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	echo &quot;检查内核配置&quot;</span><br><span class="line">	defconfig_check \</span><br><span class="line"><span class="meta prompt_">		kernel/arch/$</span><span class="language-bash">RK_KERNEL_ARCH/configs/<span class="variable">$RK_KERNEL_DEFCONFIG</span> \</span></span><br><span class="line"><span class="language-bash">		<span class="string">&quot;<span class="variable">$BOOT_FIXED_CONFIGS</span>&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果RK_PACKAGE_FILE_AB不为空，则进行下一步检查</span></span><br><span class="line">	if [ ! -z &quot;$&#123;RK_PACKAGE_FILE_AB&#125;&quot; ]; then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">将UBOOT_AB_FIXED_CONFIGS添加到UBOOT_FIXED_CONFIGS变量中</span></span><br><span class="line">		UBOOT_FIXED_CONFIGS=&quot;$&#123;UBOOT_FIXED_CONFIGS&#125;</span><br><span class="line">				     $&#123;UBOOT_AB_FIXED_CONFIGS&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">检查buildroot/configs/<span class="variable">$&#123;RK_CFG_BUILDROOT&#125;</span>_defconfig文件是否存在</span></span><br><span class="line">		defconfig_check buildroot/configs/$&#123;RK_CFG_BUILDROOT&#125;_defconfig &quot;$ROOTFS_AB_FIXED_CONFIGS&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	echo &quot;检查uboot配置&quot;</span><br><span class="line">	defconfig_check u-boot/configs/$&#123;RK_UBOOT_DEFCONFIG&#125;_defconfig &quot;$UBOOT_FIXED_CONFIGS&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果RK_SYSTEM_CHECK_METHOD的值为DM-E，则继续进行下一步检查</span></span><br><span class="line">	if [ &quot;$RK_SYSTEM_CHECK_METHOD&quot; = &quot;DM-E&quot; ]; then</span><br><span class="line">		echo &quot;检查ramdisk配置&quot;</span><br><span class="line">		defconfig_check buildroot/configs/$&#123;RK_CFG_BUILDROOT&#125;_defconfig &quot;$ROOTFS_UPDATE_ENGINEBIN_CONFIGS&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	echo &quot;检查rootfs配置&quot;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">在buildroot/configs/<span class="variable">$&#123;RK_CFG_BUILDROOT&#125;</span>_defconfig文件中查找字符串<span class="string">&quot;BR2_ROOTFS_OVERLAY=\&quot;.*board/rockchip/common/security-system-overlay.*&quot;</span></span></span><br><span class="line">	find_string_in_config &quot;BR2_ROOTFS_OVERLAY=\&quot;.*board/rockchip/common/security-system-overlay.*&quot; &quot;buildroot/configs/$&#123;RK_CFG_BUILDROOT&#125;_defconfig&quot;</span><br><span class="line"></span><br><span class="line">	echo &quot;安全检查完成&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清理</span></span><br><span class="line">build_cleanall()</span><br><span class="line">&#123;</span><br><span class="line">	echo &quot;clean uboot, kernel, rootfs, recovery&quot;   # 执行清理操作，清理u-boot、kernel、rootfs和recovery相关的内容</span><br><span class="line"></span><br><span class="line">	make -C u-boot distclean   # 在u-boot目录中执行distclean命令，清理构建过程产生的临时文件和目标文件</span><br><span class="line">	make -C kernel distclean   # 在kernel目录中执行distclean命令，清理构建过程产生的临时文件和目标文件</span><br><span class="line">	rm -rf buildroot/output   # 删除buildroot/output目录，清理构建rootfs过程中生成的文件</span><br><span class="line">	rm -rf yocto/build/tmp yocto/build/*cache   # 删除yocto/build/tmp目录和所有yocto/build/*cache目录，清理构建yocto过程中生成的临时文件和缓存文件</span><br><span class="line">	rm -rf debian/binary   # 删除debian/binary目录，清理构建debian包时生成的二进制文件</span><br><span class="line"></span><br><span class="line">	finish_build   # 调用finish_build函数，进行后续的清理和处理操作</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build_firmware()</span><br><span class="line">&#123;</span><br><span class="line">	./mkfirmware.sh $BOARD_CONFIG   # 运行mkfirmware.sh脚本，传递$BOARD_CONFIG参数，用于构建固件</span><br><span class="line"></span><br><span class="line">	finish_build   # 调用finish_build函数，进行后续的清理和处理操作</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build_updateimg()</span><br><span class="line">&#123;</span><br><span class="line">	IMAGE_PATH=$TOP_DIR/rockdev   # 设置IMAGE_PATH变量为$TOP_DIR/rockdev，用于存储生成的镜像文件路径</span><br><span class="line">	PACK_TOOL_DIR=$TOP_DIR/tools/linux/Linux_Pack_Firmware   # 设置PACK_TOOL_DIR变量为$TOP_DIR/tools/linux/Linux_Pack_Firmware，用于存储打包工具的路径</span><br><span class="line"></span><br><span class="line">	cd $PACK_TOOL_DIR/rockdev   # 进入$PACK_TOOL_DIR/rockdev目录</span><br><span class="line"></span><br><span class="line">	if [ -f &quot;$RK_PACKAGE_FILE_AB&quot; ]; then   # 如果存在$RK_PACKAGE_FILE_AB文件</span><br><span class="line">		build_sdcard_package   # 调用build_sdcard_package函数，构建SD卡包</span><br><span class="line">		build_otapackage   # 调用build_otapackage函数，构建OTA包</span><br><span class="line"></span><br><span class="line">		cd $PACK_TOOL_DIR/rockdev   # 返回$PACK_TOOL_DIR/rockdev目录</span><br><span class="line">		echo &quot;Make Linux a/b update_ab.img.&quot;</span><br><span class="line">		source_package_file_name=`ls -lh package-file | awk -F &#x27; &#x27; &#x27;&#123;print $NF&#125;&#x27;`   # 获取package-file的文件名</span><br><span class="line">		ln -fs &quot;$RK_PACKAGE_FILE_AB&quot; package-file   # 创建软链接，将$RK_PACKAGE_FILE_AB链接到package-file</span><br><span class="line">		./mkupdate.sh   # 运行mkupdate.sh脚本，生成update.img</span><br><span class="line">		mv update.img $IMAGE_PATH/update_ab.img   # 将生成的update.img移动到$IMAGE_PATH/update_ab.img</span><br><span class="line">		ln -fs $source_package_file_name package-file   # 创建软链接，将source_package_file_name链接到package-file</span><br><span class="line">	else</span><br><span class="line">		echo &quot;Make update.img&quot;</span><br><span class="line"></span><br><span class="line">		if [ -f &quot;$RK_PACKAGE_FILE&quot; ]; then   # 如果存在$RK_PACKAGE_FILE文件</span><br><span class="line">			source_package_file_name=`ls -lh package-file | awk -F &#x27; &#x27; &#x27;&#123;print $NF&#125;&#x27;`   # 获取package-file的文件名</span><br><span class="line">			ln -fs &quot;$RK_PACKAGE_FILE&quot; package-file   # 创建软链接，将$RK_PACKAGE_FILE链接到package-file</span><br><span class="line">			./mkupdate.sh   # 运行mkupdate.sh脚本，生成update.img</span><br><span class="line">			ln -fs $source_package_file_name package-file   # 创建软链接，将source_package_file_name链接到package-file</span><br><span class="line">		else</span><br><span class="line">			./mkupdate.sh   # 运行mkupdate.sh脚本，生成update.img</span><br><span class="line">		fi</span><br><span class="line">		mv update.img $IMAGE_PATH   # 将生成的update.img移动到$IMAGE_PATH</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	finish_build   # 调用finish_build函数，进行后续的清理和处理操作</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译ota的包</span></span><br><span class="line">build_otapackage()</span><br><span class="line">&#123;</span><br><span class="line">	IMAGE_PATH=$TOP_DIR/rockdev   # 设置IMAGE_PATH变量为$TOP_DIR/rockdev，用于存储生成的镜像文件路径</span><br><span class="line">	PACK_TOOL_DIR=$TOP_DIR/tools/linux/Linux_Pack_Firmware   # 设置PACK_TOOL_DIR变量为$TOP_DIR/tools/linux/Linux_Pack_Firmware，用于存储打包工具的路径</span><br><span class="line"></span><br><span class="line">	echo &quot;Make ota ab update_ota.img&quot;</span><br><span class="line">	cd $PACK_TOOL_DIR/rockdev   # 进入$PACK_TOOL_DIR/rockdev目录</span><br><span class="line"></span><br><span class="line">	if [ -f &quot;$RK_PACKAGE_FILE_OTA&quot; ]; then   # 如果存在$RK_PACKAGE_FILE_OTA文件</span><br><span class="line">		source_package_file_name=`ls -lh $PACK_TOOL_DIR/rockdev/package-file | awk -F &#x27; &#x27; &#x27;&#123;print $NF&#125;&#x27;`   # 获取package-file的文件名</span><br><span class="line">		ln -fs &quot;$RK_PACKAGE_FILE_OTA&quot; package-file   # 创建软链接，将$RK_PACKAGE_FILE_OTA链接到package-file</span><br><span class="line">		./mkupdate.sh   # 运行mkupdate.sh脚本，生成update.img</span><br><span class="line">		mv update.img $IMAGE_PATH/update_ota.img   # 将生成的update.img移动到$IMAGE_PATH/update_ota.img</span><br><span class="line">		ln -fs $source_package_file_name package-file   # 创建软链接，将source_package_file_name链接到package-file</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	finish_build   # 调用finish_build函数，进行后续的清理和处理操作</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译sd卡镜像</span></span><br><span class="line">build_sdcard_package()</span><br><span class="line">&#123;</span><br><span class="line">	check_config RK_UPDATE_SDCARD_ENABLE_FOR_AB || return 0   # 检查配置项 RK_UPDATE_SDCARD_ENABLE_FOR_AB，如果没有启用则返回0</span><br><span class="line"></span><br><span class="line">	local image_path=$TOP_DIR/rockdev   # 设置image_path变量为$TOP_DIR/rockdev，用于存储生成的镜像文件路径</span><br><span class="line">	local pack_tool_dir=$TOP_DIR/tools/linux/Linux_Pack_Firmware   # 设置pack_tool_dir变量为$TOP_DIR/tools/linux/Linux_Pack_Firmware，用于存储打包工具的路径</span><br><span class="line">	local rk_sdupdate_ab_misc=$&#123;RK_SDUPDATE_AB_MISC:=sdupdate-ab-misc.img&#125;   # 设置rk_sdupdate_ab_misc变量为RK_SDUPDATE_AB_MISC的值（默认为sdupdate-ab-misc.img）</span><br><span class="line">	local rk_parameter_sdupdate=$&#123;RK_PARAMETER_SDUPDATE:=parameter-sdupdate.txt&#125;   # 设置rk_parameter_sdupdate变量为RK_PARAMETER_SDUPDATE的值（默认为parameter-sdupdate.txt）</span><br><span class="line">	local rk_package_file_sdcard_update=$&#123;RK_PACKAGE_FILE_SDCARD_UPDATE:=sdcard-update-package-file&#125;   # 设置rk_package_file_sdcard_update变量为RK_PACKAGE_FILE_SDCARD_UPDATE的值（默认为sdcard-update-package-file）</span><br><span class="line">	local sdupdate_ab_misc_img=$TOP_DIR/device/rockchip/common/images/$rk_sdupdate_ab_misc   # 设置sdupdate_ab_misc_img变量为$TOP_DIR/device/rockchip/common/images/加上rk_sdupdate_ab_misc的值</span><br><span class="line">	local parameter_sdupdate=$TOP_DIR/device/rockchip/common/images/$rk_parameter_sdupdate   # 设置parameter_sdupdate变量为$TOP_DIR/device/rockchip/common/images/加上rk_parameter_sdupdate的值</span><br><span class="line">	local recovery_img=$TOP_DIR/buildroot/output/$RK_UPDATE_SDCARD_CFG_RECOVERY/images/recovery.img   # 设置recovery_img变量为$TOP_DIR/buildroot/output/加上RK_UPDATE_SDCARD_CFG_RECOVERY/images/recovery.img的值</span><br><span class="line"></span><br><span class="line">	if [ $RK_UPDATE_SDCARD_CFG_RECOVERY ]; then   # 如果存在RK_UPDATE_SDCARD_CFG_RECOVERY配置项</span><br><span class="line">		if [ -f $recovery_img ]; then   # 如果存在recovery_img文件</span><br><span class="line">			echo -n &quot;create recovery.img...&quot;   # 输出提示信息</span><br><span class="line">			ln -rsf $recovery_img $image_path/recovery.img   # 创建软链接，将recovery_img链接到$image_path/recovery.img</span><br><span class="line">		else</span><br><span class="line">			echo &quot;error: $recovery_img not found!&quot;   # 输出错误信息</span><br><span class="line">			return 1   # 返回1表示出错</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	echo &quot;Make sdcard update update_sdcard.img&quot;   # 输出提示信息</span><br><span class="line">	cd $pack_tool_dir/rockdev   # 进入$pack_tool_dir/rockdev目录</span><br><span class="line">	if [ -f &quot;$rk_package_file_sdcard_update&quot; ]; then   # 如果存在$rk_package_file_sdcard_update文件</span><br><span class="line">		if [ $rk_parameter_sdupdate ]; then   # 如果存在$rk_parameter_sdupdate变量</span><br><span class="line">			if [ -f $parameter_sdupdate ]; then   # 如果存在$parameter_sdupdate文件</span><br><span class="line">				echo -n &quot;create sdcard update image parameter...&quot;   # 输出提示信息</span><br><span class="line">				ln -rsf $parameter_sdupdate $image_path/   # 创建软链接，将$parameter_sdupdate链接到$image_path/</span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		if [ $rk_sdupdate_ab_misc ]; then   # 如果存在$rk_sdupdate_ab_misc变量</span><br><span class="line">			if [ -f $sdupdate_ab_misc_img ]; then   # 如果存在$sdupdate_ab_misc_img文件</span><br><span class="line">				echo -n &quot;create sdupdate ab misc.img...&quot;   # 输出提示信息</span><br><span class="line">				ln -rsf $sdupdate_ab_misc_img $image_path/   # 创建软链接，将$sdupdate_ab_misc_img链接到$image_path/</span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		source_package_file_name=`ls -lh $pack_tool_dir/rockdev/package-file | awk -F &#x27; &#x27; &#x27;&#123;print $NF&#125;&#x27;`   # 获取$pack_tool_dir/rockdev/package-file的文件名</span><br><span class="line">		ln -fs &quot;$rk_package_file_sdcard_update&quot; package-file   # 创建软链接，将$rk_package_file_sdcard_update链接到package-file</span><br><span class="line">		./mkupdate.sh   # 运行mkupdate.sh脚本，生成update.img</span><br><span class="line">		mv update.img $image_path/update_sdcard.img   # 将生成的update.img移动到$image_path/update_sdcard.img</span><br><span class="line">		ln -fs $source_package_file_name package-file   # 创建软链接，将$source_package_file_name链接到package-file</span><br><span class="line">		rm -f $image_path/$rk_sdupdate_abmisc $image_path/$rk_parameter_sdupdate $image_path/recovery.img   # 删除$image_path/$rk_sdupdate_ab_misc、$image_path/$rk_parameter_sdupdate和$image_path/recovery.img文件</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	finish_build   # 调用finish_build函数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build_save()</span><br><span class="line">&#123;</span><br><span class="line">	IMAGE_PATH=$TOP_DIR/rockdev   # 设置IMAGE_PATH变量为$TOP_DIR/rockdev，用于存储生成的镜像文件路径</span><br><span class="line">	DATE=$(date  +%Y%m%d.%H%M)   # 获取当前日期和时间，格式为YYYYMMDD.HHMM</span><br><span class="line">	STUB_PATH=Image/&quot;$RK_KERNEL_DTS&quot;_&quot;$DATE&quot;_RELEASE_TEST   # 设置STUB_PATH变量为Image/加上$RK_KERNEL_DTS、日期和_RELEASE_TEST</span><br><span class="line">	STUB_PATH=&quot;$(echo $STUB_PATH | tr &#x27;[:lower:]&#x27; &#x27;[:upper:]&#x27;)&quot;   # 将STUB_PATH转换为大写字母</span><br><span class="line">	export STUB_PATH=$TOP_DIR/$STUB_PATH   # 导出STUB_PATH变量为$TOP_DIR/加上$STUB_PATH</span><br><span class="line">	export STUB_PATCH_PATH=$STUB_PATH/PATCHES   # 导出STUB_PATCH_PATH变量为$STUB_PATH/PATCHES</span><br><span class="line">	mkdir -p $STUB_PATH   # 创建$STUB_PATH目录</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">生成补丁文件</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">	.repo/repo/repo forall -c \</span></span><br><span class="line"><span class="language-bash"><span class="comment">#		&quot;$TOP_DIR/device/rockchip/common/gen_patches_body.sh&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">复制补丁文件</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">	<span class="built_in">yes</span> | .repo/repo/repo manifest -r -o <span class="variable">$STUB_PATH</span>/manifest_<span class="variable">$&#123;DATE&#125;</span>.xml</span></span><br><span class="line">	mkdir -p $STUB_PATCH_PATH/kernel   # 创建$STUB_PATCH_PATH/kernel目录</span><br><span class="line">	cp kernel/.config $STUB_PATCH_PATH/kernel   # 复制kernel目录下的.config文件到$STUB_PATCH_PATH/kernel目录</span><br><span class="line">	cp kernel/vmlinux $STUB_PATCH_PATH/kernel   # 复制kernel目录下的vmlinux文件到$STUB_PATCH_PATH/kernel目录</span><br><span class="line">	mkdir -p $STUB_PATH/IMAGES/   # 创建$STUB_PATH/IMAGES/目录</span><br><span class="line">	cp $IMAGE_PATH/* $STUB_PATH/IMAGES/   # 复制$IMAGE_PATH目录下的所有文件到$STUB_PATH/IMAGES/目录</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">保存构建命令信息</span></span><br><span class="line">	echo &quot;UBOOT:  defconfig: $RK_UBOOT_DEFCONFIG&quot; &gt;&gt; $STUB_PATH/build_cmd_info   # 将UBOOT的配置信息写入build_cmd_info文件</span><br><span class="line">	echo &quot;KERNEL: defconfig: $RK_KERNEL_DEFCONFIG, dts: $RK_KERNEL_DTS&quot; &gt;&gt; $STUB_PATH/build_cmd_info   # 将KERNEL的配置信息写入build_cmd_info文件</span><br><span class="line">	echo &quot;BUILDROOT: $RK_CFG_BUILDROOT&quot; &gt;&gt; $STUB_PATH/build_cmd_info   # 将BUILDROOT的配置信息写入build_cmd_info文件</span><br><span class="line"></span><br><span class="line">	finish_build   # 调用finish_build函数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build_allsave()</span><br><span class="line">&#123;</span><br><span class="line">	rm -fr $TOP_DIR/rockdev   # 删除$TOP_DIR/rockdev目录及其内容</span><br><span class="line">	mkdir -p $TOP_DIR/rockdev   # 创建$TOP_DIR/rockdev目录</span><br><span class="line">	build_all   # 调用build_all函数，执行全部构建过程</span><br><span class="line">	build_firmware   # 调用build_firmware函数，构建固件</span><br><span class="line">	build_updateimg   # 调用build_updateimg函数，构建更新镜像</span><br><span class="line">	build_save   # 调用build_save函数，保存构建过程中的相关文件</span><br><span class="line"></span><br><span class="line">	build_check_power_domain   # 调用build_check_power_domain函数，检查电源域配置</span><br><span class="line"></span><br><span class="line">	finish_build   # 调用finish_build函数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">create_keys()</span><br><span class="line">&#123;</span><br><span class="line">	test -d u-boot/keys &amp;&amp; echo &quot;ERROR: u-boot/keys has existed&quot; &amp;&amp; return -1   # 检查u-boot/keys目录是否已存在，如果存在则输出错误信息并返回-1</span><br><span class="line"></span><br><span class="line">	mkdir u-boot/keys -p   # 创建u-boot/keys目录</span><br><span class="line"></span><br><span class="line">	./rkbin/tools/rk_sign_tool kk --bits 2048 --out u-boot/keys   # 使用rk_sign_tool工具生成密钥对，密钥长度为2048位，并存储在u-boot/keys目录下</span><br><span class="line">	ln -s private_key.pem u-boot/keys/dev.key   # 创建符号链接将private_key.pem命名为u-boot/keys/dev.key</span><br><span class="line">	ln -s public_key.pem u-boot/keys/dev.pubkey   # 创建符号链接将public_key.pem命名为u-boot/keys/dev.pubkey</span><br><span class="line"></span><br><span class="line">	openssl req -batch -new -x509 -key u-boot/keys/dev.key -out u-boot/keys/dev.crt   # 使用openssl生成自签名证书，使用u-boot/keys/dev.key作为私钥，生成的证书存储在u-boot/keys/dev.crt中</span><br><span class="line"></span><br><span class="line">	openssl rand -out u-boot/keys/system_enc_key -hex 32   # 使用openssl生成32字节的随机数，并以十六进制格式存储在u-boot/keys/system_enc_key文件中</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">security_is_enabled()</span><br><span class="line">&#123;</span><br><span class="line">	if [ &quot;$RK_RAMDISK_SECURITY_BOOTUP&quot; != &quot;true&quot; ]; then   # 如果环境变量$RK_RAMDISK_SECURITY_BOOTUP不等于&quot;true&quot;</span><br><span class="line">		echo &quot;No security paramter found in $BOARD_CONFIG&quot;   # 输出错误信息，表示在$BOARD_CONFIG中未找到安全参数</span><br><span class="line">		exit -1   # 退出脚本，返回-1</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">=========================</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">build targets</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">=========================</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OPTIONS=<span class="string">&quot;<span class="variable">$&#123;@:-allsave&#125;</span>&quot;</span></span></span><br><span class="line">if [ -z &quot;$1&quot; ]; then</span><br><span class="line">    titlestr=&quot;请选择一个选项&quot;                         # 菜单标题</span><br><span class="line">    backtitle=&quot;iTOP-RK3568构建脚本，http://www.topeet.com&quot;  # 返回标题</span><br><span class="line">    menustr=&quot;编译镜像 | u-boot| 内核| recovery| buildroot | debian | yocto | all&quot;  # 菜单选项</span><br><span class="line"></span><br><span class="line">    TTY_X=$(($(stty size | awk &#x27;&#123;print $2&#125;&#x27;)-6))  # 确定终端宽度</span><br><span class="line">    TTY_Y=$(($(stty size | awk &#x27;&#123;print $1&#125;&#x27;)-6))  # 确定终端高度</span><br><span class="line"></span><br><span class="line">    choose+=(&quot;uboot&quot;       &quot;build_uboot&quot;)      # 选项1: u-boot编译</span><br><span class="line">    choose+=(&quot;kernel&quot;       &quot;build_kernel&quot;)    # 选项2: 内核编译</span><br><span class="line">    choose+=(&quot;recovery&quot;       &quot;build_recovery&quot;)  # 选项3: recovery编译</span><br><span class="line">    choose+=(&quot;buildroot&quot;       &quot;build_rootfs buildroot&quot;)  # 选项4: 编译buildroot根文件系统</span><br><span class="line">    choose+=(&quot;debian&quot;       &quot;build_rootfs debian&quot;)         # 选项5: 编译Debian根文件系统</span><br><span class="line">    choose+=(&quot;yocto&quot;       &quot;build_rootfs yocto&quot;)           # 选项6: 编译Yocto根文件系统</span><br><span class="line">    choose+=(&quot;save&quot;       &quot;build_save&quot;)        # 选项7: 保存构建结果</span><br><span class="line">    choose+=(&quot;all&quot;       &quot;build_all&quot;)          # 选项8: 编译所有</span><br><span class="line"></span><br><span class="line">    OPTIONS=$(whiptail --title &quot;$&#123;titlestr&#125;&quot; --backtitle &quot;$&#123;backtitle&#125;&quot; --notags \</span><br><span class="line">                --menu &quot;$&#123;menustr&#125;&quot; &quot;$&#123;TTY_Y&#125;&quot; &quot;$&#123;TTY_X&#125;&quot; $((TTY_Y - 8)) \</span><br><span class="line">                --cancel-button 退出 --ok-button 选择 &quot;$&#123;choose[@]&#125;&quot; \</span><br><span class="line">                3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)  # 使用whiptail创建菜单，并获取用户选择的选项</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line">    OPTIONS=&quot;$&#123;1&#125;&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">预处理选项</span></span><br><span class="line">unset POST_OPTIONS</span><br><span class="line">for option in $OPTIONS; do</span><br><span class="line">    case $option in</span><br><span class="line">        BoardConfig*.mk)</span><br><span class="line">            option=&quot;$CHIP_DIR/$option&quot;</span><br><span class="line">            ;&amp;</span><br><span class="line">        *.mk)</span><br><span class="line">            CONF=$(realpath $option)</span><br><span class="line">            echo &quot;切换到配置文件: $CONF&quot;</span><br><span class="line">            if [ ! -f $CONF ]; then</span><br><span class="line">                echo &quot;文件不存在!&quot;</span><br><span class="line">                exit 1</span><br><span class="line">            fi</span><br><span class="line"></span><br><span class="line">            ln -rsf $CONF $BOARD_CONFIG</span><br><span class="line">            ;;</span><br><span class="line">        lunch) choose_board ;;</span><br><span class="line">        kernel-4.4|kernel-4.19|kernel-5.10)</span><br><span class="line">            RK_KERNEL_VERSION=$&#123;option#kernel-&#125;</span><br><span class="line">            ;;</span><br><span class="line">        *) POST_OPTIONS=&quot;$POST_OPTIONS $option&quot;;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">if [ -r &quot;$BOARD_CONFIG&quot; ]; then  # 如果配置文件存在且可读</span><br><span class="line">    source $BOARD_CONFIG  # 导入配置文件</span><br><span class="line">else</span><br><span class="line">    choose_board  # 否则，调用选择板型函数</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -d &quot;$CHIP_DIR/build-hooks/&quot; ]; then  # 如果存在构建钩子目录</span><br><span class="line">    for hook in $(find &quot;$CHIP_DIR/build-hooks&quot; -name &quot;*.sh&quot;); do  # 遍历所有以.sh结尾的文件</span><br><span class="line">        source &quot;$hook&quot;  # 导入每个构建钩子脚本</span><br><span class="line">    done</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回退到当前内核版本</span></span><br><span class="line">RK_KERNEL_VERSION=$&#123;RK_KERNEL_VERSION:-$(kernel_version kernel/)&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回退到5.10内核版本</span></span><br><span class="line">RK_KERNEL_VERSION=$&#123;RK_KERNEL_VERSION:-5.10&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新内核</span></span><br><span class="line">if [ &quot;$(kernel_version kernel/)&quot; != &quot;$RK_KERNEL_VERSION&quot; ]; then  # 如果当前内核版本与指定版本不一致</span><br><span class="line">    KERNEL_DIR=kernel-$RK_KERNEL_VERSION  # 设置新的内核目录名称</span><br><span class="line">    echo &quot;切换到 $KERNEL_DIR&quot;</span><br><span class="line">    if [ ! -d &quot;$KERNEL_DIR&quot; ]; then  # 如果新的内核目录不存在</span><br><span class="line">        echo &quot;不存在！&quot;</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line">    rm -rf kernel  # 删除旧的内核软链接</span><br><span class="line">    ln -rsf $KERNEL_DIR kernel  # 创建新的内核软链接</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后续选项处理</span></span><br><span class="line">for option in $POST_OPTIONS; do</span><br><span class="line">    echo &quot;处理选项: $option&quot;</span><br><span class="line">    case $option in</span><br><span class="line">        all) build_all ;;  # 执行编译所有选项</span><br><span class="line">        save) build_save ;;  # 执行保存构建结果选项</span><br><span class="line">        allsave) build_allsave ;;  # 执行编译所有并保存结果选项</span><br><span class="line">        cleanall) build_cleanall ;;  # 执行清理所有构建结果选项</span><br><span class="line">        firmware) build_firmware ;;  # 执行编译固件选项</span><br><span class="line">        updateimg) build_updateimg ;;  # 执行编译更新镜像选项</span><br><span class="line">        otapackage) build_otapackage ;;  # 执行编译OTA包选项</span><br><span class="line">        sdpackage) build_sdcard_package ;;  # 执行编译SD卡镜像选项</span><br><span class="line">        spl) build_spl ;;  # 执行编译SPL选项</span><br><span class="line">        uboot) build_uboot ;;  # 执行编译u-boot选项</span><br><span class="line">        uefi) build_uefi ;;  # 执行编译UEFI选项</span><br><span class="line">        loader) build_loader ;;  # 执行编译loader选项</span><br><span class="line">        kernel) build_kernel ;;  # 执行编译内核选项</span><br><span class="line">        wifibt)  # 执行编译Wi-Fi和蓝牙固件选项</span><br><span class="line">            build_wifibt $2 $3  # 调用编译Wi-Fi和蓝牙固件的函数，并传递参数$2和$3</span><br><span class="line">            exit 1 ;;  # 退出脚本</span><br><span class="line">        modules) build_modules ;;  # 执行编译内核模块选项</span><br><span class="line">        rootfs) build_rootfs ;;  # 执行编译根文件系统选项</span><br><span class="line">        buildroot|debian|yocto) build_rootfs $option ;;  # 执行编译指定根文件系统选项</span><br><span class="line">        pcba) build_pcba ;;  # 执行编译PCBA选项</span><br><span class="line">        recovery) build_recovery ;;  # 执行编译recovery选项</span><br><span class="line">        info) build_info ;;  # 执行显示构建信息选项</span><br><span class="line">        createkeys) create_keys ;;  # 执行生成密钥选项</span><br><span class="line">        security_boot)  # 执行启用安全引导的选项</span><br><span class="line">            security_is_enabled  # 检查安全引导是否已启用</span><br><span class="line">            build_rootfs  # 编译根文件系统</span><br><span class="line">            build_uboot boot  # 编译启动引导程序</span><br><span class="line">            ;;</span><br><span class="line">        security_uboot)  # 执行启用安全引导的u-boot选项</span><br><span class="line">            security_is_enabled  # 检查安全引导是否已启用</span><br><span class="line">            build_uboot uboot  # 编译u-boot引导程序</span><br><span class="line">            ;;</span><br><span class="line">        security_recovery)  # 执行启用安全引导的recovery选项</span><br><span class="line">            security_is_enabled  # 检查安全引导是否已启用</span><br><span class="line">            build_recovery  # 编译recovery</span><br><span class="line">            build_uboot recovery  # 编译recovery引导程序</span><br><span class="line">            ;;</span><br><span class="line">        security_check) check_security_condition ;;  # 执行检查安全条件选项</span><br><span class="line">        security_rootfs)  # 执行启用安全引导的根文件系统选项</span><br><span class="line">            security_is_enabled  # 检查安全引导是否已启用</span><br><span class="line">            build_rootfs  # 编译根文件系统</span><br><span class="line">            build_uboot  # 编译u-boot引导程序</span><br><span class="line">            echo &quot;请更新 rootfs.img / boot.img&quot;</span><br><span class="line">            ;;</span><br><span class="line">        *) usage ;;  # 显示用法</span><br><span class="line">    esac</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>瑞芯微</category>
      </categories>
  </entry>
  <entry>
    <title>cmake 基础课</title>
    <url>/2023/09/03/21%20cmake-%E5%9F%BA%E7%A1%80%E8%AF%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一-准备知识"><a class="markdownIt-Anchor" href="#一-准备知识"></a> 一、准备知识</h1>
<h2 id="11-c的编译过程"><a class="markdownIt-Anchor" href="#11-c的编译过程"></a> 1.1 C++的编译过程</h2>
<ul>
<li>-E 仅预处理；不编译、汇编或链接。</li>
<li>-S 仅编译；不汇编或链接。</li>
<li>-c 编译和汇编，但不链接。</li>
<li>-o <file> 将输出放入<file>中。</li>
</ul>
<p><strong>C++源代码的编译过程</strong></p>
<ol>
<li>
<p><strong>预处理</strong>：在预处理阶段，C++源代码中的预处理指令会被处理，包括宏展开和条件编译等。在此阶段，需要添加所有头文件的引用路径。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将xx.cpp源文件预处理为xx.i文件（文本文件）</span></span><br><span class="line">g++ -E main.cpp -o main.i</span><br><span class="line">```</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>编译</strong>：编译阶段会对预处理后的代码进行语法检查和编译，将代码翻译为汇编语言文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将xx.i文件编译为xx.s的汇编文件（文本文件）</span></span><br><span class="line">g++ -S main.i -o main.s</span><br><span class="line">```</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>汇编</strong>：汇编阶段将汇编语言文件转换为二进制格式的目标文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将xx.s文件汇编为xx.o的二进制目标文件</span></span><br><span class="line">g++ -c main.s -o main.o</span><br><span class="line">```</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>链接</strong>：链接阶段将目标文件与所依赖的库文件进行关联或组装，生成可执行文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将目标文件进行链接，生成可执行程序</span></span><br><span class="line">g++ main.o -o main</span><br><span class="line">```</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="12-静态链接库和动态链接库"><a class="markdownIt-Anchor" href="#12-静态链接库和动态链接库"></a> 1.2 静态链接库和动态链接库</h2>
<p>静态链接库和动态链接库的区别在于链接的阶段不同。</p>
<p><strong>静态链接库</strong>的名称通常以<code>.a</code>结尾（表示archive library），它在编译阶段进行链接。如果一个工程依赖于静态链接库，那么生成的可执行文件或库会将静态链接库<code>.a</code>打包到输出文件中，因此生成的文件比较大。在运行时，不再需要单独的库文件。</p>
<p><strong>动态链接库</strong>的链接发生在程序的执行过程中，它在编译阶段仅进行链接检查，而不进行真正的链接过程。动态链接库的后缀名通常为<code>.so</code>（表示shared object，在Linux上）或<code>.dylib</code>（在macOS上）。动态链接库在加载后，在内存中只保存一份拷贝。多个程序依赖于它时，不会重复加载和拷贝，节省了内存空间。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/image-20230903175645024.png" alt="image-20230903175645024" /></p>
<h2 id="13-为什么需要cmake"><a class="markdownIt-Anchor" href="#13-为什么需要cmake"></a> 1.3 为什么需要CMake</h2>
<h3 id="131-g命令行编译"><a class="markdownIt-Anchor" href="#131-g命令行编译"></a> 1.3.1 g++命令行编译</h3>
<p>当编译hello_world.cpp`文件时，可以使用以下命令进行编译和运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">g++ main.cpp -o main</span><br></pre></td></tr></table></figure>
<p>如果需要引入外部库可以使用以下方法进行编译：</p>
<p>方法一：使用<code>-lgflags</code>参数进行链接**</p>
<p>首先，需要安装<code>gflags</code>库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libgflags-dev libgflags2.2</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">然后，使用以下命令进行编译：</span><br><span class="line"></span><br><span class="line">````bash</span><br><span class="line">g++ main.cpp -lgflags -o main</span><br><span class="line">```</span><br></pre></td></tr></table></figure>
<p>方法二：使用<code>pkg-config</code>进行库文件和头文件路径查找**</p>
<p>首先，需要安装<code>pkg-config</code>工具：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install pkg-config</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">然后，使用以下命令进行编译：</span><br><span class="line"></span><br><span class="line">````bash</span><br><span class="line">g++ main.cpp `pkg-config --cflags --libs gflags` -o main</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">这里，`pkg-config --cflags --libs gflags`命令用于查找`gflags`库的头文件和库文件路径。</span><br></pre></td></tr></table></figure>
<p>编译完成后，可以使用以下命令运行可执行文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./main --age 31 --name alice</span><br></pre></td></tr></table></figure>
<p>有时候，在编译时不需要手动添加头文件或链接库路径，因为<code>g++</code>可以在默认的查询路径中找到这些库。然而，当项目文件和引入的外部库变得较多时，使用命令行编译会变得冗长且不便于调试和编辑。通常，在测试单个文件时可以使用命令行编译，但不推荐在实际项目中使用命令行编译方式。</p>
<h3 id="132-cmake简介"><a class="markdownIt-Anchor" href="#132-cmake简介"></a> 1.3.2 CMake简介</h3>
<p>在实际工作中，推荐使用CMake来构建C++项目。CMake是一个开源的跨平台工具，用于构建、测试和软件打包。</p>
<p>CMake具有以下特性：</p>
<ul>
<li><strong>自动搜索依赖项</strong>：CMake具有自动搜索可能需要的程序、库和头文件的能力，可以简化依赖项的配置过程。</li>
<li><strong>独立的构建目录</strong>：CMake支持使用独立的构建目录（例如<code>build</code>目录），这样可以安全地清理构建产生的中间文件和输出文件，不会污染源代码目录。</li>
<li><strong>自定义命令</strong>：CMake支持定义复杂的自定义命令，例如下载文件、生成各种文件等，可以满足项目构建过程中的特定需求。</li>
<li><strong>自定义配置</strong>：CMake支持根据需求进行自定义配置，可以选择性地启用或禁用特定的组件或功能。</li>
<li><strong>文本文件生成工作区和项目</strong>：CMake使用简单的文本文件（<code>CMakeLists.txt</code>）来描述项目的配置和构建规则，可以根据这些文件自动生成工作区和项目。</li>
<li><strong>文件依赖项自动生成和并行构建</strong>：CMake可以在主流平台上自动生成文件之间的依赖关系，从而使构建过程更高效。同时，CMake支持并行构建，可以加快构建速度。</li>
<li><strong>支持多种IDE</strong>：CMake几乎支持所有主流的集成开发环境（IDE），包括Visual Studio、Xcode、Eclipse等，可以方便地在不同的开发环境中进行项目开发和调试。</li>
</ul>
<h1 id="二-cmake基础知识"><a class="markdownIt-Anchor" href="#二-cmake基础知识"></a> 二、CMake基础知识</h1>
<h2 id="21-安装"><a class="markdownIt-Anchor" href="#21-安装"></a> 2.1 安装</h2>
<p>在Ubuntu上安装CMake可以使用以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install cmake -y</span><br></pre></td></tr></table></figure>
<p>这将使用apt包管理器自动安装CMake。</p>
<p>如果你想编译安装特定版本的CMake，可以按照以下步骤操作：</p>
<p>克隆CMake的源代码库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone -b v3.25.1 https://github.com/Kitware/CMake.git</span><br><span class="line">cd CMake</span><br><span class="line"></span><br><span class="line">这里以安装版本3.25.1为例，你可以将`v3.25.1`替换为你想要安装的特定版本。</span><br></pre></td></tr></table></figure>
<p>配置和编译CMake：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./bootstrap --prefix=&lt;安装路径&gt;</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">你可以使用`--prefix`选项来指定安装路径，或者省略`--prefix`以安装到默认路径。</span><br></pre></td></tr></table></figure>
<p>安装CMake：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line">这将以管理员权限安装CMake到系统中。</span><br></pre></td></tr></table></figure>
<p>安装完成后，你可以验证CMake的安装版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmake --version</span><br></pre></td></tr></table></figure>
<p>该命令将显示CMake的版本信息，确认安装成功与否。</p>
<h2 id="22-第一个cmake例子"><a class="markdownIt-Anchor" href="#22-第一个cmake例子"></a> 2.2 第一个CMake例子</h2>
<p><strong>配置：</strong> 使用<code>cmake</code>命令进行配置，其中<code>-S</code>选项指定源码目录，<code>-B</code>选项指定构建目录。在终端中执行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake -S . -B build</span><br><span class="line"></span><br><span class="line">这将在当前目录下执行CMake配置，并将生成的构建系统文件放在名为`build`的目录中。</span><br></pre></td></tr></table></figure>
<p><strong>生成：</strong> 使用<code>cmake --build</code>命令进行生成，其中<code>--build</code>选项指定构建目录。在终端中执行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake --build build</span><br><span class="line"></span><br><span class="line">这将在`build`目录中执行构建步骤，生成可执行文件。</span><br></pre></td></tr></table></figure>
<p><strong>运行：</strong> 使用以下命令运行生成的可执行文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./build/first_cmake</span><br><span class="line"></span><br><span class="line">这将执行生成的可执行文件。</span><br></pre></td></tr></table></figure>
<h2 id="23-语法基础"><a class="markdownIt-Anchor" href="#23-语法基础"></a> 2.3 语法基础</h2>
<h3 id="231-指定版本"><a class="markdownIt-Anchor" href="#231-指定版本"></a> 2.3.1 指定版本</h3>
<p>在CMake中，可以使用<code>cmake_minimum_required</code>命令指定当前项目所需的最低CMake版本。它的语法如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION &lt;version_number&gt;)</span><br></pre></td></tr></table></figure>
<p>其中，<code>&lt;version_number&gt;</code>是所需的最低CMake版本号。在这个命令之后，CMake将会检查系统中安装的CMake版本是否满足这个要求，如果不满足则会产生错误。</p>
<p>例如，如果要指定最低的CMake版本为3.10，可以在CMakeLists.txt文件中添加以下命令：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br></pre></td></tr></table></figure>
<p>这样，CMake将会检查系统中的CMake版本是否大于等于3.10。</p>
<p>除了<code>cmake_minimum_required</code>命令，CMake中还有其他类似的命令，它们不区分大小写，并且有许多关键字来引导命令的参数输入，类似于函数的参数传递。这些命令使用的关键字在CMake中是不区分大小写的。</p>
<h3 id="232-设置项目"><a class="markdownIt-Anchor" href="#232-设置项目"></a> 2.3.2 设置项目</h3>
<p>在CMakeLists.txt文件的开头，通常会使用<code>project</code>命令来指定项目的名称、版本、描述和所使用的语言。<code>project</code>命令的语法如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">project</span>(ProjectName</span><br><span class="line">    [VERSION &lt;version_number&gt;]</span><br><span class="line">    [DESCRIPTION <span class="string">&quot;project_description&quot;</span>]</span><br><span class="line">    [LANGUAGES &lt;language&gt;]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>其中，<code>ProjectName</code>是项目的名称，在例子中使用的是&quot;first_cmake&quot;。<code>VERSION</code>关键字后面是项目的版本号，可以是任意格式的版本号，例如&quot;1.0.0&quot;。<code>DESCRIPTION</code>关键字后面是项目的描述，可以是一个字符串。<code>LANGUAGES</code>关键字后面是项目所使用的语言，这里使用的是&quot;Cxx&quot;，表示C++。</p>
<p>示例中的<code>project</code>命令：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">project</span>(first_cmake</span><br><span class="line">    VERSION <span class="number">1.0</span>.<span class="number">0</span></span><br><span class="line">    DESCRIPTION <span class="string">&quot;项目描述&quot;</span></span><br><span class="line">    LANGUAGES Cxx</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>这样，通过<code>project</code>命令，可以在CMakeLists.txt中指定项目的基本信息，方便管理和描述项目。</p>
<h3 id="233-添加可执行文件目标"><a class="markdownIt-Anchor" href="#233-添加可执行文件目标"></a> 2.3.3 添加可执行文件目标</h3>
<p>使用了<code>add_executable</code>命令来定义一个可执行文件。该命令的语法如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_executable</span>(&lt;target_name&gt; &lt;source_files&gt;)</span><br></pre></td></tr></table></figure>
<p>其中，<code>&lt;target_name&gt;</code>是最终生成的可执行文件名，也是在CMake中定义的目标（Target）名。<code>&lt;source_files&gt;</code>是编译目标所使用的源文件。</p>
<p>在你提供的例子中，使用了<code>add_executable</code>命令来定义一个名为<code>first_cmake</code>的目标，并指定了一个源文件<code>main.cpp</code>。这意味着在编译时，会将<code>main.cpp</code>编译为一个可执行文件，该文件的名称将是<code>first_cmake</code>。</p>
<p>示例中的<code>add_executable</code>命令：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_executable</span>(first_cmake main.cpp)</span><br></pre></td></tr></table></figure>
<p>通过<code>add_executable</code>命令，可以在CMakeLists.txt中定义编译目标，并指定相应的源文件。这样，CMake将会根据这些定义生成相应的构建规则和编译指令。</p>
<h3 id="234-生成静态库并链接"><a class="markdownIt-Anchor" href="#234-生成静态库并链接"></a> 2.3.4 生成静态库并链接</h3>
<p>A. 生成静态库：</p>
<p>在<code>account_dir/CMakeLists.txt</code>中，使用<code>add_library</code>命令来生成静态库。该命令的语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add_library(&lt;library_name&gt; &lt;library_type&gt; &lt;source_files&gt;)</span><br></pre></td></tr></table></figure>
<p>其中，<code>&lt;library_name&gt;</code>是最终生成的库文件名，例如在Linux下会生成<code>libAccount.a</code>。</p>
<p><code>&lt;library_type&gt;</code>用于指定链接库的类型，可以是动态链接库（<code>SHARED</code>）或静态链接库（<code>STATIC</code>）。</p>
<p><code>&lt;source_files&gt;</code>是需要用到的源文件。</p>
<p>例如，在<code>account_dir/CMakeLists.txt</code>中，使用<code>add_library</code>命令生成一个名为<code>Account</code>的静态库，其包含了<code>Account.cpp</code>和<code>Account.h</code>两个源文件。示例命令如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_library</span>(Account STATIC Account.cpp Account.h)</span><br></pre></td></tr></table></figure>
<p>这将生成一个静态库文件<code>libAccount.a</code>。</p>
<p>B. 链接：</p>
<p>在<code>test_account/CMakeLists.txt</code>中，可以通过<code>target_link_libraries</code>命令将生成的静态库链接到目标可执行文件中。该命令的语法如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">target_link_libraries</span>(&lt;target_name&gt; &lt;library_name&gt;)</span><br></pre></td></tr></table></figure>
<p>其中，<code>&lt;target_name&gt;</code>是目标可执行文件的名称，<code>&lt;library_name&gt;</code>是要链接的库文件名。</p>
<p>例如，在<code>test_account/CMakeLists.txt</code>中，假设有一个目标可执行文件名为<code>test_account</code>，需要链接生成的静态库<code>Account</code>。示例命令如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">target_link_libraries</span>(test_account Account)</span><br></pre></td></tr></table></figure>
<p>这样，生成的可执行文件<code>test_account</code>将会链接静态库<code>Account</code>。</p>
<h3 id="235-生成动态库并连接"><a class="markdownIt-Anchor" href="#235-生成动态库并连接"></a> 2.3.5 生成动态库并连接</h3>
<p>A. 生成动态库：</p>
<p>在<code>account_dir/CMakeLists.txt</code>中，使用<code>add_library</code>命令来生成动态库。与生成静态库不同的是，需要将<code>&lt;library_type&gt;</code>参数设置为<code>SHARED</code>，表示生成动态链接库。</p>
<p>示例命令如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_library</span>(Account SHARED Account.cpp Account.h)</span><br></pre></td></tr></table></figure>
<p>这将生成一个动态库文件<code>libAccount.so</code>。</p>
<p>B. 链接：</p>
<p>链接过程与生成静态库时的操作相同，使用<code>target_link_libraries</code>命令将动态库链接到目标可执行文件中。</p>
<p>示例命令如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">target_link_libraries</span>(test_account Account)</span><br></pre></td></tr></table></figure>
<p>这样，生成的可执行文件<code>test_account</code>将会链接动态库<code>Account</code>。</p>
<h3 id="236-cmake中的public-private-interface"><a class="markdownIt-Anchor" href="#236-cmake中的public-private-interface"></a> 2.3.6 CMake中的PUBLIC、PRIVATE、INTERFACE</h3>
<p>在CMake中，可以使用<code>target_...()</code>系列命令来操作目标（Target）。这些命令通常支持通过<code>PUBLIC</code>、<code>PRIVATE</code>、<code>INTERFACE</code>关键字来控制属性的传播。</p>
<p>以<code>target_link_libraries(A B)</code>为例，下面是对这些关键字的理解：</p>
<ul>
<li><code>PRIVATE</code>：依赖项B仅链接到目标A。如果有目标C链接了目标A，目标C不会链接目标B。</li>
<li><code>INTERFACE</code>：依赖项B并不链接到目标A。如果有目标C链接了目标A，目标C会链接目标B。</li>
<li><code>PUBLIC</code>：依赖项B链接到目标A。如果有目标C链接了目标A，目标C也会链接目标B。</li>
</ul>
<p>可以将其类比为一个散烟的比方：</p>
<ul>
<li><code>PRIVATE</code>：就是自己抽烟，不给别人抽。</li>
<li><code>INTERFACE</code>：就是自己不抽烟，给别人抽。</li>
<li><code>PUBLIC</code>：就是自己抽烟，也给别人抽。</li>
</ul>
<p>从使用的角度来看，假设有目标C链接了目标A：</p>
<ul>
<li>如果目标B仅用于目标A的实现，并且不在头文件中提供给目标C使用，可以使用<code>PRIVATE</code>。</li>
<li>如果目标B不用于目标A的实现，仅在头文件中作为接口给目标C使用，可以使用<code>INTERFACE</code>。</li>
<li>如果目标B既用于目标A的实现，也在头文件中提供给目标C使用，可以使用<code>PUBLIC</code>。</li>
</ul>
<p>以下是一个示例：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建库</span></span><br><span class="line"><span class="keyword">add_library</span>(c c.cpp)</span><br><span class="line"><span class="keyword">add_library</span>(D d.cpp)</span><br><span class="line"><span class="keyword">add_library</span>(B b.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用target_link_libraries命令进行链接</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(A PRIVATE B)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(A INTERFACE C)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(A PUBLIC D)</span><br></pre></td></tr></table></figure>
<p>在上述示例中，目标<code>A</code>通过<code>target_link_libraries</code>命令链接了目标<code>B</code>、<code>C</code>和<code>D</code>，使用了不同的传播属性。具体属性的选择取决于目标之间的关系和使用需求。</p>
<h3 id="237-变量"><a class="markdownIt-Anchor" href="#237-变量"></a> 2.3.7 变量</h3>
<p>在CMake中，你可以使用<code>message</code>命令输出消息并进行变量的操作和设置。</p>
<p>以下是一些常见的用法：</p>
<p>1.输出消息：使用<code>message</code>命令可以输出消息到CMake的输出。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message</span>(<span class="string">&quot;输出消息&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>2.消息拼接：使用<code>message</code>命令可以将多个消息进行拼接输出。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message</span>(<span class="string">&quot;输出1&quot;</span> <span class="string">&quot;输出2&quot;</span> <span class="string">&quot;输出3&quot;</span>)  <span class="comment"># 会进行拼接输出</span></span><br></pre></td></tr></table></figure>
<p>3.设置变量：使用<code>set</code>命令可以设置变量的值。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(VAR1 <span class="string">&quot;变量1&quot;</span>)</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;VAR1=&quot;</span> <span class="variable">$&#123;VAR1&#125;</span>)  <span class="comment"># 外部访问</span></span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;输出变量VAR1:$&#123;VAR1&#125;&quot;</span>)  <span class="comment"># 内部拼接</span></span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;\$&#123;VAR1&#125;=$&#123;VAR1&#125;&quot;</span>)  <span class="comment"># 使用\转义</span></span><br></pre></td></tr></table></figure>
<p>4.删除变量：使用<code>unset</code>命令可以删除变量。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unset</span>(VAR1)  <span class="comment"># 删除变量</span></span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;\$&#123;VAR1&#125;=$&#123;VAR1&#125;&quot;</span>)  <span class="comment"># 删除变量后，输出为空</span></span><br></pre></td></tr></table></figure>
<p>5.设置变量缓存：使用<code>set</code>命令的<code>CACHE</code>选项可以设置一个变量的缓存，可以通过命令行的<code>-D</code>参数来修改该变量的值。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(CACHE_VARIABLE_TEST <span class="string">&quot;原始值&quot;</span> CACHE <span class="keyword">STRING</span> <span class="string">&quot;变量缓存的描述&quot;</span>)</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;变量缓存的值:$&#123;CACHE_VARIABLE_TEST&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>6.常见的内置变量：CMake提供了一些内置的变量，用于获取构建系统的信息和配置</p>
<p>第一类: 提供信息的变量</p>
<ul>
<li><code>PROJECT_NAME</code>：项目名称，表示当前CMake项目的名称。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message</span>(<span class="string">&quot;$&#123;PROJECT_NAME&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li><code>CMAKE_SOURCE_DIR</code>：源码目录，表示当前CMake项目的根源码目录。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message</span>(<span class="string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li><code>CMAKE_BINARY_DIR</code>：编译目录，表示当前CMake项目的编译输出目录。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message</span>(<span class="string">&quot;$&#123;CMAKE_BINARY_DIR&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li><code>CMAKE_CURRENT_LIST_FILE</code>：当前CMakeLists.txt文件路径，表示当前正在处理的CMakeLists.txt文件的完整路径。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message</span>(<span class="string">&quot;$&#123;CMAKE_CURRENT_LIST_FILE&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>这些变量提供了与项目、目录结构和文件相关的信息。</p>
<hr />
<p>第二类: 控制CMake运行的变量</p>
<p>CMake中的变量通常是根据构建选项进行命名的，例如<code>BUILD_SHARED_LIBS</code>。这些变量用于控制CMake的运行和构建过程。</p>
<hr />
<p>第三类: 描述系统的变量</p>
<ul>
<li><code>WIN32</code>：表示当前操作系统是否为Windows。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message</span>(<span class="string">&quot;是否是Windows系统: $&#123;WIN32&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li><code>UNIX</code>：表示当前操作系统是否为类Unix（包括Linux、macOS等）。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message</span>(<span class="string">&quot;是否是Unix系统: $&#123;UNIX&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li><code>CMAKE_SYSTEM_NAME</code>：系统名称，表示当前操作系统的名称。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message</span>(<span class="string">&quot;系统名称: $&#123;CMAKE_SYSTEM_NAME&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>这些变量用于描述当前操作系统的一些信息，以便在构建过程中进行条件判断和配置。</p>
<h3 id="238-include引入其他代码"><a class="markdownIt-Anchor" href="#238-include引入其他代码"></a> 2.3.8 include引入其他代码</h3>
<h3 id="239-条件控制"><a class="markdownIt-Anchor" href="#239-条件控制"></a> 2.3.9 条件控制</h3>
<p>CMake提供了条件控制的语法和关键词，使得你可以根据条件来控制构建过程中的行为。以下是一些常用的条件控制关键词和语法：</p>
<ul>
<li><code>if (variable)</code>：当变量的值为真时，执行相应的代码块。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (MY_VARIABLE)</span><br><span class="line">    <span class="comment"># 当MY_VARIABLE为真时执行的代码块</span></span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>
<ul>
<li><code>else()</code>：在if条件为假时执行的代码块。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (MY_VARIABLE)</span><br><span class="line">    <span class="comment"># 当MY_VARIABLE为真时执行的代码块</span></span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">    <span class="comment"># 当MY_VARIABLE为假时执行的代码块</span></span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>
<ul>
<li>真值常量：<code>ON</code>、<code>YES</code>、<code>TRUE</code>、<code>Y</code>、<code>1</code>、非零数字等。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (MY_VARIABLE <span class="keyword">STREQUAL</span> <span class="string">&quot;ON&quot;</span>)</span><br><span class="line">    <span class="comment"># 当MY_VARIABLE的值为真时执行的代码块</span></span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>
<ul>
<li>假值常量：<code>OFF</code>、<code>NO</code>、<code>FALSE</code>、<code>N</code>、<code>0</code>、空字符串、<code>NOTFOUND</code>等。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (MY_VARIABLE <span class="keyword">STREQUAL</span> <span class="string">&quot;OFF&quot;</span>)</span><br><span class="line">    <span class="comment"># 当MY_VARIABLE的值为假时执行的代码块</span></span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>
<ul>
<li>关键词：<code>NOT</code>、<code>TARGET</code>、<code>EXISTS (file)</code>、<code>DEFINED</code>等，可以与条件一起使用。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">NOT</span> <span class="keyword">TARGET</span> MyTarget)</span><br><span class="line">    <span class="comment"># 当MyTarget不存在时执行的代码块</span></span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>
<ul>
<li>逻辑运算符：<code>AND</code>、<code>OR</code>用于组合多个条件。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (CONDITION1 <span class="keyword">AND</span> CONDITION2)</span><br><span class="line">    <span class="comment"># 当CONDITION1和CONDITION2同时为真时执行的代码块</span></span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (CONDITION1 <span class="keyword">OR</span> CONDITION2)</span><br><span class="line">    <span class="comment"># 当CONDITION1或CONDITION2至少一个为真时执行的代码块</span></span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>
<ul>
<li><code>MATCHES (regular expression)</code>：使用正则表达式进行匹配。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (MY_VARIABLE <span class="keyword">MATCHES</span> <span class="string">&quot;^prefix.*&quot;</span>)</span><br><span class="line">    <span class="comment"># 当MY_VARIABLE以&quot;prefix&quot;开头时执行的代码块</span></span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>
<ul>
<li><code>VERSION LESS</code>、<code>VERSION LESS_EQUAL</code>：用于比较版本号。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (MY_VERSION VERSION <span class="keyword">LESS</span> <span class="number">2.0</span>)</span><br><span class="line">    <span class="comment"># 当MY_VERSION小于2.0时执行的代码块</span></span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>
<p>通过这些条件控制关键词和语法，你可以根据不同的条件来执行不同的代码块，从而实现更灵活和可配置的构建过程。你可以根据具体的需求选择适当的条件控制方式，并结合变量、关键词和运算符来编写CMake脚本。</p>
<h3 id="2310-cmake分步编译"><a class="markdownIt-Anchor" href="#2310-cmake分步编译"></a> 2.3.10 CMake分步编译</h3>
<p>首先，你使用以下命令查看所有的目标：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmake --build . --target help</span><br></pre></td></tr></table></figure>
<p>这将列出项目中可用的目标列表，包括默认目标&quot;all&quot;、“clean”、“depend”、“rebuild_cache”、&quot;edit_cache&quot;以及其他一些目标。</p>
<p>接下来，你执行以下命令进行预处理：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmake --build . --target main.i</span><br></pre></td></tr></table></figure>
<p>这将对&quot;main.cpp&quot;源文件进行预处理，并将预处理结果保存在&quot;CMakeFiles/steps_demo.dir/main.cpp.i&quot;文件中。</p>
<p>然后，你执行以下命令进行编译：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmake --build . --target main.sI</span><br></pre></td></tr></table></figure>
<p>这将将&quot;main.cpp&quot;源文件编译为汇编代码，并将汇编代码保存在&quot;CMakeFiles/steps_demo.dir/main.cpp.s&quot;文件中。</p>
<p>接着，你执行以下命令进行汇编：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmake --build . --target main.o</span><br></pre></td></tr></table></figure>
<p>这将将汇编代码编译为目标文件，并将目标文件保存为&quot;CMakeFiles/steps_demo.dir/main.cpp.o&quot;。</p>
<p>最后，你执行以下命令进行链接：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmake --build .</span><br></pre></td></tr></table></figure>
<p>这将扫描依赖项并链接生成最终的可执行文件&quot;steps_demo&quot;。</p>
<p>最后，你执行以下命令运行可执行文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./steps_demo</span><br></pre></td></tr></table></figure>
<p>这将运行生成的可执行文件。</p>
<h3 id="2311-生成器表达式"><a class="markdownIt-Anchor" href="#2311-生成器表达式"></a> 2.3.11 生成器表达式</h3>
<p>生成器表达式是CMake中一种用于在生成构建系统时根据不同配置动态生成特定内容的表达式。它可以让代码更加精简和灵活。下面是几种常用的生成器表达式类型：</p>
<p>条件表达式：<code>$&lt;condition:true_string&gt;</code>。当条件为真时，返回<code>true_string</code>，否则返回空字符串。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$&lt;<span class="number">0</span>:<span class="keyword">TEST</span>&gt;           <span class="comment"># 返回空字符串</span></span><br><span class="line">$&lt;<span class="number">1</span>:<span class="keyword">TEST</span>&gt;           <span class="comment"># 返回&quot;TEST&quot;</span></span><br><span class="line">$&lt;$&lt;BOOL:<span class="keyword">TRUE</span>&gt;:<span class="keyword">TEST</span>&gt;  <span class="comment"># 返回&quot;TEST&quot;</span></span><br></pre></td></tr></table></figure>
<p>变量查询（Variable-Query）：通过查询变量来获取动态的值。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$&lt;TARGET_EXISTS:<span class="keyword">target</span>&gt;             <span class="comment"># 判断目标是否存在</span></span><br><span class="line">$&lt;CONFIG:Debug&gt;                     <span class="comment"># 判断当前构建类型是否为Debug</span></span><br></pre></td></tr></table></figure>
<p>目标查询（Target-Query）：通过查询目标来获取相关的信息。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$&lt;TARGET_FILE:<span class="keyword">target</span>&gt;               <span class="comment"># 获取目标的文件路径</span></span><br><span class="line">$&lt;TARGET_FILE_NAME:<span class="keyword">target</span>&gt;          <span class="comment"># 获取目标的文件名</span></span><br></pre></td></tr></table></figure>
<p>输出相关表达式：用于在不同的构建环节使用不同的参数。比如，在<code>install</code>和<code>build</code>阶段使用不同的参数。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_library</span>(Foo ...)</span><br><span class="line"><span class="keyword">target_include_directories</span>(Foo</span><br><span class="line">    PUBLIC</span><br><span class="line">        $&lt;$&lt;CONFIG:Debug&gt;:<span class="variable">$&#123;DEBUG_INCLUDES&#125;</span>&gt;</span><br><span class="line">        $&lt;$&lt;CONFIG:Release&gt;:<span class="variable">$&#123;RELEASE_INCLUDES&#125;</span>&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>在上述示例中，根据不同的构建配置（Debug或Release），生成器表达式选择性地包含不同的头文件路径。</p>
<p>需要注意的是，生成器表达式在生成构建系统时被展开，因此无法通过<code>message</code>命令直接打印。你可以使用类似<code>file(GENERATE OUTPUT &quot;./generator_test.txt&quot; CONTENT &quot;$&lt;$&lt;BOOL:TRUE&gt;:TEST&gt;&quot;)</code>的方式将生成器表达式的结果写入文件，以间接测试生成器表达式的值。</p>
<h3 id="2312-函数和宏"><a class="markdownIt-Anchor" href="#2312-函数和宏"></a> 2.3.12 函数和宏</h3>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个宏</span></span><br><span class="line"><span class="keyword">macro</span>(my_macro)</span><br><span class="line">    <span class="keyword">message</span>(<span class="string">&quot;宏内部的信息&quot;</span>)</span><br><span class="line">    <span class="keyword">set</span>(macro_var <span class="string">&quot;宏内部变量test&quot;</span>)</span><br><span class="line"><span class="keyword">endmacro</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数</span></span><br><span class="line"><span class="keyword">function</span>(second_func arg1 arg2)</span><br><span class="line">    <span class="keyword">message</span>(<span class="string">&quot;第一个参数: $&#123;arg1&#125;，第二个参数: $&#123;arg2&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">endfunction</span>()</span><br></pre></td></tr></table></figure>
<p>在这个示例中，<code>my_macro</code>是一个没有参数的宏，它在宏内部输出一条信息，并设置了一个变量<code>macro_var</code>的值。</p>
<p><code>second_func</code>是一个函数，它有两个参数<code>arg1</code>和<code>arg2</code>。在函数内部，它输出了两个参数的值。</p>
<p>你可以在CMakeLists.txt文件中使用这些宏和函数，例如：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 调用宏</span></span><br><span class="line">my_macro()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">second_func(<span class="string">&quot;Hello&quot;</span> <span class="string">&quot;World&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>当你运行CMake生成构建系统时，你将看到宏内部的信息输出，并且可以访问在宏或函数内部定义的变量。函数将输出参数的值。</p>
<p>请注意，宏和函数的定义需要在CMakeLists.txt文件的适当位置进行，并且在调用它们之前必须先定义它们。</p>
<h3 id="2313-设置安装"><a class="markdownIt-Anchor" href="#2313-设置安装"></a> 2.3.13 设置安装</h3>
<p><code>install</code>命令用于设置安装规则，将目标文件和文件夹安装到指定的位置。下面是你提供的代码的解释：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">install</span>(TARGETS instal_demo slib dlib</span><br><span class="line">    RUNTIME DESTINATION bin     <span class="comment"># 可执行文件安装路径</span></span><br><span class="line">    LIBRARY DESTINATION lib     <span class="comment"># 动态库安装路径</span></span><br><span class="line">    ARCHIVE DESTINATION lib     <span class="comment"># 静态库安装路径</span></span><br><span class="line">    PUBLIC_HEADER DESTINATION <span class="keyword">include</span>   <span class="comment"># 公共头文件安装路径</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>在上述代码中，<code>install</code>命令指定了要安装的目标文件列表，其中包括<code>instal_demo</code>、<code>slib</code>和<code>dlib</code>。</p>
<p>接下来，通过指定不同的<code>DESTINATION</code>参数，定义了目标文件在安装过程中的安装路径：</p>
<ul>
<li><code>RUNTIME DESTINATION bin</code>：指定可执行文件的安装路径为<code>bin</code>目录。</li>
<li><code>LIBRARY DESTINATION lib</code>：指定动态库的安装路径为<code>lib</code>目录。</li>
<li><code>ARCHIVE DESTINATION lib</code>：指定静态库的安装路径为<code>lib</code>目录。</li>
<li><code>PUBLIC_HEADER DESTINATION include</code>：指定公共头文件的安装路径为<code>include</code>目录。</li>
</ul>
<p>根据你的需求，这些目标文件将被安装到指定的目录中。</p>
<p>请注意，安装路径是相对于安装目录的，因此你需要确保安装目录在运行<code>make install</code>时正确设置。</p>
<p>要解决在安装后无法找到动态库的问题，可以使用<code>set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)</code>和<code>set(CMAKE_INSTALL_RPATH &quot;$&#123;CMAKE_INSTALL_PREFIX&#125;/lib&quot;)</code>来设置RPATH。</p>
<p>下面是相应的代码：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKE_BUILD_WITH_INSTALL_RPATH <span class="keyword">TRUE</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_INSTALL_RPATH <span class="string">&quot;$&#123;CMAKE_INSTALL_PREFIX&#125;/lib&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><code>set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)</code>指示在构建过程中使用与安装RPATH相同的RPATH。这样，在构建时就可以正确地查找和链接动态库。</p>
<p><code>set(CMAKE_INSTALL_RPATH &quot;$&#123;CMAKE_INSTALL_PREFIX&#125;/lib&quot;)</code>将安装RPATH设置为<code>$&#123;CMAKE_INSTALL_PREFIX&#125;/lib</code>，其中<code>$&#123;CMAKE_INSTALL_PREFIX&#125;</code>是安装目录的路径。这将导致在安装时设置RPATH，使得安装后的可执行文件可以在<code>$&#123;CMAKE_INSTALL_PREFIX&#125;/lib</code>目录中正确地查找和加载动态库。</p>
<p>通过使用这两个设置，你可以解决在安装后无法找到动态库的问题。确保将其放置在CMakeLists.txt文件中的合适位置，并根据实际情况调整<code>$&#123;CMAKE_INSTALL_PREFIX&#125;/lib</code>路径，以匹配你的安装目录结构。</p>
<h3 id="2314-寻找依赖find_package"><a class="markdownIt-Anchor" href="#2314-寻找依赖find_package"></a> 2.3.14 寻找依赖find_package</h3>
<p>对于大多数支持CMake的项目来说，可以使用<code>find_package</code>命令来查找对应的依赖库。通常情况下，如果找到了库，会设置以下变量（这些变量由库的作者设置）：</p>
<ul>
<li><code>&lt;LibaryName&gt;_FOUND</code>：表示是否找到库。</li>
<li><code>&lt;LibaryName&gt;_INCLUDE_DIR</code>：表示库的头文件目录。</li>
<li><code>&lt;LibaryName&gt;_LIBRARIES</code>：表示库的库文件目录。</li>
</ul>
<p>如果你编写了一个新的函数库，并希望其他项目可以通过<code>find_package</code>引用它，你可以使用以下两种方法：</p>
<ol>
<li>
<p>编写一个<code>Find&lt;LibraryName&gt;.cmake</code>文件：适用于导入非CMake安装的项目。</p>
<p>你可以编写一个名为<code>Find&lt;LibraryName&gt;.cmake</code>的文件，并将其放置在CMake的<code>Modules</code>目录或项目的特定目录中。该文件应包含查找和设置相关变量的逻辑。其他项目可以通过<code>find_package</code>命令来引用这个自定义的查找文件，从而找到并使用你的库。</p>
<p>附件: 15.custom_find</p>
</li>
<li>
<p>使用<code>install</code>安装并生成<code>&lt;LibraryName&gt;Config.cmake</code>文件：适用于导入你自己开发的CMake项目。</p>
<p>在你的库项目中，可以使用<code>install</code>命令将库文件安装到指定位置，并生成<code>&lt;LibraryName&gt;Config.cmake</code>文件。该文件应包含设置变量和导出目标的逻辑。其他项目可以通过<code>find_package</code>命令找到并使用你的库。</p>
</li>
</ol>
<p>==现在只是简单的写了一下学习的内容，但是对于很多内容还并不是很熟悉，一切都要等到最后实战的时候==</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
  </entry>
  <entry>
    <title>windows搭建hexo</title>
    <url>/2023/09/03/0%20windows%E6%90%AD%E5%BB%BAhexo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 [Markdown]Daring Fireball: Markdown )（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<p>Hexo 官方中文网站: Hexo</p>
<h1 id="第一章-前期准备"><a class="markdownIt-Anchor" href="#第一章-前期准备"></a> 第一章 前期准备</h1>
<h2 id="11-安装前所需环境介绍"><a class="markdownIt-Anchor" href="#11-安装前所需环境介绍"></a> 1.1 安装前所需环境介绍</h2>
<p>安装 Hexo 之前，需要确保您的 PC 中已经安装以下工具:</p>
<p>Node.js           <a href="https://nodejs.org/en">https://nodejs.org/en</a><br />
Git    <a href="https://git-scm.com/">https://git-scm.com/</a><br />
如果您的电脑已经具备所需工具，那么您可以直接进入第二章开始安装 Hexo 了。</p>
<p>如果您还未安装这两款工具，那么请按照以下步骤进行安装。</p>
<h2 id="12-安装-git"><a class="markdownIt-Anchor" href="#12-安装-git"></a> 1.2 安装 Git</h2>
<p>官方下载地址: <a href="https://git-scm.com/">https://git-scm.com/</a><br />
注意事项: 建议选择 64-bit Git for Windows Setup，并且安装时要勾选 Add to PATH 选项</p>
<p>win + R 在命令行输入cmd进入终端模式，输入下面指令，当显示版本则安装成功<br />
git -v</p>
<h2 id="13-安装-nodejs"><a class="markdownIt-Anchor" href="#13-安装-nodejs"></a> 1.3 安装 Node.js</h2>
<p>官方下载地址:  <a href="https://nodejs.org/en">https://nodejs.org/en</a><br />
注意事项: 使用 Node.js 官方安装程序时，请确保勾选 Add to PATH 选项（默认已勾选）</p>
<p>win + R 在命令行输入cmd进入终端模式，输入下面指令，当显示版本则安装成功<br />
node --version</p>
<p>至此，您已经完成了安装 Hexo 所需的所有额外环境，接下来就可以安装 Hexo 了。</p>
<h1 id="第二章-安装-hexo"><a class="markdownIt-Anchor" href="#第二章-安装-hexo"></a> 第二章 安装 Hexo</h1>
<h2 id="21-安装-cnpm"><a class="markdownIt-Anchor" href="#21-安装-cnpm"></a> 2.1 安装 cnpm</h2>
<p>当您安装 Node.js 之后，便可以在命令行中通过 node install 命令安装您想要的程序了。但本文推荐使用 cnpm 安装 Hexo，所以需要先通过 npm install 安装 cnpm。</p>
<p>命令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry==https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>说明: -g 表示进行全局安装，–registry==<a href="https://registry.npm.taobao.org">https://registry.npm.taobao.org</a>  表示使用淘宝镜像安装 cnpm</p>
<p>安装后验证: 在 cmd 中输入命令 cnpm -v, 可查看 cnpm 版本</p>
<h2 id="22-安装-hexo"><a class="markdownIt-Anchor" href="#22-安装-hexo"></a> 2.2 安装 Hexo</h2>
<p>命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>说明: -g 表示全局安装，hexo-cli 为所安装的包<br />
安装后验证: 在 cmd 中输入命令 hexo -v, 可查看 hexo 版本</p>
<h2 id="23-注意事项"><a class="markdownIt-Anchor" href="#23-注意事项"></a> 2.3 注意事项</h2>
<p>建议永远安装最新版本的 Hexo，以及 [推荐的 Node.js 版本](文档 | Hexo )。<br />
至此，您已成成功安装了 Hexo，接下来进入 Github 的配置吧!</p>
<h1 id="第三章-配置-github"><a class="markdownIt-Anchor" href="#第三章-配置-github"></a> 第三章 配置 Github</h1>
<p>如果您还没有 Gihub 账户，请注册一个 Github 账户吧!</p>
<h2 id="31-在-github-上创建仓库"><a class="markdownIt-Anchor" href="#31-在-github-上创建仓库"></a> 3.1 在 Github 上创建仓库</h2>
<p>新建一个名为: <a href="http://username.github.io">http://username.github.io</a>  的仓库(username 为您的 Github 用户名)<br />
比如，如果您的 github 用户名是 test，那么您就新建名为 <a href="http://test.github.io">http://test.github.io</a>  的仓库（必须是您的用户名，其它名称无效），将来你的网站访问地址就是 <a href="https://test.github.io">https://test.github.io</a>  了。由此可见，每一个 github 账户最多只能创建一个这样可以直接使用域名访问的仓库。</p>
<h2 id="32-配置-ssh-免密登录"><a class="markdownIt-Anchor" href="#32-配置-ssh-免密登录"></a> 3.2 配置 SSH 免密登录</h2>
<p>为什么要配置这个呢？因为您提交代码肯定要拥有您的 github 权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用 ssh key 来解决本地和服务器的连接问题。</p>
<p>注: 如果您已经配置过 SSH，可跳过此步骤</p>
<p>步骤:</p>
<p>1、首先打开电脑文件夹，找到 C:\Users\您的用户名\ .ssh文件夹并删除(如果没有，则直接进入第二步)</p>
<p>2、在 C:\Users\您的用户名 文件夹下右键打开 Git Bash Here 输入命令: ssh-keygen -t rsa -C “你的github登录邮箱” 生成.ssh秘钥，输入后连敲三次回车，出现下图情况代表成功</p>
<p>3、生成了一个新的 C:\Users\您的用户名\ .ssh文件夹，打开这个文件夹，找到 .ssh\id_rsa.pub 文件，记事本打开并复制里面的内容</p>
<p>4、打开您的 github 主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key，把复制的内容粘贴进去，title 随便填，保存即可，我们的公钥就添加成功了，设置好如下图:</p>
<p>5、检测是否设置成功:</p>
<p>输入命令: ssh -T <a href="mailto:git@github.com">git@github.com</a></p>
<p>看到以上信息说明 SSH 已配置成功!</p>
<p>如果出现提示则选择yes知道成功；</p>
<p>6、此外您还需要如下配置:</p>
<p>命令: git config --global <a href="http://user.name">user.name</a> “chai0705 “</p>
<p>命令: git config --global user.email  <a href="mailto:1361382269@qq.com">1361382269@qq.com</a></p>
<p>至此，您已经成功配置好了 Github，接下来开始搭建个人博客吧!</p>
<h1 id="第四章-使用-hexo-搭建博客"><a class="markdownIt-Anchor" href="#第四章-使用-hexo-搭建博客"></a> 第四章 使用 Hexo 搭建博客</h1>
<p>Hexo 的一些命令<br />
生成静态文件：hexo g；<br />
清空静态文件：hexo cl；<br />
在本地运行：hexo s；<br />
部署到网站：hexo d；<br />
生成静态文件并部署到网站：hexo d -g 或 hexo g -d；<br />
创建新文章：hexo new <file>。</p>
<h2 id="41-初始化"><a class="markdownIt-Anchor" href="#41-初始化"></a> 4.1 初始化</h2>
<p>1、在电脑的某个磁盘或路径新建一个名为 hexo 的文件夹(名字可以随便取)，比如我的是 D:\hexo，由于这个文件夹将来就作为您存放代码的地方，所以最好不要随便放</p>
<p>2、在 D:\hexo 文件夹下右键打开 Git Bash Here，输入命令: hexo init 进行初始化</p>
<p>hexo 会自动下载一些文件到这个目录，包括 node_modules，目录结构如下图:</p>
<p>3、执行命令: hexo g 会在 public 文件夹下生成相关的 html 文件，这些文件将来需要提交到 Github 上</p>
<p>4、执行命令: hexo s 可以开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000">http://localhost:4000</a>  即可看到博客内容</p>
<h2 id="42-将博客部署到-github"><a class="markdownIt-Anchor" href="#42-将博客部署到-github"></a> 4.2 将博客部署到 Github</h2>
<p>1、在 D:\hexo 目录下安装 hexo-deployer-git 插件</p>
<p>命令: npm install hexo-deployer-git --save<br />
2、编辑 D:\hexo 目录下的 _config.yml 文件，在文件末尾添加如下内容:</p>
<p>注意: 其中 repository 中的内容即为 github 个人主页链接地址</p>
<p>3、在 D:\hexo 目录下，输入命令: hexo d 将本地 blog 推送到 github 远程仓库，也可能需要输入 username &amp; pwd</p>
<p>推送成功后，即可通过<a href="https://baizhouhaoyue.github.io/%E8%AE%BF%E9%97%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%BA%86">https://baizhouhaoyue.github.io/访问个人博客了</a> !</p>
<p>CLASH</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309152249472.png" alt="image-20230915224913754" /></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312042118499.png" alt="image-20230915224959370" />1 文章的分类和标签</p>
<h1 id="第5章-hexo进阶"><a class="markdownIt-Anchor" href="#第5章-hexo进阶"></a> 第5章 hexo进阶</h1>
<h2 id="51-分类和标签"><a class="markdownIt-Anchor" href="#51-分类和标签"></a> 5.1 分类和标签</h2>
<p>分类的话就是在最上方的状态栏中加入	categories:  属性即可</p>
<p>标签的话就是在最上方的状态栏中加入	tags:  属性即可</p>
<h2 id="52图床搭建教程"><a class="markdownIt-Anchor" href="#52图床搭建教程"></a> 5.2图床搭建教程</h2>
<p>根据这个教程来即可</p>
<p><a href="https://eryinote.com/post/105">图床</a></p>
<p>踩坑 picgo这个软件双击并不是直接打开，而是到了右下角的小菜单。。。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312042118512.png" alt="image-20230903113402329" /></p>
<p>然后在typora软件中进行简单的设置即可。如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202312042118538.png" alt="image-20230903114440776" /></p>
<p>至此就搞完了，其他目前也没啥需求，继续学习C++</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
  </entry>
  <entry>
    <title>markdown语法学习</title>
    <url>/2023/09/01/1markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>MarkDown是什么<br />
Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p>
<p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p>
<p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p>
<p>Markdown 编写的文档后缀为 .md, .markdown。</p>
<h1 id="1如何自动生成目录"><a class="markdownIt-Anchor" href="#1如何自动生成目录"></a> 1.如何自动生成目录</h1>
<p>点击【视图】——【大纲】</p>
<p>说明：但是此步骤生成的目录，并不是折叠的目录，折叠起来会更美观一些</p>
<p>设置折叠目录</p>
<p>点击【文件】——【偏好设置】——【外观】——侧边栏选择打钩，此时已经折叠成功</p>
<h1 id="2快捷键"><a class="markdownIt-Anchor" href="#2快捷键"></a> 2.快捷键</h1>
<p>Ctrl+1 ——设置一级标题</p>
<p>Ctrl+2 ——设置二级标题</p>
<p>Ctrl+3 ——设置三级标题</p>
<p>Ctrl+4 ——设置四级标题</p>
<p>Ctrl+5 ——设置五级标题</p>
<p>Ctrl+6 ——设置六级标题</p>
<p>空格 ——引用</p>
<p>回车、shift + tab ——退出引用</p>
<p>Ctrl + Shift + ] ——无序列表</p>
<p>Ctrl + Shift + [ ——有序列</p>
<p>Ctrl + Shift + ] 、tab——子列表</p>
<p>Shift + tab ——返回上一级列表、</p>
<p>Ctrl + B —— 加粗</p>
<dl>
<dt>Ctrl + T —— 表格</dt>
<dd>~ 要删除的内容 ~ ~ ——删除线</dd>
</dl>
<h1 id="3创建链接"><a class="markdownIt-Anchor" href="#3创建链接"></a> 3.创建链接</h1>
<p>格式为[] ()，其中[]内为要展示的内容，()为链接。</p>
<h1 id="4图片路径管理"><a class="markdownIt-Anchor" href="#4图片路径管理"></a> 4.图片路径管理</h1>
<p>Typora默认将所有文档的图片都放在一起，但是我们更想每一个文档都有属于自己的一个文件夹，文档中的图片也最好可以自动保存在该文件夹内。解决方法如下：</p>
<p>点击【文件】——【偏好设置】——【图像】——将该界面内容设置如下:</p>
<p>此时，该文档所在文件夹中会自动生成一个img文件，该路径为本文档中的图片路径。</p>
<p><img src="D:%5Chexo%5Cblog%5Csource_posts%5Cimage-20230902072149501.png" alt="" /></p>
<h1 id="5划重点高亮"><a class="markdownIt-Anchor" href="#5划重点高亮"></a> 5.划重点–高亮</h1>
<p>高亮</p>
<p>点击【文件】——【偏好设置】——【Markdown】——高亮处打钩</p>
<p>编辑高亮内容格式如下：</p>
<p>== 内容== —— 高亮</p>
<p>== chai==</p>
<p>==cccc==</p>
<p>== key==</p>
<p>==内容==</p>
<p><strong>cha</strong></p>
<p>重启Typora，此时内容处会变成高亮的效果.</p>
<h1 id="6导入代码块"><a class="markdownIt-Anchor" href="#6导入代码块"></a> 6.导入代码块</h1>
<p><strong>~~~</strong> ——代码块，点击代码框可选择语言</p>
<h1 id="7不使用自动拼写检查"><a class="markdownIt-Anchor" href="#7不使用自动拼写检查"></a> 7.不使用自动拼写检查</h1>
<p>点击右下角[【Spell Check】勾选【不使用拼写检查】</p>
<h1 id="8设置自动保存"><a class="markdownIt-Anchor" href="#8设置自动保存"></a> 8设置自动保存</h1>
<p>其实Typora 对文件修改之后并不能自动保存，解决方法：</p>
<p>点击【文件】——【偏好设置】——【通用】——自动保存处打钩</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
  </entry>
</search>
