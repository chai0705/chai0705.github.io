<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>windows搭建hexo</title>
    <url>/2023/09/03/0-0-0%20windows%E6%90%AD%E5%BB%BAhexo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 [Markdown]Daring Fireball: Markdown )（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<p>Hexo 官方中文网站: Hexo</p>
<h1 id="第一章-前期准备"><a href="#第一章-前期准备" class="headerlink" title="第一章 前期准备"></a>第一章 前期准备</h1><h2 id="1-1-安装前所需环境介绍"><a href="#1-1-安装前所需环境介绍" class="headerlink" title="1.1 安装前所需环境介绍"></a>1.1 安装前所需环境介绍</h2><p>安装 Hexo 之前，需要确保您的 PC 中已经安装以下工具:</p>
<p>Node.js           <a href="https://nodejs.org/en">https://nodejs.org/en</a><br>        Git    <a href="https://git-scm.com/">https://git-scm.com/</a><br>如果您的电脑已经具备所需工具，那么您可以直接进入第二章开始安装 Hexo 了。</p>
<p>如果您还未安装这两款工具，那么请按照以下步骤进行安装。</p>
<h2 id="1-2-安装-Git"><a href="#1-2-安装-Git" class="headerlink" title="1.2 安装 Git"></a>1.2 安装 Git</h2><p>官方下载地址: <a href="https://git-scm.com/">https://git-scm.com/</a><br>注意事项: 建议选择 64-bit Git for Windows Setup，并且安装时要勾选 Add to PATH 选项</p>
<p>win + R 在命令行输入cmd进入终端模式，输入下面指令，当显示版本则安装成功<br>git -v</p>
<h2 id="1-3-安装-Node-js"><a href="#1-3-安装-Node-js" class="headerlink" title="1.3 安装 Node.js"></a>1.3 安装 Node.js</h2><p>官方下载地址:  <a href="https://nodejs.org/en">https://nodejs.org/en</a><br>注意事项: 使用 Node.js 官方安装程序时，请确保勾选 Add to PATH 选项（默认已勾选）</p>
<p>win + R 在命令行输入cmd进入终端模式，输入下面指令，当显示版本则安装成功<br>node –version</p>
<p>至此，您已经完成了安装 Hexo 所需的所有额外环境，接下来就可以安装 Hexo 了。</p>
<h1 id="第二章-安装-Hexo"><a href="#第二章-安装-Hexo" class="headerlink" title="第二章 安装 Hexo"></a>第二章 安装 Hexo</h1><h2 id="2-1-安装-cnpm"><a href="#2-1-安装-cnpm" class="headerlink" title="2.1 安装 cnpm"></a>2.1 安装 cnpm</h2><p>当您安装 Node.js 之后，便可以在命令行中通过 node install 命令安装您想要的程序了。但本文推荐使用 cnpm 安装 Hexo，所以需要先通过 npm install 安装 cnpm。</p>
<p>命令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry==https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>


<p>说明: -g 表示进行全局安装，–registry&#x3D;&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a>  表示使用淘宝镜像安装 cnpm</p>
<p>安装后验证: 在 cmd 中输入命令 cnpm -v, 可查看 cnpm 版本</p>
<h2 id="2-2-安装-Hexo"><a href="#2-2-安装-Hexo" class="headerlink" title="2.2 安装 Hexo"></a>2.2 安装 Hexo</h2><p>命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>说明: -g 表示全局安装，hexo-cli 为所安装的包<br>安装后验证: 在 cmd 中输入命令 hexo -v, 可查看 hexo 版本</p>
<h2 id="2-3-注意事项"><a href="#2-3-注意事项" class="headerlink" title="2.3 注意事项"></a>2.3 注意事项</h2><p>建议永远安装最新版本的 Hexo，以及 [推荐的 Node.js 版本](文档 | Hexo )。<br>至此，您已成成功安装了 Hexo，接下来进入 Github 的配置吧!</p>
<h1 id="第三章-配置-Github"><a href="#第三章-配置-Github" class="headerlink" title="第三章 配置 Github"></a>第三章 配置 Github</h1><p>如果您还没有 Gihub 账户，请注册一个 Github 账户吧!</p>
<h2 id="3-1-在-Github-上创建仓库"><a href="#3-1-在-Github-上创建仓库" class="headerlink" title="3.1 在 Github 上创建仓库"></a>3.1 在 Github 上创建仓库</h2><p>新建一个名为: <a href="http://username.github.io/">http://username.github.io</a>  的仓库(username 为您的 Github 用户名)<br>比如，如果您的 github 用户名是 test，那么您就新建名为 <a href="http://test.github.io/">http://test.github.io</a>  的仓库（必须是您的用户名，其它名称无效），将来你的网站访问地址就是 <a href="https://test.github.io/">https://test.github.io</a>  了。由此可见，每一个 github 账户最多只能创建一个这样可以直接使用域名访问的仓库。</p>
<h2 id="3-2-配置-SSH-免密登录"><a href="#3-2-配置-SSH-免密登录" class="headerlink" title="3.2 配置 SSH 免密登录"></a>3.2 配置 SSH 免密登录</h2><p>为什么要配置这个呢？因为您提交代码肯定要拥有您的 github 权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用 ssh key 来解决本地和服务器的连接问题。</p>
<p>注: 如果您已经配置过 SSH，可跳过此步骤</p>
<p>步骤:</p>
<p>1、首先打开电脑文件夹，找到 C:\Users\您的用户名\ .ssh文件夹并删除(如果没有，则直接进入第二步)</p>
<p>2、在 C:\Users\您的用户名 文件夹下右键打开 Git Bash Here 输入命令: ssh-keygen -t rsa -C “你的github登录邮箱” 生成.ssh秘钥，输入后连敲三次回车，出现下图情况代表成功</p>
<p>3、生成了一个新的 C:\Users\您的用户名\ .ssh文件夹，打开这个文件夹，找到 .ssh\id_rsa.pub 文件，记事本打开并复制里面的内容</p>
<p>4、打开您的 github 主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key，把复制的内容粘贴进去，title 随便填，保存即可，我们的公钥就添加成功了，设置好如下图:</p>
<p>5、检测是否设置成功:</p>
<p>输入命令: ssh -T <a href="mailto:&#x67;&#x69;&#x74;&#64;&#103;&#105;&#x74;&#104;&#117;&#98;&#x2e;&#x63;&#x6f;&#x6d;">&#x67;&#x69;&#x74;&#64;&#103;&#105;&#x74;&#104;&#117;&#98;&#x2e;&#x63;&#x6f;&#x6d;</a></p>
<p>看到以上信息说明 SSH 已配置成功!</p>
<p>如果出现提示则选择yes知道成功；</p>
<p>6、此外您还需要如下配置:</p>
<p>命令: git config –global user.name “chai0705 “</p>
<p>命令: git config –global user.email  <a href="mailto:&#49;&#51;&#x36;&#x31;&#x33;&#56;&#50;&#50;&#54;&#x39;&#x40;&#x71;&#x71;&#x2e;&#x63;&#111;&#109;">&#49;&#51;&#x36;&#x31;&#x33;&#56;&#50;&#50;&#54;&#x39;&#x40;&#x71;&#x71;&#x2e;&#x63;&#111;&#109;</a> </p>
<p>至此，您已经成功配置好了 Github，接下来开始搭建个人博客吧!</p>
<h1 id="第四章-使用-Hexo-搭建博客"><a href="#第四章-使用-Hexo-搭建博客" class="headerlink" title="第四章 使用 Hexo 搭建博客"></a>第四章 使用 Hexo 搭建博客</h1><p>Hexo 的一些命令<br>生成静态文件：hexo g；<br>清空静态文件：hexo cl；<br>在本地运行：hexo s；<br>部署到网站：hexo d；<br>生成静态文件并部署到网站：hexo d -g 或 hexo g -d；<br>创建新文章：hexo new <file>。</p>
<h2 id="4-1-初始化"><a href="#4-1-初始化" class="headerlink" title="4.1 初始化"></a>4.1 初始化</h2><p>1、在电脑的某个磁盘或路径新建一个名为 hexo 的文件夹(名字可以随便取)，比如我的是 D:\hexo，由于这个文件夹将来就作为您存放代码的地方，所以最好不要随便放</p>
<p>2、在 D:\hexo 文件夹下右键打开 Git Bash Here，输入命令: hexo init 进行初始化</p>
<p>hexo 会自动下载一些文件到这个目录，包括 node_modules，目录结构如下图:</p>
<p>3、执行命令: hexo g 会在 public 文件夹下生成相关的 html 文件，这些文件将来需要提交到 Github 上</p>
<p>4、执行命令: hexo s 可以开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a>  即可看到博客内容</p>
<h2 id="4-2-将博客部署到-Github"><a href="#4-2-将博客部署到-Github" class="headerlink" title="4.2 将博客部署到 Github"></a>4.2 将博客部署到 Github</h2><p>1、在 D:\hexo 目录下安装 hexo-deployer-git 插件</p>
<p>命令: npm install hexo-deployer-git –save<br>2、编辑 D:\hexo 目录下的 _config.yml 文件，在文件末尾添加如下内容:</p>
<p>注意: 其中 repository 中的内容即为 github 个人主页链接地址</p>
<p>3、在 D:\hexo 目录下，输入命令: hexo d 将本地 blog 推送到 github 远程仓库，也可能需要输入 username &amp; pwd</p>
<p>推送成功后，即可通过<a href="https://baizhouhaoyue.github.io/%E8%AE%BF%E9%97%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%BA%86">https://baizhouhaoyue.github.io/访问个人博客了</a> !</p>
<p>CLASH </p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309152249472.png" alt="image-20230915224913754"></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309152250521.png" alt="image-20230915224959370"></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo基本操作命令</title>
    <url>/2023/09/02/0-0-2_hexo%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://so.csdn.net/so/search?q=Hexo&spm=1001.2101.3001.7020">Hexo</a> 约有二十个命令，但普通用户经常使用的大概只有下列几个:</p>
<h2 id="hexo-s"><a href="#hexo-s" class="headerlink" title="hexo s"></a><strong>hexo s</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>启动本地服务器，用于预览主题。默认地址： <a href="http://localhost:4000/">http://localhost:4000/</a></p>
<ul>
<li>hexo s 是 hexo server 的缩写，命令效果一致；</li>
<li>预览的同时可以修改文章内容或主题代码，保存后刷新页面即可；</li>
<li>对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果。</li>
</ul>
<h2 id="hexo-new"><a href="#hexo-new" class="headerlink" title="hexo new"></a><strong>hexo new</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &quot;学习笔记  六&quot;</span><br></pre></td></tr></table></figure>

<p>新建一篇标题为 学习笔记 六 的文章，因为标题里有空格，所以加上了引号。</p>
<ul>
<li>文章标题可以在对应 md 文件里改，新建时标题可以写的简单些。</li>
</ul>
<h2 id="hexo-d"><a href="#hexo-d" class="headerlink" title="hexo d"></a><strong>hexo d</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>自动生成网站静态文件，并部署到设定的仓库。</p>
<ul>
<li>hexo d 是 hexo deploy 的缩写，命令效果一致。</li>
</ul>
<h2 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a><strong>hexo clean</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<p>清除缓存文件 db.json 和已生成的静态文件 public 。</p>
<ul>
<li>网站显示异常时可以执行这条命令试试。</li>
</ul>
<h2 id="hexo-g"><a href="#hexo-g" class="headerlink" title="hexo g"></a><strong>hexo g</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>生成网站静态文件到默认设置的 public 文件夹。</p>
<ul>
<li>便于查看网站生成的静态文件或者手动部署网站；</li>
<li>如果使用自动部署，不需要先执行该命令；</li>
<li>hexo g 是 hexo generate 的缩写，命令效果一致。</li>
</ul>
<h2 id="hexo-new-page"><a href="#hexo-new-page" class="headerlink" title="hexo new page"></a><strong>hexo new page</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page aboutme</span><br></pre></td></tr></table></figure>

<p>新建一个标题为 aboutme 的页面，默认链接地址为 主页地址&#x2F;aboutme&#x2F;</p>
<ul>
<li>标题可以为中文，但一般习惯用英文；</li>
<li>页面标题和文章一样可以随意修改；</li>
<li>页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。</li>
</ul>
<p>hexo n “我的博客” 等价于 hexo new “我的博客” 还等价于 hexo new post “我的博客” #新建一篇文章<br>hexo p 等价于 hexo publish<br>hexo g 等价于 hexo generate<br>hexo s等价于 hexo server<br>hexo d 等价于 hexo deploy<br>hexo deploy -g 等价于 hexo deploy –generate<br>hexo generate -d等价于hexo generate –deploy</p>
<p>一般只需要四个命令，</p>
<p>hexo n 创建一个新的博客</p>
<p>hexo s 开启一个新的服务</p>
<p>hexo g 生成一个静态的网页</p>
<p>hexo d 将生成的静态网页推到服务器github</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 进阶</title>
    <url>/2023/09/03/0-0-1-hexo-%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-文章的分类和标签"><a href="#1-文章的分类和标签" class="headerlink" title="1 文章的分类和标签"></a>1 文章的分类和标签</h1><p>分类的话就是在最上方的状态栏中加入	categories:  属性即可</p>
<p>标签的话就是在最上方的状态栏中加入	tags:  属性即可</p>
<h1 id="2图床搭建教程"><a href="#2图床搭建教程" class="headerlink" title="2图床搭建教程"></a>2图床搭建教程</h1><p>根据这个教程来即可</p>
<p><a href="https://eryinote.com/post/105">图床</a></p>
<p>踩坑 picgo这个软件双击并不是直接打开，而是到了右下角的小菜单。。。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/image-20230903113402329.png" alt="image-20230903113402329"></p>
<p>然后在typora软件中进行简单的设置即可。如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/image-20230903114440776.png" alt="image-20230903114440776"></p>
<p>至此就搞完了，其他目前也没啥需求，继续学习C++</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown 语法学习</title>
    <url>/2023/09/02/0-0-3_markdown-%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第1节-标题"><a href="#第1节-标题" class="headerlink" title="第1节 标题"></a>第1节 标题</h1><p>markdown 里面总共有六级标题，可以使用#号的多少来来引用，现在使用的是typora也可以直接使用ctrl+1-6的快捷按键来进行设置</p>
<h1 id="第2节-列表"><a href="#第2节-列表" class="headerlink" title="第2节 列表"></a>第2节 列表</h1><h2 id="2-1-有序列表"><a href="#2-1-有序列表" class="headerlink" title="2.1 有序列表"></a>2.1 有序列表</h2><p>​	顾名思义，有序列表就是有小标号的列表，同样也是两种方式英⽂输⼊法下，数字后⾯加⼀点，然后空格即可，或者使用快捷按键ctrl + shift + [即可</p>
<p>1. </p>
<p>1. </p>
<h2 id="2-2-无序列表"><a href="#2-2-无序列表" class="headerlink" title="2.2 无序列表"></a>2.2 无序列表</h2><p>​	跟上面的有序列表相反，无序列表就是没有标号，有四种方法、</p>
<ul>
<li>aaa - aaa</li>
</ul>
<ul>
<li>aaa + aaa</li>
</ul>
<ul>
<li>aaa *aaa</li>
</ul>
<ul>
<li>aaa ctrl+shift+]</li>
</ul>
<h1 id="第3节-字体标记"><a href="#第3节-字体标记" class="headerlink" title="第3节 字体标记"></a>第3节 字体标记</h1><h2 id="3-1-加粗"><a href="#3-1-加粗" class="headerlink" title="3.1 加粗"></a>3.1 加粗</h2><p><strong>加粗</strong> **   内容**在typora中可以使用ctrl+b</p>
<h2 id="3-2-删除"><a href="#3-2-删除" class="headerlink" title="3.2 删除"></a>3.2 删除</h2><p><del>删除</del> ~~ 内容~~</p>
<h2 id="3-3-斜体"><a href="#3-3-斜体" class="headerlink" title="3.3 斜体"></a>3.3 斜体</h2><p><em>斜体</em> * 内容 *</p>
<h2 id="3-4-高亮"><a href="#3-4-高亮" class="headerlink" title="3.4 高亮"></a>3.4 高亮</h2><p>&#x3D;&#x3D;高亮&#x3D;&#x3D; &#x3D;&#x3D;内容  &#x3D;&#x3D;需要打开pytora的高亮功能之后才行</p>
<h1 id="第4节-段落相关"><a href="#第4节-段落相关" class="headerlink" title="第4节 段落相关"></a>第4节 段落相关</h1><h2 id="4-1-引用"><a href="#4-1-引用" class="headerlink" title="4.1 引用"></a>4.1 引用</h2><blockquote>
<p>这是一段引用 &gt; 大于号加内容引用</p>
</blockquote>
<h2 id="4-2-分割线"><a href="#4-2-分割线" class="headerlink" title="4.2 分割线"></a>4.2 分割线</h2><hr>
<p>三个横杠或者更多的横杠表示分割线</p>
<h1 id="第5节-代码"><a href="#第5节-代码" class="headerlink" title="第5节 代码"></a>第5节 代码</h1><h2 id="5-1-行内代码"><a href="#5-1-行内代码" class="headerlink" title="5.1 行内代码"></a>5.1 行内代码</h2><p><code>这是一个行内代码</code> 1旁边那个特殊按键</p>
<h2 id="5-2-代码块"><a href="#5-2-代码块" class="headerlink" title="5.2 代码块"></a>5.2 代码块</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    三个```然后回车即可，然后在右下角的选择框中进行代码的选择</span><br></pre></td></tr></table></figure>



<h1 id="第6节-超链接"><a href="#第6节-超链接" class="headerlink" title="第6节 超链接"></a>第6节 超链接</h1><blockquote>
<p>格式 ：[⽹址标题] [变量01]</p>
</blockquote>
<p><a href="www.baidu.com">百度</a></p>
<ul>
<li><p>在⽂稿起草阶段，还没确定具体⽹址，但可以先给出⽹址标题</p>
</li>
<li><p>同⼀篇⽂章需要重复出现同⼀个⽹址时</p>
</li>
</ul>
<h1 id="第7节-脚注"><a href="#第7节-脚注" class="headerlink" title="第7节 脚注"></a>第7节 脚注</h1><p>这是一个脚注<a href="%E8%BF%99%E4%B8%AA%E6%98%AF%E6%94%BE%E5%9C%A8%E6%96%87%E7%AB%A0%E5%B0%BE%E9%83%A8%E7%9A%84%EF%BC%8C%E7%94%A8%E4%BA%8E%E6%89%BF%E6%8E%A5%E4%B8%8A%E9%9D%A2%E7%9A%84%E8%84%9A%E6%B3%A8">^01</a></p>
<h1 id="第8节-图片"><a href="#第8节-图片" class="headerlink" title="第8节 图片"></a>第8节 图片</h1><p><img src="/"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">基本格式：![](图⽚链接)</span><br></pre></td></tr></table></figure>

<p><img src="D:\hexo\blog\source_posts\image-20230902075316489.png" alt="image-20230902075316489"></p>
<p>图⽚链接可以是本地链接，也可以是在线链接</p>
<p>但这个图片是本地路径，很有问题，所以你可能需要一个图床，用来无视地点，目前先不学呢，具体链接如下所示：</p>
<p><a href="https://eryinote.com/post/105">图床搭建教程</a></p>
<h1 id="第9节-表格"><a href="#第9节-表格" class="headerlink" title="第9节 表格"></a>第9节 表格</h1><p>在typora中可以使用快捷按键进行表格的创建  ctrl+t</p>
<p>通用的语法为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| 表头 | 表头 |</span><br><span class="line">| ---- | ---- |</span><br><span class="line">| 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>0-11 .make.sh rk3568编译命令执行分析（下）</title>
    <url>/2023/09/10/0-11%20.make.sh%20rk3568%E7%BC%96%E8%AF%91%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><h3 id="5-1-编译脚本运行流程"><a href="#5-1-编译脚本运行流程" class="headerlink" title="5.1 编译脚本运行流程"></a>5.1 编译脚本运行流程</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./make.sh rk3568</span><br><span class="line">    process_args rk3568 # 参数解析</span><br><span class="line">        make rk3568_defconfig # 生成.config</span><br><span class="line">    prepare # 指定rkbin路径与平台类似为fit</span><br><span class="line">    select_toolchain # 指定交叉工具链</span><br><span class="line">    select_chip_info # 指定芯片信息</span><br><span class="line">    fixup_platform_configure # 没作用</span><br><span class="line">    select_ini_file # 指定rkbin目录的ini文件</span><br><span class="line">    handle_args_late # 添加ini文件作为参数</span><br><span class="line">    sub_commands # 传入rk3568参数，执行unwind_addr_or_continue</span><br><span class="line">        unwind_addr_or_continue # 没作用</span><br><span class="line">    clean_files # 清除历史文件</span><br><span class="line">    make PYTHON=python2 CROSS_COMPILE=$&#123;TOOLCHAIN&#125; all --jobs=$&#123;JOB&#125; # 编译u-boot</span><br><span class="line">    pack_images # 打包固件</span><br><span class="line">        pack_fit_image --ini-trust ../rkbin/RKTRUST/RK3568TRUST.ini --ini-loader ../rkbin/RKBOOT/RK3568MINIALL.ini # 根据ini文件打包fit格式固件</span><br><span class="line">            ./scripts/fit.sh --ini-trust ../rkbin/RKTRUST/RK3568TRUST.ini --ini-loader ../rkbin/RKBOOT/RK3568MINIALL.ini --chip RK3568</span><br><span class="line">                fit_process_args --ini-trust ../rkbin/RKTRUST/RK3568TRUST.ini --ini-loader ../rkbin/RKBOOT/RK3568MINIALL.ini --chip RK3568 # 记录这三个参数</span><br><span class="line">                fit_raw_compile # 创建fit目录</span><br><span class="line">                fit_gen_uboot_itb # 产生u-boot.itb</span><br><span class="line">                    ./make.sh itb ../rkbin/RKTRUST/RK3568TRUST.ini</span><br><span class="line">                        process_args itb ../rkbin/RKTRUST/RK3568TRUST.ini # 参数解析</span><br><span class="line">                        ...</span><br><span class="line">                        sub_commands # 传入itb参数，执行unwind_addr_or_continue</span><br><span class="line">                            pack_uboot_itb_image # 打包u-boot.itb</span><br><span class="line">                                arch/arm/mach-rockchip/make_fit_atf.sh -t 0x08400000 &gt; u-boot.its # 生成u-boot.its</span><br><span class="line">                                ./tools/mkimage -f u-boot.its -E u-boot.itb # 根据u-boot.its生成u-boot.itb</span><br><span class="line">                    check_its u-boot.its # 校验u-boot.its</span><br><span class="line">                    ./make.sh loader ../rkbin/RKBOOT/RK3568MINIALL.ini</span><br><span class="line">                        process_args loader ../rkbin/RKBOOT/RK3568MINIALL.ini # 参数解析</span><br><span class="line">                        ...</span><br><span class="line">                        sub_commands # 传入loader参数，执行pack_loader_image</span><br><span class="line">                            pack_loader_image # 打包*_loader_*.bin</span><br><span class="line">                                ./scripts/loader.sh --ini ../rkbin/RKBOOT/RK3568MINIALL.ini</span><br><span class="line">                                    cd ../rkbin</span><br><span class="line">                                    ./tools/boot_merger RKBOOT/RK3568MINIALL.ini # 合成*_loader_*.bin</span><br><span class="line">                                    cd -</span><br><span class="line">                                    mv ../rkbin/*_loader_*.bin ./</span><br><span class="line">                    mv u-boot.its fit/</span><br><span class="line">                fit_gen_uboot_img # 产生uboot.img</span><br><span class="line">                    for ((i = 0; i &lt; 2; i++));</span><br><span class="line">                    do</span><br><span class="line">                        cat fit/uboot.itb &gt;&gt; uboot.img</span><br><span class="line">                        truncate -s %2048K uboot.img</span><br><span class="line">                    done</span><br><span class="line">                fit_gen_loader # 没作用</span><br><span class="line">                fit_msg_uboot # 打印uboot fit信息</span><br><span class="line">                fit_msg_recovery # 没作用</span><br><span class="line">                fit_msg_boot # 没作用</span><br><span class="line">                fit_msg_loader # 没作用</span><br><span class="line">    finish # 打印完成信息</span><br><span class="line">    echo $&#123;TOOLCHAIN&#125; # 打印工具链</span><br><span class="line">    date # 打印编译结束时间</span><br></pre></td></tr></table></figure>

<h3 id="5-2-简要分析"><a href="#5-2-简要分析" class="headerlink" title="5.2 简要分析"></a>5.2 简要分析</h3><h4 id="5-2-1-config文件生成"><a href="#5-2-1-config文件生成" class="headerlink" title="5.2.1 .config文件生成"></a>5.2.1 .config文件生成</h4><p><code>./make.sh rk3568</code>把参数字符串合成<code>rk3568_defconfig</code>，再生成<code>.config</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make rk3568_defconfig</span><br></pre></td></tr></table></figure>

<h4 id="5-2-2-原始uboot编译"><a href="#5-2-2-原始uboot编译" class="headerlink" title="5.2.2 原始uboot编译"></a>5.2.2 原始uboot编译</h4><p><code>make.sh</code>脚本指定<code>TOOLCHAIN</code>工具链与<code>JOB</code>线程数参数，再编译：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make PYTHON=python2 CROSS_COMPILE=$&#123;TOOLCHAIN&#125; all --jobs=$&#123;JOB&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-2-3-打包机制浅析"><a href="#5-2-3-打包机制浅析" class="headerlink" title="5.2.3 打包机制浅析"></a>5.2.3 打包机制浅析</h4><p><code>fit.sh</code>脚本通过指定的<code>rkbin</code>的<code>ini</code>文件来打包。</p>
<ul>
<li><p>对于打包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">u-boot.itb</span><br></pre></td></tr></table></figure>

<p>，通过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rkbin/RKTRUST/RK3568TRUST.ini</span><br></pre></td></tr></table></figure>

<p>文件描述内容，调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arch/arm/mach-rockchip/make_fit_atf.sh</span><br></pre></td></tr></table></figure>

<p>脚本生成相应的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">u-boot.its</span><br></pre></td></tr></table></figure>

<p>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arch/arm/mach-rockchip/make_fit_atf.sh -t 0x08400000 &gt; u-boot.its</span><br></pre></td></tr></table></figure>

<p>然后使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tool/mkimage</span><br></pre></td></tr></table></figure>

<p>工具生成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">u-boot.itb</span><br></pre></td></tr></table></figure>

<p>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./tools/mkimage -f u-boot.its -E u-boot.itb</span><br></pre></td></tr></table></figure>
</li>
<li><p>对于打包<code>*_loader_*.bin</code>，通过<code>rkbin/RKBOOT/RK3568MINIALL.ini</code>文件描述内容，调用<code>scripts/loader.sh</code>脚本，该脚本使用<code>rkbin/tools/boot_merger</code>不开源二进制工具合成<code>*_loader_*.bin</code>。</p>
</li>
<li><p>对于打包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uboot.img</span><br></pre></td></tr></table></figure>

<p>，它由</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uboot.itb</span><br></pre></td></tr></table></figure>

<p>通过以下命令产生（注意</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uboot.itb</span><br></pre></td></tr></table></figure>

<p>与</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">u-boot.itb</span><br></pre></td></tr></table></figure>

<p>是一样的）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for ((i = 0; i &lt; 2; i++));</span><br><span class="line">do</span><br><span class="line">  cat fit/uboot.itb &gt;&gt; uboot.img</span><br><span class="line">  truncate -s %2048K uboot.img</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li>
</ul>
<p>注意最终烧录的固件是<code>*_loader_*.bin</code>与<code>uboot.img</code>，且需要是瑞芯微的工具：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122209586.png" alt="img"></p>
]]></content>
      <categories>
        <category>瑞芯微脚本分析</category>
      </categories>
      <tags>
        <tag>瑞芯微脚本分析</tag>
      </tags>
  </entry>
  <entry>
    <title>0-10 make.sh+rk3568编译命令执行分析（中）</title>
    <url>/2023/09/10/0-10%20make.sh+rk3568%E7%BC%96%E8%AF%91%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%AD%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="4-6-执行fit-sh脚本"><a href="#4-6-执行fit-sh脚本" class="headerlink" title="4.6 执行fit.sh脚本"></a>4.6 执行fit.sh脚本</h3><p>在上一节 4.5 中执行<code>pack_fit_image</code>函数，这个函数会调用<code>fit.sh</code>脚本：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208166.png" alt="img"></p>
<p><code>SCRIPT_FIT</code>的定义：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208192.png" alt="img"><br>具体参数传递：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208179.png" alt="img"></p>
<p>脚本函数执行如下：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208171.png" alt="img"><br>打开该脚本，添加打印：<br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208022.png" alt="img"><br>执行以下命令会输出具体的执行过程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./scripts/fit.sh --ini-trust ../rkbin/RKTRUST/RK3568TRUST.ini --ini-loader ../rkbin/RKBOOT/RK3568MINIALL.ini --chip RK3568</span><br></pre></td></tr></table></figure>

<h4 id="4-6-1-编译相关变量初始化"><a href="#4-6-1-编译相关变量初始化" class="headerlink" title="4.6.1 编译相关变量初始化"></a>4.6.1 编译相关变量初始化</h4><p>打印日志：<br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208197.png" alt="img"><br>源代码：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208348.png" alt="img"></p>
<h4 id="4-6-2-执行fit-process-args"><a href="#4-6-2-执行fit-process-args" class="headerlink" title="4.6.2 执行fit_process_args"></a>4.6.2 执行fit_process_args</h4><p>打印日志：<br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208426.png" alt="img"></p>
<p><code>fit_process_args</code>函数解析<code>--ini-trust</code>参数，用于指定<code>rkbin</code>的<code>RK3568TRUST.ini</code>文件，同理<code>--ini-loader</code>指定<code>RK3568MINIALL.ini</code>文件，同时指定芯片平台<code>--chip</code>为<code>RK3568</code>，<code>fit_process_args</code>函数定义如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function fit_process_args()</span><br><span class="line">&#123;</span><br><span class="line">	if [ $# -eq 0 ]; then</span><br><span class="line">		help</span><br><span class="line">		exit 0</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	while [ $# -gt 0 ]; do</span><br><span class="line">		case $1 in</span><br><span class="line">			--args)</span><br><span class="line">				ARG_VALIDATE=$2</span><br><span class="line">				shift 2</span><br><span class="line">				;;</span><br><span class="line">			--boot_img)     # boot.img</span><br><span class="line">				ARG_BOOT_IMG=$2</span><br><span class="line">				shift 2</span><br><span class="line">				;;</span><br><span class="line">			--chip)</span><br><span class="line">				ARG_CHIP=$2</span><br><span class="line">				shift 2</span><br><span class="line">				;;</span><br><span class="line">			--recovery_img) # recovery.img</span><br><span class="line">				ARG_RECOVERY_IMG=$2</span><br><span class="line">				shift 2</span><br><span class="line">				;;</span><br><span class="line">			--boot_img_dir) # boot.img components directory</span><br><span class="line">				ARG_BOOT_IMG_DIR=$2</span><br><span class="line">				shift 2</span><br><span class="line">				;;</span><br><span class="line">			--no-check)     # No hostcc fit signature check</span><br><span class="line">				ARG_NO_CHECK=&quot;y&quot;</span><br><span class="line">				shift 1</span><br><span class="line">				;;</span><br><span class="line">			--ini-trust)    # Assign trust ini file</span><br><span class="line">				ARG_INI_TRUST=$2</span><br><span class="line">				shift 2</span><br><span class="line">				;;</span><br><span class="line">			--ini-loader)   # Assign loader ini file</span><br><span class="line">				ARG_INI_LOADER=$2</span><br><span class="line">				shift 2</span><br><span class="line">				;;</span><br><span class="line">			--spl-new)      # Use current build u-boot-spl.bin to pack loader</span><br><span class="line">				ARG_SPL_NEW=&quot;y&quot;</span><br><span class="line">				shift 1</span><br><span class="line">				;;</span><br><span class="line">			--rollback-index-boot)</span><br><span class="line">				ARG_ROLLBACK_IDX_BOOT=$2</span><br><span class="line">				arg_check_decimal $2</span><br><span class="line">				shift 2</span><br><span class="line">				;;</span><br><span class="line">			--rollback-index-recovery)</span><br><span class="line">				ARG_ROLLBACK_IDX_RECOVERY=$2</span><br><span class="line">				arg_check_decimal $2</span><br><span class="line">				shift 2</span><br><span class="line">				;;</span><br><span class="line">			--rollback-index-uboot)</span><br><span class="line">				ARG_ROLLBACK_IDX_UBOOT=$2</span><br><span class="line">				arg_check_decimal $2</span><br><span class="line">				shift 2</span><br><span class="line">				;;</span><br><span class="line">			--version-uboot)</span><br><span class="line">				ARG_VER_UBOOT=$2</span><br><span class="line">				arg_check_decimal $2</span><br><span class="line">				shift 2</span><br><span class="line">				;;</span><br><span class="line">			--version-boot)</span><br><span class="line">				ARG_VER_BOOT=$2</span><br><span class="line">				arg_check_decimal $2</span><br><span class="line">				shift 2</span><br><span class="line">				;;</span><br><span class="line">			--version-recovery)</span><br><span class="line">				ARG_VER_RECOVERY=$2</span><br><span class="line">				arg_check_decimal $2</span><br><span class="line">				shift 2</span><br><span class="line">				;;</span><br><span class="line">			--burn-key-hash)</span><br><span class="line">				ARG_BURN_KEY_HASH=&quot;y&quot;</span><br><span class="line">				shift 1</span><br><span class="line">				;;</span><br><span class="line">			*)</span><br><span class="line">				help</span><br><span class="line">				exit 1</span><br><span class="line">				;;</span><br><span class="line">		esac</span><br><span class="line">	done</span><br><span class="line"></span><br><span class="line">	if grep -q &#x27;^CONFIG_FIT_SIGNATURE=y&#x27; .config ; then</span><br><span class="line">		ARG_SIGN=&quot;y&quot;</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>位置参数可以用<code>shift</code>命令左移。比如<code>shift 3</code>表示原来的<code>$4</code>现在变成<code>$1</code>，原来的<code>$5</code>现在变成<code>$2</code>等等，原来的<code>$1</code>、<code>$2</code>、<code>$3</code>丢弃，<code>$0</code>不移动。不带参数的<code>shift</code>命令相当于<code>shift 1</code>。</p>
</blockquote>
<h4 id="4-6-3-执行fit-raw-compile"><a href="#4-6-3-执行fit-raw-compile" class="headerlink" title="4.6.3 执行fit_raw_compile"></a>4.6.3 执行fit_raw_compile</h4><p>打印日志：<br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208448.png" alt="在这里插入图片描述"></p>
<p><code>fit_raw_compile</code>函数在此处只是重新创建<code>fit</code>目录，函数体如下：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208459.png" alt="img"></p>
<h4 id="4-6-4-执行fit-gen-uboot-itb"><a href="#4-6-4-执行fit-gen-uboot-itb" class="headerlink" title="4.6.4 执行fit_gen_uboot_itb"></a>4.6.4 执行fit_gen_uboot_itb</h4><p>打印日志：<br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208542.png" alt="img"><br><code>fit_gen_uboot_itb</code>函数从命名来看应该是产生<code>uboot.itb</code>文件，从日志可以知道，它调用了<code>make.sh</code>脚本，执行的命令是<code>./make.sh itb ../rkbin/RKTURST/RK3568TRUST.ini</code>，接下来执行类似与<code>./make.sh rk3568</code>，只是此时传入进去的参数是<code>itb</code>：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208486.png" alt="img"></p>
<p>打印日志：<br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208648.png" alt="img"><br>执行<code>process_args</code>等等，大部分与<code>./make.sh rk3568</code>一样：<br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208747.png" alt="img"></p>
<p>后面有差异的地方是从执行<code>sub_commands</code>函数开始，传入的参数是之前的<code>itb</code>，然后调用<code>pack_uboot_itb_image</code>函数：<br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208794.png" alt="img"></p>
<p>源代码：<br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208753.png" alt="img"></p>
<p><code>pack_uboot_itb_image</code>函数解析<code>../rkbin/RKTURST/RK3568TRUST.ini</code>文件的内容，文件内容如下：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208773.png" alt="img"></p>
<p>把<code>bl31.elf</code>与<code>tee.bin</code>二进制文件拷贝到uboot目录：<br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208028.png" alt="img"><br><code>mcu*.bin</code>因为<code>../rkbin/RKTURST/RK3568TRUST.ini</code>文件并没有描述，因此实际上并没有拷贝!<br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208966.png" alt="img"><br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208007.png" alt="img"></p>
<p><code>load*.bin</code>因为<code>../rkbin/RKTURST/RK3568TRUST.ini</code>文件也没有描述，故没有拷贝!<br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208041.png" alt="img"><br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208115.png" alt="img"><br>这个阶段执行的代码如下：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208128.png" alt="img"><br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208293.png" alt="img"></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208301.png" alt="img"></p>
<p><code>fit_gen_uboot_itb</code>函数执行到后面会执行<code>arch/arm/mach-rockchop/make_fit_atf.sh</code>脚本，这个脚本在<code>.config</code>文件中有指定：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208308.png" alt="img"><br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208115.png" alt="img"></p>
<p>使用该脚本执行<code>arch/arm/mach-rockchip/make_fit_atf.sh -t 0x08400000</code>命令：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208421.png" alt="img"><br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208434.png" alt="img"></p>
<p>这个脚本是用于生成固件描述文件<code>u-boot.its</code>，内容如下：<br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208470.png" alt="img"></p>
<p>接着执行<code>./tools/mkimage -f u-boot.its -E u-boot.itb</code>命令生成<code>u-boot.itb</code>：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208550.png" alt="img"><br><code>mkimage</code>的用法如下：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208686.png" alt="img"><br><code>-E</code>是什么意思？看源代码：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208621.png" alt="img"></p>
<p>接下来执行<code>check_its u-boot.its</code>：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208721.png" alt="img"><br>这个函数功能就是检查<code>u-boot.its</code>，源代码如下：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208828.png" alt="img"><br>接下来执行<code>./make.sh loader ../rkbin/RKBOOT/RK3568MINIALL.ini</code>，原理与之前的类似的：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208756.png" alt="img"></p>
<p>打印日志（保留主要）：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208778.png" alt="img"></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208880.png" alt="img"><br>调用<code>process_args</code>函数等等（保留主要）：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208090.png" alt="img"></p>
<p>调用<code>sub_commands</code>函数等等（保留主要）：<br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208034.png" alt="img"><br>执行<code>./make.sh loader ../rkbin/RKBOOT/RK3568MINIALL.ini</code>最终调用到<code>pack_loader_image</code>函数：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208041.png" alt="img"><br><code>pack_loader_image</code>函数，里面调用<code>loader.sh</code>脚本：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208095.png" alt="img"><br>对<code>loader.sh</code>脚本也添加打印：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208077.png" alt="img"><br>打印日志如下，可以看到实际上是调用了<code>boot_merger</code>来打包loader：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208119.png" alt="img"><br>这个<code>boot_merger</code>存放在<code>rkbin/tools</code>目录，是不开源的二进制文件，用法如下：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208401.png" alt="img"><br><code>loader.sh</code>脚本源代码如下：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208429.png" alt="img"></p>
<p>回到<code>fit_gen_uboot_itb</code>函数，打印：<br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208376.png" alt="img"><br>删除历史文件，把<code>u-boot.its</code>移动到<code>fit</code>目录，源代码如下：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208382.png" alt="img"></p>
<p>调用<code>fit_gen_uboot_img</code>打包<code>uboot.img</code>：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208407.png" alt="img"></p>
<p>源代码：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208411.png" alt="img"><br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208757.png" alt="img"></p>
<p>执行过程：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208688.png" alt="img"><br>紧接着打包loader，实际上并没有运行：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208712.png" alt="img"><br>源代码：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208726.png" alt="img"><br>打印信息：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208734.png" alt="img"><br>源代码：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208776.png" alt="img"><br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208999.png" alt="img"><br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208166.png" alt="img"><br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208024.png" alt="img"><br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208006.png" alt="img"><br>至此<code>fit.sh</code>执行完毕！</p>
<h3 id="4-7-执行finish"><a href="#4-7-执行finish" class="headerlink" title="4.7 执行finish"></a>4.7 执行finish</h3><p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208063.png" alt="img"><br>打印完成信息：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208034.png" alt="img"></p>
<p>还有最后打印工具链与编译结束时间：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122208268.png" alt="img"></p>
]]></content>
      <categories>
        <category>瑞芯微脚本分析</category>
      </categories>
      <tags>
        <tag>瑞芯微脚本分析</tag>
      </tags>
  </entry>
  <entry>
    <title>0-12  .make.sh脚本的用法</title>
    <url>/2023/09/10/0-12%20%20.make.sh%E8%84%9A%E6%9C%AC%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>直接在<code>u-boot</code>根目录执行<code>./make.sh -h</code>命令就能看到用法：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122210874.png" alt="img"></p>
<h2 id="一、固件构建"><a href="#一、固件构建" class="headerlink" title="一、固件构建"></a>一、固件构建</h2><p>构建<code>rk3568</code>固件其实就是<code>./make.sh rk3568</code>，实际选用的是<code>rk3568_defconfig</code>，这里的构建固件一定要确保<code>configs</code>目录有相应的<code>*_defconfig</code>与<code>*.config</code>文件：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122210739.png" alt="img"><br>如果是相同的<code>.config</code>文件，再次构建直接执行<code>./make.sh</code>即可！</p>
<p>除此之外，<code>./make.sh env</code>用于构建<code>fw_printenv</code>工具：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122210743.png" alt="img"></p>
<p><code>fw_printenv</code>是U-Boot提供的一个给linux使用的env工具。通过这个工具，用户可以在linux上访问、修改env的内容。使用该工具要求env区域必须位于一个kernel可见的分区上（建议独立分区），本质上是通过kernel sys下的存储节点访问到env区域。</p>
<p>几个重要文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./tools/env/fw_printenv // env读写工具</span><br><span class="line">./tools/env/fw_env.config // env配置文件</span><br><span class="line">./tools/env/README // env读写工具说明文档</span><br></pre></td></tr></table></figure>

<h2 id="二、固件打包"><a href="#二、固件打包" class="headerlink" title="二、固件打包"></a>二、固件打包</h2><p>固件打包有时候有特殊需求的时候会用到，用法如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./make.sh trust // 打包trust</span><br><span class="line">./make.sh loader // 打包loader</span><br><span class="line">./make.sh trust &lt;ini-file&gt; // 打包trust时指定ini文件</span><br><span class="line">./make.sh loader &lt;ini-file&gt; // 打包loader时指定ini文件</span><br><span class="line">./make.sh --spl // 用u-boot-spl.bin替换miniloader，打包成loader</span><br><span class="line">./make.sh --tpl // 用u-boot-tpl.bin替换ddr，打包成loader</span><br><span class="line">./make.sh --tpl -spl // 用u-boot-tpl.bin与u-boot-spl.bin替换ddr与miniloader，打包成loader</span><br><span class="line">./make.sh itb // 打包u-boot.itb（64位平台只支持打包ATF和U-Boot，OP-TEE</span><br><span class="line">不打包）</span><br></pre></td></tr></table></figure>

<p>但是由于<code>rk3568</code>的固件是使用FIT格式来打包的，因此以下命令都不支持<code>rk3568</code>（以下命令支持非FIT格式打包）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./make.sh trust // 打包trust</span><br><span class="line">./make.sh loader // 打包loader</span><br><span class="line">./make.sh trust &lt;ini-file&gt; // 打包trust时指定ini文件</span><br><span class="line">./make.sh loader &lt;ini-file&gt; // 打包loader时指定ini文件</span><br></pre></td></tr></table></figure>

<p>另外使用编译出来的<code>tpl</code>是无法启动的，因此对于<code>rk3568</code>，只有以下命令使用是有效果的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./make.sh --spl 用u-boot-spl.bin替换miniloader，打包成loader</span><br><span class="line">./make.sh --spl-new // ./make.sh --spl 命令只打包但不编译，此命令会重新编译再</span><br><span class="line">打包。</span><br><span class="line">./make.sh itb // 打包u-boot.itb（64位平台只支持打包ATF和U-Boot，OP-TEE</span><br><span class="line">不打包）</span><br></pre></td></tr></table></figure>

<h2 id="三、反汇编调试"><a href="#三、反汇编调试" class="headerlink" title="三、反汇编调试"></a>三、反汇编调试</h2><p>反汇编调试用法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./make.sh elf-[x] [type] // 反汇编：使用-[x]参数, [type]可选择是否反汇编SPL或TPL</span><br><span class="line">./make.sh elf // 反汇编u-boot文件，默认使用-D参数</span><br><span class="line">./make.sh elf-S // 反汇编u-boot文件，使用-S参数</span><br><span class="line">./make.sh elf-d // 反汇编u-boot文件，使用-d参数</span><br><span class="line">./make.sh elf spl // 反汇编tpl/u-boot-tpl文件，默认使用-D参数</span><br><span class="line">./make.sh elf tpl // 反汇编spl/u-boot-tpl文件，默认使用-D参数</span><br><span class="line">./make.sh &lt;addr&gt; // 需要addr对应的函数名和代码位置</span><br><span class="line">./make.sh map // 打开u-boot.map</span><br><span class="line">./make.sh sym // 打开u-boot.sym</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>瑞芯微脚本分析</category>
      </categories>
      <tags>
        <tag>瑞芯微脚本分析</tag>
      </tags>
  </entry>
  <entry>
    <title>0-2 板子的选择</title>
    <url>/2023/09/10/0-2%20%E6%9D%BF%E5%AD%90%E7%9A%84%E9%80%89%E6%8B%A9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="2-1-board选择"><a href="#2-1-board选择" class="headerlink" title="2.1 board选择"></a>2.1 board选择</h1><p>但其实上是默认情况下这里的配置文件已经搞好了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择板卡函数</span></span><br><span class="line">choose_board()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">获取板卡配置文件列表到 BOARD_ARRAY 数组</span></span><br><span class="line">	BOARD_ARRAY=( $(cd $&#123;CHIP_DIR&#125;/; ls BoardConfig*.mk | sort) )</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">获取板卡数组的长度</span>	</span><br><span class="line">	RK_TARGET_BOARD_ARRAY_LEN=$&#123;#BOARD_ARRAY[@]&#125;</span><br><span class="line"><span class="meta prompt_">	</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果板卡数组长度为0，则表示没有可用的板卡配置文件，输出错误信息并返回-1</span></span><br><span class="line">	if [ $RK_TARGET_BOARD_ARRAY_LEN -eq 0 ]; then</span><br><span class="line">		echo &quot;No available Board Config&quot;</span><br><span class="line">		return -1</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	echo</span><br><span class="line">	echo &quot;You&#x27;re building on Linux&quot;</span><br><span class="line">	echo &quot;Lunch menu...pick a combo:&quot;</span><br><span class="line">	echo &quot;&quot;</span><br><span class="line"><span class="meta prompt_">	</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">输出可用的板卡配置文件列表</span></span><br><span class="line">	echo &quot;0. default BoardConfig.mk&quot;</span><br><span class="line">	echo $&#123;BOARD_ARRAY[@]&#125; | xargs -n 1 | sed &quot;=&quot; | sed &quot;N;s/\n/. /&quot;</span><br><span class="line"></span><br><span class="line">	local INDEX</span><br><span class="line">	read -p &quot;Which would you like? [0]: &quot; INDEX</span><br><span class="line">	INDEX=$(($&#123;INDEX:-0&#125; - 1))</span><br><span class="line"><span class="meta prompt_">	</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">根据用户选择的索引确定所选的板卡配置文件</span></span><br><span class="line">	if echo $INDEX | grep -vq [^0-9]; then</span><br><span class="line">		BOARD=&quot;$&#123;BOARD_ARRAY[$INDEX]&#125;&quot;</span><br><span class="line">	else</span><br><span class="line">		echo &quot;Lunching for Default BoardConfig.mk boards...&quot;</span><br><span class="line">		BOARD=BoardConfig.mk</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">创建符号链接，将所选的板卡配置文件链接到 BOARD_CONFIG 变量指定的路径</span></span><br><span class="line">	ln -rsf &quot;$CHIP_DIR/$BOARD&quot; &quot;$BOARD_CONFIG&quot;</span><br><span class="line">	echo &quot;switching to board: $(realpath $BOARD_CONFIG)&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">预处理选项</span></span><br><span class="line">unset POST_OPTIONS</span><br><span class="line">for option in $OPTIONS; do</span><br><span class="line">    case $option in</span><br><span class="line">        BoardConfig*.mk)</span><br><span class="line">            option=&quot;$CHIP_DIR/$option&quot;</span><br><span class="line">            ;&amp;</span><br><span class="line">        *.mk)</span><br><span class="line">            CONF=$(realpath $option)</span><br><span class="line">            echo &quot;切换到配置文件: $CONF&quot;</span><br><span class="line">            if [ ! -f $CONF ]; then</span><br><span class="line">                echo &quot;文件不存在!&quot;</span><br><span class="line">                exit 1</span><br><span class="line">            fi</span><br><span class="line"></span><br><span class="line">            ln -rsf $CONF $BOARD_CONFIG</span><br><span class="line">            ;;</span><br><span class="line">        lunch) choose_board ;;</span><br><span class="line">        kernel-4.4|kernel-4.19|kernel-5.10)</span><br><span class="line">            RK_KERNEL_VERSION=$&#123;option#kernel-&#125;</span><br><span class="line">            ;;</span><br><span class="line">        *) POST_OPTIONS=&quot;$POST_OPTIONS $option&quot;;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>总共分为了两次options的遍历，如果是options里面有mk相关的就会进入choose_board，choose_board里面的命令其实也就是一个软连接，倒是挺简单的。</p>
<p>而下面的这两句命令是一定会执行的，下面的$TOP_DIR&#x2F;device&#x2F;rockchip&#x2F;.BoardConfig.mk，在choose_board确定了，但是CHIP_DIR不知道啥时候确定的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 BOARD_CONFIG 变量为顶级目录下的 device/rockchip/.BoardConfig.mk 文件的绝对路径</span></span><br><span class="line">BOARD_CONFIG=&quot;$TOP_DIR/device/rockchip/.BoardConfig.mk&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取 CHIP_DIR 变量的绝对路径，该变量指向顶级目录下的 device/rockchip/.target_product 目录</span></span><br><span class="line">CHIP_DIR=&quot;$(realpath $TOP_DIR/device/rockchip/.target_product)&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309102123667.png" alt="image-20230910212319606"></p>
<h1 id="2-2-BoardConfig-mk文件介绍"><a href="#2-2-BoardConfig-mk文件介绍" class="headerlink" title="2.2 .BoardConfig.mk文件介绍"></a>2.2 .BoardConfig.mk文件介绍</h1><p>具体内容如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">目标架构</span></span><br><span class="line">export RK_KERNEL_ARCH=arm64</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Uboot的配置</span></span><br><span class="line">export RK_UBOOT_DEFCONFIG=rk3588</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Uboot镜像格式类型：fit（扁平化镜像树）</span></span><br><span class="line">export RK_UBOOT_FORMAT_TYPE=fit</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">内核的配置</span></span><br><span class="line">export RK_KERNEL_DEFCONFIG=rockchip_linux_defconfig</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">内核的配置片段</span></span><br><span class="line">export RK_KERNEL_DEFCONFIG_FRAGMENT=rk3588_linux.config</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">内核设备树</span></span><br><span class="line">export RK_KERNEL_DTS=rk3588-evb7-lp4-v10-linux</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">boot镜像类型</span></span><br><span class="line">export RK_BOOT_IMG=boot.img</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">内核镜像路径</span></span><br><span class="line">export RK_KERNEL_IMG=kernel/arch/arm64/boot/Image</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">内核镜像格式类型：fit（扁平化镜像树）</span></span><br><span class="line">export RK_KERNEL_FIT_ITS=boot.its</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">GPT表的参数</span></span><br><span class="line">export RK_PARAMETER=parameter.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Buildroot的配置</span></span><br><span class="line">export RK_CFG_BUILDROOT=rockchip_rk3588</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Recovery的配置</span></span><br><span class="line">export RK_CFG_RECOVERY=rockchip_rk3588_recovery</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Recovery镜像格式类型：fit（扁平化镜像树）</span></span><br><span class="line">export RK_RECOVERY_FIT_ITS=boot4recovery.its</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Pcba的配置</span></span><br><span class="line">export RK_CFG_PCBA=rockchip_rk3588_pcba</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">目标芯片</span></span><br><span class="line">export RK_CHIP=rk3588</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置根文件系统的类型，包括ext2、ext4和squashfs</span></span><br><span class="line">export RK_ROOTFS_TYPE=ext4</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Debian版本（debian10: buster，debian11: bullseye）</span></span><br><span class="line">export RK_DEBIAN_VERSION=bullseye</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Yocto的机器</span></span><br><span class="line">export RK_YOCTO_MACHINE=rockchip-rk3588-evb</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">misc镜像</span></span><br><span class="line">export RK_MISC=wipe_all-misc.img</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义软件包文件</span></span><br><span class="line">export RK_PACKAGE_FILE=rk3588-package-file</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义WiFi和蓝牙芯片</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">兼容Realtek和AP6XXX WiFi：RK_WIFIBT_CHIP=ALL_AP</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">兼容Realtek和CYWXXX WiFi：RK_WIFIBT_CHIP=ALL_CY</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">单一WiFi配置：AP6256或CYW43455：RK_WIFIBT_CHIP=AP6256</span></span><br><span class="line">export RK_WIFIBT_CHIP=ALL_AP</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义BT串口</span></span><br><span class="line">export RK_WIFIBT_TTY=ttyS8</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;dev&gt;:&lt;mount point&gt;:&lt;fs <span class="built_in">type</span>&gt;:&lt;mount flags&gt;:&lt;<span class="built_in">source</span> <span class="built_in">dir</span>&gt;:&lt;image size(M|K|auto)&gt;:[options]</span></span><br><span class="line">export RK_EXTRA_PARTITIONS=&quot;oem:/oem:ext2:defaults:oem_normal:auto:resize@userdata:/userdata:ext2:defaults:userdata_normal:auto:resize&quot;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>瑞芯微脚本分析</category>
      </categories>
      <tags>
        <tag>瑞芯微脚本分析</tag>
      </tags>
  </entry>
  <entry>
    <title>0-1 瑞芯微build-sh脚本分析</title>
    <url>/2023/09/10/0-1%20%E7%91%9E%E8%8A%AF%E5%BE%AEbuild-sh%E8%84%9A%E6%9C%AC%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>build.sh脚本内容如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置环境变量 LC_ALL，用于定义程序的本地化设置</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 LC_ALL 设置为 C，表示使用标准的C语言环境，忽略本地化设置</span></span><br><span class="line">export LC_ALL=C</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置环境变量 LD_LIBRARY_PATH，用于指定动态链接库的搜索路径</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 LD_LIBRARY_PATH 设置为空，表示清空动态链接库搜索路径</span></span><br><span class="line">export LD_LIBRARY_PATH=</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">错误处理函数</span></span><br><span class="line">err_handler()</span><br><span class="line">&#123;</span><br><span class="line">	ret=$?</span><br><span class="line">	[ &quot;$ret&quot; -eq 0 ] &amp;&amp; return</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">打印错误信息</span></span><br><span class="line">	echo &quot;ERROR: Running $&#123;FUNCNAME[1]&#125; failed!&quot;</span><br><span class="line">	echo &quot;ERROR: exit code $ret from line $&#123;BASH_LINENO[0]&#125;:&quot;</span><br><span class="line">	echo &quot;    $BASH_COMMAND&quot;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">退出脚本</span></span><br><span class="line">	exit $ret</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置错误处理函数为 <span class="built_in">trap</span> 的处理程序，当发生错误时调用 err_handler() 函数</span></span><br><span class="line">trap &#x27;err_handler&#x27; ERR</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 shell 的错误处理行为</span></span><br><span class="line">set -eE</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">完成构建操作</span></span><br><span class="line">finish_build()</span><br><span class="line">&#123;</span><br><span class="line">	echo &quot;Running $&#123;FUNCNAME[1]&#125; succeeded.&quot;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">切换到顶级目录</span></span><br><span class="line">	cd $TOP_DIR</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查配置函数</span></span><br><span class="line">check_config()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">清除变量 missing</span></span><br><span class="line">	unset missing</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">遍历传入的参数列表</span></span><br><span class="line"></span><br><span class="line">	for var in $@; do</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">使用 <span class="built_in">eval</span> 检查变量是否存在值，如果存在则跳过</span></span><br><span class="line">		eval [ \$$var ] &amp;&amp; continue</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">将缺失的配置变量记录到 missing 变量中</span></span><br><span class="line">		missing=&quot;$missing $var&quot;</span><br><span class="line">	done</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果所有配置变量均存在值，则返回0表示检查通过</span></span><br><span class="line">	[ -z &quot;$missing&quot; ] &amp;&amp; return 0</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果存在缺失的配置变量，则输出错误信息并返回1</span></span><br><span class="line">	echo &quot;Skipping $&#123;FUNCNAME[1]&#125; for missing configs: $missing.&quot;</span><br><span class="line">	return 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择板卡函数</span></span><br><span class="line">choose_board()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">获取板卡配置文件列表到 BOARD_ARRAY 数组</span></span><br><span class="line">	BOARD_ARRAY=( $(cd $&#123;CHIP_DIR&#125;/; ls BoardConfig*.mk | sort) )</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">获取板卡数组的长度</span>	</span><br><span class="line">	RK_TARGET_BOARD_ARRAY_LEN=$&#123;#BOARD_ARRAY[@]&#125;</span><br><span class="line"><span class="meta prompt_">	</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果板卡数组长度为0，则表示没有可用的板卡配置文件，输出错误信息并返回-1</span></span><br><span class="line">	if [ $RK_TARGET_BOARD_ARRAY_LEN -eq 0 ]; then</span><br><span class="line">		echo &quot;No available Board Config&quot;</span><br><span class="line">		return -1</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	echo</span><br><span class="line">	echo &quot;You&#x27;re building on Linux&quot;</span><br><span class="line">	echo &quot;Lunch menu...pick a combo:&quot;</span><br><span class="line">	echo &quot;&quot;</span><br><span class="line"><span class="meta prompt_">	</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">输出可用的板卡配置文件列表</span></span><br><span class="line">	echo &quot;0. default BoardConfig.mk&quot;</span><br><span class="line">	echo $&#123;BOARD_ARRAY[@]&#125; | xargs -n 1 | sed &quot;=&quot; | sed &quot;N;s/\n/. /&quot;</span><br><span class="line"></span><br><span class="line">	local INDEX</span><br><span class="line">	read -p &quot;Which would you like? [0]: &quot; INDEX</span><br><span class="line">	INDEX=$(($&#123;INDEX:-0&#125; - 1))</span><br><span class="line"><span class="meta prompt_">	</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">根据用户选择的索引确定所选的板卡配置文件</span></span><br><span class="line">	if echo $INDEX | grep -vq [^0-9]; then</span><br><span class="line">		BOARD=&quot;$&#123;BOARD_ARRAY[$INDEX]&#125;&quot;</span><br><span class="line">	else</span><br><span class="line">		echo &quot;Lunching for Default BoardConfig.mk boards...&quot;</span><br><span class="line">		BOARD=BoardConfig.mk</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">创建符号链接，将所选的板卡配置文件链接到 BOARD_CONFIG 变量指定的路径</span></span><br><span class="line">	ln -rsf &quot;$CHIP_DIR/$BOARD&quot; &quot;$BOARD_CONFIG&quot;</span><br><span class="line">	echo &quot;switching to board: $(realpath $BOARD_CONFIG)&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取当前脚本所在目录的绝对路径，并赋值给 COMMON_DIR 变量</span></span><br><span class="line">COMMON_DIR=&quot;$(dirname &quot;$(realpath &quot;$0&quot;)&quot;)&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据 COMMON_DIR 计算出顶级目录的绝对路径，并赋值给 TOP_DIR 变量</span></span><br><span class="line">TOP_DIR=&quot;$(realpath &quot;$COMMON_DIR/../../..&quot;)&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到顶级目录</span></span><br><span class="line">cd &quot;$TOP_DIR&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建 rockdev 目录（如果不存在）</span></span><br><span class="line">mkdir -p rockdev</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 BOARD_CONFIG 变量为顶级目录下的 device/rockchip/.BoardConfig.mk 文件的绝对路径</span></span><br><span class="line">BOARD_CONFIG=&quot;$TOP_DIR/device/rockchip/.BoardConfig.mk&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取 CHIP_DIR 变量的绝对路径，该变量指向顶级目录下的 device/rockchip/.target_product 目录</span></span><br><span class="line">CHIP_DIR=&quot;$(realpath $TOP_DIR/device/rockchip/.target_product)&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">预构建 U-Boot 函数</span></span><br><span class="line">prebuild_uboot()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">构建 U-Boot 的编译命令字符串</span></span><br><span class="line">	UBOOT_COMPILE_COMMANDS=&quot;\</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">&#123;RK_TRUST_INI_CONFIG:+../rkbin/RKTRUST/<span class="variable">$RK_TRUST_INI_CONFIG</span>&#125; \</span></span><br><span class="line"><span class="language-bash">			<span class="variable">$&#123;RK_SPL_INI_CONFIG:+../rkbin/RKBOOT/$RK_SPL_INI_CONFIG&#125;</span> \</span></span><br><span class="line"><span class="language-bash">			<span class="variable">$&#123;RK_UBOOT_SIZE_CONFIG:+--sz-uboot $RK_UBOOT_SIZE_CONFIG&#125;</span> \</span></span><br><span class="line"><span class="language-bash">			<span class="variable">$&#123;RK_TRUST_SIZE_CONFIG:+--sz-trust $RK_TRUST_SIZE_CONFIG&#125;</span><span class="string">&quot;</span></span></span><br><span class="line">	UBOOT_COMPILE_COMMANDS=&quot;$(echo $UBOOT_COMPILE_COMMANDS)&quot;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">如果启用 RAMDISK 安全启动，则添加相关的编译命令选项</span></span></span><br><span class="line">	if [ &quot;$RK_RAMDISK_SECURITY_BOOTUP&quot; = &quot;true&quot; ];then</span><br><span class="line">		UBOOT_COMPILE_COMMANDS=&quot; \</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash"><span class="string">UBOOT_COMPILE_COMMANDS \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			<span class="variable">$&#123;RK_ROLLBACK_INDEX_BOOT:+--rollback-index-boot $RK_ROLLBACK_INDEX_BOOT&#125;</span> \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			<span class="variable">$&#123;RK_ROLLBACK_INDEX_UBOOT:+--rollback-index-uboot $RK_ROLLBACK_INDEX_UBOOT&#125;</span> &quot;</span></span></span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">预构建安全启动的 U-Boot 函数</span></span><br><span class="line">prebuild_security_uboot()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">获取传入的模式参数</span></span><br><span class="line">	local mode=$1</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果启用 RAMDISK 安全启动，则添加相关的编译命令选项</span></span><br><span class="line">	if [ &quot;$RK_RAMDISK_SECURITY_BOOTUP&quot; = &quot;true&quot; ];then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">如果 RK_SECURITY_OTP_DEBUG 不等于 <span class="string">&quot;true&quot;</span>，则添加 --burn-key-hash 选项</span></span><br><span class="line">		if [ &quot;$RK_SECURITY_OTP_DEBUG&quot; != &quot;true&quot; ]; then</span><br><span class="line">			UBOOT_COMPILE_COMMANDS=&quot;$UBOOT_COMPILE_COMMANDS --burn-key-hash&quot;</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">根据传入的模式参数进行不同的处理</span></span><br><span class="line">		case &quot;$&#123;mode:-normal&#125;&quot; in</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">对于 uboot 模式，不需要额外的处理</span></span><br><span class="line">			uboot)</span><br><span class="line">				;;</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">对于 boot 模式，添加 --boot_img 选项，并设置值为 <span class="variable">$TOP_DIR</span>/u-boot/boot.img</span></span><br><span class="line">			boot)</span><br><span class="line">				UBOOT_COMPILE_COMMANDS=&quot; \</span><br><span class="line">					--boot_img $TOP_DIR/u-boot/boot.img \</span><br><span class="line">					$UBOOT_COMPILE_COMMANDS &quot;</span><br><span class="line">				;;</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">对于 recovery 模式，添加 --recovery_img 选项，并设置值为 <span class="variable">$TOP_DIR</span>/u-boot/recovery.img</span></span><br><span class="line">			recovery)</span><br><span class="line">				UBOOT_COMPILE_COMMANDS=&quot; \</span><br><span class="line">					--recovery_img $TOP_DIR/u-boot/recovery.img</span><br><span class="line">					$UBOOT_COMPILE_COMMANDS &quot;</span><br><span class="line">				;;</span><br><span class="line">			*)</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">对于其他模式，默认添加 --boot_img 选项，并设置值为 <span class="variable">$TOP_DIR</span>/u-boot/boot.img</span></span><br><span class="line">				UBOOT_COMPILE_COMMANDS=&quot; \</span><br><span class="line">					--boot_img $TOP_DIR/u-boot/boot.img \</span><br><span class="line">					$UBOOT_COMPILE_COMMANDS &quot;</span><br><span class="line">				# 如果 RK_PACKAGE_FILE_AB 为空，则添加 --recovery_img 选项，并设置值为 $TOP_DIR/u-boot/recovery.img</span><br><span class="line">				test -z &quot;$&#123;RK_PACKAGE_FILE_AB&#125;&quot; &amp;&amp; \</span><br><span class="line">					UBOOT_COMPILE_COMMANDS=&quot;$UBOOT_COMPILE_COMMANDS --recovery_img $TOP_DIR/u-boot/recovery.img&quot;</span><br><span class="line">				;;</span><br><span class="line">		esac</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">使用 <span class="built_in">echo</span> 命令重新赋值 UBOOT_COMPILE_COMMANDS 变量，去除多余空格</span></span><br><span class="line">		UBOOT_COMPILE_COMMANDS=&quot;$(echo $UBOOT_COMPILE_COMMANDS)&quot;</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用法函数，打印脚本的使用说明</span></span><br><span class="line">usage()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">打印使用说明</span></span><br><span class="line">	echo &quot;Usage: build.sh [OPTIONS]&quot;</span><br><span class="line">	echo &quot;Available options:&quot;</span><br><span class="line">	echo &quot;BoardConfig*.mk    -switch to specified board config&quot;</span><br><span class="line">	echo &quot;lunch              -list current SDK boards and switch to specified board config&quot;</span><br><span class="line">	echo &quot;wifibt             -build wifibt&quot;</span><br><span class="line">	echo &quot;uboot              -build uboot&quot;</span><br><span class="line">	echo &quot;uefi		 -build uefi&quot;</span><br><span class="line">	echo &quot;spl                -build spl&quot;</span><br><span class="line">	echo &quot;loader             -build loader&quot;</span><br><span class="line">	echo &quot;kernel-4.4         -build kernel 4.4&quot;</span><br><span class="line">	echo &quot;kernel-4.19        -build kernel 4.19&quot;</span><br><span class="line">	echo &quot;kernel-5.10        -build kernel 5.10&quot;</span><br><span class="line">	echo &quot;kernel             -build kernel&quot;</span><br><span class="line">	echo &quot;modules            -build kernel modules&quot;</span><br><span class="line">	echo &quot;rootfs             -build rootfs (default is buildroot)&quot;</span><br><span class="line">	echo &quot;buildroot          -build buildroot rootfs&quot;</span><br><span class="line">	echo &quot;yocto              -build yocto rootfs&quot;</span><br><span class="line">	echo &quot;debian             -build debian rootfs&quot;</span><br><span class="line">	echo &quot;pcba               -build pcba&quot;</span><br><span class="line">	echo &quot;recovery           -build recovery&quot;</span><br><span class="line">	echo &quot;all                -build uboot, kernel, rootfs, recovery image&quot;</span><br><span class="line">	echo &quot;cleanall           -clean uboot, kernel, rootfs, recovery&quot;</span><br><span class="line">	echo &quot;firmware           -pack all the image we need to boot up system&quot;</span><br><span class="line">	echo &quot;updateimg          -pack update image&quot;</span><br><span class="line">	echo &quot;otapackage         -pack ab update otapackage image (update_ota.img)&quot;</span><br><span class="line">	echo &quot;sdpackage          -pack update sdcard package image (update_sdcard.img)&quot;</span><br><span class="line">	echo &quot;save               -save images, patches, commands used to debug&quot;</span><br><span class="line">	echo &quot;allsave            -build all &amp; firmware &amp; updateimg &amp; save&quot;</span><br><span class="line">	echo &quot;info               -see the current board building information&quot;</span><br><span class="line">	echo &quot;&quot;</span><br><span class="line">	echo &quot;createkeys         -create secureboot root keys&quot;</span><br><span class="line">	echo &quot;security_rootfs    -build rootfs and some relevant images with security paramter (just for dm-v)&quot;</span><br><span class="line">	echo &quot;security_boot      -build boot with security paramter&quot;</span><br><span class="line">	echo &quot;security_uboot     -build uboot with security paramter&quot;</span><br><span class="line">	echo &quot;security_recovery  -build recovery with security paramter&quot;</span><br><span class="line">	echo &quot;security_check     -check security paramter if it&#x27;s good&quot;</span><br><span class="line">	echo &quot;&quot;</span><br><span class="line">	echo &quot;Default option is &#x27;allsave&#x27;.&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建信息函数，打印当前构建的相关信息</span></span><br><span class="line">build_info()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果 CHIP_DIR 路径不存在，则打印错误信息，表示未找到目标芯片</span></span><br><span class="line">	if [ ! -L $CHIP_DIR ];then</span><br><span class="line">		echo &quot;No found target chip!!!&quot;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果 BOARD_CONFIG 路径不存在，则打印错误信息，表示未找到目标板级配置</span></span><br><span class="line">	if [ ! -L $BOARD_CONFIG ];then</span><br><span class="line">		echo &quot;No found target board config!!!&quot;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果存在 .repo/manifest.xml 文件，则获取 SDK 版本号，并打印构建的 SDK 版本</span></span><br><span class="line">	if [ -f .repo/manifest.xml ]; then</span><br><span class="line">		local sdk_ver=&quot;&quot;</span><br><span class="line">		sdk_ver=`grep &quot;include name&quot;  .repo/manifest.xml | awk -F\&quot; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">		sdk_ver=`realpath .repo/manifests/$&#123;sdk_ver&#125;`</span><br><span class="line">		echo &quot;Build SDK version: `basename $&#123;sdk_ver&#125;`&quot;</span><br><span class="line">	else</span><br><span class="line">		echo &quot;Not found .repo/manifest.xml [ignore] !!!&quot;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">打印当前构建的信息，包括目标芯片、目标板级配置和一些目标的其他配置参数</span></span><br><span class="line">	echo &quot;Current Building Information:&quot;</span><br><span class="line">	echo &quot;Target Chip: $CHIP_DIR&quot;</span><br><span class="line">	echo &quot;Target BoardConfig: `realpath $BOARD_CONFIG`&quot;</span><br><span class="line">	echo &quot;Target Misc config:&quot;</span><br><span class="line">	echo &quot;`env |grep &quot;^RK_&quot; | grep -v &quot;=$&quot; | sort`&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">根据 RK_KERNEL_ARCH 变量的值确定设备树（dtb）的路径，并删除已存在的 dtb 文件</span></span><br><span class="line">	if [ &quot;$RK_KERNEL_ARCH&quot; == &quot;arm&quot; ]; then</span><br><span class="line">		dtb=&quot;kernel/arch/arm/boot/dts/$&#123;RK_KERNEL_DTS&#125;.dtb&quot;</span><br><span class="line">	else</span><br><span class="line">		dtb=&quot;kernel/arch/arm64/boot/dts/rockchip/$&#123;RK_KERNEL_DTS&#125;.dtb&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	rm -f $dtb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">使用 <span class="variable">$KMAKE</span> dtbs 命令生成设备树（dtb）文件</span></span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">KMAKE dtbs</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">调用 build_check_power_domain 函数检查电源域</span></span><br><span class="line">	build_check_power_domain</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建检查电源域函数，用于检查电源域配置是否正确</span></span><br><span class="line">build_check_power_domain()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">定义临时文件和变量</span></span><br><span class="line">	local dump_kernel_dtb_file</span><br><span class="line">	local tmp_phandle_file</span><br><span class="line">	local tmp_io_domain_file</span><br><span class="line">	local tmp_regulator_microvolt_file</span><br><span class="line">	local tmp_final_target</span><br><span class="line">	local tmp_none_item</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">根据 RK_KERNEL_ARCH 变量的值确定设备树（dts）文件的路径</span></span><br><span class="line">	if [ &quot;$RK_KERNEL_ARCH&quot; == &quot;arm&quot; ]; then</span><br><span class="line">		dts=&quot;kernel/arch/arm/boot/dts/$RK_KERNEL_DTS&quot;</span><br><span class="line">	else</span><br><span class="line">		dts=&quot;kernel/arch/arm64/boot/dts/rockchip/$RK_KERNEL_DTS&quot;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">定义临时文件的路径</span></span><br><span class="line">	dump_kernel_dtb_file=$&#123;dts&#125;.dump.dts</span><br><span class="line">	tmp_phandle_file=`mktemp`</span><br><span class="line">	tmp_io_domain_file=`mktemp`</span><br><span class="line">	tmp_regulator_microvolt_file=`mktemp`</span><br><span class="line">	tmp_final_target=`mktemp`</span><br><span class="line">	tmp_grep_file=`mktemp`</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">将设备树二进制文件转换为文本格式，并保存为 dump_kernel_dtb_file</span></span><br><span class="line">	dtc -I dtb -O dts -o $&#123;dump_kernel_dtb_file&#125; $&#123;dts&#125;.dtb 2&gt;/dev/null</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果 RK_SYSTEM_CHECK_METHOD 变量的值为 <span class="string">&quot;DM-E&quot;</span>，则检查是否在设备树中添加了 optee-tz 的兼容性</span></span><br><span class="line">	if [ &quot;$RK_SYSTEM_CHECK_METHOD&quot; = &quot;DM-E&quot; ] ; then</span><br><span class="line">		if ! grep &quot;compatible = \&quot;linaro,optee-tz\&quot;;&quot; $dump_kernel_dtb_file &gt; /dev/null 2&gt;&amp;1 ; then</span><br><span class="line">			echo &quot;Please add: &quot;</span><br><span class="line">			echo &quot;        optee: optee &#123;&quot;</span><br><span class="line">			echo &quot;                compatible = \&quot;linaro,optee-tz\&quot;;&quot;</span><br><span class="line">			echo &quot;                method = \&quot;smc\&quot;;&quot;</span><br><span class="line">			echo &quot;                status = \&quot;okay\&quot;;&quot;</span><br><span class="line">			echo &quot;        &#125;&quot;</span><br><span class="line">			echo &quot;To your dts file&quot;</span><br><span class="line">			return -1;</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">使用正则表达式从设备树中提取 io-domains 配置，并保存到临时文件 tmp_io_domain_file 和 tmp_grep_file</span></span><br><span class="line">	if ! grep -Pzo &quot;io-domains\s*&#123;(\n|\w|-|;|=|&lt;|&gt;|\&quot;|_|\s|,)*&#125;;&quot; $dump_kernel_dtb_file 1&gt;$tmp_grep_file 2&gt;/dev/null; then</span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;Not Found io-domains in <span class="variable">$&#123;dts&#125;</span>.dts&quot;</span></span></span><br><span class="line">		rm -f $tmp_grep_file</span><br><span class="line">		return 0</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">从临时文件 tmp_grep_file 中提取供电（supply）信息，并保存到临时文件 tmp_io_domain_file</span></span><br><span class="line">	grep -a supply $tmp_grep_file &gt; $tmp_io_domain_file</span><br><span class="line">	rm -f $tmp_grep_file</span><br><span class="line">	awk &#x27;&#123;print &quot;phandle = &quot; $3&#125;&#x27; $tmp_io_domain_file &gt; $tmp_phandle_file</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">逐行读取临时文件 tmp_phandle_file 和 tmp_io_domain_file，并进行处理</span></span><br><span class="line">	while IFS= read -r item_phandle &amp;&amp; IFS= read -u 3 -r item_domain</span><br><span class="line">	do</span><br><span class="line">		echo &quot;$&#123;item_domain% *&#125;&quot; &gt;&gt; $tmp_regulator_microvolt_file</span><br><span class="line">		tmp_none_item=$&#123;item_domain% *&#125;</span><br><span class="line">		cmds=&quot;grep -Pzo \&quot;&#123;(\\n|\w|-|;|=|&lt;|&gt;|\\\&quot;|_|\s)*&quot;$item_phandle\&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">使用 <span class="built_in">eval</span> 执行命令，从设备树中提取相应的 regulator-m..-microvolt 配置，并将结果保存到临时文件 tmp_regulator_microvolt_file</span></span><br><span class="line">		eval &quot;$cmds $dump_kernel_dtb_file | strings | grep &quot;regulator-m..-microvolt&quot; &gt;&gt; $tmp_regulator_microvolt_file&quot; || \</span><br><span class="line">			eval &quot;sed -i \&quot;/$&#123;tmp_none_item&#125;/d\&quot; $tmp_regulator_microvolt_file&quot; &amp;&amp; continue</span><br><span class="line"></span><br><span class="line">		echo &gt;&gt; $tmp_regulator_microvolt_file</span><br><span class="line">	done &lt; $tmp_phandle_file 3&lt;$tmp_io_domain_file</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">逐行读取临时文件 tmp_regulator_microvolt_file，生成最终的目标文件 tmp_final_target</span></span><br><span class="line">	while read -r regulator_val</span><br><span class="line">	do</span><br><span class="line">		if echo $&#123;regulator_val&#125; | grep supply &amp;&gt;/dev/null; then</span><br><span class="line">			echo -e &quot;\n\n\e[1;33m$&#123;regulator_val%*=&#125;\e[0m&quot; &gt;&gt; $tmp_final_target</span><br><span class="line">		else</span><br><span class="line">			tmp_none_item=$&#123;regulator_val##*&lt;&#125;</span><br><span class="line">			tmp_none_item=$&#123;tmp_none_item%%&gt;*&#125;</span><br><span class="line">			echo -e &quot;$&#123;regulator_val%%&lt;*&#125; \e[1;31m$(( $tmp_none_item / 1000 ))mV\e[0m&quot; &gt;&gt; $tmp_final_target</span><br><span class="line">		fi</span><br><span class="line">	done &lt; $tmp_regulator_microvolt_file</span><br><span class="line"></span><br><span class="line">	echo -e &quot;\e[41;1;30m PLEASE CHECK BOARD GPIO POWER DOMAIN CONFIGURATION !!!!!\e[0m&quot;</span><br><span class="line">	echo -e &quot;\e[41;1;30m &lt;&lt;&lt; ESPECIALLY Wi-Fi/Flash/Ethernet IO power domain &gt;&gt;&gt; !!!!!\e[0m&quot;</span><br><span class="line">	echo -e &quot;\e[41;1;30m Check Node [pmu_io_domains] in the file: $&#123;dts&#125;.dts \e[0m&quot;</span><br><span class="line">	echo</span><br><span class="line">	echo -e &quot;\e[41;1;30m 请再次确认板级的电源域配置！！！！！！\e[0m&quot;</span><br><span class="line">	echo -e &quot;\e[41;1;30m &lt;&lt;&lt; 特别是Wi-Fi，FLASH，以太网这几路IO电源的配置 &gt;&gt;&gt; ！！！！！\e[0m&quot;</span><br><span class="line">	echo -e &quot;\e[41;1;30m 检查内核文件 $&#123;dts&#125;.dts 的节点 [pmu_io_domains] \e[0m&quot;</span><br><span class="line">	cat $tmp_final_target</span><br><span class="line"></span><br><span class="line">	rm -f $tmp_phandle_file</span><br><span class="line">	rm -f $tmp_regulator_microvolt_file</span><br><span class="line">	rm -f $tmp_io_domain_file</span><br><span class="line">	rm -f $tmp_final_target</span><br><span class="line">	rm -f $dump_kernel_dtb_file</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置交叉编译工具链和相关参数</span></span><br><span class="line">setup_cross_compile()</span><br><span class="line">&#123;</span><br><span class="line">	if [ &quot;$RK_CHIP&quot; = &quot;rv1126_rv1109&quot; ]; then</span><br><span class="line">		TOOLCHAIN_OS=rockchip</span><br><span class="line">	else</span><br><span class="line">		TOOLCHAIN_OS=none</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">将 RK_KERNEL_ARCH 中的 arm64 替换为 aarch64</span></span><br><span class="line">	TOOLCHAIN_ARCH=$&#123;RK_KERNEL_ARCH/arm64/aarch64&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">查找匹配的 GCC 工具链路径</span></span><br><span class="line">	TOOLCHAIN_DIR=&quot;$(realpath prebuilts/gcc/*/$TOOLCHAIN_ARCH/gcc-arm-*)&quot;</span><br><span class="line">	GCC=&quot;$(find &quot;$TOOLCHAIN_DIR&quot; -name &quot;*$TOOLCHAIN_OS*-gcc&quot;)&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查是否存在可执行的 GCC 工具链</span></span><br><span class="line">	if [ ! -x &quot;$GCC&quot; ]; then</span><br><span class="line">		echo &quot;No prebuilt GCC toolchain!&quot;</span><br><span class="line">		return 1</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">设置交叉编译前缀</span></span><br><span class="line">	export CROSS_COMPILE=&quot;$&#123;GCC%gcc&#125;&quot;</span><br><span class="line">	echo &quot;Using prebuilt GCC toolchain: $CROSS_COMPILE&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">获取可用的处理器核心数量</span></span><br><span class="line">	NUM_CPUS=$(getconf _NPROCESSORS_ONLN 2&gt;/dev/null || echo 1)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">设置并发编译任务数，默认为处理器核心数量加一</span></span><br><span class="line">	JLEVEL=$&#123;RK_JOBS:-$(( $NUM_CPUS + 1 ))&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">定义内核编译命令</span></span><br><span class="line">	KMAKE=&quot;make -C kernel/ ARCH=$RK_KERNEL_ARCH -j$JLEVEL&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建 UEFI</span></span><br><span class="line">build_uefi()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">设置交叉编译工具链和相关参数</span></span><br><span class="line">	setup_cross_compile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">根据 RK_KERNEL_ARCH 的值确定 dtb 文件路径</span></span><br><span class="line">	if [ &quot;$RK_KERNEL_ARCH&quot; == &quot;arm&quot; ]; then</span><br><span class="line">		dtb=&quot;kernel/arch/arm/boot/dts/$&#123;RK_KERNEL_DTS&#125;.dtb&quot;</span><br><span class="line">	else</span><br><span class="line">		dtb=&quot;kernel/arch/arm64/boot/dts/rockchip/$&#123;RK_KERNEL_DTS&#125;.dtb&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	echo &quot;============Start building uefi============&quot;</span><br><span class="line">	echo &quot;Copy kernel dtb $dtb to uefi/edk2-platforms/Platform/Rockchip/DeviceTree/rk3588.dtb&quot;</span><br><span class="line">	echo &quot;=========================================&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查 dtb 文件是否存在</span></span><br><span class="line">	if [ ! -f $dtb ]; then</span><br><span class="line">		echo &quot;Please compile the kernel before&quot;</span><br><span class="line">		return -1</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">将 dtb 文件复制到 uefi 目录</span></span><br><span class="line">	cp $dtb uefi/edk2-platforms/Platform/Rockchip/DeviceTree/rk3588.dtb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">进入 uefi 目录并执行构建脚本</span></span><br><span class="line">	cd uefi</span><br><span class="line">	./make.sh $RK_UBOOT_DEFCONFIG</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">完成构建流程</span></span><br><span class="line">	finish_build</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建 U-Boot</span></span><br><span class="line">build_uboot()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查 RK_UBOOT_DEFCONFIG 配置是否存在，若不存在则返回</span></span><br><span class="line">	check_config RK_UBOOT_DEFCONFIG || return 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">设置交叉编译工具链和相关参数</span></span><br><span class="line">	setup_cross_compile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">准备 U-Boot 构建所需的文件</span></span><br><span class="line">	prebuild_uboot</span><br><span class="line">	prebuild_security_uboot $@</span><br><span class="line"></span><br><span class="line">	echo &quot;============Start building uboot============&quot;</span><br><span class="line">	echo &quot;TARGET_UBOOT_CONFIG=$RK_UBOOT_DEFCONFIG&quot;</span><br><span class="line">	echo &quot;=========================================&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">进入 u-boot 目录并删除旧的 *_loader_*.bin 文件</span></span><br><span class="line">	cd u-boot</span><br><span class="line">	rm -f *_loader_*.bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">构建 U-Boot</span></span><br><span class="line">	if [ -n &quot;$RK_UBOOT_DEFCONFIG_FRAGMENT&quot; ]; then</span><br><span class="line">		if [ -f &quot;configs/$&#123;RK_UBOOT_DEFCONFIG&#125;_defconfig&quot; ]; then</span><br><span class="line">			UBOOT_CONFIGS=&quot;$&#123;RK_UBOOT_DEFCONFIG&#125;_defconfig&quot;</span><br><span class="line">		else</span><br><span class="line">			UBOOT_CONFIGS=&quot;$&#123;RK_UBOOT_DEFCONFIG&#125;.config&quot;</span><br><span class="line">		fi</span><br><span class="line">		UBOOT_CONFIGS=&quot;$UBOOT_CONFIGS $RK_UBOOT_DEFCONFIG_FRAGMENT&quot;</span><br><span class="line">	else</span><br><span class="line">		UBOOT_CONFIGS=&quot;$RK_UBOOT_DEFCONFIG&quot;</span><br><span class="line">	fi</span><br><span class="line">	./make.sh $UBOOT_CONFIGS $UBOOT_COMPILE_COMMANDS \</span><br><span class="line">		CROSS_COMPILE=$CROSS_COMPILE</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果需要更新 RK_IDBLOCK_SPL，则执行带有 --idblock 和 --spl 参数的 make.sh</span></span><br><span class="line">	if [ &quot;$RK_IDBLOCK_UPDATE_SPL&quot; = &quot;true&quot; ]; then</span><br><span class="line">		./make.sh --idblock --spl</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	cd ..</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果需要进行 RAMDISK 安全启动，则创建链接到 rockdev 目录的 boot.img 和 recovery.img</span></span><br><span class="line">	if [ &quot;$RK_RAMDISK_SECURITY_BOOTUP&quot; = &quot;true&quot; ];then</span><br><span class="line">		ln -rsf u-boot/boot.img rockdev/</span><br><span class="line">		test -z &quot;$&#123;RK_PACKAGE_FILE_AB&#125;&quot; &amp;&amp; \</span><br><span class="line">			ln -rsf u-boot/recovery.img rockdev/ || true</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">创建链接到 rockdev 目录的 MiniLoaderAll.bin、uboot.img 和 trust.img（如果存在）</span></span><br><span class="line">	LOADER=&quot;$(echo u-boot/*_loader_*v*.bin | head -1)&quot;</span><br><span class="line">	SPL=&quot;$(echo u-boot/*_loader_spl.bin | head -1)&quot;</span><br><span class="line">	ln -rsf &quot;$&#123;LOADER:-$SPL&#125;&quot; rockdev/MiniLoaderAll.bin</span><br><span class="line">	ln -rsf u-boot/uboot.img rockdev/</span><br><span class="line">	[ ! -e u-boot/trust.img ] || \</span><br><span class="line">		ln -rsf u-boot/trust.img rockdev/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">完成构建流程</span></span><br><span class="line">	finish_build</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建 SPL</span></span><br><span class="line">build_spl()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查 RK_SPL_DEFCONFIG 配置是否存在，若不存在则返回</span></span><br><span class="line">	check_config RK_SPL_DEFCONFIG || return 0</span><br><span class="line"></span><br><span class="line">	echo &quot;============Start building spl============&quot;</span><br><span class="line">	echo &quot;TARGET_SPL_CONFIG=$RK_SPL_DEFCONFIG&quot;</span><br><span class="line">	echo &quot;=========================================&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">进入 u-boot 目录并删除旧的 spl.bin 文件</span></span><br><span class="line">	cd u-boot</span><br><span class="line">	rm -f *spl.bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">构建 SPL</span></span><br><span class="line">	./make.sh $RK_SPL_DEFCONFIG</span><br><span class="line">	./make.sh --spl</span><br><span class="line">	cd ..</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">创建链接到 rockdev 目录的 MiniLoaderAll.bin</span></span><br><span class="line">	SPL=&quot;$(echo u-boot/*_loader_spl.bin | head -1)&quot;</span><br><span class="line">	ln -rsf &quot;$SPL&quot; rockdev/MiniLoaderAll.bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">完成构建流程</span></span><br><span class="line">	finish_build</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建 Loader</span></span><br><span class="line">build_loader()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查 RK_LOADER_BUILD_TARGET 配置是否存在，若不存在则返回</span></span><br><span class="line">	check_config RK_LOADER_BUILD_TARGET || return 0</span><br><span class="line"></span><br><span class="line">	echo &quot;============Start building loader============&quot;</span><br><span class="line">	echo &quot;RK_LOADER_BUILD_TARGET=$RK_LOADER_BUILD_TARGET&quot;</span><br><span class="line">	echo &quot;==========================================&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">进入 loader 目录并执行 build.sh 构建 Loader</span></span><br><span class="line">	cd loader</span><br><span class="line">	./build.sh $RK_LOADER_BUILD_TARGET</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">完成构建流程</span></span><br><span class="line">	finish_build</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建 Kernel</span></span><br><span class="line">build_kernel()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查 RK_KERNEL_DTS 和 RK_KERNEL_DEFCONFIG 配置是否存在，若不存在则返回</span></span><br><span class="line">	check_config RK_KERNEL_DTS RK_KERNEL_DEFCONFIG || return 0</span><br><span class="line"></span><br><span class="line">	echo &quot;============Start building kernel============&quot;</span><br><span class="line">	echo &quot;TARGET_KERNEL_ARCH   =$RK_KERNEL_ARCH&quot;</span><br><span class="line">	echo &quot;TARGET_KERNEL_CONFIG =$RK_KERNEL_DEFCONFIG&quot;</span><br><span class="line">	echo &quot;TARGET_KERNEL_DTS    =$RK_KERNEL_DTS&quot;</span><br><span class="line">	echo &quot;TARGET_KERNEL_CONFIG_FRAGMENT =$RK_KERNEL_DEFCONFIG_FRAGMENT&quot;</span><br><span class="line">	echo &quot;==========================================&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">设置交叉编译工具链</span></span><br><span class="line">	setup_cross_compile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">使用 KMAKE 构建 Kernel</span></span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">KMAKE <span class="variable">$RK_KERNEL_DEFCONFIG</span> <span class="variable">$RK_KERNEL_DEFCONFIG_FRAGMENT</span></span></span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">KMAKE <span class="variable">$RK_KERNEL_DTS</span>.img</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查是否存在 Kernel FIT 文件并使用 mk-fitimage.sh 创建镜像</span></span><br><span class="line">	ITS=&quot;$CHIP_DIR/$RK_KERNEL_FIT_ITS&quot;</span><br><span class="line">	if [ -f &quot;$ITS&quot; ]; then</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">COMMON_DIR/mk-fitimage.sh kernel/<span class="variable">$RK_BOOT_IMG</span> \</span></span><br><span class="line"><span class="language-bash">			<span class="string">&quot;<span class="variable">$ITS</span>&quot;</span> <span class="variable">$RK_KERNEL_IMG</span></span></span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">创建链接到 rockdev 目录的 boot.img</span></span><br><span class="line">	ln -rsf kernel/$RK_BOOT_IMG rockdev/boot.img</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">将 boot.img 复制到 u-boot 目录下，用于安全性考虑</span></span><br><span class="line">	cp rockdev/boot.img u-boot/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">构建检查电源域</span></span><br><span class="line">	build_check_power_domain</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">完成构建流程</span></span><br><span class="line">	finish_build</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建 Wi-Fi 和蓝牙</span></span><br><span class="line">build_wifibt()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">设置交叉编译工具链</span></span><br><span class="line">	setup_cross_compile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">设置 Buildroot 相关路径</span></span><br><span class="line">	BUILDROOT_OUTDIR=$TOP_DIR/buildroot/output/$RK_CFG_BUILDROOT/</span><br><span class="line">	BUILDROOT_HOST_DIR=$BUILDROOT_OUTDIR/host/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查 Buildroot 架构</span></span><br><span class="line">	if grep -wq aarch64 &quot;$BUILDROOT_OUTDIR/.config&quot; 2&gt;/dev/null; then</span><br><span class="line">		BUILDROOT_ARCH=arm64</span><br><span class="line">	else</span><br><span class="line">		BUILDROOT_ARCH=arm</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">获取 Buildroot GCC 和 SYSROOT 路径</span></span><br><span class="line">	BUILDROOT_GCC=&quot;$(echo $BUILDROOT_HOST_DIR/bin/*buildroot*-gcc)&quot;</span><br><span class="line">	BUILDROOT_SYSROOT=&quot;$(echo $BUILDROOT_HOST_DIR/*/sysroot/)&quot;</span><br><span class="line">	if [ ! -x &quot;$BUILDROOT_GCC&quot; -o ! -d &quot;$BUILDROOT_SYSROOT&quot; ]; then</span><br><span class="line">		echo &quot;ERROR: Buildroot not ready!&quot;</span><br><span class="line">		exit -1</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">设置 Wi-Fi 和蓝牙芯片类型和 TTY 设备</span></span><br><span class="line">	if [ -n &quot;$1&quot; ]; then</span><br><span class="line">		WIFI_CHIP=$1</span><br><span class="line">	elif [ -n &quot;$RK_WIFIBT_CHIP&quot; ]; then</span><br><span class="line">		WIFI_CHIP=$RK_WIFIBT_CHIP</span><br><span class="line">	else</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">默认为 ALL_AP</span></span><br><span class="line">		echo &quot;=== WARNNING WIFI_CHIP is NULL so default to ALL_AP ===&quot;</span><br><span class="line">		WIFI_CHIP=ALL_AP</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [ -n &quot;$2&quot; ]; then</span><br><span class="line">		BT_TTY_DEV=$2</span><br><span class="line">	elif [ -n &quot;$RK_WIFIBT_TTY&quot; ]; then</span><br><span class="line">		BT_TTY_DEV=$RK_WIFIBT_TTY</span><br><span class="line">	else</span><br><span class="line">		echo &quot;=== WARNNING BT_TTY is NULL so default to ttyS0 ===&quot;</span><br><span class="line">		BT_TTY_DEV=ttyS0</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查内核 .config 配置</span></span><br><span class="line">	WIFI_USB=$(grep &quot;CONFIG_USB=y&quot; $TOP_DIR/kernel/.config || true)</span><br><span class="line">	WIFI_SDIO=$(grep &quot;CONFIG_MMC=y&quot; $TOP_DIR/kernel/.config || true)</span><br><span class="line">	WIFI_PCIE=$(grep &quot;CONFIG_PCIE_DW_ROCKCHIP=y&quot; $TOP_DIR/kernel/.config || true)</span><br><span class="line">	WIFI_RFKILL=$(grep &quot;CONFIG_RFKILL=y&quot; $TOP_DIR/kernel/.config || true)</span><br><span class="line">	if [ -z &quot;$WIFI_SDIO&quot; ]; then</span><br><span class="line">		echo &quot;=== WARNNING CONFIG_MMC not set !!! ===&quot;</span><br><span class="line">	fi</span><br><span class="line">	if [ -z &quot;$WIFI_RFKILL&quot; ]; then</span><br><span class="line">		echo &quot;=== WARNNING CONFIG_USB not set !!! ===&quot;</span><br><span class="line">	fi</span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; =~ &quot;U&quot; ]]; then</span><br><span class="line">		if [ -z &quot;$WIFI_USB&quot; ]; then</span><br><span class="line">			echo &quot;=== WARNNING CONFIG_USB not set so ABORT!!! ===&quot;</span><br><span class="line">			exit 0</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line">	echo &quot;kernel config: $WIFI_USB $WIFI_SDIO $WIFI_RFKILL&quot;</span><br><span class="line"></span><br><span class="line">	TARGET_CC=$&#123;CROSS_COMPILE&#125;gcc</span><br><span class="line">	RKWIFIBT=$TOP_DIR/external/rkwifibt</span><br><span class="line">	RKWIFIBT_APP=$TOP_DIR/external/rkwifibt-app</span><br><span class="line">	TARGET_ROOTFS_DIR=$TOP_DIR/buildroot/output/$RK_CFG_BUILDROOT/target</span><br><span class="line"></span><br><span class="line">	echo &quot;========build wifibt info=======&quot;</span><br><span class="line">	echo CROSS_COMPILE=$CROSS_COMPILE</span><br><span class="line">	echo WIFI_CHIP=$WIFI_CHIP</span><br><span class="line">	echo BT_TTY_DEV=$BT_TTY_DEV</span><br><span class="line">	echo TARGET_ROOTFS_DIR=$TARGET_ROOTFS_DIR</span><br><span class="line">	echo BUILDROOT_GCC=$BUILDROOT_GCC</span><br><span class="line">	echo BUILDROOT_SYSROOT=$BUILDROOT_SYSROOT</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; =~ &quot;ALL_AP&quot; ]];then</span><br><span class="line">		echo &quot;building bcmdhd sdio&quot;</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/bcmdhd CONFIG_BCMDHD=m CONFIG_BCMDHD_SDIO=y CONFIG_BCMDHD_PCIE=</span></span><br><span class="line">		if [ -n &quot;$WIFI_PCIE&quot; ]; then</span><br><span class="line">			echo &quot;building bcmdhd pcie&quot;</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/bcmdhd CONFIG_BCMDHD=m CONFIG_BCMDHD_PCIE=y CONFIG_BCMDHD_SDIO=</span></span><br><span class="line">		fi</span><br><span class="line">		if [ -n &quot;$WIFI_USB&quot; ]; then</span><br><span class="line">			echo &quot;building rtl8188fu usb&quot;</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8188fu modules</span></span><br><span class="line">		fi</span><br><span class="line">		echo &quot;building rtl8189fs sdio&quot;</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8189fs modules</span></span><br><span class="line">		echo &quot;building rtl8723ds sdio&quot;</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8723ds modules</span></span><br><span class="line">		echo &quot;building rtl8821cs sdio&quot;</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8821cs modules</span></span><br><span class="line">		echo &quot;building rtl8822cs sdio&quot;</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8822cs modules</span></span><br><span class="line">		echo &quot;building rtl8852bs sdio&quot;</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8852bs modules DRV_PATH=<span class="variable">$RKWIFIBT</span>/drivers/rtl8852bs</span></span><br><span class="line">		if [ -n &quot;$WIFI_PCIE&quot; ]; then</span><br><span class="line">			echo &quot;building rtl8852be pcie&quot;</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8852be modules DRV_PATH=<span class="variable">$RKWIFIBT</span>/drivers/rtl8852be</span></span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; =~ &quot;ALL_CY&quot; ]];then</span><br><span class="line">		echo &quot;building CYW4354&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/chips/CYW4354_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">		echo &quot;building CYW4373&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/chips/CYW4373_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">		echo &quot;building CYW43438&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/chips/CYW43438_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">		echo &quot;building CYW43455&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/chips/CYW43455_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">		echo &quot;building CYW5557X&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/chips/CYW5557X_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">		if [ -n &quot;$WIFI_PCIE&quot; ]; then</span><br><span class="line">			echo &quot;building CYW5557X_PCIE&quot;</span><br><span class="line">			cp $RKWIFIBT/drivers/infineon/chips/CYW5557X_PCIE_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">			echo &quot;building CYW54591_PCIE&quot;</span><br><span class="line">			cp $RKWIFIBT/drivers/infineon/chips/CYW54591_PCIE_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">		fi</span><br><span class="line">		echo &quot;building CYW54591&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/chips/CYW54591_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line"></span><br><span class="line">		if [ -n &quot;$WIFI_USB&quot; ]; then</span><br><span class="line">			echo &quot;building rtl8188fu usb&quot;</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8188fu modules</span></span><br><span class="line">		fi</span><br><span class="line">		echo &quot;building rtl8189fs sdio&quot;</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8189fs modules</span></span><br><span class="line">		echo &quot;building rtl8723ds sdio&quot;</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8723ds modules</span></span><br><span class="line">		echo &quot;building rtl8821cs sdio&quot;</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8821cs modules</span></span><br><span class="line">		echo &quot;building rtl8822cs sdio&quot;</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8822cs modules</span></span><br><span class="line">		echo &quot;building rtl8852bs sdio&quot;</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8852bs modules DRV_PATH=<span class="variable">$RKWIFIBT</span>/drivers/rtl8852bs</span></span><br><span class="line">		if [ -n &quot;$WIFI_PCIE&quot; ]; then</span><br><span class="line">			echo &quot;building rtl8852be pcie&quot;</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8852be modules DRV_PATH=<span class="variable">$RKWIFIBT</span>/drivers/rtl8852be</span></span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; =~ &quot;AP6&quot; ]];then</span><br><span class="line">		if [[ &quot;$WIFI_CHIP&quot; = &quot;AP6275_PCIE&quot; ]];then</span><br><span class="line">			echo &quot;building bcmdhd pcie driver&quot;</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/bcmdhd CONFIG_BCMDHD=m CONFIG_BCMDHD_PCIE=y CONFIG_BCMDHD_SDIO=</span></span><br><span class="line">		else</span><br><span class="line">			echo &quot;building bcmdhd sdio driver&quot;</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/bcmdhd CONFIG_BCMDHD=m CONFIG_BCMDHD_SDIO=y CONFIG_BCMDHD_PCIE=</span></span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;CYW4354&quot; ]];then</span><br><span class="line">		echo &quot;building CYW4354&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/chips/CYW4354_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;CYW4373&quot; ]];then</span><br><span class="line">		echo &quot;building CYW4373&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/chips/CYW4373_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;CYW43438&quot; ]];then</span><br><span class="line">		echo &quot;building CYW43438&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/chips/CYW43438_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;CYW43455&quot; ]];then</span><br><span class="line">		echo &quot;building CYW43455&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/chips/CYW43455_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;CYW5557X&quot; ]];then</span><br><span class="line">		echo &quot;building CYW5557X&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/chips/CYW5557X_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;CYW5557X_PCIE&quot; ]];then</span><br><span class="line">		echo &quot;building CYW5557X_PCIE&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/chips/CYW5557X_PCIE_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;CYW54591&quot; ]];then</span><br><span class="line">		echo &quot;building CYW54591&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/chips/CYW54591_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;CYW54591_PCIE&quot; ]];then</span><br><span class="line">		echo &quot;building CYW54591_PCIE&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/chips/CYW54591_PCIE_Makefile $RKWIFIBT/drivers/infineon/Makefile -r</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/infineon</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;RTL8188FU&quot; ]];then</span><br><span class="line">		echo &quot;building rtl8188fu driver&quot;</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8188fu modules</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;RTL8189FS&quot; ]];then</span><br><span class="line">		echo &quot;building rtl8189fs driver&quot;</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8189fs modules</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;RTL8723DS&quot; ]];then</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8723ds modules</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;RTL8821CS&quot; ]];then</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8821cs modules</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;RTL8822CS&quot; ]];then</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8822cs modules</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;RTL8852BS&quot; ]];then</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8852bs modules</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;RTL8852BE&quot; ]];then</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/rtl8852be modules</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	echo &quot;building brcm_tools&quot;</span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">TARGET_CC -o <span class="variable">$RKWIFIBT</span>/tools/brcm_tools/brcm_patchram_plus1 <span class="variable">$RKWIFIBT</span>/tools/brcm_tools/brcm_patchram_plus1.c</span></span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">TARGET_CC -o <span class="variable">$RKWIFIBT</span>/tools/brcm_tools/dhd_priv <span class="variable">$RKWIFIBT</span>/tools/brcm_tools/dhd_priv.c</span></span><br><span class="line"></span><br><span class="line">	echo &quot;building rk_wifibt_init&quot;</span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">TARGET_CC -o <span class="variable">$RKWIFIBT</span>/src/rk_wifibt_init <span class="variable">$RKWIFIBT</span>/src/rk_wifi_init.c</span></span><br><span class="line"></span><br><span class="line">	echo &quot;building realtek_tools&quot;</span><br><span class="line">	make -C $RKWIFIBT/tools/rtk_hciattach/ CC=$TARGET_CC</span><br><span class="line"></span><br><span class="line">	echo &quot;building realtek bt drivers&quot;</span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/bluetooth_uart_driver</span></span><br><span class="line">	if [ -n &quot;$WIFI_USB&quot; ]; then</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">KMAKE M=<span class="variable">$RKWIFIBT</span>/drivers/bluetooth_usb_driver</span></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [ &quot;$RK_CHIP&quot; = &quot;rv1126_rv1109&quot; ];then</span><br><span class="line">		echo &quot;target is rv1126_rv1109, skip $RKWIFIBT_APP&quot;</span><br><span class="line">	else</span><br><span class="line">		echo &quot;building rkwifibt-app&quot;</span><br><span class="line">		make -C $RKWIFIBT_APP CC=$BUILDROOT_GCC \</span><br><span class="line">			SYSROOT=$BUILDROOT_SYSROOT ARCH=$BUILDROOT_ARCH || true</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	echo &quot;chmod +x tools&quot;</span><br><span class="line">	chmod 755 $RKWIFIBT/tools/brcm_tools/brcm_patchram_plus1</span><br><span class="line">	chmod 755 $RKWIFIBT/tools/brcm_tools/dhd_priv</span><br><span class="line">	chmod 755 $RKWIFIBT/src/rk_wifibt_init</span><br><span class="line">	chmod 755 $RKWIFIBT/tools/rtk_hciattach/rtk_hciattach</span><br><span class="line"></span><br><span class="line">	echo &quot;mkdir rootfs dir&quot; $TARGET_ROOTFS_DIR</span><br><span class="line">	rm -rf $TARGET_ROOTFS_DIR/system/lib/modules/</span><br><span class="line">	rm -rf $TARGET_ROOTFS_DIR/system/etc/firmware/</span><br><span class="line">	rm -rf $TARGET_ROOTFS_DIR/vendor/</span><br><span class="line">	rm -rf $TARGET_ROOTFS_DIR/usr/lib/modules/</span><br><span class="line">	mkdir -p $TARGET_ROOTFS_DIR/usr/lib/modules/</span><br><span class="line">	mkdir -p $TARGET_ROOTFS_DIR/system/lib/modules/</span><br><span class="line">	mkdir -p $TARGET_ROOTFS_DIR/system/etc/firmware/</span><br><span class="line">	mkdir -p $TARGET_ROOTFS_DIR/lib/firmware/rtlbt/</span><br><span class="line"></span><br><span class="line">	echo &quot;create link system-&gt;vendor&quot;</span><br><span class="line">	cd $TARGET_ROOTFS_DIR/</span><br><span class="line">	rm -rf $TARGET_ROOTFS_DIR/vendor</span><br><span class="line">	ln -rsf system $TARGET_ROOTFS_DIR/vendor</span><br><span class="line">	cd -</span><br><span class="line"></span><br><span class="line">	echo &quot;copy tools/sh to rootfs&quot;</span><br><span class="line">	cp $RKWIFIBT/bin/$BUILDROOT_ARCH/* $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">	cp $RKWIFIBT/sh/wifi_start.sh $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">	cp $RKWIFIBT/sh/wifi_ap6xxx_rftest.sh $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">	cp $RKWIFIBT/conf/wpa_supplicant.conf $TARGET_ROOTFS_DIR/etc/</span><br><span class="line">	cp $RKWIFIBT/conf/dnsmasq.conf $TARGET_ROOTFS_DIR/etc/</span><br><span class="line">	cp $RKWIFIBT/tools/brcm_tools/dhd_priv $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">	cp $RKWIFIBT/tools/brcm_tools/brcm_patchram_plus1 $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">	cp $RKWIFIBT/src/rk_wifibt_init $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;ALL_CY&quot; ]];then</span><br><span class="line">		echo &quot;copy infineon/realtek firmware/nvram to rootfs&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/*.ko $TARGET_ROOTFS_DIR/system/lib/modules/ || true</span><br><span class="line">		cp $RKWIFIBT/firmware/infineon/*/* $TARGET_ROOTFS_DIR/system/etc/firmware/ || true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">todo rockchip</span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"><span class="built_in">cp</span> <span class="variable">$RKWIFIBT</span>/firmware/rockchip/* <span class="variable">$TARGET_ROOTFS_DIR</span>/system/etc/firmware/</span></span><br><span class="line">		cp $RKWIFIBT/sh/bt_load_broadcom_firmware $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">		cp $TARGET_ROOTFS_DIR/usr/bin/bt_load_broadcom_firmware $TARGET_ROOTFS_DIR/usr/bin/bt_init.sh</span><br><span class="line">		cp $TARGET_ROOTFS_DIR/usr/bin/bt_load_broadcom_firmware $TARGET_ROOTFS_DIR/usr/bin/bt_pcba_test</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">reatek</span></span><br><span class="line">		cp $RKWIFIBT/firmware/realtek/*/* $TARGET_ROOTFS_DIR/lib/firmware/</span><br><span class="line">		cp $RKWIFIBT/firmware/realtek/*/* $TARGET_ROOTFS_DIR/lib/firmware/rtlbt/</span><br><span class="line">		cp $RKWIFIBT/tools/rtk_hciattach/rtk_hciattach $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">		cp $RKWIFIBT/drivers/bluetooth_uart_driver/hci_uart.ko $TARGET_ROOTFS_DIR/usr/lib/modules/</span><br><span class="line">		if [ -n &quot;$WIFI_USB&quot; ]; then</span><br><span class="line">			cp $RKWIFIBT/drivers/bluetooth_usb_driver/rtk_btusb.ko $TARGET_ROOTFS_DIR/usr/lib/modules/</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		rm -rf $TARGET_ROOTFS_DIR/etc/init.d/S36load_wifi_modules</span><br><span class="line">		cp $RKWIFIBT/S36load_all_wifi_modules $TARGET_ROOTFS_DIR/etc/init.d/</span><br><span class="line">		sed -i &quot;s/BT_TTY_DEV/\/dev\/$&#123;BT_TTY_DEV&#125;/g&quot; $TARGET_ROOTFS_DIR/etc/init.d/S36load_all_wifi_modules</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; = &quot;ALL_AP&quot; ]];then</span><br><span class="line">		echo &quot;copy ap6xxx/realtek firmware/nvram to rootfs&quot;</span><br><span class="line">		cp $RKWIFIBT/drivers/bcmdhd/*.ko $TARGET_ROOTFS_DIR/system/lib/modules/</span><br><span class="line">		cp $RKWIFIBT/firmware/broadcom/*/wifi/* $TARGET_ROOTFS_DIR/system/etc/firmware/ || true</span><br><span class="line">		cp $RKWIFIBT/firmware/broadcom/*/bt/* $TARGET_ROOTFS_DIR/system/etc/firmware/ || true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">todo rockchip</span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"><span class="built_in">cp</span> <span class="variable">$RKWIFIBT</span>/firmware/rockchip/* <span class="variable">$TARGET_ROOTFS_DIR</span>/system/etc/firmware/</span></span><br><span class="line">		cp $RKWIFIBT/sh/bt_load_broadcom_firmware $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">		cp $TARGET_ROOTFS_DIR/usr/bin/bt_load_broadcom_firmware $TARGET_ROOTFS_DIR/usr/bin/bt_init.sh</span><br><span class="line">		cp $TARGET_ROOTFS_DIR/usr/bin/bt_load_broadcom_firmware $TARGET_ROOTFS_DIR/usr/bin/bt_pcba_test</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">reatek</span></span><br><span class="line">		cp -rf $RKWIFIBT/firmware/realtek/*/* $TARGET_ROOTFS_DIR/lib/firmware/</span><br><span class="line">		cp -rf $RKWIFIBT/firmware/realtek/*/* $TARGET_ROOTFS_DIR/lib/firmware/rtlbt/</span><br><span class="line">		cp $RKWIFIBT/tools/rtk_hciattach/rtk_hciattach $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">		cp $RKWIFIBT/drivers/bluetooth_uart_driver/hci_uart.ko $TARGET_ROOTFS_DIR/usr/lib/modules/</span><br><span class="line">		if [ -n &quot;$WIFI_USB&quot; ]; then</span><br><span class="line">			cp $RKWIFIBT/drivers/bluetooth_usb_driver/rtk_btusb.ko $TARGET_ROOTFS_DIR/usr/lib/modules/</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		rm -rf $TARGET_ROOTFS_DIR/etc/init.d/S36load_wifi_modules</span><br><span class="line">		cp $RKWIFIBT/S36load_all_wifi_modules $TARGET_ROOTFS_DIR/etc/init.d/</span><br><span class="line">		sed -i &quot;s/BT_TTY_DEV/\/dev\/$&#123;BT_TTY_DEV&#125;/g&quot; $TARGET_ROOTFS_DIR/etc/init.d/S36load_all_wifi_modules</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; =~ &quot;RTL&quot; ]];then</span><br><span class="line">		echo &quot;Copy RTL file to rootfs&quot;</span><br><span class="line">		if [ -d &quot;$RKWIFIBT/firmware/realtek/$WIFI_CHIP&quot; ]; then</span><br><span class="line">			cp $RKWIFIBT/firmware/realtek/$WIFI_CHIP/* $TARGET_ROOTFS_DIR/lib/firmware/rtlbt/</span><br><span class="line">			cp $RKWIFIBT/firmware/realtek/$WIFI_CHIP/* $TARGET_ROOTFS_DIR/lib/firmware/</span><br><span class="line">		else</span><br><span class="line">			echo &quot;INFO: $WIFI_CHIP isn&#x27;t bluetooth?&quot;</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		WIFI_KO_DIR=$(echo $WIFI_CHIP | tr &#x27;[A-Z]&#x27; &#x27;[a-z]&#x27;)</span><br><span class="line"></span><br><span class="line">		cp $RKWIFIBT/drivers/$WIFI_KO_DIR/*.ko $TARGET_ROOTFS_DIR/system/lib/modules/</span><br><span class="line"></span><br><span class="line">		cp $RKWIFIBT/sh/bt_load_rtk_firmware $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">		sed -i &quot;s/BT_TTY_DEV/\/dev\/$&#123;BT_TTY_DEV&#125;/g&quot; $TARGET_ROOTFS_DIR/usr/bin/bt_load_rtk_firmware</span><br><span class="line">		if [ -n &quot;$WIFI_USB&quot; ]; then</span><br><span class="line">			cp $RKWIFIBT/drivers/bluetooth_usb_driver/rtk_btusb.ko $TARGET_ROOTFS_DIR/usr/lib/modules/</span><br><span class="line">			sed -i &quot;s/BT_DRV/rtk_btusb/g&quot; $TARGET_ROOTFS_DIR/usr/bin/bt_load_rtk_firmware</span><br><span class="line">		else</span><br><span class="line">			cp $RKWIFIBT/drivers/bluetooth_uart_driver/hci_uart.ko $TARGET_ROOTFS_DIR/usr/lib/modules/</span><br><span class="line">			sed -i &quot;s/BT_DRV/hci_uart/g&quot; $TARGET_ROOTFS_DIR/usr/bin/bt_load_rtk_firmware</span><br><span class="line">		fi</span><br><span class="line">		cp $TARGET_ROOTFS_DIR/usr/bin/bt_load_rtk_firmware $TARGET_ROOTFS_DIR/usr/bin/bt_init.sh</span><br><span class="line">		cp $TARGET_ROOTFS_DIR/usr/bin/bt_load_rtk_firmware $TARGET_ROOTFS_DIR/usr/bin/bt_pcba_test</span><br><span class="line">		cp $RKWIFIBT/tools/rtk_hciattach/rtk_hciattach $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">		rm -rf $TARGET_ROOTFS_DIR/etc/init.d/S36load_all_wifi_modules</span><br><span class="line">		cp $RKWIFIBT/S36load_wifi_modules $TARGET_ROOTFS_DIR/etc/init.d/</span><br><span class="line">		sed -i &quot;s/WIFI_KO/\/system\/lib\/modules\/$WIFI_CHIP.ko/g&quot; $TARGET_ROOTFS_DIR/etc/init.d/S36load_wifi_modules</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; =~ &quot;CYW&quot; ]];then</span><br><span class="line">		echo &quot;Copy CYW file to rootfs&quot;</span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">tools</span></span><br><span class="line">		cp $RKWIFIBT/tools/brcm_tools/dhd_priv $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">		cp $RKWIFIBT/tools/brcm_tools/brcm_patchram_plus1 $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">firmware</span></span><br><span class="line">		cp $RKWIFIBT/firmware/infineon/$WIFI_CHIP/* $TARGET_ROOTFS_DIR/system/etc/firmware/</span><br><span class="line">		cp $RKWIFIBT/drivers/infineon/*.ko $TARGET_ROOTFS_DIR/system/lib/modules/</span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">bt</span></span><br><span class="line">		cp $RKWIFIBT/sh/bt_load_broadcom_firmware $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">		sed -i &quot;s/BT_TTY_DEV/\/dev\/$&#123;BT_TTY_DEV&#125;/g&quot; $TARGET_ROOTFS_DIR/usr/bin/bt_load_broadcom_firmware</span><br><span class="line">		sed -i &quot;s/BTFIRMWARE_PATH/\/system\/etc\/firmware\//g&quot; $TARGET_ROOTFS_DIR/usr/bin/bt_load_broadcom_firmware</span><br><span class="line">		cp $TARGET_ROOTFS_DIR/usr/bin/bt_load_broadcom_firmware $TARGET_ROOTFS_DIR/usr/bin/bt_init.sh</span><br><span class="line">		cp $TARGET_ROOTFS_DIR/usr/bin/bt_load_broadcom_firmware $TARGET_ROOTFS_DIR/usr/bin/bt_pcba_test</span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">wifi</span></span><br><span class="line">		rm -rf $TARGET_ROOTFS_DIR/etc/init.d/S36load_all_wifi_modules</span><br><span class="line">		cp $RKWIFIBT/S36load_wifi_modules $TARGET_ROOTFS_DIR/etc/init.d/</span><br><span class="line">		sed -i &quot;s/WIFI_KO/\/system\/lib\/modules\/$WIFI_CHIP.ko/g&quot; $TARGET_ROOTFS_DIR/etc/init.d/S36load_wifi_modules</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$WIFI_CHIP&quot; =~ &quot;AP6&quot; ]];then</span><br><span class="line">		echo &quot;Copy AP file to rootfs&quot;</span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">tools</span></span><br><span class="line">		cp $RKWIFIBT/tools/brcm_tools/dhd_priv $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">		cp $RKWIFIBT/tools/brcm_tools/brcm_patchram_plus1 $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">firmware</span></span><br><span class="line">		cp $RKWIFIBT/firmware/broadcom/$WIFI_CHIP/wifi/* $TARGET_ROOTFS_DIR/system/etc/firmware/</span><br><span class="line">		cp $RKWIFIBT/firmware/broadcom/$WIFI_CHIP/bt/* $TARGET_ROOTFS_DIR/system/etc/firmware/</span><br><span class="line">		cp $RKWIFIBT/drivers/bcmdhd/*.ko $TARGET_ROOTFS_DIR/system/lib/modules/</span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">bt</span></span><br><span class="line">		cp $RKWIFIBT/sh/bt_load_broadcom_firmware $TARGET_ROOTFS_DIR/usr/bin/</span><br><span class="line">		sed -i &quot;s/BT_TTY_DEV/\/dev\/$&#123;BT_TTY_DEV&#125;/g&quot; $TARGET_ROOTFS_DIR/usr/bin/bt_load_broadcom_firmware</span><br><span class="line">		sed -i &quot;s/BTFIRMWARE_PATH/\/system\/etc\/firmware\//g&quot; $TARGET_ROOTFS_DIR/usr/bin/bt_load_broadcom_firmware</span><br><span class="line">		cp $TARGET_ROOTFS_DIR/usr/bin/bt_load_broadcom_firmware $TARGET_ROOTFS_DIR/usr/bin/bt_init.sh</span><br><span class="line">		cp $TARGET_ROOTFS_DIR/usr/bin/bt_load_broadcom_firmware $TARGET_ROOTFS_DIR/usr/bin/bt_pcba_test</span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">wifi</span></span><br><span class="line">		rm -rf $TARGET_ROOTFS_DIR/etc/init.d/S36load_all_wifi_modules</span><br><span class="line">		cp $RKWIFIBT/S36load_wifi_modules $TARGET_ROOTFS_DIR/etc/init.d/</span><br><span class="line">		if [[ &quot;$WIFI_CHIP&quot; =~ &quot;AP&quot; ]];then</span><br><span class="line">			sed -i &quot;s/WIFI_KO/\/system\/lib\/modules\/bcmdhd.ko/g&quot; $TARGET_ROOTFS_DIR/etc/init.d/S36load_wifi_modules</span><br><span class="line">		else</span><br><span class="line">			sed -i &quot;s/WIFI_KO/\/system\/lib\/modules\/bcmdhd_pcie.ko/g&quot; $TARGET_ROOTFS_DIR/etc/init.d/S36load_wifi_modules</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line">	finish_build</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">exit</span> 0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建内核模块</span></span><br><span class="line">build_modules()</span><br><span class="line">&#123;</span><br><span class="line">	check_config RK_KERNEL_DEFCONFIG || return 0</span><br><span class="line"></span><br><span class="line">	echo &quot;============Start building kernel modules============&quot;</span><br><span class="line">	echo &quot;TARGET_KERNEL_ARCH   =$RK_KERNEL_ARCH&quot;</span><br><span class="line">	echo &quot;TARGET_KERNEL_CONFIG =$RK_KERNEL_DEFCONFIG&quot;</span><br><span class="line">	echo &quot;TARGET_KERNEL_CONFIG_FRAGMENT =$RK_KERNEL_DEFCONFIG_FRAGMENT&quot;</span><br><span class="line">	echo &quot;==================================================&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">设置交叉编译工具链</span></span><br><span class="line">	setup_cross_compile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">使用指定的内核配置和片段进行构建</span></span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">KMAKE <span class="variable">$RK_KERNEL_DEFCONFIG</span> <span class="variable">$RK_KERNEL_DEFCONFIG_FRAGMENT</span></span></span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">KMAKE modules</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">完成构建</span></span><br><span class="line">	finish_build</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建 Buildroot 根文件系统</span></span><br><span class="line">build_buildroot()</span><br><span class="line">&#123;</span><br><span class="line">	check_config RK_CFG_BUILDROOT || return 0</span><br><span class="line"></span><br><span class="line">	ROOTFS_DIR=$1</span><br><span class="line"></span><br><span class="line">	echo &quot;==========Start building buildroot rootfs ==========&quot;</span><br><span class="line">	echo &quot;TARGET_BUILDROOT_CONFIG=$RK_CFG_BUILDROOT&quot;</span><br><span class="line">	echo &quot;=========================================&quot;</span><br><span class="line"></span><br><span class="line">	DST_DIR=.buildroot</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">使用 mk-buildroot.sh 脚本构建 Buildroot 根文件系统</span></span><br><span class="line">	/usr/bin/time -f &quot;you take %E to build buildroot&quot; \</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">COMMON_DIR/mk-buildroot.sh <span class="variable">$RK_CFG_BUILDROOT</span> <span class="variable">$DST_DIR</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">删除旧的根文件系统目录并创建新的符号链接</span></span><br><span class="line">	rm -rf $ROOTFS_DIR</span><br><span class="line">	ln -rsf $DST_DIR $ROOTFS_DIR</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">完成构建</span></span><br><span class="line">	finish_build</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">kernel_version()</span><br><span class="line">&#123;</span><br><span class="line">	[ -d &quot;$1&quot; ] || return 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">定义内核版本号的关键字</span></span><br><span class="line">	VERSION_KEYS=&quot;VERSION PATCHLEVEL&quot;</span><br><span class="line">	VERSION=&quot;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">遍历关键字，获取内核版本号的各个部分</span></span><br><span class="line">	for k in $VERSION_KEYS; do</span><br><span class="line">		v=$(grep &quot;^$k = &quot; $1/Makefile | cut -d&#x27; &#x27; -f3)</span><br><span class="line">		VERSION=$&#123;VERSION:+$&#123;VERSION&#125;.&#125;$v</span><br><span class="line">	done</span><br><span class="line">	echo $VERSION</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建 Yocto rootfs</span></span><br><span class="line">build_yocto()</span><br><span class="line">&#123;</span><br><span class="line">	check_config RK_YOCTO_MACHINE || return 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">开始构建 Yocto rootfs</span></span><br><span class="line">	echo &quot;=========开始构建 Yocto rootfs=========&quot;</span><br><span class="line">	echo &quot;目标机器：$RK_YOCTO_MACHINE&quot;</span><br><span class="line">	echo &quot;=====================================&quot;</span><br><span class="line"></span><br><span class="line">	KERNEL_VERSION=$(kernel_version kernel/)</span><br><span class="line"></span><br><span class="line">	cd yocto</span><br><span class="line">	ln -rsf $RK_YOCTO_MACHINE.conf build/conf/local.conf</span><br><span class="line">	source oe-init-build-env</span><br><span class="line">	LANG=en_US.UTF-8 LANGUAGE=en_US.en LC_ALL=en_US.UTF-8 \</span><br><span class="line">		bitbake core-image-minimal -r conf/include/rksdk.conf \</span><br><span class="line">		-r conf/include/kernel-$KERNEL_VERSION.conf</span><br><span class="line"></span><br><span class="line">	finish_build</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建 debian rootfs</span></span><br><span class="line">build_debian()</span><br><span class="line">&#123;</span><br><span class="line">	ARCH=$&#123;RK_DEBIAN_ARCH:-$&#123;RK_KERNEL_ARCH&#125;&#125;</span><br><span class="line">	case $ARCH in</span><br><span class="line">		arm|armhf) ARCH=armhf ;;</span><br><span class="line">		*) ARCH=arm64 ;;</span><br><span class="line">	esac</span><br><span class="line"></span><br><span class="line">	echo &quot;=========开始构建 Debian ($ARCH) 根文件系统=========&quot;</span><br><span class="line"></span><br><span class="line">	cd debian</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查是否存在 linaro 版本的 Debian 根文件系统压缩包，如果不存在则执行 mk-base-debian.sh 脚本构建</span></span><br><span class="line">	if [ ! -f linaro-$RK_DEBIAN_VERSION-alip-*.tar.gz ]; then</span><br><span class="line">		RELEASE=$RK_DEBIAN_VERSION TARGET=desktop ARCH=$ARCH ./mk-base-debian.sh</span><br><span class="line">		ln -rsf linaro-$RK_DEBIAN_VERSION-alip-*.tar.gz linaro-$RK_DEBIAN_VERSION-$ARCH.tar.gz</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	VERSION=debug ARCH=$ARCH ./mk-rootfs-$RK_DEBIAN_VERSION.sh</span><br><span class="line">	./mk-image.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">完成构建</span></span><br><span class="line">	finish_build</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译文件系统</span></span><br><span class="line">build_rootfs()</span><br><span class="line">&#123;</span><br><span class="line">	check_config RK_ROOTFS_TYPE || return 0</span><br><span class="line"></span><br><span class="line">	ROOTFS=$&#123;1:-$&#123;RK_ROOTFS_SYSTEM:-buildroot&#125;&#125;</span><br><span class="line">	ROOTFS_IMG=rootfs.$&#123;RK_ROOTFS_TYPE&#125;</span><br><span class="line">	ROOTFS_DIR=.rootfs</span><br><span class="line"></span><br><span class="line">	echo &quot;==========开始构建根文件系统($ROOTFS)，输出到$ROOTFS_DIR==========&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">删除旧的根文件系统目录并创建新的目录</span></span><br><span class="line">	rm -rf $ROOTFS_DIR</span><br><span class="line">	mkdir -p $ROOTFS_DIR</span><br><span class="line"></span><br><span class="line">	case &quot;$ROOTFS&quot; in</span><br><span class="line">		yocto)</span><br><span class="line">			build_yocto</span><br><span class="line">			ln -rsf yocto/build/latest/rootfs.img \</span><br><span class="line">				$ROOTFS_DIR/rootfs.ext4</span><br><span class="line">			;;</span><br><span class="line">		debian)</span><br><span class="line">			build_debian</span><br><span class="line">			ln -rsf debian/linaro-rootfs.img \</span><br><span class="line">				$ROOTFS_DIR/rootfs.ext4</span><br><span class="line">			;;</span><br><span class="line">		buildroot)</span><br><span class="line">			build_buildroot $ROOTFS_DIR</span><br><span class="line">			build_wifibt</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">为 wifibt 重新编译</span></span><br><span class="line">			build_buildroot $ROOTFS_DIR</span><br><span class="line">			;;</span><br><span class="line">		*)</span><br><span class="line">			echo &quot;$ROOTFS 不支持！&quot;</span><br><span class="line">			exit 1</span><br><span class="line">			;;</span><br><span class="line">	esac</span><br><span class="line"></span><br><span class="line">	if [ ! -f &quot;$ROOTFS_DIR/$ROOTFS_IMG&quot; ]; then</span><br><span class="line">		echo &quot;未生成 $ROOTFS_IMG...&quot;</span><br><span class="line">		exit 1</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	ln -rsf $ROOTFS_DIR/$ROOTFS_IMG rockdev/rootfs.img</span><br><span class="line"></span><br><span class="line">	[ ! -f $ROOTFS_DIR/oem.img ] || ln -rsf $ROOTFS_DIR/oem.img rockdev/</span><br><span class="line"></span><br><span class="line">	if [ &quot;$RK_RAMBOOT&quot; ]; then</span><br><span class="line">		/usr/bin/time -f &quot;you take %E to pack ramboot image&quot; \</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">COMMON_DIR/mk-ramdisk.sh rockdev/rootfs.img \</span></span><br><span class="line"><span class="language-bash">			<span class="variable">$ROOTFS_DIR</span>/ramboot.img</span></span><br><span class="line">		ln -rsf $ROOTFS_DIR/ramboot.img rockdev/boot.img</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">用于安全性</span></span><br><span class="line">		cp rockdev/boot.img u-boot/</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [ &quot;$RK_RAMDISK_SECURITY_BOOTUP&quot; = &quot;true&quot; ]; then</span><br><span class="line">		echo &quot;尝试为 $RK_SYSTEM_CHECK_METHOD 构建 init&quot;</span><br><span class="line"></span><br><span class="line">		if [ &quot;$RK_SYSTEM_CHECK_METHOD&quot; = &quot;DM-V&quot; ]; then</span><br><span class="line">			SYSTEM_IMG=rootfs.squashfs</span><br><span class="line">		else</span><br><span class="line">			SYSTEM_IMG=$ROOTFS_IMG</span><br><span class="line">		fi</span><br><span class="line">		if [ ! -f &quot;$ROOTFS_DIR/$SYSTEM_IMG&quot; ]; then</span><br><span class="line">			echo &quot;未生成 $SYSTEM_IMG...&quot;</span><br><span class="line">			exit -1</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">COMMON_DIR/mk-dm.sh <span class="variable">$RK_SYSTEM_CHECK_METHOD</span> \</span></span><br><span class="line"><span class="language-bash">			<span class="variable">$ROOTFS_DIR</span>/<span class="variable">$SYSTEM_IMG</span></span></span><br><span class="line">		ln -rsf $ROOTFS_DIR/security-system.img rockdev/rootfs.img</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">完成构建</span></span><br><span class="line">	finish_build</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build_recovery()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查是否启用了主备份(A/B)模式的SD卡更新</span></span><br><span class="line">	if [ &quot;$RK_UPDATE_SDCARD_ENABLE_FOR_AB&quot; = &quot;true&quot; ] ;then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">如果是启用了主备份(A/B)模式的SD卡更新，则使用相应的恢复配置</span></span><br><span class="line">		RK_CFG_RECOVERY=$RK_UPDATE_SDCARD_CFG_RECOVERY</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查是否存在主备份(A/B)模式的包文件</span></span><br><span class="line">	if [ ! -z &quot;$RK_PACKAGE_FILE_AB&quot; ]; then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">如果存在主备份(A/B)模式的包文件，则直接返回，不进行构建</span></span><br><span class="line">		return 0</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查恢复配置是否已配置</span></span><br><span class="line">	check_config RK_CFG_RECOVERY || return 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">打印构建恢复镜像的提示信息</span></span><br><span class="line">	echo &quot;==========开始构建恢复镜像(buildroot)==========&quot;</span><br><span class="line">	echo &quot;TARGET_RECOVERY_CONFIG=$RK_CFG_RECOVERY&quot;</span><br><span class="line">	echo &quot;========================================&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">设置目标目录</span></span><br><span class="line">	DST_DIR=.recovery</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">构建恢复镜像(buildroot)</span></span><br><span class="line">	/usr/bin/time -f &quot;用时 %E 构建恢复镜像(buildroot)&quot; \</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">COMMON_DIR/mk-buildroot.sh <span class="variable">$RK_CFG_RECOVERY</span> <span class="variable">$DST_DIR</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">打包恢复镜像</span></span><br><span class="line">	/usr/bin/time -f &quot;用时 %E 打包恢复镜像&quot; \</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">COMMON_DIR/mk-ramdisk.sh <span class="variable">$DST_DIR</span>/rootfs.cpio.gz \</span></span><br><span class="line"><span class="language-bash">		<span class="variable">$DST_DIR</span>/recovery.img \</span></span><br><span class="line"><span class="language-bash">		<span class="string">&quot;<span class="variable">$CHIP_DIR</span>/<span class="variable">$RK_RECOVERY_FIT_ITS</span>&quot;</span></span></span><br><span class="line">	ln -rsf $DST_DIR/recovery.img rockdev/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">为了安全起见，将恢复镜像复制到u-boot目录</span></span><br><span class="line">	cp rockdev/recovery.img u-boot/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">完成构建</span></span><br><span class="line">	finish_build</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建PCBA</span></span><br><span class="line">build_pcba()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查PCBA配置是否已配置</span></span><br><span class="line">	check_config RK_CFG_PCBA || return 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">打印构建PCBA镜像的提示信息</span></span><br><span class="line">	echo &quot;==========开始构建PCBA镜像(buildroot)==========&quot;</span><br><span class="line">	echo &quot;TARGET_PCBA_CONFIG=$RK_CFG_PCBA&quot;</span><br><span class="line">	echo &quot;====================================&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">设置目标目录</span></span><br><span class="line">	DST_DIR=.pcba</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">构建PCBA镜像(buildroot)</span></span><br><span class="line">	/usr/bin/time -f &quot;用时 %E 构建PCBA镜像(buildroot)&quot; \</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">COMMON_DIR/mk-buildroot.sh <span class="variable">$RK_CFG_PCBA</span> <span class="variable">$DST_DIR</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">打包PCBA镜像</span></span><br><span class="line">	/usr/bin/time -f &quot;用时 %E 打包PCBA镜像&quot; \</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">COMMON_DIR/mk-ramdisk.sh <span class="variable">$DST_DIR</span>/rootfs.cpio.gz \</span></span><br><span class="line"><span class="language-bash">		<span class="variable">$DST_DIR</span>/pcba.img</span></span><br><span class="line">	ln -rsf $DST_DIR/pcba.img rockdev/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">完成构建</span></span><br><span class="line">	finish_build</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOT_FIXED_CONFIGS=&quot;</span><br><span class="line">	CONFIG_BLK_DEV_DM                # 启用设备映射（Device Mapper）</span><br><span class="line">	CONFIG_DM_CRYPT                  # 启用设备映射加密模块</span><br><span class="line">	CONFIG_BLK_DEV_CRYPTOLOOP        # 启用块设备加密循环设备</span><br><span class="line">	CONFIG_DM_VERITY                 # 启用设备映射完整性校验模块&quot;</span><br><span class="line"></span><br><span class="line">BOOT_OPTEE_FIXED_CONFIGS=&quot;</span><br><span class="line">	CONFIG_TEE                       # 启用可信执行环境（Trusted Execution Environment）</span><br><span class="line">	CONFIG_OPTEE                     # 启用OP-TEE（Open Portable Trusted Execution Environment）&quot;</span><br><span class="line"></span><br><span class="line">UBOOT_FIXED_CONFIGS=&quot;</span><br><span class="line">	CONFIG_FIT_SIGNATURE             # 启用FIT（Flattened Image Tree）签名支持</span><br><span class="line">	CONFIG_SPL_FIT_SIGNATURE         # 启用SPL（Secondary Program Loader）FIT签名支持&quot;</span><br><span class="line"></span><br><span class="line">UBOOT_AB_FIXED_CONFIGS=&quot;</span><br><span class="line">	CONFIG_ANDROID_AB                # 启用Android A/B分区支持&quot;</span><br><span class="line"></span><br><span class="line">ROOTFS_UPDATE_ENGINEBIN_CONFIGS=&quot;</span><br><span class="line">	BR2_PACKAGE_RECOVERY             # 启用恢复系统包</span><br><span class="line">	BR2_PACKAGE_RECOVERY_UPDATEENGINEBIN&quot;  # 启用恢复系统更新引擎二进制文件</span><br><span class="line"></span><br><span class="line">ROOTFS_AB_FIXED_CONFIGS=&quot;</span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">ROOTFS_UPDATE_ENGINEBIN_CONFIGS     <span class="comment"># 包括ROOTFS_UPDATE_ENGINEBIN_CONFIGS中的配置</span></span></span><br><span class="line">	BR2_PACKAGE_RECOVERY_BOOTCONTROL&quot;    # 启用恢复系统引导控制</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查默认配置</span></span><br><span class="line">defconfig_check()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">1. defconfig 2. fixed config</span></span><br><span class="line">	echo debug-$1   # 调试输出，显示传入的参数1</span><br><span class="line">	for i in $2   # 遍历参数2中的每个配置选项</span><br><span class="line">	do</span><br><span class="line">		echo &quot;查找 $i&quot;   # 输出正在查找的配置选项</span><br><span class="line">		result=$(cat $1 | grep &quot;$&#123;i&#125;=y&quot; -w || echo &quot;未找到&quot;)   # 在配置文件中查找配置选项，将结果存储在变量result中</span><br><span class="line">		if [ &quot;$result&quot; = &quot;未找到&quot; ]; then   # 如果未找到配置选项</span><br><span class="line">			echo -e &quot;\e[41;1;37m错误：在 $1 中未找到配置项 $&#123;i&#125; \e[0m&quot;   # 输出错误信息，配置项未找到</span><br><span class="line">			echo &quot;请确保您的配置文件包含以下列表中的选项&quot;</span><br><span class="line">			echo &quot;---------------------------------------&quot;</span><br><span class="line">			echo &quot;$2&quot;   # 输出参数2中的配置选项列表</span><br><span class="line">			echo &quot;---------------------------------------&quot;</span><br><span class="line">			return -1;   # 返回-1表示检查失败</span><br><span class="line">		fi</span><br><span class="line">	done</span><br><span class="line">	return 0   # 返回0表示检查通过</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从默认配置文件中查找字符串</span></span><br><span class="line">find_string_in_config()</span><br><span class="line">&#123;</span><br><span class="line">	result=$(cat &quot;$2&quot; | grep &quot;$1&quot; || echo &quot;No found&quot;)   # 在文件$2中查找字符串$1，将结果存储在变量result中</span><br><span class="line">	if [ &quot;$result&quot; = &quot;No found&quot; ]; then   # 如果未找到字符串</span><br><span class="line">		echo &quot;Security: No found string $1 in $2&quot;   # 输出错误信息，未找到字符串</span><br><span class="line">		return -1;   # 返回-1表示未找到</span><br><span class="line">	fi</span><br><span class="line">	return 0;   # 返回0表示找到了字符串</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">check_security_condition()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">check security enabled</span></span><br><span class="line">	test -z &quot;$RK_SYSTEM_CHECK_METHOD&quot; &amp;&amp; return 0</span><br><span class="line"></span><br><span class="line">	if [ ! -d u-boot/keys ]; then</span><br><span class="line">		echo &quot;ERROR: No root keys(u-boot/keys) found in u-boot&quot;</span><br><span class="line">		echo &quot;       Create it by ./build.sh createkeys or move your key to it&quot;</span><br><span class="line">		return -1</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [ &quot;$RK_SYSTEM_CHECK_METHOD&quot; = &quot;DM-E&quot; ]; then</span><br><span class="line">		if [ ! -f u-boot/keys/root_passwd ]; then</span><br><span class="line">			echo &quot;ERROR: No root passwd(u-boot/keys/root_passwd) found in u-boot&quot;</span><br><span class="line">			echo &quot;       echo your root key for sudo to u-boot/keys/root_passwd&quot;</span><br><span class="line">			echo &quot;       some operations need supper user permission when create encrypt image&quot;</span><br><span class="line">			return -1</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		if [ ! -f u-boot/keys/system_enc_key ]; then</span><br><span class="line">			echo &quot;ERROR: No enc key(u-boot/keys/system_enc_key) found in u-boot&quot;</span><br><span class="line">			echo &quot;       Create it by ./build.sh createkeys or move your key to it&quot;</span><br><span class="line">			return -1</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		BOOT_FIXED_CONFIGS=&quot;$&#123;BOOT_FIXED_CONFIGS&#125;</span><br><span class="line">				    $&#123;BOOT_OPTEE_FIXED_CONFIGS&#125;&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	echo &quot;check kernel defconfig&quot;</span><br><span class="line">	defconfig_check \</span><br><span class="line"><span class="meta prompt_">		kernel/arch/$</span><span class="language-bash">RK_KERNEL_ARCH/configs/<span class="variable">$RK_KERNEL_DEFCONFIG</span> \</span></span><br><span class="line"><span class="language-bash">		<span class="string">&quot;<span class="variable">$BOOT_FIXED_CONFIGS</span>&quot;</span></span></span><br><span class="line"></span><br><span class="line">	if [ ! -z &quot;$&#123;RK_PACKAGE_FILE_AB&#125;&quot; ]; then</span><br><span class="line">		UBOOT_FIXED_CONFIGS=&quot;$&#123;UBOOT_FIXED_CONFIGS&#125;</span><br><span class="line">				     $&#123;UBOOT_AB_FIXED_CONFIGS&#125;&quot;</span><br><span class="line"></span><br><span class="line">		defconfig_check buildroot/configs/$&#123;RK_CFG_BUILDROOT&#125;_defconfig &quot;$ROOTFS_AB_FIXED_CONFIGS&quot;</span><br><span class="line">	fi</span><br><span class="line">	echo &quot;check uboot defconfig&quot;</span><br><span class="line">	defconfig_check u-boot/configs/$&#123;RK_UBOOT_DEFCONFIG&#125;_defconfig &quot;$UBOOT_FIXED_CONFIGS&quot;</span><br><span class="line"></span><br><span class="line">	if [ &quot;$RK_SYSTEM_CHECK_METHOD&quot; = &quot;DM-E&quot; ]; then</span><br><span class="line">		echo &quot;check ramdisk defconfig&quot;</span><br><span class="line">		defconfig_check buildroot/configs/$&#123;RK_CFG_BUILDROOT&#125;_defconfig &quot;$ROOTFS_UPDATE_ENGINEBIN_CONFIGS&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	echo &quot;check rootfs defconfig&quot;</span><br><span class="line">	find_string_in_config &quot;BR2_ROOTFS_OVERLAY=\&quot;.*board/rockchip/common/security-system-overlay.*&quot; &quot;buildroot/configs/$&#123;RK_CFG_BUILDROOT&#125;_defconfig&quot;</span><br><span class="line"></span><br><span class="line">	echo &quot;Security: finish check&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">check_security_condition函数用于检查安全条件</span></span><br><span class="line">check_security_condition()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查是否启用了安全选项，如果未启用则直接返回0</span></span><br><span class="line">	test -z &quot;$RK_SYSTEM_CHECK_METHOD&quot; &amp;&amp; return 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查是否存在u-boot/keys目录，如果不存在则输出错误信息并返回-1</span></span><br><span class="line">	if [ ! -d u-boot/keys ]; then</span><br><span class="line">		echo &quot;错误：在u-boot中未找到根密钥（u-boot/keys）&quot;</span><br><span class="line">		echo &quot;      请通过./build.sh createkeys创建或将您的密钥移动到该目录中&quot;</span><br><span class="line">		return -1</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果RK_SYSTEM_CHECK_METHOD的值为DM-E，则继续进行下一步检查</span></span><br><span class="line">	if [ &quot;$RK_SYSTEM_CHECK_METHOD&quot; = &quot;DM-E&quot; ]; then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">检查是否存在u-boot/keys/root_passwd文件，如果不存在则输出错误信息并返回-1</span></span><br><span class="line">		if [ ! -f u-boot/keys/root_passwd ]; then</span><br><span class="line">			echo &quot;错误：在u-boot中未找到根口令（u-boot/keys/root_passwd）&quot;</span><br><span class="line">			echo &quot;      请将您的根密钥（用于sudo）echo到u-boot/keys/root_passwd中&quot;</span><br><span class="line">			echo &quot;      创建加密镜像时某些操作需要超级用户权限&quot;</span><br><span class="line">			return -1</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">检查是否存在u-boot/keys/system_enc_key文件，如果不存在则输出错误信息并返回-1</span></span><br><span class="line">		if [ ! -f u-boot/keys/system_enc_key ]; then</span><br><span class="line">			echo &quot;错误：在u-boot中未找到加密密钥（u-boot/keys/system_enc_key）&quot;</span><br><span class="line">			echo &quot;      请通过./build.sh createkeys创建或将您的密钥移动到该目录中&quot;</span><br><span class="line">			return -1</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">将BOOT_OPTEE_FIXED_CONFIGS添加到BOOT_FIXED_CONFIGS变量中</span></span><br><span class="line">		BOOT_FIXED_CONFIGS=&quot;$&#123;BOOT_FIXED_CONFIGS&#125;</span><br><span class="line">				    $&#123;BOOT_OPTEE_FIXED_CONFIGS&#125;&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	echo &quot;检查内核配置&quot;</span><br><span class="line">	defconfig_check \</span><br><span class="line"><span class="meta prompt_">		kernel/arch/$</span><span class="language-bash">RK_KERNEL_ARCH/configs/<span class="variable">$RK_KERNEL_DEFCONFIG</span> \</span></span><br><span class="line"><span class="language-bash">		<span class="string">&quot;<span class="variable">$BOOT_FIXED_CONFIGS</span>&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果RK_PACKAGE_FILE_AB不为空，则进行下一步检查</span></span><br><span class="line">	if [ ! -z &quot;$&#123;RK_PACKAGE_FILE_AB&#125;&quot; ]; then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">将UBOOT_AB_FIXED_CONFIGS添加到UBOOT_FIXED_CONFIGS变量中</span></span><br><span class="line">		UBOOT_FIXED_CONFIGS=&quot;$&#123;UBOOT_FIXED_CONFIGS&#125;</span><br><span class="line">				     $&#123;UBOOT_AB_FIXED_CONFIGS&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">检查buildroot/configs/<span class="variable">$&#123;RK_CFG_BUILDROOT&#125;</span>_defconfig文件是否存在</span></span><br><span class="line">		defconfig_check buildroot/configs/$&#123;RK_CFG_BUILDROOT&#125;_defconfig &quot;$ROOTFS_AB_FIXED_CONFIGS&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	echo &quot;检查uboot配置&quot;</span><br><span class="line">	defconfig_check u-boot/configs/$&#123;RK_UBOOT_DEFCONFIG&#125;_defconfig &quot;$UBOOT_FIXED_CONFIGS&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果RK_SYSTEM_CHECK_METHOD的值为DM-E，则继续进行下一步检查</span></span><br><span class="line">	if [ &quot;$RK_SYSTEM_CHECK_METHOD&quot; = &quot;DM-E&quot; ]; then</span><br><span class="line">		echo &quot;检查ramdisk配置&quot;</span><br><span class="line">		defconfig_check buildroot/configs/$&#123;RK_CFG_BUILDROOT&#125;_defconfig &quot;$ROOTFS_UPDATE_ENGINEBIN_CONFIGS&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	echo &quot;检查rootfs配置&quot;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">在buildroot/configs/<span class="variable">$&#123;RK_CFG_BUILDROOT&#125;</span>_defconfig文件中查找字符串<span class="string">&quot;BR2_ROOTFS_OVERLAY=\&quot;.*board/rockchip/common/security-system-overlay.*&quot;</span></span></span><br><span class="line">	find_string_in_config &quot;BR2_ROOTFS_OVERLAY=\&quot;.*board/rockchip/common/security-system-overlay.*&quot; &quot;buildroot/configs/$&#123;RK_CFG_BUILDROOT&#125;_defconfig&quot;</span><br><span class="line"></span><br><span class="line">	echo &quot;安全检查完成&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清理</span></span><br><span class="line">build_cleanall()</span><br><span class="line">&#123;</span><br><span class="line">	echo &quot;clean uboot, kernel, rootfs, recovery&quot;   # 执行清理操作，清理u-boot、kernel、rootfs和recovery相关的内容</span><br><span class="line"></span><br><span class="line">	make -C u-boot distclean   # 在u-boot目录中执行distclean命令，清理构建过程产生的临时文件和目标文件</span><br><span class="line">	make -C kernel distclean   # 在kernel目录中执行distclean命令，清理构建过程产生的临时文件和目标文件</span><br><span class="line">	rm -rf buildroot/output   # 删除buildroot/output目录，清理构建rootfs过程中生成的文件</span><br><span class="line">	rm -rf yocto/build/tmp yocto/build/*cache   # 删除yocto/build/tmp目录和所有yocto/build/*cache目录，清理构建yocto过程中生成的临时文件和缓存文件</span><br><span class="line">	rm -rf debian/binary   # 删除debian/binary目录，清理构建debian包时生成的二进制文件</span><br><span class="line"></span><br><span class="line">	finish_build   # 调用finish_build函数，进行后续的清理和处理操作</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build_firmware()</span><br><span class="line">&#123;</span><br><span class="line">	./mkfirmware.sh $BOARD_CONFIG   # 运行mkfirmware.sh脚本，传递$BOARD_CONFIG参数，用于构建固件</span><br><span class="line"></span><br><span class="line">	finish_build   # 调用finish_build函数，进行后续的清理和处理操作</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build_updateimg()</span><br><span class="line">&#123;</span><br><span class="line">	IMAGE_PATH=$TOP_DIR/rockdev   # 设置IMAGE_PATH变量为$TOP_DIR/rockdev，用于存储生成的镜像文件路径</span><br><span class="line">	PACK_TOOL_DIR=$TOP_DIR/tools/linux/Linux_Pack_Firmware   # 设置PACK_TOOL_DIR变量为$TOP_DIR/tools/linux/Linux_Pack_Firmware，用于存储打包工具的路径</span><br><span class="line"></span><br><span class="line">	cd $PACK_TOOL_DIR/rockdev   # 进入$PACK_TOOL_DIR/rockdev目录</span><br><span class="line"></span><br><span class="line">	if [ -f &quot;$RK_PACKAGE_FILE_AB&quot; ]; then   # 如果存在$RK_PACKAGE_FILE_AB文件</span><br><span class="line">		build_sdcard_package   # 调用build_sdcard_package函数，构建SD卡包</span><br><span class="line">		build_otapackage   # 调用build_otapackage函数，构建OTA包</span><br><span class="line"></span><br><span class="line">		cd $PACK_TOOL_DIR/rockdev   # 返回$PACK_TOOL_DIR/rockdev目录</span><br><span class="line">		echo &quot;Make Linux a/b update_ab.img.&quot;</span><br><span class="line">		source_package_file_name=`ls -lh package-file | awk -F &#x27; &#x27; &#x27;&#123;print $NF&#125;&#x27;`   # 获取package-file的文件名</span><br><span class="line">		ln -fs &quot;$RK_PACKAGE_FILE_AB&quot; package-file   # 创建软链接，将$RK_PACKAGE_FILE_AB链接到package-file</span><br><span class="line">		./mkupdate.sh   # 运行mkupdate.sh脚本，生成update.img</span><br><span class="line">		mv update.img $IMAGE_PATH/update_ab.img   # 将生成的update.img移动到$IMAGE_PATH/update_ab.img</span><br><span class="line">		ln -fs $source_package_file_name package-file   # 创建软链接，将source_package_file_name链接到package-file</span><br><span class="line">	else</span><br><span class="line">		echo &quot;Make update.img&quot;</span><br><span class="line"></span><br><span class="line">		if [ -f &quot;$RK_PACKAGE_FILE&quot; ]; then   # 如果存在$RK_PACKAGE_FILE文件</span><br><span class="line">			source_package_file_name=`ls -lh package-file | awk -F &#x27; &#x27; &#x27;&#123;print $NF&#125;&#x27;`   # 获取package-file的文件名</span><br><span class="line">			ln -fs &quot;$RK_PACKAGE_FILE&quot; package-file   # 创建软链接，将$RK_PACKAGE_FILE链接到package-file</span><br><span class="line">			./mkupdate.sh   # 运行mkupdate.sh脚本，生成update.img</span><br><span class="line">			ln -fs $source_package_file_name package-file   # 创建软链接，将source_package_file_name链接到package-file</span><br><span class="line">		else</span><br><span class="line">			./mkupdate.sh   # 运行mkupdate.sh脚本，生成update.img</span><br><span class="line">		fi</span><br><span class="line">		mv update.img $IMAGE_PATH   # 将生成的update.img移动到$IMAGE_PATH</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	finish_build   # 调用finish_build函数，进行后续的清理和处理操作</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译ota的包</span></span><br><span class="line">build_otapackage()</span><br><span class="line">&#123;</span><br><span class="line">	IMAGE_PATH=$TOP_DIR/rockdev   # 设置IMAGE_PATH变量为$TOP_DIR/rockdev，用于存储生成的镜像文件路径</span><br><span class="line">	PACK_TOOL_DIR=$TOP_DIR/tools/linux/Linux_Pack_Firmware   # 设置PACK_TOOL_DIR变量为$TOP_DIR/tools/linux/Linux_Pack_Firmware，用于存储打包工具的路径</span><br><span class="line"></span><br><span class="line">	echo &quot;Make ota ab update_ota.img&quot;</span><br><span class="line">	cd $PACK_TOOL_DIR/rockdev   # 进入$PACK_TOOL_DIR/rockdev目录</span><br><span class="line"></span><br><span class="line">	if [ -f &quot;$RK_PACKAGE_FILE_OTA&quot; ]; then   # 如果存在$RK_PACKAGE_FILE_OTA文件</span><br><span class="line">		source_package_file_name=`ls -lh $PACK_TOOL_DIR/rockdev/package-file | awk -F &#x27; &#x27; &#x27;&#123;print $NF&#125;&#x27;`   # 获取package-file的文件名</span><br><span class="line">		ln -fs &quot;$RK_PACKAGE_FILE_OTA&quot; package-file   # 创建软链接，将$RK_PACKAGE_FILE_OTA链接到package-file</span><br><span class="line">		./mkupdate.sh   # 运行mkupdate.sh脚本，生成update.img</span><br><span class="line">		mv update.img $IMAGE_PATH/update_ota.img   # 将生成的update.img移动到$IMAGE_PATH/update_ota.img</span><br><span class="line">		ln -fs $source_package_file_name package-file   # 创建软链接，将source_package_file_name链接到package-file</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	finish_build   # 调用finish_build函数，进行后续的清理和处理操作</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译sd卡镜像</span></span><br><span class="line">build_sdcard_package()</span><br><span class="line">&#123;</span><br><span class="line">	check_config RK_UPDATE_SDCARD_ENABLE_FOR_AB || return 0   # 检查配置项 RK_UPDATE_SDCARD_ENABLE_FOR_AB，如果没有启用则返回0</span><br><span class="line"></span><br><span class="line">	local image_path=$TOP_DIR/rockdev   # 设置image_path变量为$TOP_DIR/rockdev，用于存储生成的镜像文件路径</span><br><span class="line">	local pack_tool_dir=$TOP_DIR/tools/linux/Linux_Pack_Firmware   # 设置pack_tool_dir变量为$TOP_DIR/tools/linux/Linux_Pack_Firmware，用于存储打包工具的路径</span><br><span class="line">	local rk_sdupdate_ab_misc=$&#123;RK_SDUPDATE_AB_MISC:=sdupdate-ab-misc.img&#125;   # 设置rk_sdupdate_ab_misc变量为RK_SDUPDATE_AB_MISC的值（默认为sdupdate-ab-misc.img）</span><br><span class="line">	local rk_parameter_sdupdate=$&#123;RK_PARAMETER_SDUPDATE:=parameter-sdupdate.txt&#125;   # 设置rk_parameter_sdupdate变量为RK_PARAMETER_SDUPDATE的值（默认为parameter-sdupdate.txt）</span><br><span class="line">	local rk_package_file_sdcard_update=$&#123;RK_PACKAGE_FILE_SDCARD_UPDATE:=sdcard-update-package-file&#125;   # 设置rk_package_file_sdcard_update变量为RK_PACKAGE_FILE_SDCARD_UPDATE的值（默认为sdcard-update-package-file）</span><br><span class="line">	local sdupdate_ab_misc_img=$TOP_DIR/device/rockchip/common/images/$rk_sdupdate_ab_misc   # 设置sdupdate_ab_misc_img变量为$TOP_DIR/device/rockchip/common/images/加上rk_sdupdate_ab_misc的值</span><br><span class="line">	local parameter_sdupdate=$TOP_DIR/device/rockchip/common/images/$rk_parameter_sdupdate   # 设置parameter_sdupdate变量为$TOP_DIR/device/rockchip/common/images/加上rk_parameter_sdupdate的值</span><br><span class="line">	local recovery_img=$TOP_DIR/buildroot/output/$RK_UPDATE_SDCARD_CFG_RECOVERY/images/recovery.img   # 设置recovery_img变量为$TOP_DIR/buildroot/output/加上RK_UPDATE_SDCARD_CFG_RECOVERY/images/recovery.img的值</span><br><span class="line"></span><br><span class="line">	if [ $RK_UPDATE_SDCARD_CFG_RECOVERY ]; then   # 如果存在RK_UPDATE_SDCARD_CFG_RECOVERY配置项</span><br><span class="line">		if [ -f $recovery_img ]; then   # 如果存在recovery_img文件</span><br><span class="line">			echo -n &quot;create recovery.img...&quot;   # 输出提示信息</span><br><span class="line">			ln -rsf $recovery_img $image_path/recovery.img   # 创建软链接，将recovery_img链接到$image_path/recovery.img</span><br><span class="line">		else</span><br><span class="line">			echo &quot;error: $recovery_img not found!&quot;   # 输出错误信息</span><br><span class="line">			return 1   # 返回1表示出错</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	echo &quot;Make sdcard update update_sdcard.img&quot;   # 输出提示信息</span><br><span class="line">	cd $pack_tool_dir/rockdev   # 进入$pack_tool_dir/rockdev目录</span><br><span class="line">	if [ -f &quot;$rk_package_file_sdcard_update&quot; ]; then   # 如果存在$rk_package_file_sdcard_update文件</span><br><span class="line">		if [ $rk_parameter_sdupdate ]; then   # 如果存在$rk_parameter_sdupdate变量</span><br><span class="line">			if [ -f $parameter_sdupdate ]; then   # 如果存在$parameter_sdupdate文件</span><br><span class="line">				echo -n &quot;create sdcard update image parameter...&quot;   # 输出提示信息</span><br><span class="line">				ln -rsf $parameter_sdupdate $image_path/   # 创建软链接，将$parameter_sdupdate链接到$image_path/</span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		if [ $rk_sdupdate_ab_misc ]; then   # 如果存在$rk_sdupdate_ab_misc变量</span><br><span class="line">			if [ -f $sdupdate_ab_misc_img ]; then   # 如果存在$sdupdate_ab_misc_img文件</span><br><span class="line">				echo -n &quot;create sdupdate ab misc.img...&quot;   # 输出提示信息</span><br><span class="line">				ln -rsf $sdupdate_ab_misc_img $image_path/   # 创建软链接，将$sdupdate_ab_misc_img链接到$image_path/</span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		source_package_file_name=`ls -lh $pack_tool_dir/rockdev/package-file | awk -F &#x27; &#x27; &#x27;&#123;print $NF&#125;&#x27;`   # 获取$pack_tool_dir/rockdev/package-file的文件名</span><br><span class="line">		ln -fs &quot;$rk_package_file_sdcard_update&quot; package-file   # 创建软链接，将$rk_package_file_sdcard_update链接到package-file</span><br><span class="line">		./mkupdate.sh   # 运行mkupdate.sh脚本，生成update.img</span><br><span class="line">		mv update.img $image_path/update_sdcard.img   # 将生成的update.img移动到$image_path/update_sdcard.img</span><br><span class="line">		ln -fs $source_package_file_name package-file   # 创建软链接，将$source_package_file_name链接到package-file</span><br><span class="line">		rm -f $image_path/$rk_sdupdate_abmisc $image_path/$rk_parameter_sdupdate $image_path/recovery.img   # 删除$image_path/$rk_sdupdate_ab_misc、$image_path/$rk_parameter_sdupdate和$image_path/recovery.img文件</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	finish_build   # 调用finish_build函数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build_save()</span><br><span class="line">&#123;</span><br><span class="line">	IMAGE_PATH=$TOP_DIR/rockdev   # 设置IMAGE_PATH变量为$TOP_DIR/rockdev，用于存储生成的镜像文件路径</span><br><span class="line">	DATE=$(date  +%Y%m%d.%H%M)   # 获取当前日期和时间，格式为YYYYMMDD.HHMM</span><br><span class="line">	STUB_PATH=Image/&quot;$RK_KERNEL_DTS&quot;_&quot;$DATE&quot;_RELEASE_TEST   # 设置STUB_PATH变量为Image/加上$RK_KERNEL_DTS、日期和_RELEASE_TEST</span><br><span class="line">	STUB_PATH=&quot;$(echo $STUB_PATH | tr &#x27;[:lower:]&#x27; &#x27;[:upper:]&#x27;)&quot;   # 将STUB_PATH转换为大写字母</span><br><span class="line">	export STUB_PATH=$TOP_DIR/$STUB_PATH   # 导出STUB_PATH变量为$TOP_DIR/加上$STUB_PATH</span><br><span class="line">	export STUB_PATCH_PATH=$STUB_PATH/PATCHES   # 导出STUB_PATCH_PATH变量为$STUB_PATH/PATCHES</span><br><span class="line">	mkdir -p $STUB_PATH   # 创建$STUB_PATH目录</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">生成补丁文件</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">	.repo/repo/repo forall -c \</span></span><br><span class="line"><span class="language-bash"><span class="comment">#		&quot;$TOP_DIR/device/rockchip/common/gen_patches_body.sh&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">复制补丁文件</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">	<span class="built_in">yes</span> | .repo/repo/repo manifest -r -o <span class="variable">$STUB_PATH</span>/manifest_<span class="variable">$&#123;DATE&#125;</span>.xml</span></span><br><span class="line">	mkdir -p $STUB_PATCH_PATH/kernel   # 创建$STUB_PATCH_PATH/kernel目录</span><br><span class="line">	cp kernel/.config $STUB_PATCH_PATH/kernel   # 复制kernel目录下的.config文件到$STUB_PATCH_PATH/kernel目录</span><br><span class="line">	cp kernel/vmlinux $STUB_PATCH_PATH/kernel   # 复制kernel目录下的vmlinux文件到$STUB_PATCH_PATH/kernel目录</span><br><span class="line">	mkdir -p $STUB_PATH/IMAGES/   # 创建$STUB_PATH/IMAGES/目录</span><br><span class="line">	cp $IMAGE_PATH/* $STUB_PATH/IMAGES/   # 复制$IMAGE_PATH目录下的所有文件到$STUB_PATH/IMAGES/目录</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">保存构建命令信息</span></span><br><span class="line">	echo &quot;UBOOT:  defconfig: $RK_UBOOT_DEFCONFIG&quot; &gt;&gt; $STUB_PATH/build_cmd_info   # 将UBOOT的配置信息写入build_cmd_info文件</span><br><span class="line">	echo &quot;KERNEL: defconfig: $RK_KERNEL_DEFCONFIG, dts: $RK_KERNEL_DTS&quot; &gt;&gt; $STUB_PATH/build_cmd_info   # 将KERNEL的配置信息写入build_cmd_info文件</span><br><span class="line">	echo &quot;BUILDROOT: $RK_CFG_BUILDROOT&quot; &gt;&gt; $STUB_PATH/build_cmd_info   # 将BUILDROOT的配置信息写入build_cmd_info文件</span><br><span class="line"></span><br><span class="line">	finish_build   # 调用finish_build函数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build_allsave()</span><br><span class="line">&#123;</span><br><span class="line">	rm -fr $TOP_DIR/rockdev   # 删除$TOP_DIR/rockdev目录及其内容</span><br><span class="line">	mkdir -p $TOP_DIR/rockdev   # 创建$TOP_DIR/rockdev目录</span><br><span class="line">	build_all   # 调用build_all函数，执行全部构建过程</span><br><span class="line">	build_firmware   # 调用build_firmware函数，构建固件</span><br><span class="line">	build_updateimg   # 调用build_updateimg函数，构建更新镜像</span><br><span class="line">	build_save   # 调用build_save函数，保存构建过程中的相关文件</span><br><span class="line"></span><br><span class="line">	build_check_power_domain   # 调用build_check_power_domain函数，检查电源域配置</span><br><span class="line"></span><br><span class="line">	finish_build   # 调用finish_build函数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">create_keys()</span><br><span class="line">&#123;</span><br><span class="line">	test -d u-boot/keys &amp;&amp; echo &quot;ERROR: u-boot/keys has existed&quot; &amp;&amp; return -1   # 检查u-boot/keys目录是否已存在，如果存在则输出错误信息并返回-1</span><br><span class="line"></span><br><span class="line">	mkdir u-boot/keys -p   # 创建u-boot/keys目录</span><br><span class="line"></span><br><span class="line">	./rkbin/tools/rk_sign_tool kk --bits 2048 --out u-boot/keys   # 使用rk_sign_tool工具生成密钥对，密钥长度为2048位，并存储在u-boot/keys目录下</span><br><span class="line">	ln -s private_key.pem u-boot/keys/dev.key   # 创建符号链接将private_key.pem命名为u-boot/keys/dev.key</span><br><span class="line">	ln -s public_key.pem u-boot/keys/dev.pubkey   # 创建符号链接将public_key.pem命名为u-boot/keys/dev.pubkey</span><br><span class="line"></span><br><span class="line">	openssl req -batch -new -x509 -key u-boot/keys/dev.key -out u-boot/keys/dev.crt   # 使用openssl生成自签名证书，使用u-boot/keys/dev.key作为私钥，生成的证书存储在u-boot/keys/dev.crt中</span><br><span class="line"></span><br><span class="line">	openssl rand -out u-boot/keys/system_enc_key -hex 32   # 使用openssl生成32字节的随机数，并以十六进制格式存储在u-boot/keys/system_enc_key文件中</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">security_is_enabled()</span><br><span class="line">&#123;</span><br><span class="line">	if [ &quot;$RK_RAMDISK_SECURITY_BOOTUP&quot; != &quot;true&quot; ]; then   # 如果环境变量$RK_RAMDISK_SECURITY_BOOTUP不等于&quot;true&quot;</span><br><span class="line">		echo &quot;No security paramter found in $BOARD_CONFIG&quot;   # 输出错误信息，表示在$BOARD_CONFIG中未找到安全参数</span><br><span class="line">		exit -1   # 退出脚本，返回-1</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">=========================</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">build targets</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">=========================</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OPTIONS=<span class="string">&quot;<span class="variable">$&#123;@:-allsave&#125;</span>&quot;</span></span></span><br><span class="line">if [ -z &quot;$1&quot; ]; then</span><br><span class="line">    titlestr=&quot;请选择一个选项&quot;                         # 菜单标题</span><br><span class="line">    backtitle=&quot;iTOP-RK3568构建脚本，http://www.topeet.com&quot;  # 返回标题</span><br><span class="line">    menustr=&quot;编译镜像 | u-boot| 内核| recovery| buildroot | debian | yocto | all&quot;  # 菜单选项</span><br><span class="line"></span><br><span class="line">    TTY_X=$(($(stty size | awk &#x27;&#123;print $2&#125;&#x27;)-6))  # 确定终端宽度</span><br><span class="line">    TTY_Y=$(($(stty size | awk &#x27;&#123;print $1&#125;&#x27;)-6))  # 确定终端高度</span><br><span class="line"></span><br><span class="line">    choose+=(&quot;uboot&quot;       &quot;build_uboot&quot;)      # 选项1: u-boot编译</span><br><span class="line">    choose+=(&quot;kernel&quot;       &quot;build_kernel&quot;)    # 选项2: 内核编译</span><br><span class="line">    choose+=(&quot;recovery&quot;       &quot;build_recovery&quot;)  # 选项3: recovery编译</span><br><span class="line">    choose+=(&quot;buildroot&quot;       &quot;build_rootfs buildroot&quot;)  # 选项4: 编译buildroot根文件系统</span><br><span class="line">    choose+=(&quot;debian&quot;       &quot;build_rootfs debian&quot;)         # 选项5: 编译Debian根文件系统</span><br><span class="line">    choose+=(&quot;yocto&quot;       &quot;build_rootfs yocto&quot;)           # 选项6: 编译Yocto根文件系统</span><br><span class="line">    choose+=(&quot;save&quot;       &quot;build_save&quot;)        # 选项7: 保存构建结果</span><br><span class="line">    choose+=(&quot;all&quot;       &quot;build_all&quot;)          # 选项8: 编译所有</span><br><span class="line"></span><br><span class="line">    OPTIONS=$(whiptail --title &quot;$&#123;titlestr&#125;&quot; --backtitle &quot;$&#123;backtitle&#125;&quot; --notags \</span><br><span class="line">                --menu &quot;$&#123;menustr&#125;&quot; &quot;$&#123;TTY_Y&#125;&quot; &quot;$&#123;TTY_X&#125;&quot; $((TTY_Y - 8)) \</span><br><span class="line">                --cancel-button 退出 --ok-button 选择 &quot;$&#123;choose[@]&#125;&quot; \</span><br><span class="line">                3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)  # 使用whiptail创建菜单，并获取用户选择的选项</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line">    OPTIONS=&quot;$&#123;1&#125;&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">预处理选项</span></span><br><span class="line">unset POST_OPTIONS</span><br><span class="line">for option in $OPTIONS; do</span><br><span class="line">    case $option in</span><br><span class="line">        BoardConfig*.mk)</span><br><span class="line">            option=&quot;$CHIP_DIR/$option&quot;</span><br><span class="line">            ;&amp;</span><br><span class="line">        *.mk)</span><br><span class="line">            CONF=$(realpath $option)</span><br><span class="line">            echo &quot;切换到配置文件: $CONF&quot;</span><br><span class="line">            if [ ! -f $CONF ]; then</span><br><span class="line">                echo &quot;文件不存在!&quot;</span><br><span class="line">                exit 1</span><br><span class="line">            fi</span><br><span class="line"></span><br><span class="line">            ln -rsf $CONF $BOARD_CONFIG</span><br><span class="line">            ;;</span><br><span class="line">        lunch) choose_board ;;</span><br><span class="line">        kernel-4.4|kernel-4.19|kernel-5.10)</span><br><span class="line">            RK_KERNEL_VERSION=$&#123;option#kernel-&#125;</span><br><span class="line">            ;;</span><br><span class="line">        *) POST_OPTIONS=&quot;$POST_OPTIONS $option&quot;;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">if [ -r &quot;$BOARD_CONFIG&quot; ]; then  # 如果配置文件存在且可读</span><br><span class="line">    source $BOARD_CONFIG  # 导入配置文件</span><br><span class="line">else</span><br><span class="line">    choose_board  # 否则，调用选择板型函数</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -d &quot;$CHIP_DIR/build-hooks/&quot; ]; then  # 如果存在构建钩子目录</span><br><span class="line">    for hook in $(find &quot;$CHIP_DIR/build-hooks&quot; -name &quot;*.sh&quot;); do  # 遍历所有以.sh结尾的文件</span><br><span class="line">        source &quot;$hook&quot;  # 导入每个构建钩子脚本</span><br><span class="line">    done</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回退到当前内核版本</span></span><br><span class="line">RK_KERNEL_VERSION=$&#123;RK_KERNEL_VERSION:-$(kernel_version kernel/)&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回退到5.10内核版本</span></span><br><span class="line">RK_KERNEL_VERSION=$&#123;RK_KERNEL_VERSION:-5.10&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新内核</span></span><br><span class="line">if [ &quot;$(kernel_version kernel/)&quot; != &quot;$RK_KERNEL_VERSION&quot; ]; then  # 如果当前内核版本与指定版本不一致</span><br><span class="line">    KERNEL_DIR=kernel-$RK_KERNEL_VERSION  # 设置新的内核目录名称</span><br><span class="line">    echo &quot;切换到 $KERNEL_DIR&quot;</span><br><span class="line">    if [ ! -d &quot;$KERNEL_DIR&quot; ]; then  # 如果新的内核目录不存在</span><br><span class="line">        echo &quot;不存在！&quot;</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line">    rm -rf kernel  # 删除旧的内核软链接</span><br><span class="line">    ln -rsf $KERNEL_DIR kernel  # 创建新的内核软链接</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后续选项处理</span></span><br><span class="line">for option in $POST_OPTIONS; do</span><br><span class="line">    echo &quot;处理选项: $option&quot;</span><br><span class="line">    case $option in</span><br><span class="line">        all) build_all ;;  # 执行编译所有选项</span><br><span class="line">        save) build_save ;;  # 执行保存构建结果选项</span><br><span class="line">        allsave) build_allsave ;;  # 执行编译所有并保存结果选项</span><br><span class="line">        cleanall) build_cleanall ;;  # 执行清理所有构建结果选项</span><br><span class="line">        firmware) build_firmware ;;  # 执行编译固件选项</span><br><span class="line">        updateimg) build_updateimg ;;  # 执行编译更新镜像选项</span><br><span class="line">        otapackage) build_otapackage ;;  # 执行编译OTA包选项</span><br><span class="line">        sdpackage) build_sdcard_package ;;  # 执行编译SD卡镜像选项</span><br><span class="line">        spl) build_spl ;;  # 执行编译SPL选项</span><br><span class="line">        uboot) build_uboot ;;  # 执行编译u-boot选项</span><br><span class="line">        uefi) build_uefi ;;  # 执行编译UEFI选项</span><br><span class="line">        loader) build_loader ;;  # 执行编译loader选项</span><br><span class="line">        kernel) build_kernel ;;  # 执行编译内核选项</span><br><span class="line">        wifibt)  # 执行编译Wi-Fi和蓝牙固件选项</span><br><span class="line">            build_wifibt $2 $3  # 调用编译Wi-Fi和蓝牙固件的函数，并传递参数$2和$3</span><br><span class="line">            exit 1 ;;  # 退出脚本</span><br><span class="line">        modules) build_modules ;;  # 执行编译内核模块选项</span><br><span class="line">        rootfs) build_rootfs ;;  # 执行编译根文件系统选项</span><br><span class="line">        buildroot|debian|yocto) build_rootfs $option ;;  # 执行编译指定根文件系统选项</span><br><span class="line">        pcba) build_pcba ;;  # 执行编译PCBA选项</span><br><span class="line">        recovery) build_recovery ;;  # 执行编译recovery选项</span><br><span class="line">        info) build_info ;;  # 执行显示构建信息选项</span><br><span class="line">        createkeys) create_keys ;;  # 执行生成密钥选项</span><br><span class="line">        security_boot)  # 执行启用安全引导的选项</span><br><span class="line">            security_is_enabled  # 检查安全引导是否已启用</span><br><span class="line">            build_rootfs  # 编译根文件系统</span><br><span class="line">            build_uboot boot  # 编译启动引导程序</span><br><span class="line">            ;;</span><br><span class="line">        security_uboot)  # 执行启用安全引导的u-boot选项</span><br><span class="line">            security_is_enabled  # 检查安全引导是否已启用</span><br><span class="line">            build_uboot uboot  # 编译u-boot引导程序</span><br><span class="line">            ;;</span><br><span class="line">        security_recovery)  # 执行启用安全引导的recovery选项</span><br><span class="line">            security_is_enabled  # 检查安全引导是否已启用</span><br><span class="line">            build_recovery  # 编译recovery</span><br><span class="line">            build_uboot recovery  # 编译recovery引导程序</span><br><span class="line">            ;;</span><br><span class="line">        security_check) check_security_condition ;;  # 执行检查安全条件选项</span><br><span class="line">        security_rootfs)  # 执行启用安全引导的根文件系统选项</span><br><span class="line">            security_is_enabled  # 检查安全引导是否已启用</span><br><span class="line">            build_rootfs  # 编译根文件系统</span><br><span class="line">            build_uboot  # 编译u-boot引导程序</span><br><span class="line">            echo &quot;请更新 rootfs.img / boot.img&quot;</span><br><span class="line">            ;;</span><br><span class="line">        *) usage ;;  # 显示用法</span><br><span class="line">    esac</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>瑞芯微脚本分析</category>
      </categories>
      <tags>
        <tag>瑞芯微脚本分析</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/09/15/0-4%20recovery%E7%9A%84%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
  </entry>
  <entry>
    <title>0-3 uboot的编译</title>
    <url>/2023/09/10/0-3%20uboot%E7%9A%84%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="3-1-编译uboot-的全部命令"><a href="#3-1-编译uboot-的全部命令" class="headerlink" title="3.1 编译uboot 的全部命令"></a>3.1 编译uboot 的全部命令</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置环境变量 LC_ALL，用于定义程序的本地化设置</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 LC_ALL 设置为 C，表示使用标准的C语言环境，忽略本地化设置</span></span><br><span class="line">export LC_ALL=C</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置环境变量 LD_LIBRARY_PATH，用于指定动态链接库的搜索路径</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 LD_LIBRARY_PATH 设置为空，表示清空动态链接库搜索路径</span></span><br><span class="line">export LD_LIBRARY_PATH=</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">错误处理函数</span></span><br><span class="line">err_handler()</span><br><span class="line">&#123;</span><br><span class="line">	ret=$?</span><br><span class="line">	[ &quot;$ret&quot; -eq 0 ] &amp;&amp; return</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">打印错误信息</span></span><br><span class="line">	echo &quot;ERROR: Running $&#123;FUNCNAME[1]&#125; failed!&quot;</span><br><span class="line">	echo &quot;ERROR: exit code $ret from line $&#123;BASH_LINENO[0]&#125;:&quot;</span><br><span class="line">	echo &quot;    $BASH_COMMAND&quot;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">退出脚本</span></span><br><span class="line">	exit $ret</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置错误处理函数为 <span class="built_in">trap</span> 的处理程序，当发生错误时调用 err_handler() 函数</span></span><br><span class="line">trap &#x27;err_handler&#x27; ERR</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 shell 的错误处理行为</span></span><br><span class="line">set -eE</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取当前脚本所在目录的绝对路径，并赋值给 COMMON_DIR 变量</span></span><br><span class="line">COMMON_DIR=&quot;$(dirname &quot;$(realpath &quot;$0&quot;)&quot;)&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据 COMMON_DIR 计算出顶级目录的绝对路径，并赋值给 TOP_DIR 变量，这里多说一下，这里的build.sh是软链接，所以这里需要确认顶层目录</span></span><br><span class="line">TOP_DIR=&quot;$(realpath &quot;$COMMON_DIR/../../..&quot;)&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到顶级目录</span></span><br><span class="line">cd &quot;$TOP_DIR&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建 rockdev 目录（如果不存在）</span></span><br><span class="line">mkdir -p rockdev</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 BOARD_CONFIG 变量为顶级目录下的 device/rockchip/.BoardConfig.mk 文件的绝对路径</span></span><br><span class="line">BOARD_CONFIG=&quot;$TOP_DIR/device/rockchip/.BoardConfig.mk&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取 CHIP_DIR 变量的绝对路径，该变量指向顶级目录下的 device/rockchip/.target_product 目录</span></span><br><span class="line">CHIP_DIR=&quot;$(realpath $TOP_DIR/device/rockchip/.target_product)&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查配置函数</span></span><br><span class="line">check_config()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">清除变量 missing</span></span><br><span class="line">	unset missing</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">遍历传入的参数列表</span></span><br><span class="line"></span><br><span class="line">	for var in $@; do</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">使用 <span class="built_in">eval</span> 检查变量是否存在值，如果存在则跳过</span></span><br><span class="line">		eval [ \$$var ] &amp;&amp; continue</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">将缺失的配置变量记录到 missing 变量中</span></span><br><span class="line">		missing=&quot;$missing $var&quot;</span><br><span class="line">	done</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果所有配置变量均存在值，则返回0表示检查通过</span></span><br><span class="line">	[ -z &quot;$missing&quot; ] &amp;&amp; return 0</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果存在缺失的配置变量，则输出错误信息并返回1</span></span><br><span class="line">	echo &quot;Skipping $&#123;FUNCNAME[1]&#125; for missing configs: $missing.&quot;</span><br><span class="line">	return 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置交叉编译工具链和相关参数</span></span><br><span class="line">setup_cross_compile()</span><br><span class="line">&#123;</span><br><span class="line">	if [ &quot;$RK_CHIP&quot; = &quot;rv1126_rv1109&quot; ]; then</span><br><span class="line">		TOOLCHAIN_OS=rockchip</span><br><span class="line">	else</span><br><span class="line">		TOOLCHAIN_OS=none</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">将 RK_KERNEL_ARCH 中的 arm64 替换为 aarch64</span></span><br><span class="line">	TOOLCHAIN_ARCH=$&#123;RK_KERNEL_ARCH/arm64/aarch64&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">查找匹配的 GCC 工具链路径</span></span><br><span class="line">	TOOLCHAIN_DIR=&quot;$(realpath prebuilts/gcc/*/$TOOLCHAIN_ARCH/gcc-arm-*)&quot;</span><br><span class="line">	GCC=&quot;$(find &quot;$TOOLCHAIN_DIR&quot; -name &quot;*$TOOLCHAIN_OS*-gcc&quot;)&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查是否存在可执行的 GCC 工具链</span></span><br><span class="line">	if [ ! -x &quot;$GCC&quot; ]; then</span><br><span class="line">		echo &quot;No prebuilt GCC toolchain!&quot;</span><br><span class="line">		return 1</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">设置交叉编译前缀</span></span><br><span class="line">	export CROSS_COMPILE=&quot;$&#123;GCC%gcc&#125;&quot;</span><br><span class="line">	echo &quot;Using prebuilt GCC toolchain: $CROSS_COMPILE&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">获取可用的处理器核心数量</span></span><br><span class="line">	NUM_CPUS=$(getconf _NPROCESSORS_ONLN 2&gt;/dev/null || echo 1)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">设置并发编译任务数，默认为处理器核心数量加一</span></span><br><span class="line">	JLEVEL=$&#123;RK_JOBS:-$(( $NUM_CPUS + 1 ))&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">定义内核编译命令</span></span><br><span class="line">	KMAKE=&quot;make -C kernel/ ARCH=$RK_KERNEL_ARCH -j$JLEVEL&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">预构建 U-Boot 函数</span></span><br><span class="line">prebuild_uboot()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">构建 U-Boot 的编译命令字符串</span></span><br><span class="line">	UBOOT_COMPILE_COMMANDS=&quot;\</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">&#123;RK_TRUST_INI_CONFIG:+../rkbin/RKTRUST/<span class="variable">$RK_TRUST_INI_CONFIG</span>&#125; \</span></span><br><span class="line"><span class="language-bash">			<span class="variable">$&#123;RK_SPL_INI_CONFIG:+../rkbin/RKBOOT/$RK_SPL_INI_CONFIG&#125;</span> \</span></span><br><span class="line"><span class="language-bash">			<span class="variable">$&#123;RK_UBOOT_SIZE_CONFIG:+--sz-uboot $RK_UBOOT_SIZE_CONFIG&#125;</span> \</span></span><br><span class="line"><span class="language-bash">			<span class="variable">$&#123;RK_TRUST_SIZE_CONFIG:+--sz-trust $RK_TRUST_SIZE_CONFIG&#125;</span><span class="string">&quot;</span></span></span><br><span class="line">	UBOOT_COMPILE_COMMANDS=&quot;$(echo $UBOOT_COMPILE_COMMANDS)&quot;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">如果启用 RAMDISK 安全启动，则添加相关的编译命令选项</span></span></span><br><span class="line">	if [ &quot;$RK_RAMDISK_SECURITY_BOOTUP&quot; = &quot;true&quot; ];then</span><br><span class="line">		UBOOT_COMPILE_COMMANDS=&quot; \</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash"><span class="string">UBOOT_COMPILE_COMMANDS \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			<span class="variable">$&#123;RK_ROLLBACK_INDEX_BOOT:+--rollback-index-boot $RK_ROLLBACK_INDEX_BOOT&#125;</span> \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			<span class="variable">$&#123;RK_ROLLBACK_INDEX_UBOOT:+--rollback-index-uboot $RK_ROLLBACK_INDEX_UBOOT&#125;</span> &quot;</span></span></span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">预构建安全启动的 U-Boot 函数</span></span><br><span class="line">prebuild_security_uboot()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">获取传入的模式参数</span></span><br><span class="line">	local mode=$1</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果启用 RAMDISK 安全启动，则添加相关的编译命令选项</span></span><br><span class="line">	if [ &quot;$RK_RAMDISK_SECURITY_BOOTUP&quot; = &quot;true&quot; ];then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">如果 RK_SECURITY_OTP_DEBUG 不等于 <span class="string">&quot;true&quot;</span>，则添加 --burn-key-hash 选项</span></span><br><span class="line">		if [ &quot;$RK_SECURITY_OTP_DEBUG&quot; != &quot;true&quot; ]; then</span><br><span class="line">			UBOOT_COMPILE_COMMANDS=&quot;$UBOOT_COMPILE_COMMANDS --burn-key-hash&quot;</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">根据传入的模式参数进行不同的处理</span></span><br><span class="line">		case &quot;$&#123;mode:-normal&#125;&quot; in</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">对于 uboot 模式，不需要额外的处理</span></span><br><span class="line">			uboot)</span><br><span class="line">				;;</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">对于 boot 模式，添加 --boot_img 选项，并设置值为 <span class="variable">$TOP_DIR</span>/u-boot/boot.img</span></span><br><span class="line">			boot)</span><br><span class="line">				UBOOT_COMPILE_COMMANDS=&quot; \</span><br><span class="line">					--boot_img $TOP_DIR/u-boot/boot.img \</span><br><span class="line">					$UBOOT_COMPILE_COMMANDS &quot;</span><br><span class="line">				;;</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">对于 recovery 模式，添加 --recovery_img 选项，并设置值为 <span class="variable">$TOP_DIR</span>/u-boot/recovery.img</span></span><br><span class="line">			recovery)</span><br><span class="line">				UBOOT_COMPILE_COMMANDS=&quot; \</span><br><span class="line">					--recovery_img $TOP_DIR/u-boot/recovery.img</span><br><span class="line">					$UBOOT_COMPILE_COMMANDS &quot;</span><br><span class="line">				;;</span><br><span class="line">			*)</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">对于其他模式，默认添加 --boot_img 选项，并设置值为 <span class="variable">$TOP_DIR</span>/u-boot/boot.img</span></span><br><span class="line">				UBOOT_COMPILE_COMMANDS=&quot; \</span><br><span class="line">					--boot_img $TOP_DIR/u-boot/boot.img \</span><br><span class="line">					$UBOOT_COMPILE_COMMANDS &quot;</span><br><span class="line">				# 如果 RK_PACKAGE_FILE_AB 为空，则添加 --recovery_img 选项，并设置值为 $TOP_DIR/u-boot/recovery.img</span><br><span class="line">				test -z &quot;$&#123;RK_PACKAGE_FILE_AB&#125;&quot; &amp;&amp; \</span><br><span class="line">					UBOOT_COMPILE_COMMANDS=&quot;$UBOOT_COMPILE_COMMANDS --recovery_img $TOP_DIR/u-boot/recovery.img&quot;</span><br><span class="line">				;;</span><br><span class="line">		esac</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">使用 <span class="built_in">echo</span> 命令重新赋值 UBOOT_COMPILE_COMMANDS 变量，去除多余空格</span></span><br><span class="line">		UBOOT_COMPILE_COMMANDS=&quot;$(echo $UBOOT_COMPILE_COMMANDS)&quot;</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建 U-Boot</span></span><br><span class="line">build_uboot()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查 RK_UBOOT_DEFCONFIG 配置是否存在，若不存在则返回</span></span><br><span class="line">	check_config RK_UBOOT_DEFCONFIG || return 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">设置交叉编译工具链和相关参数</span></span><br><span class="line">	setup_cross_compile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">准备 U-Boot 构建所需的文件</span></span><br><span class="line">	prebuild_uboot</span><br><span class="line">	prebuild_security_uboot $@</span><br><span class="line"></span><br><span class="line">	echo &quot;============Start building uboot============&quot;</span><br><span class="line">	echo &quot;TARGET_UBOOT_CONFIG=$RK_UBOOT_DEFCONFIG&quot;</span><br><span class="line">	echo &quot;=========================================&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">进入 u-boot 目录并删除旧的 *_loader_*.bin 文件</span></span><br><span class="line">	cd u-boot</span><br><span class="line">	rm -f *_loader_*.bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">构建 U-Boot</span></span><br><span class="line">	if [ -n &quot;$RK_UBOOT_DEFCONFIG_FRAGMENT&quot; ]; then</span><br><span class="line">		if [ -f &quot;configs/$&#123;RK_UBOOT_DEFCONFIG&#125;_defconfig&quot; ]; then</span><br><span class="line">			UBOOT_CONFIGS=&quot;$&#123;RK_UBOOT_DEFCONFIG&#125;_defconfig&quot;</span><br><span class="line">		else</span><br><span class="line">			UBOOT_CONFIGS=&quot;$&#123;RK_UBOOT_DEFCONFIG&#125;.config&quot;</span><br><span class="line">		fi</span><br><span class="line">		UBOOT_CONFIGS=&quot;$UBOOT_CONFIGS $RK_UBOOT_DEFCONFIG_FRAGMENT&quot;</span><br><span class="line">	else</span><br><span class="line">		UBOOT_CONFIGS=&quot;$RK_UBOOT_DEFCONFIG&quot;</span><br><span class="line">	fi</span><br><span class="line">	./make.sh $UBOOT_CONFIGS $UBOOT_COMPILE_COMMANDS \</span><br><span class="line">		CROSS_COMPILE=$CROSS_COMPILE</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果需要更新 RK_IDBLOCK_SPL，则执行带有 --idblock 和 --spl 参数的 make.sh</span></span><br><span class="line">	if [ &quot;$RK_IDBLOCK_UPDATE_SPL&quot; = &quot;true&quot; ]; then</span><br><span class="line">		./make.sh --idblock --spl</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	cd ..</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果需要进行 RAMDISK 安全启动，则创建链接到 rockdev 目录的 boot.img 和 recovery.img</span></span><br><span class="line">	if [ &quot;$RK_RAMDISK_SECURITY_BOOTUP&quot; = &quot;true&quot; ];then</span><br><span class="line">		ln -rsf u-boot/boot.img rockdev/</span><br><span class="line">		test -z &quot;$&#123;RK_PACKAGE_FILE_AB&#125;&quot; &amp;&amp; \</span><br><span class="line">			ln -rsf u-boot/recovery.img rockdev/ || true</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">创建链接到 rockdev 目录的 MiniLoaderAll.bin、uboot.img 和 trust.img（如果存在）</span></span><br><span class="line">	LOADER=&quot;$(echo u-boot/*_loader_*v*.bin | head -1)&quot;</span><br><span class="line">	SPL=&quot;$(echo u-boot/*_loader_spl.bin | head -1)&quot;</span><br><span class="line">	ln -rsf &quot;$&#123;LOADER:-$SPL&#125;&quot; rockdev/MiniLoaderAll.bin</span><br><span class="line">	ln -rsf u-boot/uboot.img rockdev/</span><br><span class="line">	[ ! -e u-boot/trust.img ] || \</span><br><span class="line">		ln -rsf u-boot/trust.img rockdev/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">完成构建流程</span></span><br><span class="line">	finish_build</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-2-配置文件检查（第一步）"><a href="#3-2-配置文件检查（第一步）" class="headerlink" title="3.2 配置文件检查（第一步）"></a>3.2 配置文件检查（第一步）</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查 RK_UBOOT_DEFCONFIG 配置是否存在，若不存在则返回</span></span><br><span class="line">check_config RK_UBOOT_DEFCONFIG || return 0</span><br></pre></td></tr></table></figure>

<p>RK_UBOOT_DEFCONFIG 环境变量在板子选择的配置文件中已经确定了，具体内容如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export RK_UBOOT_DEFCONFIG=rk3588</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Uboot镜像格式类型：fit（扁平化镜像树）</span></span><br><span class="line"></span><br><span class="line">export RK_UBOOT_FORMAT_TYPE=fit</span><br></pre></td></tr></table></figure>



<p>check_config函数内容如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查配置函数</span></span><br><span class="line">check_config()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">清除变量 missing</span></span><br><span class="line">	unset missing</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">遍历传入的参数列表</span></span><br><span class="line"></span><br><span class="line">	for var in $@; do</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">使用 <span class="built_in">eval</span> 检查变量是否存在值，如果存在则跳过</span></span><br><span class="line">		eval [ \$$var ] &amp;&amp; continue</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">将缺失的配置变量记录到 missing 变量中</span></span><br><span class="line">		missing=&quot;$missing $var&quot;</span><br><span class="line">	done</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果所有配置变量均存在值，则返回0表示检查通过</span></span><br><span class="line">	[ -z &quot;$missing&quot; ] &amp;&amp; return 0</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果存在缺失的配置变量，则输出错误信息并返回1</span></span><br><span class="line">	echo &quot;Skipping $&#123;FUNCNAME[1]&#125; for missing configs: $missing.&quot;</span><br><span class="line">	return 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个检查只是检查配置是否全部填充，没有什么特别的，还是很简单的。</p>
<h1 id="3-3-设置交叉编译工具链和相关参数（第二步）"><a href="#3-3-设置交叉编译工具链和相关参数（第二步）" class="headerlink" title="3.3 设置交叉编译工具链和相关参数（第二步）"></a>3.3 设置交叉编译工具链和相关参数（第二步）</h1><p>设置交叉编译工具链的函数内容如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置交叉编译工具链和相关参数</span></span><br><span class="line">setup_cross_compile()</span><br><span class="line">&#123;</span><br><span class="line">	if [ &quot;$RK_CHIP&quot; = &quot;rv1126_rv1109&quot; ]; then</span><br><span class="line">		TOOLCHAIN_OS=rockchip</span><br><span class="line">	else</span><br><span class="line">		TOOLCHAIN_OS=none</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">将 RK_KERNEL_ARCH 中的 arm64 替换为 aarch64</span></span><br><span class="line">	TOOLCHAIN_ARCH=$&#123;RK_KERNEL_ARCH/arm64/aarch64&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">查找匹配的 GCC 工具链路径</span></span><br><span class="line">	</span><br><span class="line">	TOOLCHAIN_DIR=&quot;$(realpath prebuilts/gcc/*/$TOOLCHAIN_ARCH/gcc-arm-*)&quot;</span><br><span class="line">	GCC=&quot;$(find &quot;$TOOLCHAIN_DIR&quot; -name &quot;*$TOOLCHAIN_OS*-gcc&quot;)&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">检查是否存在可执行的 GCC 工具链</span></span><br><span class="line">	if [ ! -x &quot;$GCC&quot; ]; then</span><br><span class="line">		echo &quot;No prebuilt GCC toolchain!&quot;</span><br><span class="line">		return 1</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">设置交叉编译前缀</span></span><br><span class="line">	export CROSS_COMPILE=&quot;$&#123;GCC%gcc&#125;&quot;</span><br><span class="line">	echo &quot;Using prebuilt GCC toolchain: $CROSS_COMPILE&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">获取可用的处理器核心数量</span></span><br><span class="line">	NUM_CPUS=$(getconf _NPROCESSORS_ONLN 2&gt;/dev/null || echo 1)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">设置并发编译任务数，默认为处理器核心数量加一</span></span><br><span class="line">	JLEVEL=$&#123;RK_JOBS:-$(( $NUM_CPUS + 1 ))&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">定义内核编译命令</span></span><br><span class="line">	KMAKE=&quot;make -C kernel/ ARCH=$RK_KERNEL_ARCH -j$JLEVEL&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>​	设置交叉编译器</li>
<li>​	设置编译时的线程数</li>
<li>​	定义内核编译命令KMAKE</li>
</ul>
<p>设置交叉编译器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export ARCH=arm64</span><br><span class="line"></span><br><span class="line">export CROSS_COMPILE=/home/topeet/Linux/3588-linux/prebuilts/gcc/linux-x86/aarch64/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu-</span><br></pre></td></tr></table></figure>



<h1 id="3-4-uboot编译前预处理（第三步）"><a href="#3-4-uboot编译前预处理（第三步）" class="headerlink" title="3.4 uboot编译前预处理（第三步）"></a>3.4 uboot编译前预处理（第三步）</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">prebuild_uboot</span><br><span class="line">prebuild_security_uboot $@</span><br></pre></td></tr></table></figure>

<p>首先是prebuild_uboot寒素具体内容如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">预构建 U-Boot 函数</span></span><br><span class="line">prebuild_uboot()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">构建 U-Boot 的编译命令字符串</span></span><br><span class="line">	UBOOT_COMPILE_COMMANDS=&quot;\</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">&#123;RK_TRUST_INI_CONFIG:+../rkbin/RKTRUST/<span class="variable">$RK_TRUST_INI_CONFIG</span>&#125; \</span></span><br><span class="line"><span class="language-bash">			<span class="variable">$&#123;RK_SPL_INI_CONFIG:+../rkbin/RKBOOT/$RK_SPL_INI_CONFIG&#125;</span> \</span></span><br><span class="line"><span class="language-bash">			<span class="variable">$&#123;RK_UBOOT_SIZE_CONFIG:+--sz-uboot $RK_UBOOT_SIZE_CONFIG&#125;</span> \</span></span><br><span class="line"><span class="language-bash">			<span class="variable">$&#123;RK_TRUST_SIZE_CONFIG:+--sz-trust $RK_TRUST_SIZE_CONFIG&#125;</span><span class="string">&quot;</span></span></span><br><span class="line">	UBOOT_COMPILE_COMMANDS=&quot;$(echo $UBOOT_COMPILE_COMMANDS)&quot;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">如果启用 RAMDISK 安全启动，则添加相关的编译命令选项</span></span></span><br><span class="line">	if [ &quot;$RK_RAMDISK_SECURITY_BOOTUP&quot; = &quot;true&quot; ];then</span><br><span class="line">		UBOOT_COMPILE_COMMANDS=&quot; \</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash"><span class="string">UBOOT_COMPILE_COMMANDS \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			<span class="variable">$&#123;RK_ROLLBACK_INDEX_BOOT:+--rollback-index-boot $RK_ROLLBACK_INDEX_BOOT&#125;</span> \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			<span class="variable">$&#123;RK_ROLLBACK_INDEX_UBOOT:+--rollback-index-uboot $RK_ROLLBACK_INDEX_UBOOT&#125;</span> &quot;</span></span></span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​	虽然确实进去了这个函数，但实际上是没有进行任何步骤的，因为根本就没有上述任何环境变量的设置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">预构建安全启动的 U-Boot 函数</span></span><br><span class="line">prebuild_security_uboot()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">获取传入的模式参数</span></span><br><span class="line">	local mode=$1</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">如果启用 RAMDISK 安全启动，则添加相关的编译命令选项</span></span><br><span class="line">	if [ &quot;$RK_RAMDISK_SECURITY_BOOTUP&quot; = &quot;true&quot; ];then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">如果 RK_SECURITY_OTP_DEBUG 不等于 <span class="string">&quot;true&quot;</span>，则添加 --burn-key-hash 选项</span></span><br><span class="line">		if [ &quot;$RK_SECURITY_OTP_DEBUG&quot; != &quot;true&quot; ]; then</span><br><span class="line">			UBOOT_COMPILE_COMMANDS=&quot;$UBOOT_COMPILE_COMMANDS --burn-key-hash&quot;</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">根据传入的模式参数进行不同的处理</span></span><br><span class="line">		case &quot;$&#123;mode:-normal&#125;&quot; in</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">对于 uboot 模式，不需要额外的处理</span></span><br><span class="line">			uboot)</span><br><span class="line">				;;</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">对于 boot 模式，添加 --boot_img 选项，并设置值为 <span class="variable">$TOP_DIR</span>/u-boot/boot.img</span></span><br><span class="line">			boot)</span><br><span class="line">				UBOOT_COMPILE_COMMANDS=&quot; \</span><br><span class="line">					--boot_img $TOP_DIR/u-boot/boot.img \</span><br><span class="line">					$UBOOT_COMPILE_COMMANDS &quot;</span><br><span class="line">				;;</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">对于 recovery 模式，添加 --recovery_img 选项，并设置值为 <span class="variable">$TOP_DIR</span>/u-boot/recovery.img</span></span><br><span class="line">			recovery)</span><br><span class="line">				UBOOT_COMPILE_COMMANDS=&quot; \</span><br><span class="line">					--recovery_img $TOP_DIR/u-boot/recovery.img</span><br><span class="line">					$UBOOT_COMPILE_COMMANDS &quot;</span><br><span class="line">				;;</span><br><span class="line">			*)</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">对于其他模式，默认添加 --boot_img 选项，并设置值为 <span class="variable">$TOP_DIR</span>/u-boot/boot.img</span></span><br><span class="line">				UBOOT_COMPILE_COMMANDS=&quot; \</span><br><span class="line">					--boot_img $TOP_DIR/u-boot/boot.img \</span><br><span class="line">					$UBOOT_COMPILE_COMMANDS &quot;</span><br><span class="line">				# 如果 RK_PACKAGE_FILE_AB 为空，则添加 --recovery_img 选项，并设置值为 $TOP_DIR/u-boot/recovery.img</span><br><span class="line">				test -z &quot;$&#123;RK_PACKAGE_FILE_AB&#125;&quot; &amp;&amp; \</span><br><span class="line">					UBOOT_COMPILE_COMMANDS=&quot;$UBOOT_COMPILE_COMMANDS --recovery_img $TOP_DIR/u-boot/recovery.img&quot;</span><br><span class="line">				;;</span><br><span class="line">		esac</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">使用 <span class="built_in">echo</span> 命令重新赋值 UBOOT_COMPILE_COMMANDS 变量，去除多余空格</span></span><br><span class="line">		UBOOT_COMPILE_COMMANDS=&quot;$(echo $UBOOT_COMPILE_COMMANDS)&quot;</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-5-删除之前的编译（第4步）"><a href="#3-5-删除之前的编译（第4步）" class="headerlink" title="3.5 删除之前的编译（第4步）"></a>3.5 删除之前的编译（第4步）</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入 u-boot 目录并删除旧的 *_loader_*.bin 文件</span></span><br><span class="line">cd u-boot</span><br><span class="line">rm -f *_loader_*.bin</span><br></pre></td></tr></table></figure>

<p>这也就是之前为什么每次都要重新编译的原因</p>
<h1 id="3-5-删除之前的编译（第4步）-1"><a href="#3-5-删除之前的编译（第4步）-1" class="headerlink" title="3.5 删除之前的编译（第4步）"></a>3.5 删除之前的编译（第4步）</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建 U-Boot</span></span><br><span class="line">if [ -n &quot;$RK_UBOOT_DEFCONFIG_FRAGMENT&quot; ]; then</span><br><span class="line">	if [ -f &quot;configs/$&#123;RK_UBOOT_DEFCONFIG&#125;_defconfig&quot; ]; then</span><br><span class="line">		UBOOT_CONFIGS=&quot;$&#123;RK_UBOOT_DEFCONFIG&#125;_defconfig&quot;</span><br><span class="line">	else</span><br><span class="line">		UBOOT_CONFIGS=&quot;$&#123;RK_UBOOT_DEFCONFIG&#125;.config&quot;</span><br><span class="line">	fi</span><br><span class="line">	UBOOT_CONFIGS=&quot;$UBOOT_CONFIGS $RK_UBOOT_DEFCONFIG_FRAGMENT&quot;</span><br><span class="line">else</span><br><span class="line">	UBOOT_CONFIGS=&quot;$RK_UBOOT_DEFCONFIG&quot;</span><br><span class="line">fi</span><br><span class="line">./make.sh $UBOOT_CONFIGS $UBOOT_COMPILE_COMMANDS \</span><br><span class="line">	CROSS_COMPILE=$CROSS_COMPILE</span><br></pre></td></tr></table></figure>

<p>​	上面的第一个if是不成立的，因为并没有RK_UBOOT_DEFCONFIG_FRAGMENT宏定义，所以会进入第二个else判断，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UBOOT_CONFIGS=&quot;$RK_UBOOT_DEFCONFIG&quot;</span><br><span class="line">./make.sh $UBOOT_CONFIGS $UBOOT_COMPILE_COMMANDS \</span><br><span class="line">	CROSS_COMPILE=$CROSS_COMPILE</span><br></pre></td></tr></table></figure>

<p>最终也就是</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./make.sh rk3588 CROSS_COMPILE=/home/topeet/Linux/3588-linux/prebuilts/gcc/linux-x86/aarch64/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu-</span><br></pre></td></tr></table></figure>

<p>这里面多出来了一个make.sh脚本，所以这里先去分析一下make.sh脚本</p>
]]></content>
      <categories>
        <category>瑞芯微脚本分析</category>
      </categories>
      <tags>
        <tag>瑞芯微脚本分析</tag>
      </tags>
  </entry>
  <entry>
    <title>0-5 Loader的编译</title>
    <url>/2023/09/10/0-5%20Loader%E7%9A%84%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>瑞芯微脚本分析</category>
      </categories>
      <tags>
        <tag>瑞芯微脚本分析</tag>
      </tags>
  </entry>
  <entry>
    <title>0-4 kernel的编译</title>
    <url>/2023/09/10/0-4%20kernel%E7%9A%84%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>瑞芯微脚本分析</category>
      </categories>
      <tags>
        <tag>瑞芯微脚本分析</tag>
      </tags>
  </entry>
  <entry>
    <title>0-6 uboot目录下 make.sh 脚本分析</title>
    <url>/2023/09/10/0-6%20uboot%E7%9B%AE%E5%BD%95%E4%B8%8B%20make.sh%20%E8%84%9A%E6%9C%AC%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./make.sh rk3588 CROSS_COMPILE=/home/topeet/Linux/3588-linux/prebuilts/gcc/linux-x86/aarch64/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu-</span><br></pre></td></tr></table></figure>

<p>使用make.sh进行的构建内容如上所示：</p>
<p>make.sh具体内容如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Copyright (c) 2019 Fuzhou Rockchip Electronics Co., Ltd</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># SPDX-License-Identifier: GPL-2.0</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># set -e 的作用是在脚本执行过程中，如果任何一条命令出现了错误，脚本会立即停止执行</span></span></span><br><span class="line">set -e</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询CPU的线程数</span></span><br><span class="line">JOB=`sed -n &quot;N;/processor/p&quot; /proc/cpuinfo|wc -l`</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询RK的一系列的默认配置文件</span></span><br><span class="line">SUPPORT_LIST=`ls configs/*[r,p][x,v,k][0-9][0-9]*_defconfig`</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$1</span>为输入的第一个参数。如果是上面的命令，那么CMD_ARGS为rk3588</span></span><br><span class="line">CMD_ARGS=$1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">########################################## User can modify #############################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置编译器的路径，设置RKBIN的路径</span></span><br><span class="line">RKBIN_TOOLS=../rkbin/tools</span><br><span class="line">CROSS_COMPILE_ARM32=../prebuilts/gcc/linux-x86/arm/gcc-linaro-6.3.1-2017.05-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-</span><br><span class="line">CROSS_COMPILE_ARM64=../prebuilts/gcc/linux-x86/aarch64/gcc-linaro-6.3.1-2017.05-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">########################################## User not touch #############################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Declare global INI file searching index name <span class="keyword">for</span> every chip, update <span class="keyword">in</span> select_chip_info()</span></span><br><span class="line">RKCHIP=</span><br><span class="line">RKCHIP_LABEL=</span><br><span class="line">RKCHIP_LOADER=</span><br><span class="line">RKCHIP_TRUST=</span><br><span class="line">INI_TRUST=</span><br><span class="line">INI_LOADER=</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Declare rkbin repository path, updated <span class="keyword">in</span> prepare()</span></span><br><span class="line">RKBIN=</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Declare global toolchain path <span class="keyword">for</span> CROSS_COMPILE, updated <span class="keyword">in</span> select_toolchain()</span></span><br><span class="line">TOOLCHAIN=</span><br><span class="line">TOOLCHAIN_NM=</span><br><span class="line">TOOLCHAIN_OBJDUMP=</span><br><span class="line">TOOLCHAIN_ADDR2LINE=</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Declare global plaform configure, updated <span class="keyword">in</span> fixup_platform_configure()</span></span><br><span class="line">PLAT_RSA=</span><br><span class="line">PLAT_SHA=</span><br><span class="line">PLAT_UBOOT_SIZE=</span><br><span class="line">PLAT_TRUST_SIZE=</span><br><span class="line">PLAT_TYPE=&quot;RKFW&quot; # default</span><br><span class="line"></span><br><span class="line">SRCTREE=`pwd`</span><br><span class="line">SCRIPT_FIT=&quot;$&#123;SRCTREE&#125;/scripts/fit.sh&quot;</span><br><span class="line"></span><br><span class="line">SCRIPT_ATF=&quot;$&#123;SRCTREE&#125;/scripts/atf.sh&quot;</span><br><span class="line">SCRIPT_TOS=&quot;$&#123;SRCTREE&#125;/scripts/tos.sh&quot;</span><br><span class="line">SCRIPT_SPL=&quot;$&#123;SRCTREE&#125;/scripts/spl.sh&quot;</span><br><span class="line">SCRIPT_UBOOT=&quot;$&#123;SRCTREE&#125;/scripts/uboot.sh&quot;</span><br><span class="line">SCRIPT_LOADER=&quot;$&#123;SRCTREE&#125;/scripts/loader.sh&quot;</span><br><span class="line">SCRIPT_DECOMP=&quot;$&#123;SRCTREE&#125;/scripts/decomp.sh&quot;</span><br><span class="line">CC_FILE=&quot;.cc&quot;</span><br><span class="line">REP_DIR=&quot;./rep&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">########################################################################################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">帮助信息</span></span><br><span class="line">function help()</span><br><span class="line">&#123;</span><br><span class="line">	echo</span><br><span class="line">	echo &quot;Usage:&quot;</span><br><span class="line">	echo &quot;	./make.sh [board|sub-command]&quot;</span><br><span class="line">	echo</span><br><span class="line">	echo &quot;	 - board:        board name of defconfig&quot;</span><br><span class="line">	echo &quot;	 - sub-command:  elf*|loader|trust|uboot|--spl|--tpl|itb|map|sym|&lt;addr&gt;&quot;</span><br><span class="line">	echo &quot;	 - ini:          ini file to pack trust/loader&quot;</span><br><span class="line">	echo</span><br><span class="line">	echo &quot;Output:&quot;</span><br><span class="line">	echo &quot;	 When board built okay, there are uboot/trust/loader images in current directory&quot;</span><br><span class="line">	echo</span><br><span class="line">	echo &quot;Example:&quot;</span><br><span class="line">	echo</span><br><span class="line">	echo &quot;1. Build:&quot;</span><br><span class="line">	echo &quot;	./make.sh evb-rk3399               --- build for evb-rk3399_defconfig&quot;</span><br><span class="line">	echo &quot;	./make.sh firefly-rk3288           --- build for firefly-rk3288_defconfig&quot;</span><br><span class="line">	echo &quot;	./make.sh EXT_DTB=rk-kernel.dtb    --- build with exist .config and external dtb&quot;</span><br><span class="line">	echo &quot;	./make.sh                          --- build with exist .config&quot;</span><br><span class="line">	echo &quot;	./make.sh env                      --- build envtools&quot;</span><br><span class="line">	echo</span><br><span class="line">	echo &quot;2. Pack:&quot;</span><br><span class="line">	echo &quot;	./make.sh uboot                    --- pack uboot.img&quot;</span><br><span class="line">	echo &quot;	./make.sh trust                    --- pack trust.img&quot;</span><br><span class="line">	echo &quot;	./make.sh trust &lt;ini&gt;              --- pack trust img with assigned ini file&quot;</span><br><span class="line">	echo &quot;	./make.sh loader                   --- pack loader bin&quot;</span><br><span class="line">	echo &quot;	./make.sh loader &lt;ini&gt;             --- pack loader img with assigned ini file&quot;</span><br><span class="line">	echo &quot;	./make.sh --spl                    --- pack loader with u-boot-spl.bin&quot;</span><br><span class="line">	echo &quot;	./make.sh --tpl                    --- pack loader with u-boot-tpl.bin&quot;</span><br><span class="line">	echo &quot;	./make.sh --tpl --spl              --- pack loader with u-boot-tpl.bin and u-boot-spl.bin&quot;</span><br><span class="line">	echo</span><br><span class="line">	echo &quot;3. Debug:&quot;</span><br><span class="line">	echo &quot;	./make.sh elf                      --- dump elf file with -D(default)&quot;</span><br><span class="line">	echo &quot;	./make.sh elf-S                    --- dump elf file with -S&quot;</span><br><span class="line">	echo &quot;	./make.sh elf-d                    --- dump elf file with -d&quot;</span><br><span class="line">	echo &quot;	./make.sh elf-*                    --- dump elf file with -*&quot;</span><br><span class="line">	echo &quot;	./make.sh &lt;no reloc_addr&gt;          --- unwind address(no relocated)&quot;</span><br><span class="line">	echo &quot;	./make.sh &lt;reloc_addr-reloc_off&gt;   --- unwind address(relocated)&quot;</span><br><span class="line">	echo &quot;	./make.sh map                      --- cat u-boot.map&quot;</span><br><span class="line">	echo &quot;	./make.sh sym                      --- cat u-boot.sym&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从指定的文件中提取以给定的<span class="variable">$&#123;1&#125;</span>变量作为前缀的行，并删除<span class="variable">$&#123;1&#125;</span>=后面的内容</span></span><br><span class="line">function filt_val()</span><br><span class="line">&#123;</span><br><span class="line">	sed -n &quot;/$&#123;1&#125;=/s/$&#123;1&#125;=//p&quot; $2 | tr -d &#x27;\r&#x27; | tr -d &#x27;&quot;&#x27;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">看最后的打印ARM64_TRUSTZONE为y，PLAT_TYPE为FIT</span></span><br><span class="line">function prepare()</span><br><span class="line">&#123;</span><br><span class="line">	if [ -d $&#123;RKBIN_TOOLS&#125; ]; then</span><br><span class="line">		absolute_path=$(cd `dirname $&#123;RKBIN_TOOLS&#125;`; pwd)</span><br><span class="line">		RKBIN=$&#123;absolute_path&#125;</span><br><span class="line">	else</span><br><span class="line">		echo &quot;ERROR: No ../rkbin repository&quot;</span><br><span class="line">		exit 1</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if grep -Eq &#x27;&#x27;^CONFIG_ARM64=y&#x27;|&#x27;^CONFIG_ARM64_BOOT_AARCH32=y&#x27;&#x27; .config ; then</span><br><span class="line">		ARM64_TRUSTZONE=&quot;y&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if grep  -q &#x27;^CONFIG_ROCKCHIP_FIT_IMAGE_PACK=y&#x27; .config ; then</span><br><span class="line">		PLAT_TYPE=&quot;FIT&quot;</span><br><span class="line">	elif grep  -q &#x27;^CONFIG_SPL_DECOMP_HEADER=y&#x27; .config ; then</span><br><span class="line">		PLAT_TYPE=&quot;DECOMP&quot;</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看传入的参数，进行轮询，从而确定编译对象</span></span><br><span class="line">function process_args()</span><br><span class="line">&#123;</span><br><span class="line">	while [ $# -gt 0 ]; do</span><br><span class="line">		case $1 in</span><br><span class="line">			*help|--h|-h)</span><br><span class="line">				help</span><br><span class="line">				exit 0</span><br><span class="line">				;;</span><br><span class="line">			CROSS_COMPILE=*)  # set CROSS_COMPILE</span><br><span class="line">				ARG_COMPILE=&quot;y&quot;</span><br><span class="line">				CROSS_COMPILE_ARM32=$&#123;1#*=&#125;</span><br><span class="line">				CROSS_COMPILE_ARM64=$&#123;1#*=&#125;</span><br><span class="line">				if [ $&#123;CMD_ARGS&#125; == $1 ]; then</span><br><span class="line">					shift 1</span><br><span class="line">					CMD_ARGS=$1</span><br><span class="line">				else</span><br><span class="line">					shift 1</span><br><span class="line">				fi</span><br><span class="line">				;;</span><br><span class="line">                #build with exist .config：使用已存在的.config文件进行构建。</span><br><span class="line">                #loader|trust|uboot：打包镜像。</span><br><span class="line">                #debug*|map|sym|elf*|nm：调试命令。</span><br><span class="line">                #env：构建环境工具。</span><br><span class="line">                #itb：打包ITB镜像。</span><br><span class="line">                #fit：打包非安全的uboot.img和boot.img。			</span><br><span class="line">                #&#x27;&#x27;|loader|trust|uboot|debug*|itb|env|fit|map|sym|elf*|nm)</span><br><span class="line">				if [ &quot;$2&quot; == &quot;spl&quot; -o &quot;$2&quot; == &quot;tpl&quot; ]; then</span><br><span class="line">					ARG_TSPL=$2</span><br><span class="line">					shift 1</span><br><span class="line">				fi</span><br><span class="line">				shift 1</span><br><span class="line">				;;</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">trust/loader ini files <span class="keyword">for</span> packing trust.img/loader.img</span></span><br><span class="line">			*.ini|*.INI)</span><br><span class="line">				if [ ! -f $1 ]; then</span><br><span class="line">					echo &quot;ERROR: No $1&quot;</span><br><span class="line">				fi</span><br><span class="line">				if grep -q &#x27;CODE471_OPTION&#x27; $1 ; then</span><br><span class="line">					ARG_INI_LOADER=$1</span><br><span class="line">				elif grep -Eq &#x27;&#x27;BL31_OPTION&#x27;|&#x27;TOS&#x27;&#x27; $1 ; then</span><br><span class="line">					ARG_INI_TRUST=$1</span><br><span class="line">				fi</span><br><span class="line">				shift 1</span><br><span class="line">				;;</span><br><span class="line">			--sz-trust) # set trust size</span><br><span class="line">				ARG_TRUST_SIZE=&quot;--size $2 $3&quot;</span><br><span class="line">				shift 3</span><br><span class="line">				;;</span><br><span class="line">			--sz-uboot) # set uboot size</span><br><span class="line">				ARG_UBOOT_SIZE=&quot;--size $2 $3&quot;</span><br><span class="line">				shift 3</span><br><span class="line">				;;</span><br><span class="line">			--raw-compile)  # FIT: build but not pack image</span><br><span class="line">				ARG_RAW_COMPILE=&quot;y&quot;</span><br><span class="line">				shift 1</span><br><span class="line">				;;</span><br><span class="line">			--no-uboot) # FIT: pack uboot.img without u-boot</span><br><span class="line">				ARG_NO_UBOOT=&quot;y&quot;</span><br><span class="line">				shift 1</span><br><span class="line">				;;</span><br><span class="line">			--idblock)  # pack idblock.bin</span><br><span class="line">				shift 1</span><br><span class="line">				;;</span><br><span class="line">			--tpl|tpl)  # use tpl file</span><br><span class="line">				ARG_TPL_BIN=&quot;tpl/u-boot-tpl.bin&quot;</span><br><span class="line">				shift 1</span><br><span class="line">				;;</span><br><span class="line">			--spl|spl*) # use spl file</span><br><span class="line">				ARG_SPL_BIN=&quot;spl/u-boot-spl.bin&quot;</span><br><span class="line">				shift 1</span><br><span class="line">				;;</span><br><span class="line">			--uboot|--fdt|--optee|--mcu|--bl31) # uboot.img components</span><br><span class="line">				mkdir -p $&#123;REP_DIR&#125;</span><br><span class="line">				if [ ! -f $2 ]; then</span><br><span class="line">					echo &quot;ERROR: No $2&quot;</span><br><span class="line">					exit 1</span><br><span class="line">				fi</span><br><span class="line">				if [ &quot;$1&quot; == &quot;--uboot&quot; ]; then</span><br><span class="line">					cp $2 $&#123;REP_DIR&#125;/u-boot-nodtb.bin</span><br><span class="line">				elif [ &quot;$1&quot; == &quot;--fdt&quot; ]; then</span><br><span class="line">					cp $2 $&#123;REP_DIR&#125;/u-boot.dtb</span><br><span class="line">				elif [ &quot;$1&quot; == &quot;--optee&quot; ]; then</span><br><span class="line">					cp $2 $&#123;REP_DIR&#125;/tee.bin</span><br><span class="line">				elif [ &quot;$1&quot; == &quot;--mcu&quot; ]; then</span><br><span class="line">					cp $2 $&#123;REP_DIR&#125;/mcu.bin</span><br><span class="line">				elif [ &quot;$1&quot; == &quot;--bl31&quot; ]; then</span><br><span class="line">					if ! file $2 | grep &#x27;ELF &#x27; &gt;/dev/null 2&gt;&amp;1 ; then</span><br><span class="line">						echo &quot;ERROR: $2 is not a bl31.elf file&quot;</span><br><span class="line">						exit 1</span><br><span class="line">					fi</span><br><span class="line">					cp $2 $&#123;REP_DIR&#125;/bl31.elf</span><br><span class="line">				fi</span><br><span class="line">				shift 2</span><br><span class="line">				;;</span><br><span class="line">			*)</span><br><span class="line">				#1. FIT scripts args</span><br><span class="line">				NUM=$($&#123;SCRIPT_FIT&#125; --args $1)</span><br><span class="line">				if  [ $&#123;NUM&#125; -ne 0 ]; then</span><br><span class="line">					[ $&#123;NUM&#125; -eq 1 ] &amp;&amp; ARG_LIST_FIT=&quot;$&#123;ARG_LIST_FIT&#125; $1&quot;</span><br><span class="line">					[ $&#123;NUM&#125; -eq 2 ] &amp;&amp; ARG_LIST_FIT=&quot;$&#123;ARG_LIST_FIT&#125; $1 $2&quot;</span><br><span class="line">					shift $&#123;NUM&#125;</span><br><span class="line">					continue</span><br><span class="line">				#2. unwind function address</span><br><span class="line">				elif [ -z $(echo $1 | sed &#x27;s/[0-9,a-f,A-F,x,X,-]//g&#x27;) ]; then</span><br><span class="line">					ARG_FUNCADDR=$1</span><br><span class="line">				#3. make defconfig</span><br><span class="line">				else</span><br><span class="line">					ARG_BOARD=$1</span><br><span class="line">					if [ ! -f configs/$&#123;ARG_BOARD&#125;_defconfig -a ! -f configs/$&#123;ARG_BOARD&#125;.config ]; then</span><br><span class="line">						echo -e &quot;\n$&#123;SUPPORT_LIST&#125;\n&quot;</span><br><span class="line">						echo &quot;ERROR: No configs/$&#123;ARG_BOARD&#125;_defconfig&quot;</span><br><span class="line">						exit 1</span><br><span class="line">					elif [ -f configs/$&#123;ARG_BOARD&#125;.config ]; then</span><br><span class="line">						BASE1_DEFCONFIG=`filt_val &quot;CONFIG_BASE_DEFCONFIG&quot; configs/$&#123;ARG_BOARD&#125;.config`</span><br><span class="line">						BASE0_DEFCONFIG=`filt_val &quot;CONFIG_BASE_DEFCONFIG&quot; configs/$&#123;BASE1_DEFCONFIG&#125;`</span><br><span class="line">						MAKE_CMD=&quot;make $&#123;BASE0_DEFCONFIG&#125; $&#123;BASE1_DEFCONFIG&#125; $&#123;ARG_BOARD&#125;.config -j$&#123;JOB&#125;&quot;</span><br><span class="line">						echo &quot;## $&#123;MAKE_CMD&#125;&quot;</span><br><span class="line">						make $&#123;BASE0_DEFCONFIG&#125; $&#123;BASE1_DEFCONFIG&#125; $&#123;ARG_BOARD&#125;.config $&#123;OPTION&#125;</span><br><span class="line">						rm -f $&#123;CC_FILE&#125;</span><br><span class="line">					else</span><br><span class="line">						MAKE_CMD=&quot;make $&#123;ARG_BOARD&#125;_defconfig -j$&#123;JOB&#125;&quot;</span><br><span class="line">						echo &quot;## $&#123;MAKE_CMD&#125;&quot;</span><br><span class="line">						make $&#123;ARG_BOARD&#125;_defconfig $&#123;OPTION&#125;</span><br><span class="line">						rm -f $&#123;CC_FILE&#125;</span><br><span class="line">					fi</span><br><span class="line">				fi</span><br><span class="line">				shift 1</span><br><span class="line">				;;</span><br><span class="line">		esac</span><br><span class="line">	done</span><br><span class="line"></span><br><span class="line">	if [ ! -f .config ]; then</span><br><span class="line">		echo</span><br><span class="line">		echo &quot;ERROR: No .config&quot;</span><br><span class="line">		help</span><br><span class="line">		exit 1</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择交叉编译器</span></span><br><span class="line">function select_toolchain()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">If no outer CROSS_COMPILE, look <span class="keyword">for</span> it from CC_FILE.</span></span><br><span class="line">	if [ &quot;$&#123;ARG_COMPILE&#125;&quot; != &quot;y&quot; ]; then</span><br><span class="line">		if [ -f $&#123;CC_FILE&#125; ]; then</span><br><span class="line">			CROSS_COMPILE_ARM32=`cat $&#123;CC_FILE&#125;`</span><br><span class="line">			CROSS_COMPILE_ARM64=`cat $&#123;CC_FILE&#125;`</span><br><span class="line">		else</span><br><span class="line">			if grep -q &#x27;^CONFIG_ARM64=y&#x27; .config ; then</span><br><span class="line">				CROSS_COMPILE_ARM64=$(cd `dirname $&#123;CROSS_COMPILE_ARM64&#125;`; pwd)&quot;/aarch64-linux-gnu-&quot;</span><br><span class="line">			else</span><br><span class="line">				CROSS_COMPILE_ARM32=$(cd `dirname $&#123;CROSS_COMPILE_ARM32&#125;`; pwd)&quot;/arm-linux-gnueabihf-&quot;</span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if grep -q &#x27;^CONFIG_ARM64=y&#x27; .config ; then</span><br><span class="line">		TOOLCHAIN=$&#123;CROSS_COMPILE_ARM64&#125;</span><br><span class="line">		TOOLCHAIN_NM=$&#123;CROSS_COMPILE_ARM64&#125;nm</span><br><span class="line">		TOOLCHAIN_OBJDUMP=$&#123;CROSS_COMPILE_ARM64&#125;objdump</span><br><span class="line">		TOOLCHAIN_ADDR2LINE=$&#123;CROSS_COMPILE_ARM64&#125;addr2line</span><br><span class="line">	else</span><br><span class="line">		TOOLCHAIN=$&#123;CROSS_COMPILE_ARM32&#125;</span><br><span class="line">		TOOLCHAIN_NM=$&#123;CROSS_COMPILE_ARM32&#125;nm</span><br><span class="line">		TOOLCHAIN_OBJDUMP=$&#123;CROSS_COMPILE_ARM32&#125;objdump</span><br><span class="line">		TOOLCHAIN_ADDR2LINE=$&#123;CROSS_COMPILE_ARM32&#125;addr2line</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [ ! `which $&#123;TOOLCHAIN&#125;gcc` ]; then</span><br><span class="line">		echo &quot;ERROR: No find $&#123;TOOLCHAIN&#125;gcc&quot;</span><br><span class="line">		exit 1</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">save to CC_FILE</span></span><br><span class="line">	if [ &quot;$&#123;ARG_COMPILE&#125;&quot; == &quot;y&quot; ]; then</span><br><span class="line">		echo &quot;$&#123;TOOLCHAIN&#125;&quot; &gt; $&#123;CC_FILE&#125;</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># We select chip info to do:</span></span></span><br><span class="line">    #RKCHIP：用于修复平台配置。</span><br><span class="line">    #RKCHIP_LOADER：搜索ini文件以打包loader。</span><br><span class="line">    #RKCHIP_TRUST：搜索ini文件以打包trust。</span><br><span class="line">    #RKCHIP_LABEL：显示构建信息。</span><br><span class="line">function select_chip_info()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Read RKCHIP firstly from .config</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">The regular expression that matching:</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"> - PX30, PX3SE</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"> - RK????, RK????X</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"> - RV????</span></span><br><span class="line">	CHIP_PATTERN=&#x27;^CONFIG_ROCKCHIP_[R,P][X,V,K][0-9ESX]&#123;1,5&#125;&#x27;</span><br><span class="line">	RKCHIP=`egrep -o $&#123;CHIP_PATTERN&#125; .config`</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">default</span></span><br><span class="line">	RKCHIP=$&#123;RKCHIP##*_&#125;</span><br><span class="line">	RKCHIP_LOADER=$&#123;RKCHIP&#125;</span><br><span class="line">	RKCHIP_TRUST=$&#123;RKCHIP&#125;</span><br><span class="line">	RKCHIP_LABEL=`filt_val &quot;CONFIG_CHIP_NAME&quot; .config`</span><br><span class="line">	if [ -z &quot;$&#123;RKCHIP_LABEL&#125;&quot; ]; then</span><br><span class="line">		RKCHIP_LABEL=$&#123;RKCHIP&#125;</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指明了在进行芯片配置时的优先级顺序，以及通过不同方式指定的优先级 Priority: default &lt; CHIP_CFG_FIXUP_TABLE() &lt; make.sh args</span></span><br><span class="line">function fixup_platform_configure()</span><br><span class="line">&#123;</span><br><span class="line">	U_KB=`filt_val &quot;CONFIG_UBOOT_SIZE_KB&quot; .config`</span><br><span class="line">	U_NUM=`filt_val &quot;CONFIG_UBOOT_NUM&quot; .config`</span><br><span class="line">	T_KB=`filt_val &quot;CONFIG_TRUST_SIZE_KB&quot; .config`</span><br><span class="line">	T_NUM=`filt_val &quot;CONFIG_TRUST_NUM&quot; .config`</span><br><span class="line">	SHA=`filt_val &quot;CONFIG_TRUST_SHA_MODE&quot; .config`</span><br><span class="line">	RSA=`filt_val &quot;CONFIG_TRUST_RSA_MODE&quot; .config`</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">.config</span></span><br><span class="line">	PLAT_UBOOT_SIZE=&quot;--size $&#123;U_KB&#125; $&#123;U_NUM&#125;&quot;</span><br><span class="line">	PLAT_TRUST_SIZE=&quot;--size $&#123;T_KB&#125; $&#123;T_NUM&#125;&quot;</span><br><span class="line">	PLAT_SHA=&quot;--sha $&#123;SHA&#125;&quot;</span><br><span class="line">	PLAT_RSA=&quot;--rsa $&#123;RSA&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">./make.sh args</span></span><br><span class="line">	if [ ! -z &quot;$&#123;ARG_UBOOT_SIZE&#125;&quot; ]; then</span><br><span class="line">		PLAT_UBOOT_SIZE=$&#123;ARG_UBOOT_SIZE&#125;</span><br><span class="line">	fi</span><br><span class="line">	if [ ! -z &quot;$&#123;ARG_TRUST_SIZE&#125;&quot; ]; then</span><br><span class="line">		PLAT_TRUST_SIZE=$&#123;ARG_TRUST_SIZE&#125;</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择ini文件</span></span><br><span class="line">function select_ini_file()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">default</span></span><br><span class="line">	INI_LOADER=$&#123;RKBIN&#125;/RKBOOT/$&#123;RKCHIP_LOADER&#125;MINIALL.ini</span><br><span class="line">	if [ &quot;$&#123;ARM64_TRUSTZONE&#125;&quot; == &quot;y&quot; ]; then</span><br><span class="line">		INI_TRUST=$&#123;RKBIN&#125;/RKTRUST/$&#123;RKCHIP_TRUST&#125;TRUST.ini</span><br><span class="line">	else</span><br><span class="line">		INI_TRUST=$&#123;RKBIN&#125;/RKTRUST/$&#123;RKCHIP_TRUST&#125;TOS.ini</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">defconfig</span></span><br><span class="line">	NAME=`filt_val &quot;CONFIG_LOADER_INI&quot; .config`</span><br><span class="line">	if [ ! -z &quot;$&#123;NAME&#125;&quot; ]; then</span><br><span class="line">		INI_LOADER=$&#123;RKBIN&#125;/RKBOOT/$&#123;NAME&#125;</span><br><span class="line">	fi</span><br><span class="line">	NAME=`filt_val &quot;CONFIG_TRUST_INI&quot; .config`</span><br><span class="line">	if [ ! -z &quot;$&#123;NAME&#125;&quot; ]; then</span><br><span class="line">		INI_TRUST=$&#123;RKBIN&#125;/RKTRUST/$&#123;NAME&#125;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">args</span></span><br><span class="line">	if [ ! -z &quot;$&#123;ARG_INI_TRUST&#125;&quot; ]; then</span><br><span class="line">		INI_TRUST=$&#123;ARG_INI_TRUST&#125;</span><br><span class="line">	fi</span><br><span class="line">	if [ ! -z &quot;$&#123;ARG_INI_LOADER&#125;&quot; ]; then</span><br><span class="line">		INI_LOADER=$&#123;ARG_INI_LOADER&#125;</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">各个功能的实现</span></span><br><span class="line">function sub_commands()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">skip <span class="string">&quot;--&quot;</span> parameter, such as <span class="string">&quot;--rollback-index-...&quot;</span></span></span><br><span class="line">	if [[ $&#123;CMD_ARGS&#125; != --* ]]; then</span><br><span class="line">		CMD=$&#123;CMD_ARGS%-*&#125;</span><br><span class="line">		ARG=$&#123;CMD_ARGS#*-&#125;</span><br><span class="line">	else</span><br><span class="line">		CMD=$&#123;CMD_ARGS&#125;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [ &quot;$&#123;ARG_TSPL&#125;&quot; == &quot;tpl&quot; -o &quot;$&#123;ARG_TSPL&#125;&quot; == &quot;spl&quot; ]; then</span><br><span class="line">		ELF=`find -name u-boot-$&#123;ARG_TSPL&#125;`</span><br><span class="line">		MAP=`find -name u-boot-$&#123;ARG_TSPL&#125;.map`</span><br><span class="line">		SYM=`find -name u-boot-$&#123;ARG_TSPL&#125;.sym`</span><br><span class="line">	else</span><br><span class="line">		ELF=u-boot</span><br><span class="line">		MAP=u-boot.map</span><br><span class="line">		SYM=u-boot.sym</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	case $&#123;CMD&#125; in</span><br><span class="line">		elf|nm)</span><br><span class="line">			if [ &quot;$&#123;CMD&#125;&quot; == &quot;nm&quot; ]; then</span><br><span class="line">				echo -e &quot;\n$&#123;ELF&#125;:     file format elf\n&quot;</span><br><span class="line">				$&#123;TOOLCHAIN_NM&#125; -r --size $&#123;ELF&#125; | grep -iv &#x27;b&#x27; | less</span><br><span class="line">			else</span><br><span class="line">				if [ &quot;$&#123;CMD&#125;&quot; == &quot;elf&quot; -a &quot;$&#123;ARG&#125;&quot; == &quot;elf&quot; ]; then</span><br><span class="line">					ARG=D # default</span><br><span class="line">				fi</span><br><span class="line">				$&#123;TOOLCHAIN_OBJDUMP&#125; -$&#123;ARG&#125; $&#123;ELF&#125; | less</span><br><span class="line">			fi</span><br><span class="line">			exit 0</span><br><span class="line">			;;</span><br><span class="line">		map|sym)</span><br><span class="line">			if [ $&#123;CMD&#125; == &quot;map&quot; ]; then</span><br><span class="line">				cat $&#123;MAP&#125; | less</span><br><span class="line">			else</span><br><span class="line">				cat $&#123;SYM&#125; | less</span><br><span class="line">			fi</span><br><span class="line">			exit 0</span><br><span class="line">			;;</span><br><span class="line">		debug)</span><br><span class="line">			./scripts/rkpatch.sh $&#123;ARG&#125;</span><br><span class="line">			exit 0</span><br><span class="line">			;;</span><br><span class="line">		fit)</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">Non-secure</span></span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">&#123;SCRIPT_FIT&#125; --boot_img_dir images/ <span class="variable">$&#123;ARG_LIST_FIT&#125;</span></span></span><br><span class="line">			exit 0</span><br><span class="line">			;;</span><br><span class="line">		uboot)</span><br><span class="line">			pack_uboot_image</span><br><span class="line">			exit 0</span><br><span class="line">			;;</span><br><span class="line">		trust)</span><br><span class="line">			pack_trust_image</span><br><span class="line">			exit 0</span><br><span class="line">			;;</span><br><span class="line">		loader)</span><br><span class="line">			pack_loader_image</span><br><span class="line">			exit 0</span><br><span class="line">			;;</span><br><span class="line">		itb)</span><br><span class="line">			pack_uboot_itb_image</span><br><span class="line">			exit 0</span><br><span class="line">			;;</span><br><span class="line">		env)</span><br><span class="line">			make CROSS_COMPILE=$&#123;TOOLCHAIN&#125; envtools</span><br><span class="line">			exit 0</span><br><span class="line">			;;</span><br><span class="line">		--idblock)</span><br><span class="line">			pack_idblock</span><br><span class="line">			exit 0</span><br><span class="line">			;;</span><br><span class="line">		--tpl|--spl|tpl|spl)</span><br><span class="line">			pack_spl_loader_image</span><br><span class="line">			exit 0</span><br><span class="line">			;;</span><br><span class="line">		*)</span><br><span class="line">			unwind_addr_or_continue</span><br><span class="line">			;;</span><br><span class="line">	esac</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据给定的函数地址（FUNCADDR）在符号表（SYM）中查找对应的函数符号，并使用工具链的addr2line命令获取函数的源代码位置信息</span></span><br><span class="line">function unwind_addr_or_continue()</span><br><span class="line">&#123;</span><br><span class="line">	FUNCADDR=$&#123;ARG_FUNCADDR&#125;</span><br><span class="line">	RELOCOFF=$&#123;FUNCADDR#*-&#125;</span><br><span class="line">	FUNCADDR=$&#123;FUNCADDR%-*&#125;</span><br><span class="line"></span><br><span class="line">	if [ -z $(echo $&#123;FUNCADDR&#125; | sed &#x27;s/[0-9,a-f,A-F,x,X,-]//g&#x27;) ] &amp;&amp; [ $&#123;FUNCADDR&#125; ]; then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">With prefix: <span class="string">&#x27;0x&#x27;</span> or <span class="string">&#x27;0X&#x27;</span></span></span><br><span class="line">		if [ `echo $&#123;FUNCADDR&#125; | sed -n &quot;/0[x,X]/p&quot; | wc -l` -ne 0 ]; then</span><br><span class="line">			FUNCADDR=`echo $&#123;FUNCADDR&#125; | awk &#x27;&#123; print strtonum($0) &#125;&#x27;`</span><br><span class="line">			FUNCADDR=`echo &quot;obase=16;$&#123;FUNCADDR&#125;&quot;|bc | tr &#x27;[A-Z]&#x27; &#x27;[a-z]&#x27;`</span><br><span class="line">		fi</span><br><span class="line">		if [ `echo $&#123;RELOCOFF&#125; | sed -n &quot;/0[x,X]/p&quot; | wc -l` -ne 0 ] &amp;&amp; [ $&#123;RELOCOFF&#125; ]; then</span><br><span class="line">			RELOCOFF=`echo $&#123;RELOCOFF&#125; | awk &#x27;&#123; print strtonum($0) &#125;&#x27;`</span><br><span class="line">			RELOCOFF=`echo &quot;obase=16;$&#123;RELOCOFF&#125;&quot;|bc | tr &#x27;[A-Z]&#x27; &#x27;[a-z]&#x27;`</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">If reloc address is assigned, <span class="keyword">do</span> sub</span></span><br><span class="line">		if [ &quot;$&#123;FUNCADDR&#125;&quot; != &quot;$&#123;RELOCOFF&#125;&quot; ]; then</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">Hex -&gt; Dec -&gt; SUB -&gt; Hex</span></span><br><span class="line">			FUNCADDR=`echo $((16#$&#123;FUNCADDR&#125;))`</span><br><span class="line">			RELOCOFF=`echo $((16#$&#123;RELOCOFF&#125;))`</span><br><span class="line">			FUNCADDR=$((FUNCADDR-RELOCOFF))</span><br><span class="line">			FUNCADDR=$(echo &quot;obase=16;$&#123;FUNCADDR&#125;&quot;|bc | tr &#x27;[A-Z]&#x27; &#x27;[a-z]&#x27;)</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		echo</span><br><span class="line">		sed -n &quot;/$&#123;FUNCADDR&#125;/p&quot; $&#123;SYM&#125;</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">&#123;TOOLCHAIN_ADDR2LINE&#125; -e <span class="variable">$&#123;ELF&#125;</span> <span class="variable">$&#123;FUNCADDR&#125;</span></span></span><br><span class="line">		exit 0</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打包生成一个名为idblock.bin的文件</span></span><br><span class="line">function pack_idblock()</span><br><span class="line">&#123;</span><br><span class="line">	INI=$&#123;INI_LOADER&#125;</span><br><span class="line">	if [ ! -f $&#123;INI&#125; ]; then</span><br><span class="line">		echo &quot;ERROR: No $&#123;INI&#125;&quot;</span><br><span class="line">		exit 1</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">chip</span></span><br><span class="line">	COMMON_H=`grep &quot;_common.h:&quot; include/autoconf.mk.dep | awk -F &quot;/&quot; &#x27;&#123; printf $3 &#125;&#x27;`</span><br><span class="line">	PLAT=$&#123;COMMON_H%_*&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">file</span></span><br><span class="line">	SPL_BIN=$&#123;RKBIN&#125;/`filt_val &quot;FlashBoot&quot; $&#123;INI&#125;`</span><br><span class="line">	TPL_BIN=$&#123;RKBIN&#125;/`filt_val &quot;FlashData&quot; $&#123;INI&#125;`</span><br><span class="line">	if [ ! -z &quot;$&#123;ARG_SPL_BIN&#125;&quot; ]; then</span><br><span class="line">		SPL_BIN=$&#123;ARG_SPL_BIN&#125;</span><br><span class="line">	fi</span><br><span class="line">	if [ ! -z &quot;$&#123;ARG_TPL_BIN&#125;&quot; ]; then</span><br><span class="line">		TPL_BIN=$&#123;ARG_TPL_BIN&#125;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">pack</span></span><br><span class="line">	rm idblock.bin -f</span><br><span class="line">	./tools/mkimage -n $&#123;PLAT&#125; -T rksd -d $&#123;TPL_BIN&#125;:$&#123;SPL_BIN&#125; idblock.bin</span><br><span class="line">	echo &quot;Input:&quot;</span><br><span class="line">	echo &quot;    $&#123;INI&#125;&quot;</span><br><span class="line">	echo &quot;    $&#123;TPL_BIN&#125;&quot;</span><br><span class="line">	echo &quot;    $&#123;SPL_BIN&#125;&quot;</span><br><span class="line">	echo</span><br><span class="line">	echo &quot;Pack $&#123;PLAT&#125; idblock.bin okay!&quot;</span><br><span class="line">	echo</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打包生成uboot_itb镜像</span></span><br><span class="line">function pack_uboot_itb_image()</span><br><span class="line">&#123;</span><br><span class="line">	INI=$&#123;INI_TRUST&#125;</span><br><span class="line">	if [ ! -f $&#123;INI&#125; ]; then</span><br><span class="line">		echo &quot;ERROR: No $&#123;INI&#125;&quot;</span><br><span class="line">		exit 1</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [ &quot;$&#123;ARM64_TRUSTZONE&#125;&quot; == &quot;y&quot; ]; then</span><br><span class="line">		BL31_ELF=`sed -n &#x27;/_bl31_/s/PATH=//p&#x27; $&#123;INI&#125; | tr -d &#x27;\r&#x27;`</span><br><span class="line">		BL32_BIN=`sed -n &#x27;/_bl32_/s/PATH=//p&#x27; $&#123;INI&#125; | tr -d &#x27;\r&#x27;`</span><br><span class="line">		rm bl31.elf tee.bin -rf</span><br><span class="line">		cp $&#123;RKBIN&#125;/$&#123;BL31_ELF&#125; bl31.elf</span><br><span class="line">		if grep BL32_OPTION -A 1 $&#123;INI&#125; | grep SEC=1 ; then</span><br><span class="line">			cp $&#123;RKBIN&#125;/$&#123;BL32_BIN&#125; tee.bin</span><br><span class="line">			TEE_OFFSET=`grep BL32_OPTION -A 3 $&#123;INI&#125; | grep ADDR= | awk -F &quot;=&quot; &#x27;&#123; printf $2 &#125;&#x27; | tr -d &#x27;\r&#x27;`</span><br><span class="line">			TEE_ARG=&quot;-t $&#123;TEE_OFFSET&#125;&quot;</span><br><span class="line">		fi</span><br><span class="line">	else</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">TOS</span></span><br><span class="line">		TOS=`filt_val &quot;TOS&quot; $&#123;INI&#125;`</span><br><span class="line">		TOSTA=`filt_val &quot;TOSTA&quot; $&#123;INI&#125;`</span><br><span class="line">		if [ ! -z &quot;$&#123;TOSTA&#125;&quot; ]; then</span><br><span class="line">			cp $&#123;RKBIN&#125;/$&#123;TOSTA&#125; tee.bin</span><br><span class="line">		elif [ ! -z &quot;$&#123;TOS&#125;&quot; ]; then</span><br><span class="line">			cp $&#123;RKBIN&#125;/$&#123;TOS&#125;   tee.bin</span><br><span class="line">		else</span><br><span class="line">			echo &quot;WARN: No tee bin&quot;</span><br><span class="line">		fi</span><br><span class="line">		if [ ! -z &quot;$&#123;TOSTA&#125;&quot; -o ! -z &quot;$&#123;TOS&#125;&quot; ]; then</span><br><span class="line">			TEE_OFFSET=`filt_val &quot;ADDR&quot; $&#123;INI&#125;`</span><br><span class="line">			if [ &quot;$&#123;TEE_OFFSET&#125;&quot; == &quot;&quot; ]; then</span><br><span class="line">				TEE_OFFSET=0x8400000</span><br><span class="line">			fi</span><br><span class="line">			TEE_ARG=&quot;-t $&#123;TEE_OFFSET&#125;&quot;</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">MCUs</span></span><br><span class="line">	for ((i=0; i&lt;5; i++))</span><br><span class="line">	do</span><br><span class="line">		MCU_BIN=&quot;mcu$&#123;i&#125;.bin&quot;</span><br><span class="line">		MCU_IDX=&quot;MCU$&#123;i&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">compatible: use <span class="string">&quot;MCU&quot;</span> to replace <span class="string">&quot;MCU0&quot;</span> <span class="keyword">if</span> <span class="string">&quot;MCU&quot;</span> is present.</span></span><br><span class="line">		ENABLED=`awk -F&quot;,&quot; &#x27;/MCU=/  &#123; printf $3 &#125;&#x27; $&#123;INI&#125; | tr -d &#x27; &#x27;`</span><br><span class="line">		if [ $&#123;i&#125; -eq 0 ]; then</span><br><span class="line">			ENABLED=`awk -F&quot;,&quot; &#x27;/MCU=/  &#123; printf $3 &#125;&#x27; $&#123;INI&#125; | tr -d &#x27; &#x27;`</span><br><span class="line">			if [ ! -z $&#123;ENABLED&#125; ]; then</span><br><span class="line">				MCU_IDX=&quot;MCU&quot;</span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		ENABLED=`awk -F &quot;,&quot; &#x27;/&#x27;$&#123;MCU_IDX&#125;&#x27;=/  &#123; printf $3 &#125;&#x27; $&#123;INI&#125; | tr -d &#x27; &#x27;`</span><br><span class="line">		if [ &quot;$&#123;ENABLED&#125;&quot; == &quot;enabled&quot; -o &quot;$&#123;ENABLED&#125;&quot; == &quot;okay&quot; ]; then</span><br><span class="line">			NAME=`awk -F &quot;,&quot; &#x27;/&#x27;$&#123;MCU_IDX&#125;&#x27;=/ &#123; printf $1 &#125;&#x27; $&#123;INI&#125; | tr -d &#x27; &#x27; | awk -F &quot;=&quot; &#x27;&#123; print $2 &#125;&#x27;`</span><br><span class="line">			OFFS=`awk -F &quot;,&quot; &#x27;/&#x27;$&#123;MCU_IDX&#125;&#x27;=/ &#123; printf $2 &#125;&#x27; $&#123;INI&#125; | tr -d &#x27; &#x27;`</span><br><span class="line">			cp $&#123;RKBIN&#125;/$&#123;NAME&#125; $&#123;MCU_BIN&#125;</span><br><span class="line">			if [ -z $&#123;OFFS&#125; ]; then</span><br><span class="line">				echo &quot;ERROR: No $&#123;MCU_BIN&#125; address in $&#123;INI&#125;&quot;</span><br><span class="line">				exit 1</span><br><span class="line">			fi</span><br><span class="line">			MCU_ARG=$&#123;MCU_ARG&#125;&quot; -m$&#123;i&#125; $&#123;OFFS&#125;&quot;</span><br><span class="line">		fi</span><br><span class="line">	done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Loadables</span></span><br><span class="line">	for ((i=0; i&lt;5; i++))</span><br><span class="line">	do</span><br><span class="line">		LOAD_BIN=&quot;load$&#123;i&#125;.bin&quot;</span><br><span class="line">		LOAD_IDX=&quot;LOAD$&#123;i&#125;&quot;</span><br><span class="line">		ENABLED=`awk -F &quot;,&quot; &#x27;/&#x27;$&#123;LOAD_IDX&#125;&#x27;=/  &#123; printf $3 &#125;&#x27; $&#123;INI&#125; | tr -d &#x27; &#x27;`</span><br><span class="line">		if [ &quot;$&#123;ENABLED&#125;&quot; == &quot;enabled&quot; -o &quot;$&#123;ENABLED&#125;&quot; == &quot;okay&quot; ]; then</span><br><span class="line">			NAME=`awk -F &quot;,&quot; &#x27;/&#x27;$&#123;LOAD_IDX&#125;&#x27;=/ &#123; printf $1 &#125;&#x27; $&#123;INI&#125; | tr -d &#x27; &#x27; | awk -F &quot;=&quot; &#x27;&#123; print $2 &#125;&#x27;`</span><br><span class="line">			OFFS=`awk -F &quot;,&quot; &#x27;/&#x27;$&#123;LOAD_IDX&#125;&#x27;=/ &#123; printf $2 &#125;&#x27; $&#123;INI&#125; | tr -d &#x27; &#x27;`</span><br><span class="line">			cp $&#123;RKBIN&#125;/$&#123;NAME&#125; $&#123;LOAD_BIN&#125;</span><br><span class="line">			if [ -z $&#123;OFFS&#125; ]; then</span><br><span class="line">				echo &quot;ERROR: No $&#123;LOAD_BIN&#125; address in $&#123;INI&#125;&quot;</span><br><span class="line">				exit 1</span><br><span class="line">			fi</span><br><span class="line">			LOAD_ARG=$&#123;LOAD_ARG&#125;&quot; -l$&#123;i&#125; $&#123;OFFS&#125;&quot;</span><br><span class="line">		fi</span><br><span class="line">	done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">COMPRESSION</span></span><br><span class="line">	COMPRESSION=`awk -F&quot;,&quot; &#x27;/COMPRESSION=/  &#123; printf $1 &#125;&#x27; $&#123;INI&#125; | tr -d &#x27; &#x27; | cut -c 13-`</span><br><span class="line">	if [ ! -z &quot;$&#123;COMPRESSION&#125;&quot; -a &quot;$&#123;COMPRESSION&#125;&quot; != &quot;none&quot; ]; then</span><br><span class="line">		COMPRESSION_ARG=&quot;-c $&#123;COMPRESSION&#125;&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [ -d $&#123;REP_DIR&#125; ]; then</span><br><span class="line">		mv $&#123;REP_DIR&#125;/* ./</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	SPL_FIT_SOURCE=`filt_val &quot;CONFIG_SPL_FIT_SOURCE&quot; .config`</span><br><span class="line">	if [ ! -z $&#123;SPL_FIT_SOURCE&#125; ]; then</span><br><span class="line">		cp $&#123;SPL_FIT_SOURCE&#125; u-boot.its</span><br><span class="line">	else</span><br><span class="line">		SPL_FIT_GENERATOR=`filt_val &quot;CONFIG_SPL_FIT_GENERATOR&quot; .config`</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">*.py is the legacy one.</span></span><br><span class="line">		if [[ $&#123;SPL_FIT_GENERATOR&#125; == *.py ]]; then</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">&#123;SPL_FIT_GENERATOR&#125; u-boot.dtb &gt; u-boot.its</span></span><br><span class="line">		else</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">&#123;SPL_FIT_GENERATOR&#125; <span class="variable">$&#123;TEE_ARG&#125;</span> <span class="variable">$&#123;COMPRESSION_ARG&#125;</span> <span class="variable">$&#123;MCU_ARG&#125;</span> <span class="variable">$&#123;LOAD_ARG&#125;</span> &gt; u-boot.its</span></span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	./tools/mkimage -f u-boot.its -E u-boot.itb &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">	echo &quot;pack u-boot.itb okay! Input: $&#123;INI&#125;&quot;</span><br><span class="line">	echo</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打包生成spl_loader镜像</span></span><br><span class="line">function pack_spl_loader_image()</span><br><span class="line">&#123;</span><br><span class="line">	rm -f *loader*.bin *download*.bin *idblock*.img</span><br><span class="line">	cd $&#123;RKBIN&#125;</span><br><span class="line">	DEF_PATH=$&#123;RKBIN&#125;/`filt_val &quot;^PATH&quot; $&#123;INI_LOADER&#125;`</span><br><span class="line">	IDB_PATH=$&#123;RKBIN&#125;/`filt_val &quot;IDB_PATH&quot; $&#123;INI_LOADER&#125;`</span><br><span class="line">	if [ ! -z &quot;$&#123;ARG_SPL_BIN&#125;&quot; -a ! -z &quot;$&#123;ARG_TPL_BIN&#125;&quot; ]; then</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">&#123;SCRIPT_SPL&#125; --ini <span class="variable">$&#123;INI_LOADER&#125;</span> --tpl <span class="variable">$&#123;SRCTREE&#125;</span>/<span class="variable">$&#123;ARG_TPL_BIN&#125;</span> --spl <span class="variable">$&#123;SRCTREE&#125;</span>/<span class="variable">$&#123;ARG_SPL_BIN&#125;</span></span></span><br><span class="line">	elif [ ! -z &quot;$&#123;ARG_TPL_BIN&#125;&quot; ]; then</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">&#123;SCRIPT_SPL&#125; --ini <span class="variable">$&#123;INI_LOADER&#125;</span> --tpl <span class="variable">$&#123;SRCTREE&#125;</span>/<span class="variable">$&#123;ARG_TPL_BIN&#125;</span></span></span><br><span class="line">	else</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">&#123;SCRIPT_SPL&#125; --ini <span class="variable">$&#123;INI_LOADER&#125;</span> --spl <span class="variable">$&#123;SRCTREE&#125;</span>/<span class="variable">$&#123;ARG_SPL_BIN&#125;</span></span></span><br><span class="line">	fi</span><br><span class="line">	cd -</span><br><span class="line">	if [ -f $&#123;DEF_PATH&#125; ]; then</span><br><span class="line">		mv $&#123;DEF_PATH&#125; ./</span><br><span class="line">	fi</span><br><span class="line">	if [ -f $&#123;IDB_PATH&#125; ]; then</span><br><span class="line">		mv $&#123;IDB_PATH&#125; ./</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打包生成uboot镜像</span></span><br><span class="line">function pack_uboot_image()</span><br><span class="line">&#123;</span><br><span class="line">	rm u-boot.img u-boot-dtb.img -f</span><br><span class="line">	LOAD_ADDR=`sed -n &quot;/CONFIG_SYS_TEXT_BASE=/s/CONFIG_SYS_TEXT_BASE=//p&quot; include/autoconf.mk|tr -d &#x27;\r&#x27;`</span><br><span class="line">	if [ -z &quot;$&#123;LOAD_ADDR&#125;&quot; ]; then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">upstream U-Boot</span></span><br><span class="line">		LOAD_ADDR=`grep CONFIG_SYS_TEXT_BASE include/generated/autoconf.h | awk &#x27;&#123; print $3 &#125;&#x27; | tr -d &#x27;\r&#x27;`</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [ -z &quot;$&#123;LOAD_ADDR&#125;&quot; ]; then</span><br><span class="line">		echo &quot;ERROR: No CONFIG_SYS_TEXT_BASE for u-boot&quot;;</span><br><span class="line">		exit 1</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">&#123;SCRIPT_UBOOT&#125; --load <span class="variable">$&#123;LOAD_ADDR&#125;</span> <span class="variable">$&#123;PLAT_UBOOT_SIZE&#125;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打包生成loader镜像</span></span><br><span class="line">function pack_loader_image()</span><br><span class="line">&#123;</span><br><span class="line">	rm -f *loader*.bin *download*.bin *idblock*.img</span><br><span class="line">	cd $&#123;RKBIN&#125;</span><br><span class="line">	DEF_PATH=$&#123;RKBIN&#125;/`filt_val &quot;^PATH&quot; $&#123;INI_LOADER&#125;`</span><br><span class="line">	IDB_PATH=$&#123;RKBIN&#125;/`filt_val &quot;IDB_PATH&quot; $&#123;INI_LOADER&#125;`</span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">&#123;SCRIPT_LOADER&#125; --ini <span class="variable">$&#123;INI_LOADER&#125;</span></span></span><br><span class="line">	cd -</span><br><span class="line">	if [ -f $&#123;DEF_PATH&#125; ]; then</span><br><span class="line">		mv $&#123;DEF_PATH&#125; ./</span><br><span class="line">	fi</span><br><span class="line">	if [ -f $&#123;IDB_PATH&#125; ]; then</span><br><span class="line">		mv $&#123;IDB_PATH&#125; ./</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打包生成trust镜像</span></span><br><span class="line">function pack_trust_image()</span><br><span class="line">&#123;</span><br><span class="line">	DRAM_BASE=`filt_val &quot;CONFIG_SYS_SDRAM_BASE&quot; include/autoconf.mk`</span><br><span class="line"></span><br><span class="line">	rm trust*.img -f</span><br><span class="line">	cd $&#123;RKBIN&#125;</span><br><span class="line">	if [ &quot;$&#123;ARM64_TRUSTZONE&#125;&quot; == &quot;y&quot; ]; then</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">&#123;SCRIPT_ATF&#125; --ini <span class="variable">$&#123;INI_TRUST&#125;</span> <span class="variable">$&#123;PLAT_SHA&#125;</span> <span class="variable">$&#123;PLAT_RSA&#125;</span> <span class="variable">$&#123;PLAT_TRUST_SIZE&#125;</span></span></span><br><span class="line">	else</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">&#123;SCRIPT_TOS&#125; --ini <span class="variable">$&#123;INI_TRUST&#125;</span> --base <span class="variable">$&#123;DRAM_BASE&#125;</span> <span class="variable">$&#123;PLAT_TRUST_SIZE&#125;</span></span></span><br><span class="line">	fi</span><br><span class="line">	cd -</span><br><span class="line">	if [ -f $&#123;RKBIN&#125;/trust*.img ]; then</span><br><span class="line">		mv $&#123;RKBIN&#125;/trust*.img ./</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打包生成fit镜像</span></span><br><span class="line">function pack_fit_image()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">check host tools</span></span><br><span class="line">	if ! which dtc &gt;/dev/null 2&gt;&amp;1 ; then</span><br><span class="line">		echo &quot;ERROR: No &#x27;dtc&#x27;, please: apt-get install device-tree-compiler&quot;</span><br><span class="line">		exit 1</span><br><span class="line">	elif [ &quot;$&#123;ARM64_TRUSTZONE&#125;&quot; == &quot;y&quot; ]; then</span><br><span class="line">		if ! which python2 &gt;/dev/null 2&gt;&amp;1 ; then</span><br><span class="line">			echo &quot;ERROR: No python2&quot;</span><br><span class="line">			exit 1</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">If we don<span class="string">&#x27;t plan to have uboot in uboot.img in case of: SPL =&gt; Trust =&gt; Kernel, creating empty files.</span></span></span><br><span class="line">	if [ &quot;$&#123;ARG_NO_UBOOT&#125;&quot; == &quot;y&quot; ]; then</span><br><span class="line">		rm u-boot-nodtb.bin u-boot.dtb -f</span><br><span class="line">		touch u-boot-nodtb.bin u-boot.dtb</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	rm uboot.img trust*.img -rf</span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash"><span class="string">&#123;SCRIPT_FIT&#125; $&#123;ARG_LIST_FIT&#125; --chip $&#123;RKCHIP_LABEL&#125;</span></span></span><br><span class="line"></span><br><span class="line">	rm $&#123;REP_DIR&#125; -rf</span><br><span class="line">	echo &quot;pack uboot.img okay! Input: $&#123;INI_TRUST&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function handle_args_late()</span><br><span class="line">&#123;</span><br><span class="line">	ARG_LIST_FIT=&quot;$&#123;ARG_LIST_FIT&#125; --ini-trust $&#123;INI_TRUST&#125; --ini-loader $&#123;INI_LOADER&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">清理文件</span></span></span><br><span class="line">function clean_files()</span><br><span class="line">&#123;</span><br><span class="line">	rm spl/u-boot-spl.dtb tpl/u-boot-tpl.dtb u-boot.dtb -f</span><br><span class="line">	rm spl/u-boot-spl tpl/u-boot-tpl u-boot -f</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function pack_images()</span><br><span class="line">&#123;</span><br><span class="line">	if [ &quot;$&#123;ARG_RAW_COMPILE&#125;&quot; != &quot;y&quot; ]; then</span><br><span class="line">		if [ &quot;$&#123;PLAT_TYPE&#125;&quot; == &quot;FIT&quot; ]; then</span><br><span class="line">			pack_fit_image $&#123;ARG_LIST_FIT&#125;</span><br><span class="line">		elif [ &quot;$&#123;PLAT_TYPE&#125;&quot; == &quot;DECOMP&quot; ]; then</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash"><span class="string">&#123;SCRIPT_DECOMP&#125; $&#123;ARG_LIST_FIT&#125; --chip $&#123;RKCHIP_LABEL&#125;</span></span></span><br><span class="line">		else</span><br><span class="line">			pack_uboot_image</span><br><span class="line">			pack_trust_image</span><br><span class="line">			pack_loader_image</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">编译完成</span></span></span><br><span class="line">function finish()</span><br><span class="line">&#123;</span><br><span class="line">	echo</span><br><span class="line">	if [ &quot;$&#123;ARG_BOARD&#125;&quot; == &quot;&quot; ]; then</span><br><span class="line">		echo &quot;Platform $&#123;RKCHIP_LABEL&#125; is build OK, with exist .config&quot;</span><br><span class="line">	else</span><br><span class="line">		echo &quot;Platform $&#123;RKCHIP_LABEL&#125; is build OK, with new .config($&#123;MAKE_CMD&#125;)&quot;</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">process_args $*</span><br><span class="line">prepare</span><br><span class="line">select_toolchain</span><br><span class="line">select_chip_info</span><br><span class="line">fixup_platform_configure</span><br><span class="line">select_ini_file</span><br><span class="line">handle_args_late</span><br><span class="line">sub_commands</span><br><span class="line">clean_files</span><br><span class="line">make PYTHON=python2 CROSS_COMPILE=$&#123;TOOLCHAIN&#125; all --jobs=$&#123;JOB&#125;</span><br><span class="line">pack_images</span><br><span class="line">finish</span><br><span class="line">echo $&#123;TOOLCHAIN&#125;</span><br><span class="line">date</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>瑞芯微脚本分析</category>
      </categories>
      <tags>
        <tag>瑞芯微脚本分析</tag>
      </tags>
  </entry>
  <entry>
    <title>0-5 SPL的编译</title>
    <url>/2023/09/10/0-5%20SPL%E7%9A%84%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Version V1.08 20220617</span><br><span class="line">LPDDR4X, 2112MHz</span><br><span class="line">channel[0] BW=16 Col=10 Bk=8 CS0 Row=16 CS=1 Die BW=16 Size=1024MB</span><br><span class="line">channel[1] BW=16 Col=10 Bk=8 CS0 Row=16 CS=1 Die BW=16 Size=1024MB</span><br><span class="line">channel[2] BW=16 Col=10 Bk=8 CS0 Row=16 CS=1 Die BW=16 Size=1024MB</span><br><span class="line">channel[3] BW=16 Col=10 Bk=8 CS0 Row=16 CS=1 Die BW=16 Size=1024MB</span><br><span class="line">Manufacturer ID:0x1 Samsung</span><br><span class="line">CH0 RX Vref:33.7%, TX Vref:21.8%,0.0%</span><br><span class="line">CH1 RX Vref:32.7%, TX Vref:18.8%,0.0%</span><br><span class="line">CH2 RX Vref:30.7%, TX Vref:17.8%,0.0%</span><br><span class="line">CH3 RX Vref:34.7%, TX Vref:18.8%,0.0%</span><br><span class="line">change to F1: 528MHz</span><br><span class="line">change to F2: 1068MHz</span><br><span class="line">change to F3: 1560MHz</span><br><span class="line">change to F0: 2112MHz</span><br><span class="line">out</span><br><span class="line">U-Boot SPL board init</span><br><span class="line">U-Boot SPL 2017.09-orangepi (Apr 21 2023 - 10:35:39)</span><br><span class="line">Trying to boot from MMC1</span><br><span class="line">Trying fit image at 0x4000 sector</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Verified-boot: 0</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Checking atf-1 0x00040000 ... sha256(806278dba1...) + OK</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Checking uboot 0x00200000 ... sha256(a14cd96f5d...) + OK</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Checking fdt 0x00349350 ... sha256(cf0060a3cf...) + OK</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Checking atf-2 0x000f0000 ... sha256(c00c7fd75b...) + OK</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Checking atf-3 0xff100000 ... sha256(71c3a5841b...) + OK</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Checking atf-4 0xff001000 ... sha256(2301cf73be...) + OK</span></span></span><br><span class="line">Jumping to U-Boot(0x00200000) via ARM Trusted Firmware(0x00040000)</span><br><span class="line">Total: 209.584 ms</span><br><span class="line"></span><br><span class="line">INFO:    Preloader serial: 2</span><br><span class="line">NOTICE:  BL31: v2.3():v2.3-405-gb52c2eadd:derrick.huang</span><br><span class="line">NOTICE:  BL31: Built : 11:23:47, Aug 15 2022</span><br><span class="line">INFO:    spec: 0x13</span><br><span class="line">INFO:    ext 32k is valid</span><br><span class="line">INFO:    GICv3 without legacy support detected.</span><br><span class="line">INFO:    ARM GICv3 driver initialized in EL3</span><br><span class="line">INFO:    system boots from cpu-hwid-0</span><br><span class="line">INFO:    idle_st=0x21fff, pd_st=0x11fff9, repair_st=0xfff70001</span><br><span class="line">INFO:    dfs DDR fsp_params[0].freq_mhz= 2112MHz</span><br><span class="line">INFO:    dfs DDR fsp_params[1].freq_mhz= 528MHz</span><br><span class="line">INFO:    dfs DDR fsp_params[2].freq_mhz= 1068MHz</span><br><span class="line">INFO:    dfs DDR fsp_params[3].freq_mhz= 1560MHz</span><br><span class="line">INFO:    BL31: Initialising Exception Handling Framework</span><br><span class="line">INFO:    BL31: Initializing runtime services</span><br><span class="line">WARNING: No OPTEE provided by BL2 boot loader, Booting device without OPTEE initialization. SMC`s destined for OPTEE will return SMC_UNK</span><br><span class="line">ERROR:   Error initializing runtime service opteed_fast</span><br><span class="line">INFO:    BL31: Preparing for EL3 exit to normal world</span><br><span class="line">INFO:    Entry point address = 0x200000</span><br><span class="line">INFO:    SPSR = 0x3c9</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">U-Boot 2017.09-orangepi (Apr 21 2023 - 10:35:39 +0800)</span><br><span class="line"></span><br><span class="line">Model: Orange Pi 5B</span><br><span class="line">PreSerial: 2, raw, 0xfeb50000</span><br><span class="line">DRAM:  3.7 GiB</span><br><span class="line">Sysmem: init</span><br><span class="line">Relocation Offset: eda2d000</span><br><span class="line">Relocation fdt: eb9f9008 - eb9fecb8</span><br><span class="line">CR: M/C/I</span><br><span class="line">Using default environment</span><br><span class="line"></span><br><span class="line">mmc@fe2c0000: 0, mmc@fe2e0000: 1</span><br><span class="line">Bootdev(atags): mmc 0</span><br><span class="line">MMC0: Legacy, 52Mhz</span><br><span class="line">PartType: EFI</span><br><span class="line">DM: v2</span><br><span class="line">boot mode: None</span><br><span class="line">Model: Orange Pi 5B</span><br><span class="line">CLK: (sync kernel. arm: enter 1008000 KHz, init 1008000 KHz, kernel 0N/A)</span><br><span class="line">  b0pll 24000 KHz</span><br><span class="line">  b1pll 24000 KHz</span><br><span class="line">  lpll 24000 KHz</span><br><span class="line">  v0pll 24000 KHz</span><br><span class="line">  aupll 24000 KHz</span><br><span class="line">  cpll 1500000 KHz</span><br><span class="line">  gpll 1188000 KHz</span><br><span class="line">  npll 24000 KHz</span><br><span class="line">  ppll 1100000 KHz</span><br><span class="line">  aclk_center_root 702000 KHz</span><br><span class="line">  pclk_center_root 100000 KHz</span><br><span class="line">  hclk_center_root 396000 KHz</span><br><span class="line">  aclk_center_low_root 500000 KHz</span><br><span class="line">  aclk_top_root 750000 KHz</span><br><span class="line">  pclk_top_root 100000 KHz</span><br><span class="line">  aclk_low_top_root 396000 KHz</span><br><span class="line">Net:   No ethernet found.</span><br><span class="line">Hit key to stop autoboot(&#x27;CTRL+C&#x27;):  0</span><br><span class="line">switch to partitions #0, OK</span><br><span class="line">mmc0 is current device</span><br><span class="line">mmc@fe2c0000: 0 (SD)</span><br><span class="line">mmc@fe2e0000: 1</span><br><span class="line">switch to partitions #0, OK</span><br><span class="line">mmc0 is current device</span><br><span class="line">Scanning mmc 0:1...</span><br><span class="line">Found U-Boot script /boot.scr</span><br><span class="line">reading /boot.scr</span><br><span class="line">3411 bytes read in 4 ms (832 KiB/s)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Executing script at 00500000</span></span></span><br><span class="line">Boot script loaded from mmc 0</span><br><span class="line">reading /orangepiEnv.txt</span><br><span class="line">222 bytes read in 3 ms (72.3 KiB/s)</span><br><span class="line">reading /uInitrd</span><br><span class="line">18641659 bytes read in 1844 ms (9.6 MiB/s)</span><br><span class="line">reading /Image</span><br><span class="line">34736640 bytes read in 3049 ms (10.9 MiB/s)</span><br><span class="line">reading /dtb/rockchip/rk3588s-orangepi-5b.dtb</span><br><span class="line">233728 bytes read in 24 ms (9.3 MiB/s)</span><br><span class="line">reading /dtb/rockchip/overlay/rk3588-fixup.scr</span><br><span class="line">2756 bytes read in 6 ms (448.2 KiB/s)</span><br><span class="line">Applying kernel provided DT fixup script (rk3588-fixup.scr)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Executing script at 09000000</span></span></span><br><span class="line">Fdt Ramdisk skip relocation</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Loading init Ramdisk from Legacy Image at 0a200000 ...</span></span></span><br><span class="line">   Image Name:   uInitrd</span><br><span class="line">   Image Type:   AArch64 Linux RAMDisk Image (gzip compressed)</span><br><span class="line">   Data Size:    18641595 Bytes = 17.8 MiB</span><br><span class="line">   Load Address: 00000000</span><br><span class="line">   Entry Point:  00000000</span><br><span class="line">   Verifying Checksum ... OK</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Flattened Device Tree blob at 0x0a100000</span></span></span><br><span class="line">   Booting using the fdt blob at 0x0a100000</span><br><span class="line">   reserving fdt memory region: addr=a100000 size=9f000</span><br><span class="line">  &#x27;reserved-memory&#x27; ramoops@110000: addr=110000 size=f0000</span><br><span class="line">   Using Device Tree in place at 000000000a100000, end 000000000a1a1fff</span><br><span class="line">Adding bank: 0x00200000 - 0xf0000000 (size: 0xefe00000)</span><br><span class="line">Total: 5283.754 ms</span><br><span class="line"></span><br><span class="line">Starting kernel ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>瑞芯微脚本分析</category>
      </categories>
      <tags>
        <tag>瑞芯微脚本分析</tag>
      </tags>
  </entry>
  <entry>
    <title>0-7 bootloader引导流程</title>
    <url>/2023/09/10/0-7%20bootloader%E5%BC%95%E5%AF%BC%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、RK芯片通用引导流程"><a href="#一、RK芯片通用引导流程" class="headerlink" title="一、RK芯片通用引导流程"></a>一、RK芯片通用引导流程</h1><p>对于RK芯片的引导流程，我们可以参考以下这张图：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122126953.jpeg" alt="img"></p>
<p>根据两种<code>Boot Flow</code>，我们可以一次梳理两种不同的引导流程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Boot Code -&gt; idbloader.img(miniloader) -&gt; uboot.img -&gt; boot.img -&gt; rootfs.img</span><br><span class="line">Boot Code -&gt; idbloader.img(TPL/SPL) -&gt; uboot.itb -&gt; boot.img -&gt; rootfs.img</span><br></pre></td></tr></table></figure>

<p>对于<code>idbloader.img</code>，我们会发现有相似的地方：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ddr.bin &lt;-&gt; u-boot-tpl.bin</span><br><span class="line">rkxx_miniloader_vx.xx.bin &lt;-&gt; u-boot-spl.bin</span><br></pre></td></tr></table></figure>

<p>此时我们会问，为什么会有两套引导流程？</p>
<p>事实上<code>idbloader.img(miniloader)</code>这套引导方案是RK定制的，它们并没有开源的，RK发布的是二进制文件，它们都存放于<code>rkbin</code>目录下，例如<code>RK356x</code>：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122137381.png" alt="image-20230912213741344"></p>
<p>注意上图中红方框处：rk3588_spl_v1.11.bin<code>实际上指的是</code>rkxx_miniloader_vx.xx.bin&#96;！</p>
<h1 id="二、RK356x引导流程"><a href="#二、RK356x引导流程" class="headerlink" title="二、RK356x引导流程"></a>二、RK356x引导流程</h1><p>下面通过<code>RK356x</code>的启动日志进行简要分析！</p>
<h2 id="2-1-ddr-bin运行"><a href="#2-1-ddr-bin运行" class="headerlink" title="2.1 ddr.bin运行"></a>2.1 ddr.bin运行</h2><p><code>RK3588</code>上电后，我们看到的第一阶段日志是关于DDR的，这主要是对DDR进行初始化，我们看到使用的是<code>LPDDR4</code>，频率逐步从<code>528MHz </code>切换到<code>2112MHz</code>，并且进行一些读写训练操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DDR Version V1.08 20220617</span><br><span class="line">LPDDR4X, 2112MHz</span><br><span class="line">channel[0] BW=16 Col=10 Bk=8 CS0 Row=16 CS=1 Die BW=16 Size=1024MB</span><br><span class="line">channel[1] BW=16 Col=10 Bk=8 CS0 Row=16 CS=1 Die BW=16 Size=1024MB</span><br><span class="line">channel[2] BW=16 Col=10 Bk=8 CS0 Row=16 CS=1 Die BW=16 Size=1024MB</span><br><span class="line">channel[3] BW=16 Col=10 Bk=8 CS0 Row=16 CS=1 Die BW=16 Size=1024MB</span><br><span class="line">Manufacturer ID:0x1 Samsung</span><br><span class="line">CH0 RX Vref:33.7%, TX Vref:21.8%,0.0%</span><br><span class="line">CH1 RX Vref:32.7%, TX Vref:18.8%,0.0%</span><br><span class="line">CH2 RX Vref:30.7%, TX Vref:17.8%,0.0%</span><br><span class="line">CH3 RX Vref:34.7%, TX Vref:18.8%,0.0%</span><br><span class="line">change to F1: 528MHz</span><br><span class="line">change to F2: 1068MHz</span><br><span class="line">change to F3: 1560MHz</span><br><span class="line">change to F0: 2112MHz</span><br><span class="line">out</span><br></pre></td></tr></table></figure>

<h2 id="2-2-spl-bin运行"><a href="#2-2-spl-bin运行" class="headerlink" title="2.2 spl.bin运行"></a>2.2 spl.bin运行</h2><p>​	接下来我们会看到SPL的板级初始化，紧接着逐步从<code>MMC2</code>（<code>SD</code>卡）、<code>MMC1</code>（<code>eMMC</code>）寻找<code>U-boot.img</code>（包括<code>atf-1</code>、<code>uboot</code>、<code>fdt</code>、<code>atf-2</code>、<code>atf-3</code>、<code>atf-4</code>、<code>atf-5</code>、<code>optee</code>），通过<code>atf-1</code>来运行<code>uboot</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">U-Boot SPL board init</span><br><span class="line">U-Boot SPL 2017.09-orangepi (Apr 21 2023 - 10:35:39)</span><br><span class="line">Trying to boot from MMC1</span><br><span class="line">Trying fit image at 0x4000 sector</span><br><span class="line">## Verified-boot: 0</span><br><span class="line">## Checking atf-1 0x00040000 ... sha256(806278dba1...) + OK</span><br><span class="line">## Checking uboot 0x00200000 ... sha256(a14cd96f5d...) + OK</span><br><span class="line">## Checking fdt 0x00349350 ... sha256(cf0060a3cf...) + OK</span><br><span class="line">## Checking atf-2 0x000f0000 ... sha256(c00c7fd75b...) + OK</span><br><span class="line">## Checking atf-3 0xff100000 ... sha256(71c3a5841b...) + OK</span><br><span class="line">## Checking atf-4 0xff001000 ... sha256(2301cf73be...) + OK</span><br><span class="line">Jumping to U-Boot(0x00200000) via ARM Trusted Firmware(0x00040000)</span><br><span class="line">Total: 209.584 ms</span><br></pre></td></tr></table></figure>

<p>注意<code>atf-*</code>与<code>optee</code>这些是 <code>ARM trust</code> 固件，属于另外一个领域，有兴趣可以参考以下文章：</p>
<blockquote>
<p><a href="https://blog.csdn.net/Neutionwei/article/details/111395775">https://blog.csdn.net/Neutionwei/article/details/111395775</a><br><a href="https://blog.csdn.net/Neutionwei/article/det">https://blog.csdn.net/Neutionwei/article/det</a></p>
</blockquote>
<h2 id="2-3-atf运行"><a href="#2-3-atf运行" class="headerlink" title="2.3 atf运行"></a>2.3 atf运行</h2><p>运行<code>BL31</code>，初始化与运行<code>BL32</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">INFO:    Preloader serial: 2</span><br><span class="line">NOTICE:  BL31: v2.3():v2.3-405-gb52c2eadd:derrick.huang</span><br><span class="line">NOTICE:  BL31: Built : 11:23:47, Aug 15 2022</span><br><span class="line">INFO:    spec: 0x13</span><br><span class="line">INFO:    ext 32k is valid</span><br><span class="line">INFO:    GICv3 without legacy support detected.</span><br><span class="line">INFO:    ARM GICv3 driver initialized in EL3</span><br><span class="line">INFO:    system boots from cpu-hwid-0</span><br><span class="line">INFO:    idle_st=0x21fff, pd_st=0x11fff9, repair_st=0xfff70001</span><br><span class="line">INFO:    dfs DDR fsp_params[0].freq_mhz= 2112MHz</span><br><span class="line">INFO:    dfs DDR fsp_params[1].freq_mhz= 528MHz</span><br><span class="line">INFO:    dfs DDR fsp_params[2].freq_mhz= 1068MHz</span><br><span class="line">INFO:    dfs DDR fsp_params[3].freq_mhz= 1560MHz</span><br><span class="line">INFO:    BL31: Initialising Exception Handling Framework</span><br><span class="line">INFO:    BL31: Initializing runtime services</span><br><span class="line">WARNING: No OPTEE provided by BL2 boot loader, Booting device without OPTEE initialization. SMC`s destined for OPTEE will return SMC_UNK</span><br><span class="line">ERROR:   Error initializing runtime service opteed_fast</span><br><span class="line">INFO:    BL31: Preparing for EL3 exit to normal world</span><br><span class="line">INFO:    Entry point address = 0x200000</span><br><span class="line">INFO:    SPSR = 0x3c9</span><br></pre></td></tr></table></figure>

<blockquote>
</blockquote>
<h2 id="2-4-uboot运行"><a href="#2-4-uboot运行" class="headerlink" title="2.4 uboot运行"></a>2.4 uboot运行</h2><h3 id="2-4-1-设备环境初始化"><a href="#2-4-1-设备环境初始化" class="headerlink" title="2.4.1 设备环境初始化"></a>2.4.1 设备环境初始化</h3><p>从<code>atf</code>切换到<code>uboot</code>之后，<code>uboot</code>依次执行以下操作：</p>
<ol>
<li>打印一些必要的信息：板型、串口、内存、系统内存初始化、代码重定位情况；</li>
<li>获取<code>MMC</code>存储器信息，打印当前启动的存储器（<code>atags</code>）；</li>
<li>获取存储器分区情况并加载内核设备树；</li>
<li>初始化<code>I2C0</code>、初始化<code>PMIC</code>电源芯片、相关芯片供电电压与<code>IO</code>电源域；</li>
<li>初始化<code>DRM</code>框架以及显示器接口（<code>HDMI</code>）;</li>
<li>初始化时钟树。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">U-Boot 2017.09-orangepi (Apr 21 2023 - 10:35:39 +0800)</span><br><span class="line"></span><br><span class="line">Model: Orange Pi 5B</span><br><span class="line">PreSerial: 2, raw, 0xfeb50000</span><br><span class="line">DRAM:  3.7 GiB</span><br><span class="line">Sysmem: init</span><br><span class="line">Relocation Offset: eda2d000</span><br><span class="line">Relocation fdt: eb9f9008 - eb9fecb8</span><br><span class="line">CR: M/C/I</span><br><span class="line">Using default environment</span><br><span class="line"></span><br><span class="line">mmc@fe2c0000: 0, mmc@fe2e0000: 1</span><br><span class="line">Bootdev(atags): mmc 0</span><br><span class="line">MMC0: Legacy, 52Mhz</span><br><span class="line">PartType: EFI</span><br><span class="line">DM: v2</span><br><span class="line">boot mode: None</span><br><span class="line">Model: Orange Pi 5B</span><br><span class="line">CLK: (sync kernel. arm: enter 1008000 KHz, init 1008000 KHz, kernel 0N/A)</span><br><span class="line">  b0pll 24000 KHz</span><br><span class="line">  b1pll 24000 KHz</span><br><span class="line">  lpll 24000 KHz</span><br><span class="line">  v0pll 24000 KHz</span><br><span class="line">  aupll 24000 KHz</span><br><span class="line">  cpll 1500000 KHz</span><br><span class="line">  gpll 1188000 KHz</span><br><span class="line">  npll 24000 KHz</span><br><span class="line">  ppll 1100000 KHz</span><br><span class="line">  aclk_center_root 702000 KHz</span><br><span class="line">  pclk_center_root 100000 KHz</span><br><span class="line">  hclk_center_root 396000 KHz</span><br><span class="line">  aclk_center_low_root 500000 KHz</span><br><span class="line">  aclk_top_root 750000 KHz</span><br><span class="line">  pclk_top_root 100000 KHz</span><br><span class="line">  aclk_low_top_root 396000 KHz</span><br><span class="line">Net:   No ethernet found.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-4-2-内核的加载"><a href="#2-4-2-内核的加载" class="headerlink" title="2.4.2 内核的加载"></a>2.4.2 内核的加载</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">switch to partitions #0, OK</span><br><span class="line">mmc0 is current device</span><br><span class="line">mmc@fe2c0000: 0 (SD)</span><br><span class="line">mmc@fe2e0000: 1</span><br><span class="line">switch to partitions #0, OK</span><br><span class="line">mmc0 is current device</span><br><span class="line">Scanning mmc 0:1...</span><br><span class="line">Found U-Boot script /boot.scr</span><br><span class="line">reading /boot.scr</span><br><span class="line">3411 bytes read in 4 ms (832 KiB/s)</span><br><span class="line">## Executing script at 00500000</span><br><span class="line">Boot script loaded from mmc 0</span><br><span class="line">reading /orangepiEnv.txt</span><br><span class="line">222 bytes read in 3 ms (72.3 KiB/s)</span><br><span class="line">reading /uInitrd</span><br><span class="line">18641659 bytes read in 1844 ms (9.6 MiB/s)</span><br><span class="line">reading /Image</span><br><span class="line">34736640 bytes read in 3049 ms (10.9 MiB/s)</span><br><span class="line">reading /dtb/rockchip/rk3588s-orangepi-5b.dtb</span><br><span class="line">233728 bytes read in 24 ms (9.3 MiB/s)</span><br><span class="line">reading /dtb/rockchip/overlay/rk3588-fixup.scr</span><br><span class="line">2756 bytes read in 6 ms (448.2 KiB/s)</span><br><span class="line">Applying kernel provided DT fixup script (rk3588-fixup.scr)</span><br><span class="line">## Executing script at 09000000</span><br><span class="line">Fdt Ramdisk skip relocation</span><br><span class="line">## Loading init Ramdisk from Legacy Image at 0a200000 ...</span><br><span class="line">   Image Name:   uInitrd</span><br><span class="line">   Image Type:   AArch64 Linux RAMDisk Image (gzip compressed)</span><br><span class="line">   Data Size:    18641595 Bytes = 17.8 MiB</span><br><span class="line">   Load Address: 00000000</span><br><span class="line">   Entry Point:  00000000</span><br><span class="line">   Verifying Checksum ... OK</span><br><span class="line">## Flattened Device Tree blob at 0x0a100000</span><br><span class="line">   Booting using the fdt blob at 0x0a100000</span><br><span class="line">   reserving fdt memory region: addr=a100000 size=9f000</span><br><span class="line">  &#x27;reserved-memory&#x27; ramoops@110000: addr=110000 size=f0000</span><br><span class="line">   Using Device Tree in place at 000000000a100000, end 000000000a1a1fff</span><br><span class="line">Adding bank: 0x00200000 - 0xf0000000 (size: 0xefe00000)</span><br><span class="line">Total: 5283.754 ms</span><br><span class="line"></span><br><span class="line">Starting kernel ...</span><br></pre></td></tr></table></figure>

<p>从<code>Starting kernel ...</code>开始，<code>uboot</code>的生命周期结束，之后产生的打印是由内核产生的！</p>
<p>值得注意的是，加载<code>Flat Device Tree</code>设备树之后，日志还打印了相关映像加载情况，这部分非常有用，我们以后再深入分析！</p>
<h1 id="三、BootRom阶段做了什么？"><a href="#三、BootRom阶段做了什么？" class="headerlink" title="三、BootRom阶段做了什么？"></a>三、BootRom阶段做了什么？</h1><p><code>BootRom</code>固件是Rockchip原厂芯片出厂时烧录到内部存储器的，目的是从各个外部存储媒介中加载<code>miniloader</code>(<code>tpl</code> + <code>spl</code>)！</p>
<p>以下是摘自《Rockchip RK3568 TRM Part1 V1.1-20210301》，它很清晰地说明了BootRom阶段做了什么事情：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122155809.png" alt="img"></p>
<p>我们按照正常引导走一遍：</p>
<ol>
<li>从<code>0x0000FFFF</code>地址读取第一条指令运行；</li>
<li>逐一检查与校验<code>Nor Flash</code>、<code>Nand Flash</code>、<code>eMMC</code>、<code>SD/MMC</code>中的<code>ID BLOCK</code>（RK 固件定义在第 <code>64</code> 扇区）；</li>
<li>假如我们的固件存放于<code>eMMC</code>，那么校验<code>ID BLOCK</code>成功后就读取<code>DDR</code>初始化代码到<code>SYSTEM_SRAM</code>；</li>
<li>紧接着运行刚刚读取的代码来初始化<code>DDR</code>；</li>
<li>初始化<code>DDR</code>后<code>DDR</code>就可以工作了，把引导代码加载到<code>DDR</code>并调到<code>DDR</code>继续运行。</li>
</ol>
<p>如果各个存储器都没有找到<code>ID BLOCK</code>，那么会执行以下操作：</p>
<ol>
<li>等待请求<code>DDR</code>程序（即在<code>RKDevTool</code>工具可以看到处于<code>Maskrom</code>模式）：</li>
</ol>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122156818.png" alt="img"></p>
<h1 id="四、RK固件在存储器中是如何分布的？"><a href="#四、RK固件在存储器中是如何分布的？" class="headerlink" title="四、RK固件在存储器中是如何分布的？"></a>四、RK固件在存储器中是如何分布的？</h1><p>如下图，其中 RK356x和rk3588 是没有使用 <code>trust</code>分区，这个要注意：	</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122156681.png" alt="img"></p>
<p>另外要注意的是从<code>loader2</code>分区开始所有的分区大小与起始地址是由<code>parameter.txt</code>文件进行描述，具体参考：</p>
<blockquote>
<p><a href="https://blog.csdn.net/Neutionwei/article/details/122911086">https://blog.csdn.net/Neutionwei/article/details/122911086</a></p>
</blockquote>
]]></content>
      <categories>
        <category>瑞芯微脚本分析</category>
      </categories>
      <tags>
        <tag>瑞芯微脚本分析</tag>
      </tags>
  </entry>
  <entry>
    <title>0-8 U-Boot编译过程浅析</title>
    <url>/2023/09/10/0-8%20U-Boot%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E6%B5%85%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、U-Boot源代码获取"><a href="#一、U-Boot源代码获取" class="headerlink" title="一、U-Boot源代码获取"></a>一、U-Boot源代码获取</h2><p>可以参考我之前输出的这篇文章：</p>
<blockquote>
<p>[<a href="https://blog.csdn.net/Neutionwei/article/details/123462959">RK356x] [Firefly-Linux] 10min带你获取、了解与编译U-Boot源代码</a></p>
</blockquote>
<p>切换成<code>linux_release_v1.2.3a</code>版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote update</span><br><span class="line">git checkout -b rk356x/linux_release_v1.2.3a rk356x/linux_release_v1.2.3a</span><br></pre></td></tr></table></figure>

<h2 id="二、编译RK3568"><a href="#二、编译RK3568" class="headerlink" title="二、编译RK3568"></a>二、编译RK3568</h2><p>RK356x 配置文件查看：<br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159362.png" alt="img">清除历史编译状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make clean</span><br></pre></td></tr></table></figure>

<p>使用 <code>make.sh</code> 配置 <code>configs/rk3568_defconfig</code> 并编译：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./make.sh rk3568</span><br></pre></td></tr></table></figure>

<h2 id="三、编译日志分析"><a href="#三、编译日志分析" class="headerlink" title="三、编译日志分析"></a>三、编译日志分析</h2><p>常用编译变量说明：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>HOSTCC</code></td>
<td>PC 机 gcc 编译命令</td>
</tr>
<tr>
<td><code>HOSTCXX</code></td>
<td>PC 机 g++ 编译命令</td>
</tr>
<tr>
<td><code>HOSTLD</code></td>
<td>PC 机 ld 链接命令</td>
</tr>
<tr>
<td><code>CC</code></td>
<td>交叉工具链 gcc 编译命令</td>
</tr>
<tr>
<td><code>CPP</code></td>
<td>交叉工具链 gcc -E 编译命令</td>
</tr>
<tr>
<td><code>LD</code></td>
<td>交叉工具链 ld 链接命令</td>
</tr>
<tr>
<td><code>OBJCOPY</code></td>
<td>交叉工具链 objcopy 命令</td>
</tr>
<tr>
<td><code>OBJDUMP</code></td>
<td>交叉工具链 objdump 链接命令</td>
</tr>
<tr>
<td><code>DTC</code></td>
<td>设备树编译命令 dtc</td>
</tr>
<tr>
<td><code>CHECK</code></td>
<td>执行静态检查 sparse</td>
</tr>
</tbody></table>
<p>摘自顶层<code>Makefile</code>：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159859.png" alt="img"><br>注意：上图中的<code>cc</code>与<code>gcc</code>是同一个东西！</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159833.png" alt="img"></p>
<p>编译日志主要分成以下几部分：</p>
<ol>
<li>配置文件生成</li>
<li>工具目录编译</li>
<li>U-Boot核心代码交叉编译</li>
<li>U-Boot目标文件生成</li>
<li>设备树编译并追加到U-Boot目标文件</li>
<li>TPL与SPL代码编译</li>
<li>TPL与SPL目标文件生成</li>
<li>最终固件打包</li>
</ol>
<h3 id="3-1-配置文件生成"><a href="#3-1-配置文件生成" class="headerlink" title="3.1 配置文件生成"></a>3.1 配置文件生成</h3><p>执行<code>make rk3568_defconfig -j8</code>命令，生成<code>.config</code>：<br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159751.png" alt="img"><br>执行<code>scripts/kconfig/conf --silentoldconfig Kconfig</code>，这个话主要是检查是否有新的配置项，这里是清除历史输出文件后进行编译，因此所有配置项都认为是新的！</p>
<p>在这个过程根据<code>config.h</code>文件配置<code>u-boot.cfg</code>、<code>spl/u-boot.cfg</code>、<code>	/u-boot.cfg</code>等文件，然后产生了各自的<code>autoconf.mk</code>文件。编译<code>sam-offsets.s</code>产生<code>u-boot.lds</code>链接脚本。</p>
<p>另外<code>include/generated/version_autogenerated.h</code>是描述版本信息的头文件。<br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159822.png" alt="img"></p>
<h3 id="3-2-工具目录编译"><a href="#3-2-工具目录编译" class="headerlink" title="3.2 工具目录编译"></a>3.2 工具目录编译</h3><p>对<code>tools</code>下的工具进行一系列编译：<br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159815.png" alt="img"></p>
<h3 id="3-3-U-Boot核心代码交叉编译"><a href="#3-3-U-Boot核心代码交叉编译" class="headerlink" title="3.3 U-Boot核心代码交叉编译"></a>3.3 U-Boot核心代码交叉编译</h3><p>编译完成<code>tools</code>目录后，开始交叉编译核心代码，我们会看到有非常多<code>build-in.o</code>，这个输出文件很有意思，它是该文件所处目录所有<code>*.o</code>文件的集合体，例如<code>arch/arm/cpu/built-in.o</code>，那它就是<code>arch/arm/cpu/</code>目录所有<code>*.o</code>文件的集合体！</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159840.png" alt="img"><br>核心代码的编译过程主要涉及<code>arch</code>架构代码目录、<code>common</code>通用目录、<code>cmd</code>命令目录与<code>driver</code>驱动目录，当然还有<code>lib</code>公共库目录与<code>examles</code>例程目录，注意这个编译过程不是按照顺序编译打印的，这个因为前面使用<code>-j8</code>编译选项，这个选项的意思是打开8个线程并发编译：<br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159970.png" alt="img"><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159113.png" alt="img"><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159108.png" alt="img"></p>
<h3 id="3-4-U-Boot目标文件生成"><a href="#3-4-U-Boot目标文件生成" class="headerlink" title="3.4 U-Boot目标文件生成"></a>3.4 U-Boot目标文件生成</h3><p>核心代码交叉编译完毕后链接之前所有的<code>built-in.o</code>文件，通过<code>objcopy</code>命令生成<code>u-boot-nodtb.bin</code>文件与<code>u-boot.sym</code>符号表，并且使用<code>relocate-rela</code>工具对<code>u-boot-nodtb.bin</code>静态reloc（静态<code>rela.dyn</code>修复）：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159124.png" alt="img"></p>
<h3 id="3-5-设备树编译并追加到U-Boot目标文件"><a href="#3-5-设备树编译并追加到U-Boot目标文件" class="headerlink" title="3.5 设备树编译并追加到U-Boot目标文件"></a>3.5 设备树编译并追加到U-Boot目标文件</h3><p>接下来是编译设备树<code>dts</code>，并且产生<code>dt.dtb</code>（u-boot设备树<code>dtb</code>文件）、<code>dt-spl.dtb</code>（spl设备树<code>dtb</code>文件）、<code>dt-tpl.dtb</code>（tpl设备树<code>dtb</code>文件），并且把<code>dtb</code>文件追加到u-boot文件生成<code>u-boot.bin</code>文件：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159130.png" alt="img"></p>
<h3 id="3-6-TPL与SPL代码编译"><a href="#3-6-TPL与SPL代码编译" class="headerlink" title="3.6 TPL与SPL代码编译"></a>3.6 TPL与SPL代码编译</h3><p><code>spl</code>是初始化DDR内存使用的，而<code>spl</code>相当于一个精简版u-boot，，只不过它的目的是加载u-boot固件，它们编译套路与U-Boot核心代码类似，注意的是它会把编译生成的<code>*.o</code>搬到<code>tpl</code>、<code>spl</code>目录，<code>tpl</code>、<code>spl</code>目录树的排布与U-Boot目录树一样：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159177.png" alt="img"></p>
<h3 id="3-7-TPL与SPL目标文件生成"><a href="#3-7-TPL与SPL目标文件生成" class="headerlink" title="3.7 TPL与SPL目标文件生成"></a>3.7 TPL与SPL目标文件生成</h3><p><code>u-boot-spl.lds</code>是<code>spl</code>的链接脚本，<code>u-boot-spl.dtb</code>是<code>spl</code>的设备树<code>dtb</code>文件：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159221.png" alt="img"><br><code>u-boot-spl-nodtb.bin</code>是<code>spl</code>目标文件，同样地把设备树<code>dtb</code>文件追加进去并产生<code>u-boot-spl.bin</code>文件：<br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159361.png" alt="img"><br><code>u-boot-tpl-nodtb.bin</code>是<code>tpl</code>目标文件，注意这里直接复制成<code>u-boot-tpl.bin</code>（没有追加设备树<code>dtb</code>文件）：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159367.png" alt="img"></p>
<p>还有一点需要注意的是，<code>u-boot-tpl.bin</code>是不能烧录进RK356x的，这是因为<code>tpl</code>相关代码，RK官方并没有开源！我们需要使用<code>rkbin</code>的<code>ddr.bin</code>文件替换！</p>
<h3 id="3-8-最终固件打包"><a href="#3-8-最终固件打包" class="headerlink" title="3.8 最终固件打包"></a>3.8 最终固件打包</h3><p>首先通过<code>rkbin/RKTRUST/RK3568TRUST.ini</code>文件描述的内容把<code>u-boot.bin</code>打包成<code>u-boot.itb</code>，紧接着根据 FIT 描述文件的内容把 ATF、OP-TEE、U-Boot、MCU 打包到一起（当然也包括设备树 DTB）：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159407.png" alt="img"><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159412.png" alt="img"><br><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159495.png" alt="img"><br>最后生成的固件为<code>uboot.img</code>，并且根据<code>rkbin/RKBOOT/RK3568MINIALL.ini</code>文件生成<code>rk356x_spl_loader_v1.12.112.bin</code>（注意这里并没有打包我们编译产生的<code>u-boot-spl.bin</code>文件，而是打包存放于<code>rkbin</code>目录下的<code>spl.bin</code>文件）</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309122159479.png" alt="img"></p>
]]></content>
      <categories>
        <category>瑞芯微脚本分析</category>
      </categories>
      <tags>
        <tag>瑞芯微脚本分析</tag>
      </tags>
  </entry>
  <entry>
    <title>10-1 rk3588+yolov5部署推理冒烟测试</title>
    <url>/2023/09/15/10-1-rk3588-yolov5%E9%83%A8%E7%BD%B2%E6%8E%A8%E7%90%86%E5%86%92%E7%83%9F%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h1><h2 id="1-1硬件设备信息"><a href="#1-1硬件设备信息" class="headerlink" title="1.1硬件设备信息"></a>1.1硬件设备信息</h2><p>北京迅为电子 RK3588开发板</p>
<h2 id="1-2-烧录镜像"><a href="#1-2-烧录镜像" class="headerlink" title="1.2.烧录镜像"></a>1.2.烧录镜像</h2><p>ubuntu20 </p>
<h2 id="1-3设备联网与SSH-vs-code远程开发"><a href="#1-3设备联网与SSH-vs-code远程开发" class="headerlink" title="1.3设备联网与SSH vs code远程开发"></a>1.3设备联网与SSH vs code远程开发</h2><p>等明天晚上我试试,测试没问题，但是要改一下ssh root登录，以及终端免密码登录，其他问题不打，准备重新做一个好的镜像</p>
<h1 id="二、冒烟测试"><a href="#二、冒烟测试" class="headerlink" title="二、冒烟测试"></a>二、冒烟测试</h1><h2 id="2-1-NPU测试"><a href="#2-1-NPU测试" class="headerlink" title="2.1 NPU测试"></a>2.1 NPU测试</h2><p>附件位置：<code>3.冒烟测试/1.npu_test</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译程序</span></span><br><span class="line">cmake -S . -B build</span><br><span class="line"></span><br><span class="line">cmake --build build </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行测试命令</span></span><br><span class="line">./build/mobilenet ./weights/mobilenet_v1.rknn ./images/dog_224x224.jpg </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果正确运行，你会看到如下输出：</span></span><br><span class="line">model input num: 1, output num: 1</span><br><span class="line">input tensors:</span><br><span class="line">  index=0, name=input, n_dims=4, dims=[1, 224, 224, 3], n_elems=150528, size=150528, fmt=NHWC, type=INT8, qnt_type=AFFINE, zp=0, scale=0.007812</span><br><span class="line">output tensors:</span><br><span class="line">  index=0, name=MobilenetV1/Predictions/Reshape_1, n_dims=2, dims=[1, 1001, 0, 0], n_elems=1001, size=1001, fmt=UNDEFINED, type=INT8, qnt_type=AFFINE, zp=-128, scale=0.003906</span><br><span class="line">rknn_run</span><br><span class="line"> --- Top5 ---</span><br><span class="line">156: 0.984375</span><br><span class="line">155: 0.007812</span><br><span class="line">205: 0.003906</span><br><span class="line"> -1: 0.000000</span><br><span class="line"> -1: 0.000000</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309162129101.png" alt="image-20230916212954062"></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309162130896.png" alt="image-20230916213010875"></p>
<p>如果上面的测试程序能够正确运行，则表示NPU可以正常使用。</p>
<p>打开文件：<code>mobilenet_demo.cpp</code>，可以看到涉及的操作流程有：</p>
<ul>
<li>预处理图片（读取、BGR2RGB、Resize）</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用opencv</span></span><br><span class="line">cv::Mat orig_img = <span class="built_in">imread</span>(img_path, cv::IMREAD_COLOR);</span><br><span class="line"></span><br><span class="line">cv::<span class="built_in">cvtColor</span>(orig_img, orig_img_rgb, cv::COLOR_BGR2RGB);</span><br><span class="line"></span><br><span class="line">cv::<span class="built_in">resize</span>(orig_img, img, cv::<span class="built_in">Size</span>(MODEL_IN_WIDTH, MODEL_IN_HEIGHT), <span class="number">0</span>, <span class="number">0</span>, cv::INTER_LINEAR);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>初始化RKNN模型（用到RKNN API）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">model = <span class="built_in">load_model</span>(model_path, &amp;model_len);</span><br><span class="line"></span><br><span class="line">ret = <span class="built_in">rknn_init</span>(&amp;ctx, model, model_len, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>获取模型输入输出信息</p>
<ul>
<li><p>输入输出数量（用到RKNN API）</p>
<blockquote>
<p>主要用于确定遍历次数、定位输入</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输入输出数量</span></span><br><span class="line">rknn_input_output_num io_num; </span><br><span class="line"><span class="comment">// 使用rknn_query函数获取模型输入输出数量</span></span><br><span class="line">ret = rknn_query(ctx, RKNN_QUERY_IN_OUT_NUM, &amp;io_num, <span class="keyword">sizeof</span>(io_num));</span><br><span class="line"><span class="comment">// 打印模型输入输出数量</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;model input num: %d, output num: %d\n&quot;</span>, io_num.n_input, io_num.n_output);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输入输出属性（用到RKNN API）</p>
<blockquote>
<p>主要确定网络输入大小（类似dims&#x3D;[1, 224, 224, 3]），输入格式（类似fmt&#x3D;NHWC）等信息</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用rknn_tensor_attr结构体存储模型输入信息</span></span><br><span class="line">rknn_tensor_attr input_attrs[io_num.n_input];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用rknn_query函数获取模型输入信息，存储在input_attrs</span></span><br><span class="line">ret = rknn_query(ctx, RKNN_QUERY_INPUT_ATTR, &amp;(input_attrs[<span class="number">0</span>]), <span class="keyword">sizeof</span>(rknn_tensor_attr));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印模型输入信息</span></span><br><span class="line">dump_tensor_attr(&amp;(input_attrs[<span class="number">0</span>]));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>设置模型输入（用到RKNN API）</p>
<blockquote>
<p>主要设置模型输入的类型、数据指针、大小等信息</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用rknn_input结构体存储模型输入信息</span></span><br><span class="line">rknn_input inputs[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置模型输入数据</span></span><br><span class="line">inputs[<span class="number">0</span>].buf = img.data;                                              </span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入：ctx：模型句柄，io_num.n_input：模型输入数量，inputs：模型输入信息</span></span><br><span class="line">ret = rknn_inputs_set(ctx, io_num.n_input, inputs);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行RKNN（用到RKNN API）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用rknn_run函数运行RKNN模型</span></span><br><span class="line"><span class="comment">// 输入：ctx：模型句柄，nullptr：保留参数</span></span><br><span class="line">ret = rknn_run(ctx, nullptr);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>获取模型输出（用到RKNN API）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用rknn_output结构体存储模型输出信息</span></span><br><span class="line">rknn_output outputs[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用rknn_outputs_get函数获取模型输出</span></span><br><span class="line"><span class="comment">// 输入：ctx：模型句柄，1：模型输出数量，outputs：模型输出信息，nullptr：保留参数</span></span><br><span class="line">ret = rknn_outputs_get(ctx, <span class="number">1</span>, outputs, <span class="literal">NULL</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>后处理</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取模型输出的Top5</span></span><br><span class="line">rknn_GetTop(buffer, fMaxProb, MaxClass, sz, <span class="number">5</span>); </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>释放资源（用到RKNN API）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 释放rknn_outputs_get获取的输出</span></span><br><span class="line"><span class="comment">// 输入：ctx：模型句柄，1：模型输出数量，outputs：模型输出信息（数组）</span></span><br><span class="line">rknn_outputs_release(ctx, <span class="number">1</span>, outputs);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放RKNN模型</span></span><br><span class="line">rknn_destroy(ctx);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放模型数据</span></span><br><span class="line"><span class="built_in">free</span>(model);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="2-2-RKNN-Engine封装、"><a href="#2-2-RKNN-Engine封装、" class="headerlink" title="2.2 RKNN Engine封装、"></a>2.2 RKNN Engine封装、</h2></li>
</ul>
<blockquote>
<p>参考：</p>
<ul>
<li>（模型转换）<a href="https://github.com/rockchip-linux/rknn-toolkit2">https://github.com/rockchip-linux/rknn-toolkit2</a></li>
<li>（接口开发）<a href="https://github.com/rockchip-linux/rknpu2">https://github.com/rockchip-linux/rknpu2</a></li>
</ul>
</blockquote>
<p><strong>RKNN介绍</strong></p>
<p>RKNN是瑞芯微推出的一套神经网络推理框架，可以将神经网络模型转换为RKNN模型，然后在NPU上进行推理。RKNN模型转换工具可以将ONNX、Tensorflow、Caffe、Darknet等模型转换为RKNN模型, 从而可以将AI模型运行在嵌入式平台上。<br>RKNN的硬件基础是NPU，NPU是高性能神经网络专用处理芯片,在硬件层面对深度学习算子进行了深入优化，从而实现高效的神经网络推理。瑞芯微的NPU可以在嵌入式平台上提供高性能的神经网络推理能力。<br>利用RKNN，我们可以参考下图的研发流程，来进行我们的深度学习部署开发。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309152228126.jpeg" alt="img"></p>
<p>我们使用的SDK版本：<code>1.5.3b6</code>，更多版本可以在课程附件：<code>4.RKNN_NPU_SDK</code>中寻找，我们挑出其中的API文件夹：<code>librknn_api</code>（<code>develop</code>文件夹下） </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./librknn_api/</span><br><span class="line">├── aarch64</span><br><span class="line">│   └── librknnrt.so # runtime API 库</span><br><span class="line">├── armhf</span><br><span class="line">│   └── librknnrt.so</span><br><span class="line">└── include # 头文件</span><br><span class="line">    ├── rknn_api.h </span><br><span class="line">    └── rknn_matmul_api.h </span><br></pre></td></tr></table></figure>

<p>我们将RKNN API封装成自己的API，这样可以使得不同的引擎（如还有其他类型板子）的接口一致，方便使用，也可以隐藏不同引擎的实现细节，方便维护。</p>
<p>cmake编译依赖关系：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309162311745.jpeg" alt="img"></p>
<h1 id="编译程序后运行："><a href="#编译程序后运行：" class="headerlink" title="编译程序后运行："></a>编译程序后运行：</h1><p>.&#x2F;build&#x2F;rknn_engine_test .&#x2F;weights&#x2F;mobilenet_v1.rknn .&#x2F;images&#x2F;dog_224x224.jpg 会看到和2.1NPU测试中一样的结果</p>
<p>主要封装的函数：</p>
<ul>
<li><code>LoadModelFile</code></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 加载模型文件、初始化rknn context、获取rknn版本信息、获取输入输出张量的信息</span></span><br><span class="line"><span class="comment"> * @param model_file 模型文件路径</span></span><br><span class="line"><span class="comment"> * @return nn_error_e 错误码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">nn_error_e <span class="title function_">RKEngine::LoadModelFile</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *model_file)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 加载模型文件</span></span><br><span class="line">    <span class="keyword">auto</span> model = load_model(model_file, &amp;model_len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化rknn context</span></span><br><span class="line">    <span class="type">int</span> ret = rknn_init(&amp;rknn_ctx_, model, model_len, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取rknn版本信息</span></span><br><span class="line">    rknn_sdk_version version;</span><br><span class="line">    ret = rknn_query(rknn_ctx_, RKNN_QUERY_SDK_VERSION, &amp;version, <span class="keyword">sizeof</span>(rknn_sdk_version));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取输入输出个数</span></span><br><span class="line">    rknn_input_output_num io_num;</span><br><span class="line">    ret = rknn_query(rknn_ctx_, RKNN_QUERY_IN_OUT_NUM, &amp;io_num, <span class="keyword">sizeof</span>(io_num));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入属性</span></span><br><span class="line">    rknn_tensor_attr input_attrs[io_num.n_input];</span><br><span class="line">    ret = rknn_query(rknn_ctx_, RKNN_QUERY_INPUT_ATTR, &amp;(input_attrs[i]), <span class="keyword">sizeof</span>(rknn_tensor_attr));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出属性</span></span><br><span class="line">    rknn_tensor_attr output_attrs[io_num.n_output];</span><br><span class="line">    ret = rknn_query(rknn_ctx_, RKNN_QUERY_OUTPUT_ATTR, &amp;(output_attrs[i]), <span class="keyword">sizeof</span>(rknn_tensor_attr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>Run</code></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 运行模型，获得推理结果</span></span><br><span class="line"><span class="comment"> * @param inputs 输入张量</span></span><br><span class="line"><span class="comment"> * @param outputs 输出张量</span></span><br><span class="line"><span class="comment"> * @param want_float 是否需要float类型的输出</span></span><br><span class="line"><span class="comment"> * @return nn_error_e 错误码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">nn_error_e <span class="title function_">RKEngine::Run</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;tensor_data_s&gt; &amp;inputs, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;tensor_data_s&gt; &amp;outputs, <span class="type">bool</span> want_float)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 设置rknn inputs</span></span><br><span class="line">    rknn_input rknn_inputs[g_max_io_num];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将自定义的tensor_data_s转换为rknn_input</span></span><br><span class="line">    rknn_inputs[i] = tensor_data_to_rknn_input(inputs[i]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置输入</span></span><br><span class="line">    <span class="type">int</span> ret = rknn_inputs_set(rknn_ctx_, (<span class="type">uint32_t</span>)inputs.size(), rknn_inputs);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 推理</span></span><br><span class="line">    ret = rknn_run(rknn_ctx_, nullptr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得输出</span></span><br><span class="line">    rknn_output rknn_outputs[g_max_io_num];</span><br><span class="line">    ret = rknn_outputs_get(rknn_ctx_, output_num_, rknn_outputs, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将rknn_output转换为自定义的tensor_data_s</span></span><br><span class="line">    rknn_output_to_tensor_data(rknn_outputs[i], outputs[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>最终整体推理流程为：</p>
<ol>
<li>加载引擎</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ==================== 1. 加载引擎 ====================</span></span><br><span class="line"><span class="comment">// 使用shared_ptr智能指针创建引擎，类型是接口中定义的NNEngine，但是实际上是RKEngine</span></span><br><span class="line">std::shared_ptr&lt;NNEngine&gt; engine = <span class="built_in">CreateRKNNEngine</span>();</span><br></pre></td></tr></table></figure>

<p>智能指针需要学习，NNEngine的具体实现如下所示：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NNEngine</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 这里全部使用纯虚函数（=0），作用是将NNEngine定义为一个抽象类，不能实例化，只能作为基类使用</span></span><br><span class="line">    <span class="comment">// 具体实现需要在子类中实现，这里的实现只是为了定义接口</span></span><br><span class="line">    <span class="comment">// 用这种方式实现封装，可以使得不同的引擎的接口一致，方便使用；也可以隐藏不同引擎的实现细节，方便维护</span></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">NNEngine</span>()&#123;&#125;;                                                                                               <span class="comment">// 析构函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> nn_error_e <span class="title">LoadModelFile</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *model_file)</span> </span>= <span class="number">0</span>;                                                        <span class="comment">// 加载模型文件，=0表示纯虚函数，必须在子类中实现</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">const</span> std::vector&lt;tensor_attr_s&gt; &amp;<span class="title">GetInputShapes</span><span class="params">()</span> </span>= <span class="number">0</span>;                                                      <span class="comment">// 获取输入张量的形状</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">const</span> std::vector&lt;tensor_attr_s&gt; &amp;<span class="title">GetOutputShapes</span><span class="params">()</span> </span>= <span class="number">0</span>;                                                     <span class="comment">// 获取输出张量的形状</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> nn_error_e <span class="title">Run</span><span class="params">(std::vector&lt;tensor_data_s&gt; &amp;inputs, std::vector&lt;tensor_data_s&gt; &amp;outpus, <span class="type">bool</span> want_float)</span> </span>= <span class="number">0</span>; <span class="comment">// 运行模型</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p>2.读取、预处理图片</p>
<p>3.设置输入、输出属性</p>
<p>4.推理</p>
<p>5.后处理</p>
<p>6.释放资源（后处理）</p>
<p>cmake需要重新学习</p>
<h1 id="测试三、Yolov5-RKNN教程"><a href="#测试三、Yolov5-RKNN教程" class="headerlink" title="测试三、Yolov5 RKNN教程"></a>测试三、Yolov5 RKNN教程</h1><h2 id="3-1-Pytorch转-ONNX"><a href="#3-1-Pytorch转-ONNX" class="headerlink" title="3.1 Pytorch转 ONNX"></a>3.1 Pytorch转 ONNX</h2><h2 id="3-2-ONNX转-RKNN"><a href="#3-2-ONNX转-RKNN" class="headerlink" title="3.2 ONNX转 RKNN"></a>3.2 ONNX转 RKNN</h2><h2 id="3-3-RKNN-yolov5模型推理"><a href="#3-3-RKNN-yolov5模型推理" class="headerlink" title="3.3 RKNN yolov5模型推理"></a>3.3 RKNN yolov5模型推理</h2>]]></content>
      <categories>
        <category>3588 npu</category>
      </categories>
      <tags>
        <tag>3588 npu</tag>
      </tags>
  </entry>
  <entry>
    <title>c++ 环境搭建</title>
    <url>/2023/09/02/10-2%20vscode%20c-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-课程所需运行环境配置"><a href="#1-课程所需运行环境配置" class="headerlink" title="1 课程所需运行环境配置"></a>1 课程所需运行环境配置</h1><p>​		ubuntu + windows双系统 4070ti 13900K 32G </p>
<h1 id="2-VS-Code配置"><a href="#2-VS-Code配置" class="headerlink" title="2 VS Code配置"></a>2 VS Code配置</h1><h2 id="2-1-安装vscode"><a href="#2-1-安装vscode" class="headerlink" title="2.1 安装vscode"></a>2.1 安装vscode</h2><h2 id="2-2-安装插件"><a href="#2-2-安装插件" class="headerlink" title="2.2 安装插件"></a>2.2 安装插件</h2><ol>
<li>chinese</li>
<li>remote ssh</li>
<li>c++</li>
<li>python</li>
<li>run</li>
<li>C&#x2F;C++ Extension Pack</li>
</ol>
<h1 id="3-下载MinGw编译器"><a href="#3-下载MinGw编译器" class="headerlink" title="3 下载MinGw编译器"></a>3 下载MinGw编译器</h1><p><a href="https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/">MinGw官网</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/545908287">知乎配置教程</a></p>
<h2 id="4-配置C-C"><a href="#4-配置C-C" class="headerlink" title="4.配置C\C++"></a>4.配置C\C++</h2><p>重启vscode就好了</p>
]]></content>
      <categories>
        <category>3588 npu</category>
      </categories>
      <tags>
        <tag>3588 npu</tag>
      </tags>
  </entry>
  <entry>
    <title>c++基本语法</title>
    <url>/2023/09/02/10-3%20c-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-C-程序结构"><a href="#1-C-程序结构" class="headerlink" title="1.C++程序结构"></a>1.C++程序结构</h1><h2 id="1-1-C-程序的基本组成部分"><a href="#1-1-C-程序的基本组成部分" class="headerlink" title="1.1 C++程序的基本组成部分"></a>1.1 C++程序的基本组成部分</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> favorites_num;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入0~10中你最喜欢的数字: &quot;</span>;</span><br><span class="line">    std::cin &gt;&gt; favorites_num;</span><br><span class="line">    std::cout &lt;&lt; favorites_num &lt;&lt; <span class="string">&quot;也是我喜欢的数字！&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>标识符(identifiers)：</p>
<p>​	main favorites_num  cout cin</p>
<p>操作符(operators)：</p>
<p>​	&lt;&lt;    &gt;&gt; </p>
<p>标点(punctuation：</p>
<p>​	；}</p>
<h2 id="1-2-预处理指令-Preprocessor-Directives"><a href="#1-2-预处理指令-Preprocessor-Directives" class="headerlink" title="1.2 预处理指令(Preprocessor Directives)"></a>1.2 预处理指令(Preprocessor Directives)</h2><ul>
<li>它指示编译器在实际编译开始之前预处理信息·以#开头，不以分号(;)结尾</li>
<li>并不理解C++语法</li>
</ul>
<h2 id="1-3-注释"><a href="#1-3-注释" class="headerlink" title="1.3 注释"></a>1.3 注释</h2><p>​	跟C相同，双斜杠的单行注释和、&#x2F;**&#x2F;多行注释</p>
<h2 id="1-4-main函数"><a href="#1-4-main函数" class="headerlink" title="1.4 main函数"></a>1.4 main函数</h2><p>​	例程1：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><code>#include &lt;iostream&gt;</code>：这是一个预处理指令，用于包含输入输出流库（iostream），以便在程序中使用输入输出功能。</li>
<li><code>using namespace std;</code>：这是一个命名空间的声明，使用了<code>std</code>命名空间。命名空间<code>std</code>包含了C++标准库的函数和对象，使我们可以直接使用其中的成员，而无需在每个标识符前添加<code>std::</code>前缀。</li>
<li><code>int main()</code>：这是程序的主函数，也是程序的入口点。在C++中，每个程序都必须有一个<code>main</code>函数作为程序的起点。</li>
<li><code>&#123;</code> 和 <code>&#125;</code>：这对花括号之间的代码块是<code>main</code>函数的主体，包含了程序要执行的代码。</li>
<li><code>cout &lt;&lt; &quot;hello world&quot; &lt;&lt; endl;</code>：这是一个输出语句，使用了<code>cout</code>对象，它是标准输出流。<code>&lt;&lt;</code>是输出运算符，用于将字符串常量”hello world”输出到控制台。<code>endl</code>是一个特殊的输出控制符，表示换行。</li>
</ol>
<p>例程2：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//argc表示参数数量，argc表示输入的参数</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;参数数量&quot;</span> &lt;&lt; argc &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; argc; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;参数名称&quot;</span> &lt;&lt; argv &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"> 	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​	 </p>
<h2 id="1-5-命名空间namespace"><a href="#1-5-命名空间namespace" class="headerlink" title="1.5 命名空间namespace"></a>1.5 命名空间namespace</h2><p>在C++中，命名空间是一种用来组织程序中的标识符（例如变量名、函数名、类名等）的机制。命名空间可以避免标识符之间的名称冲突，使得不同库、模块或代码段中的标识符可以拥有相同的名称而不会发生冲突。</p>
<p><code>std</code> 是C++标准库中的命名空间，包含了大量的标准函数和类型定义。例如，<code>std::cout</code> 是用于标准输出的对象，<code>std::cin</code> 是用于标准输入的对象，<code>std::string</code> 是用于处理字符串的类，<code>std::vector</code> 是用于动态数组的类等等。这些标准库的功能都封装在 <code>std</code> 命名空间中。</p>
<p>使用 <code>using namespace std;</code> 声明后，就可以在代码中直接使用 <code>std</code> 命名空间中的成员，而无需在每个标识符前添加 <code>std::</code> 前缀。例如，可以直接使用 <code>cout</code> 来表示 <code>std::cout</code>，使用 <code>endl</code> 来表示 <code>std::endl</code>，以及使用 <code>string</code> 来表示 <code>std::string</code> 等等。</p>
<p>需要注意的是，尽管 <code>using namespace std;</code> 可以简化代码，但也可能引发命名冲突问题。如果程序中使用了不同命名空间中具有相同名称的标识符，可能会导致编译错误或意想不到的行为。因此，在大型项目中或与其他库进行交互时，最好明确指定使用的命名空间，而不是使用 <code>using namespace</code> 全局声明。</p>
<h1 id="2-C-变量和常量"><a href="#2-C-变量和常量" class="headerlink" title="2. C++变量和常量"></a>2. C++变量和常量</h1><h2 id="2-1-变量-variable"><a href="#2-1-变量-variable" class="headerlink" title="2.1 变量(variable)"></a>2.1 变量(variable)</h2><p>变量是内存地址的抽象变量有2个重要的属性:<br>Type:变量类型( integer、real nurber、string、Student)<br>Value:变量值(1,3.14,”computer”)</p>
<h2 id="2-2-基本类型-primitive-types"><a href="#2-2-基本类型-primitive-types" class="headerlink" title="2.2 基本类型(primitive types)"></a>2.2 基本类型(primitive types)</h2><p>示例3：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;参数a=&quot;</span> &lt;&lt; a &lt;&lt; endl;	  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​	上述示例运行打印为 a&#x3D;0，最好设置初值</p>
<p>示例4：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> width = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入房间宽度&quot;</span>;	  </span><br><span class="line">    cin &gt;&gt; width;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> length = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入房间长度&quot;</span>;	  </span><br><span class="line">    cin &gt;&gt; length;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;房间的面积为&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; width * length &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字符型-character-char"><a href="#字符型-character-char" class="headerlink" title="字符型(character) : char"></a>字符型(character) : char</h3><p>作用︰用于表示单个字符，如I@’,’a’,’X’<br>只占用1个字节<br>语法:char c &#x3D;(a;<br>&#x3D;&#x3D;注意&#x3D;&#x3D;:<br>需要和字符串区分开，用单引号不是双引号<br>存储的是字符的ASCIl编码，而不是字符本身</p>
<h3 id="整型-integer-short、int、long、long-long"><a href="#整型-integer-short、int、long、long-long" class="headerlink" title="整型(integer) : short、int、long、long long"></a>整型(integer) : short、int、long、long long</h3><h3 id="浮点型-floating-point-float、double"><a href="#浮点型-floating-point-float、double" class="headerlink" title="浮点型(floating point) : float、double"></a>浮点型(floating point) : float、double</h3><h3 id="布尔型-Boolean-bool"><a href="#布尔型-Boolean-bool" class="headerlink" title="布尔型(Boolean) : bool"></a>布尔型(Boolean) : bool</h3><p>示例5</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> a = &#123;<span class="string">&#x27;j&#x27;</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;字符型参数a的值=&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;字符型参数a的ascll=&quot;</span> &lt;&lt; <span class="built_in">int</span>(a) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// short取值范围和溢出</span></span><br><span class="line">    <span class="type">short</span> overflow_num_1 = <span class="number">32768</span>;    <span class="comment">// 不会报错，但是值会溢出</span></span><br><span class="line">    <span class="type">short</span> overflow_num_2 &#123;<span class="number">32768</span>&#125;;    <span class="comment">// 会报错</span></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;短整型溢出：&quot;</span> &lt;&lt; overflow_num_1 &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;短整型溢出：&quot;</span> &lt;&lt; overflow_num_2 &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​	&#x3D;&#x3D;注意&#x3D;&#x3D;:一般人们都是使用等于号进行赋值，但是对于一些超出范围的情况，编译器并不会报错，但是使用{}花括号的情况就会报错，所以建议大家之后使用花括号进行赋值.</p>
<h2 id="2-3-sizeof和climits"><a href="#2-3-sizeof和climits" class="headerlink" title="2.3 sizeof和climits"></a>2.3 sizeof和climits</h2><p>sizeof(int), &#x2F;&#x2F;确定int占用空间<br>sizeof(double), &#x2F;&#x2F;确定double占用空间<br>sizeof(变量名), &#x2F;&#x2F;确定具体某个变量占用空间<br>sizeof 变量名, &#x2F;&#x2F;不用括号</p>
<p>示例6：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> a = &#123;<span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line">    <span class="type">int</span> b = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;字符型变量a的大小为&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(a) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;整形变量b的大小为&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(b) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-4-常量-constant"><a href="#2-4-常量-constant" class="headerlink" title="2.4 常量(constant)"></a>2.4 常量(constant)</h2><p>作用:记录不可更改的数据，防止变量误修改</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 预处理器定义</span></span><br><span class="line"><span class="comment">// 在老版本的C++中常用，现在不建议使用（预处理器不认识C++代码，不会做类型检查等工作)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pi 3.1415926</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const修饰方法</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="number">3.1415926</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> months = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pi = 3.5; 常量不可以再变更值，否则编译器会报错</span></span><br></pre></td></tr></table></figure>

<p>示例7：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">double</span> PI &#123;<span class="number">3.14159</span>&#125;;</span><br><span class="line">    <span class="type">int</span> length &#123;<span class="number">10</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的面积为&quot;</span> &lt;&lt; length * length * PI &lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-C-数组和容器"><a href="#3-C-数组和容器" class="headerlink" title="3. C++数组和容器"></a>3. C++数组和容器</h1><h2 id="3-1-数组"><a href="#3-1-数组" class="headerlink" title="3.1 数组"></a>3.1 数组</h2><p>·数组所有元素都是同一个数据类型。每个元素可以单独读取。</p>
<p>数组的特点：</p>
<ul>
<li>长度大小固定，且不可以再修改</li>
<li>所有元素是同一类型</li>
<li>元素在内存中是连续存储的</li>
<li>声明array时，内存中会分配一块区域来存储</li>
<li>可以使用存储的索引位置来获取元素（从0开始，最后一个元素索引为size -1)</li>
<li>不检查是否超出区域（超出长度获取元素可能会报错)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int student_scores[5] = &#123;92, 78, 100, 86, 65&#125;;  // 所有元素初始化</span><br><span class="line">int ages[10] = &#123;19, 23&#125;;                      // 前两个元素初始化对应值，其他元素为0</span><br><span class="line">const int days_in_year = 365;</span><br><span class="line">double hi_temperatures[days_in_year] = &#123;0&#125;;   // 所有元素初始化为0</span><br><span class="line">int another_array[] = &#123;1, 2, 3, 4, 5, 6&#125;;      // 数组大小自动计算</span><br></pre></td></tr></table></figure>

<p>​	数组如果只是定义，他是没有初值的最好在创建的过程中就加入初值。、只有加入一个初值，其他没赋予的值也会有，只是为0 </p>
<p>示例8：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> a[] &#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;d&#x27;</span>&#125;;</span><br><span class="line">    <span class="type">int</span> b[] &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a数组的第五个值为&quot;</span> &lt;&lt; a[<span class="number">4</span>] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;b数组名打印&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-2-容器"><a href="#3-2-容器" class="headerlink" title="3.2 容器"></a>3.2 容器</h2><p>假设需要存储整个学校所有学生的考试成绩无法知道具体的学生数量<br>解决办法:</p>
<ul>
<li><p>使用数组，数组大小设置的足够大</p>
</li>
<li><p>使用vector动态数组</p>
</li>
</ul>
<p>&#x3D;&#x3D;容器的特点&#x3D;&#x3D;：</p>
<ul>
<li><p>C++标准模板库STL中的容器(container)</p>
</li>
<li><p>长度大小可以随时缩放</p>
</li>
<li><p>和数组类似的语法用法</p>
</li>
<li><p>高性能越界检查</p>
</li>
<li><p>很多有用的函数:sort, reverrse, find等</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">char</span>&gt; <span class="title">vowels</span><span class="params">(<span class="number">5</span>)</span></span>;             <span class="comment">// 构造函数初始化方法，需要五个位置</span></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">student_scores</span><span class="params">(<span class="number">10</span>)</span></span>;     <span class="comment">// 大小为10，这10个数字会自动初始化为0</span></span><br></pre></td></tr></table></figure>

<p>赋予初值：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::vector&lt;<span class="type">char</span>&gt; vowels &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;u&#x27;</span>&#125;;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; student_scores &#123;<span class="number">100</span>, <span class="number">99</span>, <span class="number">98</span>, <span class="number">97</span>, <span class="number">96</span>&#125;;</span><br><span class="line"><span class="function">std::vector&lt;<span class="type">double</span>&gt; <span class="title">hi_temperatures</span><span class="params">(<span class="number">365</span>, <span class="number">37.0</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​	这里有些区别，第一个使用的是花括号进行的初值赋予，第二个跟第一个相同，但是第三个使用的是圆括号来进行的，第一个参数为365表示将会有365个元素，第二个参数为初始值，表示这365个元素都会被初始化为37.0</p>
<p>​	.at获取</p>
<p>​	.pushback进行追加</p>
<p>示例 9：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">char</span>&gt; vowel &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;u&#x27;</span>&#125;;</span><br><span class="line">    cout &lt;&lt; vowel.<span class="built_in">at</span>(<span class="number">1</span>) &lt;&lt;endl;</span><br><span class="line">    vowel.<span class="built_in">push_back</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    cout &lt;&lt; vowel.<span class="built_in">at</span>(<span class="number">5</span>) &lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​	需要注意的是上面的vector和&lt;类型&gt;必须连在一起，否则会报错。</p>
<p>​	容器的获取方式跟数组的获取方式相同，但也可以有更多的方式</p>
<h1 id="4-C-程序流程"><a href="#4-C-程序流程" class="headerlink" title="4. C++程序流程"></a>4. C++程序流程</h1><h2 id="4-1-if"><a href="#4-1-if" class="headerlink" title="4.1 if"></a>4.1 if</h2><p>示例 10：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> lower_limit &#123;<span class="number">10</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> upper_limit &#123;<span class="number">100</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> input_num;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入一个介于&quot;</span> &lt;&lt; lower_limit &lt;&lt; <span class="string">&quot;和&quot;</span> &lt;&lt; upper_limit &lt;&lt; <span class="string">&quot;之间的整数：&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cin &gt;&gt; input_num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (input_num &gt;= lower_limit) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;===条件一满足===&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; input_num &lt;&lt; <span class="string">&quot;大于等于&quot;</span> &lt;&lt; lower_limit &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; input_num &lt;&lt; <span class="string">&quot;比&quot;</span> &lt;&lt; lower_limit &lt;&lt; <span class="string">&quot;大&quot;</span> &lt;&lt; (input_num - lower_limit) &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (input_num &lt;= upper_limit) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;===条件二满足===&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; input_num &lt;&lt; <span class="string">&quot;小于等于&quot;</span> &lt;&lt; upper_limit &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; input_num &lt;&lt; <span class="string">&quot;比&quot;</span> &lt;&lt; upper_limit &lt;&lt; <span class="string">&quot;小&quot;</span> &lt;&lt; (upper_limit - input_num) &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (input_num &gt; lower_limit &amp;&amp; input_num &lt; upper_limit) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;===条件三满足===&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; input_num &lt;&lt; <span class="string">&quot;介于&quot;</span> &lt;&lt; lower_limit &lt;&lt; <span class="string">&quot;和&quot;</span> &lt;&lt; upper_limit &lt;&lt; <span class="string">&quot;之间&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-2-switch"><a href="#4-2-switch" class="headerlink" title="4.2 switch"></a>4.2 switch</h2><p>示例 11：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char input_grade = &#x27;0&#x27;;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; &quot;请输入你的成绩：&quot;;</span><br><span class="line">    std::cin &gt;&gt; input_grade;</span><br><span class="line"></span><br><span class="line">    switch (input_grade)</span><br><span class="line">    &#123;</span><br><span class="line">        case &#x27;a&#x27;:</span><br><span class="line">        case &#x27;A&#x27;:</span><br><span class="line">            std::cout &lt;&lt; &quot;优秀&quot; &lt;&lt; std::endl;</span><br><span class="line">            break;</span><br><span class="line">        case &#x27;b&#x27;:</span><br><span class="line">        case &#x27;B&#x27;:</span><br><span class="line">            std::cout &lt;&lt; &quot;良好&quot; &lt;&lt; std::endl;</span><br><span class="line">            break;</span><br><span class="line">        case &#x27;c&#x27;:</span><br><span class="line">        case &#x27;C&#x27;:</span><br><span class="line">            std::cout &lt;&lt; &quot;中等&quot; &lt;&lt; std::endl;</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-3循环-for、while、do-while"><a href="#4-3循环-for、while、do-while" class="headerlink" title="4.3循环: for、while、do-while"></a>4.3循环: for、while、do-while</h2><p>示例 11：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 简单的 for 循环</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每次 i 增加 2</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了上面这种最简单的方式，for也支持基于范围的循环，类似于python：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> scores [ ] &#123;<span class="number">100</span>,<span class="number">99</span>,<span class="number">98</span>&#125; ;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> score: scores)</span><br><span class="line">	cout&lt;&lt; score &lt;&lt; endl;</span><br></pre></td></tr></table></figure>

<p>有时确定范围比较困难，所以可以使用auto这个类型，可以帮我们自动确认类型</p>
<p>while和do while就不重复了，还是很简单的</p>
<h1 id="5-C-字符和字符串"><a href="#5-C-字符和字符串" class="headerlink" title="5. C++字符和字符串"></a>5. C++字符和字符串</h1><h2 id="5-1C风格字符串"><a href="#5-1C风格字符串" class="headerlink" title="5.1C风格字符串"></a>5.1C风格字符串</h2><p>示例 12：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> first_name[<span class="number">20</span>] &#123;&#125;;</span><br><span class="line">    <span class="type">char</span> last_name[<span class="number">20</span>] &#123;&#125;;</span><br><span class="line">    <span class="type">char</span> full_name[<span class="number">50</span>] &#123;<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">    <span class="type">char</span> temp[<span class="number">50</span>] &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入你的姓：&quot;</span>;</span><br><span class="line">    std::cin &gt;&gt; first_name;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入你的名：&quot;</span>;</span><br><span class="line">    std::cin &gt;&gt; last_name;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;===============&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;您的姓：&quot;</span> &lt;&lt; first_name &lt;&lt; <span class="string">&quot;，一共有&quot;</span> &lt;&lt; <span class="built_in">strlen</span>(first_name) &lt;&lt; <span class="string">&quot;个字符&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;您的名：&quot;</span> &lt;&lt; last_name &lt;&lt; <span class="string">&quot;，一共有&quot;</span> &lt;&lt; <span class="built_in">strlen</span>(last_name) &lt;&lt; <span class="string">&quot;个字符&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-2-C-风格字符串"><a href="#5-2-C-风格字符串" class="headerlink" title="5.2 C++风格字符串"></a>5.2 C++风格字符串</h2><ul>
<li><p>STL中一个类</p>
</li>
<li><p>使用前必须要导入#include <string></p>
</li>
<li><p>std namespace</p>
</li>
<li><p>内存中连续，动态大小</p>
</li>
<li><p>可转c-style字符串相互转化</p>
</li>
<li><p>更安全</p>
<p>示例 13：</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::string sl; <span class="comment">// 全部初始化为空</span></span><br><span class="line">    std::string s2 &#123; <span class="string">&quot;hello&quot;</span> &#125;; <span class="comment">// 初始化为 &quot;hello&quot;</span></span><br><span class="line">    std::string s3 &#123; s2 &#125;; <span class="comment">// 拷贝 s2</span></span><br><span class="line">    std::string s4 &#123; s3, <span class="number">0</span>, <span class="number">4</span> &#125;; <span class="comment">// 拷贝 s3 的前4个字符：&quot;hell&quot;</span></span><br><span class="line">    std::string s5 &#123; <span class="string">&quot;hello&quot;</span>, <span class="number">3</span> &#125;; <span class="comment">// 拷贝 &quot;hello&quot; 的前3个字符：&quot;hel&quot;</span></span><br><span class="line">    <span class="function">std::string <span class="title">s6</span><span class="params">(<span class="number">5</span>, <span class="string">&#x27;x&#x27;</span>)</span></span>; <span class="comment">// 5个 &#x27;x&#x27;：&quot;xxxxx&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​	c++字符串可以直接赋值，根据他的参数的数量可以划分不同的重定向函数</p>
<p>拼接</p>
<p>示例 14：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::string part1 &#123; <span class="string">&quot;C++&quot;</span> &#125;;</span><br><span class="line">    std::string part2 &#123; <span class="string">&quot;是一门强大的&quot;</span> &#125;;</span><br><span class="line">    std::string sentence;</span><br><span class="line"></span><br><span class="line">    sentence = part1 + <span class="string">&quot; &quot;</span> + part2 + <span class="string">&quot;语言&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; sentence &lt;&lt; std::endl; <span class="comment">// 输出: C++ 是一门强大的语言</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// sentence = &quot;C+++&quot; 是一门强大的语言&quot;; // 错误，不能将两个C风格字符串字面量相加</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>3588 npu</category>
      </categories>
      <tags>
        <tag>3588 npu</tag>
      </tags>
  </entry>
  <entry>
    <title>c++ 进阶 函数和指针</title>
    <url>/2023/09/03/10-4%20c-%E8%BF%9B%E9%98%B6-%E5%87%BD%E6%95%B0%E5%92%8C%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-掌握C-函数基本概念用法"><a href="#1-掌握C-函数基本概念用法" class="headerlink" title="1.掌握C++函数基本概念用法"></a>1.掌握C++函数基本概念用法</h1><h2 id="1-1-函数定义"><a href="#1-1-函数定义" class="headerlink" title="1.1 函数定义"></a>1.1 函数定义</h2><p>什么是函数(function)</p>
<ul>
<li><p>C++程序</p>
</li>
<li><p>C++标准库(functions和clas;ses)</p>
</li>
<li><p>第三方库(functions和class</p>
</li>
<li><p>自定义的functions和classes</p>
</li>
</ul>
<p>函数让我们的程序更加模块化</p>
<ul>
<li>让代码解耦，分成按业务，</li>
<li>按逻辑的单元提高代码复用性</li>
</ul>
<p>函数名称参数列表</p>
<ul>
<li><p>传给函数的变量</p>
</li>
<li><p>变量类型需声明</p>
</li>
</ul>
<p>返回值类型</p>
<ul>
<li><p>函数体</p>
</li>
<li><p>函数被调用执行的部分，花括号{}内部</p>
<p>示例1：</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI &#123;<span class="number">3.1415926</span>&#125;; <span class="comment">// 圆周率</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">calculate_area</span><span class="params">(<span class="type">double</span> radius)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> PI * <span class="built_in">pow</span>(radius, <span class="number">2</span>); <span class="comment">// pow()函数用于计算幂</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">circle_area</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入圆的半径：&quot;</span>;</span><br><span class="line">    <span class="type">double</span> radius &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    cin &gt;&gt; radius;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的面积为：&quot;</span> &lt;&lt; <span class="built_in">calculate_area</span>(radius) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">circle_area</span>(); <span class="comment">// 调用计算圆的面积的函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="1-2-函数原型-prototype"><a href="#1-2-函数原型-prototype" class="headerlink" title="1.2 函数原型(prototype)"></a>1.2 函数原型(prototype)</h2><p>&#x3D;&#x3D;编译器要求:使用函数前必须“见过”这个函数&#x3D;&#x3D;</p>
<p>先定义函数再调用</p>
<ul>
<li>适用于小型程序，不适用于大型项目</li>
</ul>
<p>使用函数原型</p>
<ul>
<li><p>告诉编译器函数定义必要的信息</p>
</li>
<li><p>也称为前向声明(forward declaration)</p>
</li>
<li><p>放在程序开始的部分</p>
</li>
<li><p>或者放在头文件(header files.h)中</p>
</li>
</ul>
<h2 id="1-3参数"><a href="#1-3参数" class="headerlink" title="1.3参数"></a>1.3参数</h2><ol>
<li>当我们传递数据给函数时，其实用的是值传递(pass by value)</li>
<li>数据的拷贝会传给函数</li>
<li>函数内部的代码不会改变我们传给它的变量</li>
</ol>
<p>形参(formal parameters)与实参(actual parameters)<br>形参(formal parameters)</p>
<ul>
<li>函数定义语句中的参数</li>
</ul>
<p>实参(actual parameters</p>
<ul>
<li>调用函数时传递的参数(arguments)</li>
</ul>
<h2 id="1-4-重载"><a href="#1-4-重载" class="headerlink" title="1.4 重载"></a>1.4 重载</h2><p>一组函数具有相同函数名，不同参数列表</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数原型，函数重载</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add_numbers</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>; <span class="comment">// 两个 int 类型数字相加</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">add_numbers</span><span class="params">(<span class="type">double</span>, <span class="type">double</span>)</span></span>; <span class="comment">// 两个 double 类型数字相加</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">add_numbers</span>(<span class="number">5</span>, <span class="number">10</span>) &lt;&lt; endl; <span class="comment">// int 类型</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">add_numbers</span>(<span class="number">1.23</span>, <span class="number">2.45</span>) &lt;&lt; endl; <span class="comment">// double 类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add_numbers</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">add_numbers</span><span class="params">(<span class="type">double</span> num1, <span class="type">double</span> num2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="1-5-函数传参-数组、引用"><a href="#1-5-函数传参-数组、引用" class="headerlink" title="1.5 函数传参(数组、引用)"></a>1.5 函数传参(数组、引用)</h2><ul>
<li><p>数组元素并没有复制</p>
</li>
<li><p>数组变量名称表示第一个元素在内存中的地址这个地址才被复制了</p>
</li>
<li><p>函数内部无法知道数组大小(数组大小需要额外传参)</p>
<p>·声明参数numbers是常量(只读read-only)</p>
</li>
</ul>
<p>		</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_array</span> <span class="params">(<span class="type">const</span> <span class="type">int</span> numbers[ ], <span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function">    </span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap_num</span><span class="params">(<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 交换两个数字</span></span><br><span class="line">    <span class="type">int</span> x &#123;<span class="number">100</span>&#125;, y &#123;<span class="number">200</span>&#125;;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;x is: &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot; y is: &quot;</span> &lt;&lt; y &lt;&lt; std::endl; <span class="comment">// 100 200</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">swap_num</span>(x, y);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;x is: &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot; y is: &quot;</span> &lt;&lt; y &lt;&lt; std::endl; <span class="comment">// 200 100</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的是取地址，上面的函数和下面这个函数的作用相同：</p>
<p>传递地址</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap_num</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 交换两个数字</span></span><br><span class="line">    <span class="type">int</span> x &#123;<span class="number">100</span>&#125;, y &#123;<span class="number">200</span>&#125;;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;x is: &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot; y is: &quot;</span> &lt;&lt; y &lt;&lt; std::endl; <span class="comment">// 100 200</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">swap_num</span>(&amp;x, &amp;y);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;x is: &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot; y is: &quot;</span> &lt;&lt; y &lt;&lt; std::endl; <span class="comment">// 200 100</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>&#x3D;&#x3D;注意&#x3D;&#x3D;</p>
<p><code>int&amp;</code> 是 C++ 中的引用类型，它是一种特殊的类型，用于给一个已存在的变量起一个别名。可以将其理解为变量的一个别名或者另一个名称，与原变量共享同一块内存空间。</p>
<p>引用类型与指针类型有所不同。引用在声明时必须初始化，并且一旦初始化后，它就一直引用同一个对象，不能再引用其他对象。而指针可以在声明后重新指向不同的对象。</p>
<p>使用引用类型的主要目的是提供一种更简洁、更直观的方式来操作变量，同时避免了指针操作的一些繁琐性和潜在的错误。</p>
<p>在上述修正后的代码中，<code>int&amp;</code> 用于函数参数的声明，表示传递的参数是一个整数的引用。通过引用参数，可以直接修改原变量的值，而无需通过指针进行解引用。在函数内部，通过引用操作修改了 <code>a</code> 和 <code>b</code> 所指向的变量的值。</p>
<p>其实也就相当于传地址</p>
<h1 id="2-掌握C-指针基本概念、用法"><a href="#2-掌握C-指针基本概念、用法" class="headerlink" title="2.掌握C++指针基本概念、用法"></a>2.掌握C++指针基本概念、用法</h1><h2 id="2-1-什么是指针"><a href="#2-1-什么是指针" class="headerlink" title="2.1 什么是指针"></a>2.1 什么是指针</h2><p>指针是变量<br>变量的值是一个地址<br>指针的值可以存储哪些地址?</p>
<p>另一个变量</p>
<p>函数</p>
<hr>
<p>如果指针指向变量或函数，那么为什么不直接用他们?</p>
<p>可以，但不常用:</p>
<ul>
<li><p>函数内部，指针可以访问函数作用域外的数据</p>
</li>
<li><p>高效操作数组</p>
</li>
<li><p>在堆(heap)上动态分配内存空间</p>
<p>​      这些空间没有变量名称只能通过指针访问</p>
</li>
<li><p>可以获取内存中特殊地址</p>
</li>
</ul>
<p>​              如嵌入式系统、设备驱动等</p>
<hr>
<ul>
<li>&amp;地址操作符</li>
<li>指针也是一个变量(variable)，所以它的值可以改变</li>
<li>指针可以为null</li>
<li>指针可以不初始化</li>
</ul>
<h2 id="2-2-动态内存分配-dynami-allocation"><a href="#2-2-动态内存分配-dynami-allocation" class="headerlink" title="2.2 动态内存分配(dynami allocation)"></a>2.2 动态内存分配(dynami allocation)</h2><p>在堆(heap)上程序员自己分配内存空间;<br>数组(array)</p>
<ul>
<li>使用数组需要知道数组大小，并且数组大小是固定的;</li>
<li>Vector容器大小可以动态调整</li>
</ul>
<p>使用指针获取堆上刚分配的内存空间</p>
<hr>
<p>使用new[]为数组分配内存空间</p>
<p>使用delete[]释放内存</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* array_ptr &#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">    <span class="type">int</span> arr_size &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;你需要多少个整数: &quot;</span>;</span><br><span class="line">    std::cin &gt;&gt; arr_size;</span><br><span class="line"></span><br><span class="line">    array_ptr = <span class="keyword">new</span> <span class="type">int</span>[arr_size]; <span class="comment">// 在堆上分配内存</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>[] array_ptr; <span class="comment">// 释放内存</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-3-指针和数组的关系"><a href="#2-3-指针和数组的关系" class="headerlink" title="2.3 指针和数组的关系"></a>2.3 指针和数组的关系</h2><ul>
<li>数组变量名称的值是数组第一个元素的地址;</li>
<li>指针变量的的值是一个地址;</li>
<li>如果指针指向的类型和数组元素的类型一致，那么指针和数组名称几乎是等价的</li>
</ul>
<h2 id="2-4-const和指针一一指针本身和被指向的对象都是常量"><a href="#2-4-const和指针一一指针本身和被指向的对象都是常量" class="headerlink" title="2.4 const和指针一一指针本身和被指向的对象都是常量"></a>2.4 const和指针一一指针本身和被指向的对象都是常量</h2><p>指针可以操作:地址及被指向的对象</p>
<ul>
<li>被指向的对象是常量(povinters to constants)</li>
<li>指针本身是常量(constant pointers)</li>
<li>指针本身和被指向的对象都是常量(constant pointers to constants)</li>
</ul>
<p>示例1</p>
<ul>
<li>被指向的对象是常量，不可以通过指针改动·</li>
<li>指针本身可以改变</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> high_temp &#123;<span class="number">40</span>&#125;;</span><br><span class="line">    <span class="type">int</span> low_temp &#123;<span class="number">20</span>&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span>* temp_ptr &#123;&amp;high_temp&#125;; <span class="comment">// 被指向的数据是常量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// *temp_ptr = 100; // 错误，不能通过解引用修改常量的值</span></span><br><span class="line"></span><br><span class="line">    temp_ptr = &amp;low_temp; <span class="comment">// 正确，可以通过指针修改指向的地址</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例2</p>
<ul>
<li>被指向的对象可以通过指针改动</li>
<li>指针本身不可以改变</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> high_temp &#123;<span class="number">40</span>&#125;;</span><br><span class="line">    <span class="type">int</span> low_temp &#123;<span class="number">20</span>&#125;;</span><br><span class="line">    <span class="type">int</span>* <span class="type">const</span> temp_ptr &#123;&amp;high_temp&#125;; <span class="comment">// 指针本身是常量，指向 high_temp</span></span><br><span class="line"></span><br><span class="line">    *temp_ptr = <span class="number">100</span>; <span class="comment">// 正确，通过指针解引用修改值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// temp_ptr = &amp;low_temp; // 错误，不能修改指针的值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>示例3 </p>
<ul>
<li>被指向的对象不可以改动</li>
<li>指针本身不可以改变</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> high_temp &#123;<span class="number">40</span>&#125;;</span><br><span class="line">    <span class="type">int</span> low_temp &#123;<span class="number">20</span>&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span>* <span class="type">const</span> temp_ptr &#123;&amp;high_temp&#125;; <span class="comment">// 指针和被指向对象都是常量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// *temp_ptr = 100; // 错误，不能修改指针指向的值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// temp_ptr = &amp;low_temp; // 错误，不能修改指针的值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-5-函数返回指针"><a href="#2-5-函数返回指针" class="headerlink" title="2.5 函数返回指针"></a>2.5 函数返回指针</h2><p>函数可以返回指针:</p>
<p> *function( );</p>
<p>返回哪些指针:</p>
<ul>
<li>函数内部动态分配的内存空间传入的数据</li>
<li>不能返回函数内的局部变量</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span>* <span class="title">create_array</span><span class="params">(<span class="type">size_t</span> size, <span class="type">int</span> initial_value = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* new_storage &#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">    new_storage = <span class="keyword">new</span> <span class="type">int</span>[size]; <span class="comment">// 分配内存</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i&#123;<span class="number">0</span>&#125;; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="comment">// 初始化值</span></span><br><span class="line">        *(new_storage + i) = initial_value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> new_storage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">size_t</span> size &#123;<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span>* array_ptr = <span class="built_in">create_array</span>(size, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印数组元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i&#123;<span class="number">0</span>&#125;; i &lt; size; i++) &#123;</span><br><span class="line">        std::cout &lt;&lt; *(array_ptr + i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>[] array_ptr; <span class="comment">// 释放内存</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>3588 npu</category>
      </categories>
      <tags>
        <tag>3588 npu</tag>
      </tags>
  </entry>
  <entry>
    <title>c++进阶语法 oop 智能指针 STL</title>
    <url>/2023/09/03/10-5%20c-%E8%BF%9B%E9%98%B6%E8%AF%AD%E6%B3%95-oop-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88-STL/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-OOP面向对象开发"><a href="#1-OOP面向对象开发" class="headerlink" title="1 OOP面向对象开发"></a>1 OOP面向对象开发</h1><h2 id="1-1-类-class-和对象-objects"><a href="#1-1-类-class-和对象-objects" class="headerlink" title="1.1 类(class)和对象(objects)"></a>1.1 类(class)和对象(objects)</h2><pre><code>类(classes)和对象(objects)
</code></pre>
<p>C++类(classes)</p>
<ul>
<li>创建对象用的蓝图(blueprint)</li>
<li>用户自定义的数据类型</li>
<li>有成员属性(data)和成员方法(methods)</li>
<li>可以隐藏属性和方法(private)</li>
<li>可以提供公共接口(public)</li>
<li>示例:Account,Student,std:vector, std:string</li>
</ul>
<p>C++对象(objects)</p>
<ul>
<li>由类创建而来</li>
<li>表示类的一个具体的实例(lnstance)</li>
<li>可以有很多个实例，每个都有独立的身份·每个对象都可以使用类中定义的方法</li>
</ul>
<p>Account对象示例</p>
<ul>
<li>Jobs、Alice的apunt是Account类的实例</li>
<li>每个实例都有它的余额、可以提现、存钱</li>
</ul>
<p>声明一个类：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    std::string name;</span><br><span class="line">    <span class="type">double</span> balance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">deposit</span><span class="params">(<span class="type">double</span> amount)</span></span>; <span class="comment">// 存款</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">withdraw</span><span class="params">(<span class="type">double</span> amount)</span></span>; <span class="comment">// 取款</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>创建类的对象：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Account jobs_account;</span><br><span class="line">Account alice_account;</span><br><span class="line">Account* mary_account = <span class="keyword">new</span> <span class="built_in">Account</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> mary_account;</span><br></pre></td></tr></table></figure>



<p>示例1：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span> </span><br><span class="line">&#123;</span><br><span class="line">    string name &#123;<span class="string">&quot;None&quot;</span>&#125;;</span><br><span class="line">    <span class="type">double</span> balance &#123;<span class="number">0.0</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">deposit</span><span class="params">(<span class="type">double</span> amount)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">withdraw</span><span class="params">(<span class="type">double</span> amount)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Account a;</span><br><span class="line">    Account b;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<p>获取类的属性或者方法</p>
<p>使用点操作符</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Account jobs_account;</span><br><span class="line">jobs_account.balance;</span><br><span class="line">jobs_account.<span class="built_in">deposit</span>( <span class="number">10.00</span>);</span><br></pre></td></tr></table></figure>

<p>如果是一个指向对象的指针，可以解引用或者使用箭头操作符</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Account* alice_account = <span class="keyword">new</span> <span class="built_in">Account</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解引用指针并访问成员</span></span><br><span class="line">(*alice_account).balance; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用指针访问成员</span></span><br><span class="line">alice_account-&gt;<span class="built_in">deposit</span>(<span class="number">100.0</span>);</span><br><span class="line">alice_account-&gt;balance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> alice_account;</span><br></pre></td></tr></table></figure>



<h2 id="1-2-public、private、protected访问权限"><a href="#1-2-public、private、protected访问权限" class="headerlink" title="1.2 public、private、protected访问权限"></a>1.2 public、private、protected访问权限</h2><p>public</p>
<p>可以被任何实体访问   </p>
<hr>
<p>private<br>只能被本类的方法访问</p>
<hr>
<p>protected</p>
<p>可以被本类和子类(继承)的方法访问\</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    std::string name;</span><br><span class="line">    <span class="type">double</span> balance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">deposit</span><span class="params">(<span class="type">double</span> amount)</span></span>; <span class="comment">// 存款</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">withdraw</span><span class="params">(<span class="type">double</span> amount)</span></span>; <span class="comment">// 取款</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p>在类中实现完整的成员方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    <span class="type">double</span> balance &#123;<span class="number">0.0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">setBalance</span><span class="params">(<span class="type">double</span> amount)</span> </span>&#123;</span><br><span class="line">        balance = amount;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在类外面实现需要特殊定义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    <span class="type">double</span> balance &#123;<span class="number">0.0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">setBalance</span><span class="params">(<span class="type">double</span> amount)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getBalance</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Account::setBalance</span><span class="params">(<span class="type">double</span> amount)</span> </span>&#123;</span><br><span class="line">    balance = amount;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Account::getBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> balance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="1-3-构造函数-constructor"><a href="#1-3-构造函数-constructor" class="headerlink" title="1.3 构造函数(constructor)"></a>1.3 构造函数(constructor)</h2><ul>
<li>特殊的成员方法</li>
<li>对象创建的时候自动调用</li>
<li>适用于实例参数初始化</li>
<li>函数名和类的名称一致</li>
<li>无需设置返回类型</li>
<li>可以被重载(overload)</li>
</ul>
<h2 id="1-4-析构函数-destructor"><a href="#1-4-析构函数-destructor" class="headerlink" title="1.4 析构函数(destructor)"></a>1.4 析构函数(destructor)</h2><ul>
<li>特殊的成员方法</li>
<li>函数名和类的名称一致，前面跟着一个~波浪符号</li>
<li>对象销毁的时候自动调用</li>
<li>没有参数，没有返回类型</li>
<li>只有一个析构函数(不能重载)</li>
<li>适用于释放内存等资源</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    std::string name&#123;<span class="string">&quot;account&quot;</span>&#125;;</span><br><span class="line">    <span class="type">double</span> balance&#123;<span class="number">0.0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">Account</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">Account</span>(std::string name);</span><br><span class="line">    <span class="built_in">Account</span>(<span class="type">double</span> balance);</span><br><span class="line">    <span class="built_in">Account</span>(std::string name, <span class="type">double</span> balance);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 析构函数</span></span><br><span class="line">    ~<span class="built_in">Account</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>​		</p>
<h2 id="1-5-构造函数初始化列表"><a href="#1-5-构造函数初始化列表" class="headerlink" title="1.5 构造函数初始化列表"></a>1.5 构造函数初始化列表</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    std::string name;</span><br><span class="line">    <span class="type">double</span> balance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数，使用构造函数内部初始化参数</span></span><br><span class="line">    <span class="built_in">Account</span>(std::string name, <span class="type">double</span> balance) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数，使用初始化列表初始化参数</span></span><br><span class="line">    <span class="built_in">Account</span>(std::string name, <span class="type">double</span> balance)</span><br><span class="line">        : name&#123;name&#125;, balance&#123;balance&#125; &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="1-6-代理构造函数"><a href="#1-6-代理构造函数" class="headerlink" title="1.6 代理构造函数"></a>1.6 代理构造函数</h2><ul>
<li>重载的构造函数很相似·冗余的代码可能会导致错误</li>
<li>使用代理构造函数</li>
<li>在一个构造函数初始化列表中调用另一个构造函数</li>
</ul>
<h2 id="1-7-拷贝构造函数"><a href="#1-7-拷贝构造函数" class="headerlink" title="1.7 拷贝构造函数"></a>1.7 拷贝构造函数</h2><p>当对象被拷贝时，C++必须从已存在的对象复制出一个新的对象</p>
<p>何时使用拷贝构造函数?</p>
<ul>
<li>以值传递方式传递对象给函数（作参数)</li>
<li>函数以值方式返回对象</li>
<li>使用已存在的对象复制新的对象</li>
</ul>
<p>如果不提供自己写的copy constructor,编译器会自动生成一个(可能不符合要</p>
<h2 id="1-9-浅拷贝和深拷贝"><a href="#1-9-浅拷贝和深拷贝" class="headerlink" title="1.9 浅拷贝和深拷贝"></a>1.9 浅拷贝和深拷贝</h2><p>如果不提供自己写的copy constructor.编译器会生成默认的<br>将目标对象的值逐个拷贝过来;<br>如果是指针，拷贝的是值（指向的地址)，而不是指向的对象（浅拷贝)在析构函数中释放内存时，其他对象中的指针可能还在指向被释放的资源</p>
<h2 id="1-10-在类中使用const"><a href="#1-10-在类中使用const" class="headerlink" title="1.10 在类中使用const"></a>1.10 在类中使用const</h2><p>在类中使用const常函数</p>
<p>函数名称后加const</p>
<ul>
<li>函数体内不可以修改类成员属性。常对象</li>
</ul>
<p>声明对象时前面加const</p>
<ul>
<li>不可以修改常对象的成员属性仅能调用常函数</li>
</ul>
<h2 id="1-11-在类中使用static"><a href="#1-11-在类中使用static" class="headerlink" title="1.11 在类中使用static"></a>1.11 在类中使用static</h2><p>静态成员变量</p>
<ul>
<li><p>所有对象共有同一份数据（数据共享)</p>
</li>
<li><p>在类中声明，类外初始化</p>
</li>
</ul>
<p>静态成员函数</p>
<p>所有对象共享同一个函数</p>
<ul>
<li>只能访问静态成员变量</li>
</ul>
<h2 id="1-12-struct和class区别"><a href="#1-12-struct和class区别" class="headerlink" title="1.12 struct和class区别"></a>1.12 struct和class区别</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    std::string name&#123;<span class="string">&quot;none&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 默认私有属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function">std::string <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    std::string name&#123;<span class="string">&quot;none&quot;</span>&#125;;</span><br><span class="line">    <span class="comment">// 默认公有属性</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Account aa;</span><br><span class="line">    <span class="comment">// aa.name = &quot;bob&quot;; // 报错，无法访问私有成员</span></span><br><span class="line"></span><br><span class="line">    Student ss;</span><br><span class="line">    ss.name = <span class="string">&quot;alice&quot;</span>; <span class="comment">// 可以访问公有成员</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-智能指针"><a href="#2-智能指针" class="headerlink" title="2 智能指针"></a>2 智能指针</h1><p>原始指针(raw pointer)的一些问题</p>
<p>1.c++提供了内存管理的绝对自由度</p>
<ul>
<li><p>分配</p>
</li>
<li><p>释放</p>
</li>
<li><p>声明周期管理</p>
</li>
</ul>
<p>2.一些潜在严重问题</p>
<ul>
<li><p>未初始化的指针(wild pointer)</p>
</li>
<li><p>内存泄漏(memory leak)</p>
</li>
<li><p>悬空指针(dangling pointer</p>
</li>
</ul>
<p>3.所有权(ownership)</p>
<ul>
<li>谁拥有指针?</li>
<li>何时可以删除指针?</li>
</ul>
<p>C++智能指针是一种用来管理动态分配的内存的工具，它们遵循RAII（资源获取即初始化）原则，可以自动释放内存，防止内存泄漏。</p>
<p>以下是几种常见的C++智能指针：</p>
<ol>
<li><code>unique_ptr</code>: <code>unique_ptr</code> 是一种独占所有权的智能指针，它指向堆上分配的对象，并负责在其生命周期结束时自动删除对象。每个 <code>unique_ptr</code> 只能拥有一个对象，并且不能进行拷贝，但可以进行移动。</li>
<li><code>shared_ptr</code>: <code>shared_ptr</code> 是一种共享所有权的智能指针，多个 <code>shared_ptr</code> 可以指向同一个对象。它使用引用计数来跟踪对象的所有者数量，并在最后一个所有者释放内存时删除对象。</li>
<li><code>weak_ptr</code>: <code>weak_ptr</code> 是一种弱引用指针，它可以与 <code>shared_ptr</code> 一起使用。<code>weak_ptr</code> 不会增加对象的引用计数，它允许对被 <code>shared_ptr</code> 管理的对象进行观测，但不拥有所有权。当 <code>shared_ptr</code> 删除对象后，<code>weak_ptr</code> 会自动失效。</li>
<li><code>auto_ptr</code>（已弃用）: <code>auto_ptr</code> 是C++98标准引入的智能指针，它类似于 <code>unique_ptr</code>，但具有一些问题和局限性，已被废弃，不推荐使用。</li>
</ol>
<p><code>unique_ptr&lt;T&gt;</code> 是一种独占所有权的智能指针，用于指向堆上的类型为 <code>T</code> 的对象。它保证在其生命周期结束时自动释放所指向的对象，确保资源的正确释放，避免内存泄漏。</p>
<p><code>unique_ptr</code> 的特点如下：</p>
<ul>
<li>它是唯一（unique）的，即一个 <code>unique_ptr</code> 对象拥有对应对象的唯一所有权。不能有多个 <code>unique_ptr</code> 指向同一个对象，这样可以避免多次释放同一块内存的问题。</li>
<li><code>unique_ptr</code> 不能进行复制或赋值，但可以通过移动语义来转移所有权。这意味着可以将所有权从一个 <code>unique_ptr</code> 转移到另一个 <code>unique_ptr</code>，从而实现对象所有权的转移而不进行内存复制。</li>
<li>当 <code>unique_ptr</code> 使用完毕或超出作用域时，它所指向的对象会自动释放和销毁，无需手动调用 <code>delete</code>。</li>
</ul>
<p>&#x3D;&#x3D;目前还没用过，等真正用过的时候再仔细看吧&#x3D;&#x3D;</p>
<h1 id="3-STL标准模板库"><a href="#3-STL标准模板库" class="headerlink" title="3 STL标准模板库"></a>3 STL标准模板库</h1><h2 id="3-1-STL简介"><a href="#3-1-STL简介" class="headerlink" title="3.1 STL简介"></a>3.1 STL简介</h2><p>一个强大的、可复用的、自适应的泛型类和函数集合</p>
<p>使用C++模板(templates)实现</p>
<p>实现了常见的数据结构(data struuctures)和算法(algorithms)</p>
<p>庞大的类库</p>
<p>俄裔美籍程序员:Alexander Step:anov 1994年开发</p>
<p>容器(containers)</p>
<ul>
<li>各种对象或原始类型的集合. array、vector、deque、stack、set、map等</li>
</ul>
<p>算法(algorithms)</p>
<ul>
<li>处理容器元素序列的各种函数find、max、count、accumulate、sort等</li>
</ul>
<p>迭代器(iterators)</p>
<ul>
<li>从容器中生成元素的序列. forward、reveise、by value、by constant等</li>
</ul>
<h2 id="3-2-STL容器的类别"><a href="#3-2-STL容器的类别" class="headerlink" title="3.2 STL容器的类别"></a>3.2 STL容器的类别</h2><p>序列式容器（Sequence Containers）：</p>
<ol>
<li><code>vector</code>：动态数组，支持快速随机访问，尾部插入和删除元素效率高，但在中间或头部插入和删除元素效率低。</li>
<li><code>list</code>：双向链表，支持在任意位置插入和删除元素，但随机访问效率较低。</li>
<li><code>forward_list</code>：单向链表，与 <code>list</code> 类似，但只支持单向遍历，没有双向遍历的能力。</li>
<li><code>deque</code>：双端队列，支持在头部和尾部高效地插入和删除元素，同时支持随机访问。</li>
</ol>
<p>关联式容器（Associative Containers）：</p>
<ol>
<li><code>set</code>：集合，存储唯一的元素，并按升序排序。</li>
<li><code>multi_set</code>：多重集合，可存储重复的元素，并按升序排序。</li>
<li><code>map</code>：映射，存储键值对，按键的升序排序。</li>
<li><code>multi_map</code>：多重映射，可存储重复的键值对，并按键的升序排序。</li>
</ol>
<p>容器适配器（Container Adapters）：</p>
<ol>
<li><code>stack</code>：栈，以 LIFO（后进先出）的方式存储元素，底层基于序列式容器实现，默认使用 <code>deque</code>。</li>
<li><code>queue</code>：队列，以 FIFO（先进先出）的方式存储元素，底层基于序列式容器实现，默认使用 <code>deque</code>。</li>
<li><code>priority_queue</code>：优先队列，按照优先级存储元素，底层基于序列式容器实现，默认使用 <code>vector</code>。</li>
</ol>
<h2 id="3-3-STL迭代器的类别"><a href="#3-3-STL迭代器的类别" class="headerlink" title="3.3 STL迭代器的类别"></a>3.3 STL迭代器的类别</h2><p>迭代器是一种用于遍历容器中元素的抽象概念，它提供了对容器中元素的访问和操作方式。C++中定义了多种类型的迭代器，每种迭代器具有不同的特性和功能。</p>
<ol>
<li>输入迭代器（Input Iterators）：从容器到程序，对数据进行只读访问。它允许逐个元素地读取容器中的数据，并且只能单向移动，不支持对容器进行修改。</li>
<li>输出迭代器（Output Iterators）：从程序到容器，对数据进行只写访问。它允许逐个元素地向容器中写入数据，并且只能单向移动，不支持读取容器中的数据。</li>
<li>前向迭代器（Forward Iterators）：向前推进迭代器，支持对容器进行读写操作。它具有输入迭代器和输出迭代器的所有功能，并且可以在容器中任意位置插入和删除元素，支持双向移动。</li>
<li>双向迭代器（Bidirectional Iterators）：向前、向后推进迭代器，支持对容器进行读写操作。它具有前向迭代器的所有功能，并且可以反向移动，即向前和向后移动。</li>
<li>随机访问迭代器（Random Access Iterators）：直接获取容器元素，支持对容器进行读写操作。它具有双向迭代器的所有功能，并且支持随机访问，可以通过偏移量直接访问容器中的任意元素。</li>
</ol>
<h2 id="3-4-STL算法的类别"><a href="#3-4-STL算法的类别" class="headerlink" title="3.4 STL算法的类别"></a>3.4 STL算法的类别</h2><p>非质变的算法（Non-modifying Algorithms）：</p>
<ol>
<li><code>std::all_of</code>：判断范围内的所有元素是否满足给定条件。</li>
<li><code>std::any_of</code>：判断范围内是否存在满足给定条件的元素。</li>
<li><code>std::none_of</code>：判断范围内是否所有元素都不满足给定条件。</li>
<li><code>std::for_each</code>：对范围内的每个元素执行指定的操作。</li>
<li><code>std::count</code>：计算范围内满足给定值的元素个数。</li>
<li><code>std::count_if</code>：计算范围内满足给定条件的元素个数。</li>
<li><code>std::find</code>：查找范围内第一个等于给定值的元素。</li>
<li><code>std::find_if</code>：查找范围内第一个满足给定条件的元素。</li>
<li><code>std::find_if_not</code>：查找范围内第一个不满足给定条件的元素。</li>
<li><code>std::find_end</code>：在范围内查找最后一次出现子序列的起始位置。</li>
<li><code>std::find_first_of</code>：在范围内查找第一次出现指定元素之一的位置。</li>
<li><code>std::adjacent_find</code>：在范围内查找第一对相邻重复元素的位置。</li>
<li><code>std::search</code>：在范围内查找第一次出现子序列的起始位置。</li>
<li><code>std::search_n</code>：在范围内查找第一次出现连续多个相等元素的起始位置。</li>
<li><code>std::equal</code>：判断两个范围内的元素是否相等。</li>
<li><code>std::mismatch</code>：找到两个范围内第一次不匹配的位置。</li>
<li><code>std::lexicographical_compare</code>：按字典顺序比较两个范围。</li>
<li><code>std::is_permutation</code>：判断两个范围内的元素是否是排列关系。</li>
<li><code>std::min_element</code>：找到范围内的最小元素的位置。</li>
<li><code>std::max_element</code>：找到范围内的最大元素的位置。</li>
<li><code>std::minmax_element</code>：同时找到范围内的最小和最大元素的位置。</li>
<li><code>std::clamp</code>：将给定值限制在指定范围内。</li>
<li><code>std::is_sorted</code>：判断范围内的元素是否按升序排序。</li>
<li><code>std::is_partitioned</code>：判断范围内的元素是否满足分区条件。</li>
<li><code>std::is_heap</code>：判断范围内的元素是否满足堆的条件。</li>
<li><code>std::is_sorted_until</code>：找到范围内的第一个无序位置。</li>
<li><code>std::is_partitioned_until</code>：找到范围内的第一个不满足分区条件的位置。</li>
<li><code>std::is_heap_until</code>：找到范围内的第一个不满足堆条件的位置。</li>
</ol>
<p>质变的算法（Modifying Algorithms）：</p>
<ol>
<li><code>std::copy</code>：复制范围内的元素到另一个容器。</li>
<li><code>std::copy_if</code>：复制满足给定条件的元素到另一个容器。</li>
<li><code>std::copy_n</code>：复制指定数量的元素到另一个容器。</li>
<li><code>std::copy_backward</code>：反向复制范围内的元素到另一个容器。</li>
<li><code>std::move</code>：将范围内的元素移动到另一个容器。</li>
<li><code>std::move_backward</code>：反向移动范围内的元素到另一个容器。</li>
<li><code>std::fill</code>：用给定值填充容器中的元素。</li>
<li><code>std::fill_n</code>：用给定值填充指定数量的元素。</li>
<li><code>std::generate</code>：使用生成器函数生成范围内的元素。</li>
<li><code>std::generate_n</code>：使用生成器函数生成指定数量的元素。</li>
<li><code>std::transform</code>：对范围内的元素应用指定的操作，并将结果存储到另一个容器。</li>
<li><code>std::replace</code>：将范围内的指定值替换为新值。</li>
<li><code>std::replace_if</code>：根据给定条件将范围内的元素替换为新值。</li>
<li><code>std::replace_copy</code>：将范围内的元素复制到另一个容器，并将指定值替换为新值。</li>
<li><code>std::replace_copy_if</code>：将范围内的元素复制到另一个容器，并根据给定条件替换为新值。</li>
<li><code>std::swap</code>：交换两个对象的值。</li>
<li><code>std::swap_ranges</code>：交换两个范围的元素。</li>
<li><code>std::iter_swap</code>：交换两个迭代器所指向的元素。</li>
<li><code>std::reverse</code>：反转范围内的元素顺序。</li>
<li><code>std::reverse_copy</code>：将范围内的元素反转后复制到另一个容器。</li>
<li><code>std::rotate</code>：将范围内的元素循环右移。</li>
<li><code>std::rotate_copy</code>：将范围内的元素循环右移后复制到另一个容器。</li>
<li><code>std::shuffle</code>：随机重排范围内的元素。</li>
<li><code>std::unique</code>：移除范围内的连续重复元素，只保留一个副本。</li>
<li><code>std::unique_copy</code>：将范围内的连续重复元素复制到另一个容器，只保留一个副本。</li>
<li><code>std::partition</code>：根据给定条件将范围内的元素分为满足条件和不满足条件的两部分。</li>
<li><code>std::stable_partition</code>：根据给定条件将范围内的元素稳定地分为满足条件和不满足条件的两部分。</li>
<li><code>std::sort</code>：对范围内的元素进行排序。</li>
<li><code>std::stable_sort</code>：对范围内的元素进行稳定排序。</li>
<li><code>std::partial_sort</code>：部分排序范围内的元素。</li>
<li><code>std::nth_element</code>：将范围内的第 n 小的元素移动到指定位置。</li>
<li><code>std::inplace_merge</code>：将两个已排序的范围合并为一个已排序的范围。</li>
<li><code>std::transform</code>：对范围内的元素应用指定的操作，并将结果存储到另一个容器。</li>
<li><code>std::generate</code>：使用生成器函数生成范围内的元素。</li>
<li><code>std::generate_n</code>：使用生成器函数生成指定数量的元素。</li>
<li><code>std::random_shuffle</code>：随机重排范围内的元素。</li>
<li><code>std::partition</code>：根据给定条件将范围内的元素分为满足条件和不满足条件的两部分。</li>
<li><code>std::sort</code>：对范围内的元素进行排序。</li>
<li><code>std::stable_sort</code>：对范围内的元素进行稳定排序。</li>
<li><code>std::partial_sort</code>：部分排序范围内的元素。</li>
<li><code>std::nth_element</code>：将范围内的第 n 小的元素移动到指定位置。</li>
<li><code>std::inplace_merge</code>：将两个已排序的范围合并为一个已排序的范围。</li>
<li><code>std::copy_backward</code>：反向复制范围内的元素到另一个容器。</li>
</ol>
<h2 id="3-5泛型编程和宏"><a href="#3-5泛型编程和宏" class="headerlink" title="3.5泛型编程和宏"></a>3.5泛型编程和宏</h2><h2 id="3-6函数模板"><a href="#3-6函数模板" class="headerlink" title="3.6函数模板"></a>3.6函数模板</h2><p>函数模板（Function Template）是C++中的一种特殊函数，用于定义通用的函数，可以适用于不同类型的参数。函数模板通过在函数定义中使用类型参数来实现通用性，这些类型参数可以在函数调用时被具体的类型替代。</p>
<p>以下是两个使用函数模板定义的求最大值函数的示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">max</span><span class="params">(T a, T b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">max</span><span class="params">(T a, T b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">max</span>&lt;<span class="type">int</span>&gt;(a, b) &lt;&lt; std::endl;  <span class="comment">// 调用模板函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-7类模板"><a href="#3-7类模板" class="headerlink" title="3.7类模板"></a>3.7类模板</h2><p>类模板（Class Template）是C++中的一种特殊类，用于定义通用的类，可以适用于不同类型的成员变量和成员函数。类模板通过在类定义中使用类型参数来实现通用性，这些类型参数可以在类实例化时被具体的类型替代。</p>
<p>类模板的使用方式类似于函数模板，通过在类定义前面使用 <code>template&lt;typename T&gt;</code> 或 <code>template&lt;class T&gt;</code> 声明一个模板类，其中 <code>T</code> 是一个模板参数，可以在类内部的成员变量和成员函数中使用。</p>
<p>以下是一个使用类模板定义的通用的容器类的示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Container</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T data;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Container</span>(T value) : <span class="built_in">data</span>(value) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Data: &quot;</span> &lt;&lt; data &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>3588 npu</category>
      </categories>
      <tags>
        <tag>3588 npu</tag>
      </tags>
  </entry>
  <entry>
    <title>cmake 基础课</title>
    <url>/2023/09/03/10-6%20cmake-%E5%9F%BA%E7%A1%80%E8%AF%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、准备知识"><a href="#一、准备知识" class="headerlink" title="一、准备知识"></a>一、准备知识</h1><h2 id="1-1-C-的编译过程"><a href="#1-1-C-的编译过程" class="headerlink" title="1.1 C++的编译过程"></a>1.1 C++的编译过程</h2><ul>
<li>-E 仅预处理；不编译、汇编或链接。</li>
<li>-S 仅编译；不汇编或链接。</li>
<li>-c 编译和汇编，但不链接。</li>
<li>-o <file> 将输出放入<file>中。</li>
</ul>
<p><strong>C++源代码的编译过程</strong></p>
<ol>
<li><p><strong>预处理</strong>：在预处理阶段，C++源代码中的预处理指令会被处理，包括宏展开和条件编译等。在此阶段，需要添加所有头文件的引用路径。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将xx.cpp源文件预处理为xx.i文件（文本文件）</span></span><br><span class="line">g++ -E main.cpp -o main.i</span><br><span class="line">```</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>编译</strong>：编译阶段会对预处理后的代码进行语法检查和编译，将代码翻译为汇编语言文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将xx.i文件编译为xx.s的汇编文件（文本文件）</span></span><br><span class="line">g++ -S main.i -o main.s</span><br><span class="line">```</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>汇编</strong>：汇编阶段将汇编语言文件转换为二进制格式的目标文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将xx.s文件汇编为xx.o的二进制目标文件</span></span><br><span class="line">g++ -c main.s -o main.o</span><br><span class="line">```</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>链接</strong>：链接阶段将目标文件与所依赖的库文件进行关联或组装，生成可执行文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将目标文件进行链接，生成可执行程序</span></span><br><span class="line">g++ main.o -o main</span><br><span class="line">```</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="1-2-静态链接库和动态链接库"><a href="#1-2-静态链接库和动态链接库" class="headerlink" title="1.2 静态链接库和动态链接库"></a>1.2 静态链接库和动态链接库</h2><p>静态链接库和动态链接库的区别在于链接的阶段不同。</p>
<p><strong>静态链接库</strong>的名称通常以<code>.a</code>结尾（表示archive library），它在编译阶段进行链接。如果一个工程依赖于静态链接库，那么生成的可执行文件或库会将静态链接库<code>.a</code>打包到输出文件中，因此生成的文件比较大。在运行时，不再需要单独的库文件。</p>
<p><strong>动态链接库</strong>的链接发生在程序的执行过程中，它在编译阶段仅进行链接检查，而不进行真正的链接过程。动态链接库的后缀名通常为<code>.so</code>（表示shared object，在Linux上）或<code>.dylib</code>（在macOS上）。动态链接库在加载后，在内存中只保存一份拷贝。多个程序依赖于它时，不会重复加载和拷贝，节省了内存空间。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/image-20230903175645024.png" alt="image-20230903175645024"></p>
<h2 id="1-3-为什么需要CMake"><a href="#1-3-为什么需要CMake" class="headerlink" title="1.3 为什么需要CMake"></a>1.3 为什么需要CMake</h2><h3 id="1-3-1-g-命令行编译"><a href="#1-3-1-g-命令行编译" class="headerlink" title="1.3.1 g++命令行编译"></a>1.3.1 g++命令行编译</h3><p>当编译hello_world.cpp&#96;文件时，可以使用以下命令进行编译和运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">g++ main.cpp -o main</span><br></pre></td></tr></table></figure>

<p>如果需要引入外部库可以使用以下方法进行编译：</p>
<p>方法一：使用<code>-lgflags</code>参数进行链接**</p>
<p>首先，需要安装<code>gflags</code>库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libgflags-dev libgflags2.2</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">然后，使用以下命令进行编译：</span><br><span class="line"></span><br><span class="line">````bash</span><br><span class="line">g++ main.cpp -lgflags -o main</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<p>方法二：使用<code>pkg-config</code>进行库文件和头文件路径查找**</p>
<p>首先，需要安装<code>pkg-config</code>工具：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install pkg-config</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">然后，使用以下命令进行编译：</span><br><span class="line"></span><br><span class="line">````bash</span><br><span class="line">g++ main.cpp `pkg-config --cflags --libs gflags` -o main</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">这里，`pkg-config --cflags --libs gflags`命令用于查找`gflags`库的头文件和库文件路径。</span><br></pre></td></tr></table></figure>

<p>编译完成后，可以使用以下命令运行可执行文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./main --age 31 --name alice</span><br></pre></td></tr></table></figure>

<p>有时候，在编译时不需要手动添加头文件或链接库路径，因为<code>g++</code>可以在默认的查询路径中找到这些库。然而，当项目文件和引入的外部库变得较多时，使用命令行编译会变得冗长且不便于调试和编辑。通常，在测试单个文件时可以使用命令行编译，但不推荐在实际项目中使用命令行编译方式。</p>
<h3 id="1-3-2-CMake简介"><a href="#1-3-2-CMake简介" class="headerlink" title="1.3.2 CMake简介"></a>1.3.2 CMake简介</h3><p>在实际工作中，推荐使用CMake来构建C++项目。CMake是一个开源的跨平台工具，用于构建、测试和软件打包。</p>
<p>CMake具有以下特性：</p>
<ul>
<li><strong>自动搜索依赖项</strong>：CMake具有自动搜索可能需要的程序、库和头文件的能力，可以简化依赖项的配置过程。</li>
<li><strong>独立的构建目录</strong>：CMake支持使用独立的构建目录（例如<code>build</code>目录），这样可以安全地清理构建产生的中间文件和输出文件，不会污染源代码目录。</li>
<li><strong>自定义命令</strong>：CMake支持定义复杂的自定义命令，例如下载文件、生成各种文件等，可以满足项目构建过程中的特定需求。</li>
<li><strong>自定义配置</strong>：CMake支持根据需求进行自定义配置，可以选择性地启用或禁用特定的组件或功能。</li>
<li><strong>文本文件生成工作区和项目</strong>：CMake使用简单的文本文件（<code>CMakeLists.txt</code>）来描述项目的配置和构建规则，可以根据这些文件自动生成工作区和项目。</li>
<li><strong>文件依赖项自动生成和并行构建</strong>：CMake可以在主流平台上自动生成文件之间的依赖关系，从而使构建过程更高效。同时，CMake支持并行构建，可以加快构建速度。</li>
<li><strong>支持多种IDE</strong>：CMake几乎支持所有主流的集成开发环境（IDE），包括Visual Studio、Xcode、Eclipse等，可以方便地在不同的开发环境中进行项目开发和调试。</li>
</ul>
<h1 id="二、CMake基础知识"><a href="#二、CMake基础知识" class="headerlink" title="二、CMake基础知识"></a>二、CMake基础知识</h1><h2 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h2><p>在Ubuntu上安装CMake可以使用以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install cmake -y</span><br></pre></td></tr></table></figure>

<p>这将使用apt包管理器自动安装CMake。</p>
<p>如果你想编译安装特定版本的CMake，可以按照以下步骤操作：</p>
<p>克隆CMake的源代码库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone -b v3.25.1 https://github.com/Kitware/CMake.git</span><br><span class="line">cd CMake</span><br><span class="line"></span><br><span class="line">这里以安装版本3.25.1为例，你可以将`v3.25.1`替换为你想要安装的特定版本。</span><br></pre></td></tr></table></figure>

<p>配置和编译CMake：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./bootstrap --prefix=&lt;安装路径&gt;</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">你可以使用`--prefix`选项来指定安装路径，或者省略`--prefix`以安装到默认路径。</span><br></pre></td></tr></table></figure>

<p>安装CMake：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line">这将以管理员权限安装CMake到系统中。</span><br></pre></td></tr></table></figure>

<p>安装完成后，你可以验证CMake的安装版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmake --version</span><br></pre></td></tr></table></figure>

<p>该命令将显示CMake的版本信息，确认安装成功与否。</p>
<h2 id="2-2-第一个CMake例子"><a href="#2-2-第一个CMake例子" class="headerlink" title="2.2 第一个CMake例子"></a>2.2 第一个CMake例子</h2><p><strong>配置：</strong> 使用<code>cmake</code>命令进行配置，其中<code>-S</code>选项指定源码目录，<code>-B</code>选项指定构建目录。在终端中执行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake -S . -B build</span><br><span class="line"></span><br><span class="line">这将在当前目录下执行CMake配置，并将生成的构建系统文件放在名为`build`的目录中。</span><br></pre></td></tr></table></figure>

<p><strong>生成：</strong> 使用<code>cmake --build</code>命令进行生成，其中<code>--build</code>选项指定构建目录。在终端中执行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake --build build</span><br><span class="line"></span><br><span class="line">这将在`build`目录中执行构建步骤，生成可执行文件。</span><br></pre></td></tr></table></figure>

<p><strong>运行：</strong> 使用以下命令运行生成的可执行文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./build/first_cmake</span><br><span class="line"></span><br><span class="line">这将执行生成的可执行文件。</span><br></pre></td></tr></table></figure>

<h2 id="2-3-语法基础"><a href="#2-3-语法基础" class="headerlink" title="2.3 语法基础"></a>2.3 语法基础</h2><h3 id="2-3-1-指定版本"><a href="#2-3-1-指定版本" class="headerlink" title="2.3.1 指定版本"></a>2.3.1 指定版本</h3><p>在CMake中，可以使用<code>cmake_minimum_required</code>命令指定当前项目所需的最低CMake版本。它的语法如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION &lt;version_number&gt;)</span><br></pre></td></tr></table></figure>

<p>其中，<code>&lt;version_number&gt;</code>是所需的最低CMake版本号。在这个命令之后，CMake将会检查系统中安装的CMake版本是否满足这个要求，如果不满足则会产生错误。</p>
<p>例如，如果要指定最低的CMake版本为3.10，可以在CMakeLists.txt文件中添加以下命令：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br></pre></td></tr></table></figure>

<p>这样，CMake将会检查系统中的CMake版本是否大于等于3.10。</p>
<p>除了<code>cmake_minimum_required</code>命令，CMake中还有其他类似的命令，它们不区分大小写，并且有许多关键字来引导命令的参数输入，类似于函数的参数传递。这些命令使用的关键字在CMake中是不区分大小写的。</p>
<h3 id="2-3-2-设置项目"><a href="#2-3-2-设置项目" class="headerlink" title="2.3.2 设置项目"></a>2.3.2 设置项目</h3><p>在CMakeLists.txt文件的开头，通常会使用<code>project</code>命令来指定项目的名称、版本、描述和所使用的语言。<code>project</code>命令的语法如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">project</span>(ProjectName</span><br><span class="line">    [VERSION &lt;version_number&gt;]</span><br><span class="line">    [DESCRIPTION <span class="string">&quot;project_description&quot;</span>]</span><br><span class="line">    [LANGUAGES &lt;language&gt;]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>其中，<code>ProjectName</code>是项目的名称，在例子中使用的是”first_cmake”。<code>VERSION</code>关键字后面是项目的版本号，可以是任意格式的版本号，例如”1.0.0”。<code>DESCRIPTION</code>关键字后面是项目的描述，可以是一个字符串。<code>LANGUAGES</code>关键字后面是项目所使用的语言，这里使用的是”Cxx”，表示C++。</p>
<p>示例中的<code>project</code>命令：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">project</span>(first_cmake</span><br><span class="line">    VERSION <span class="number">1.0</span>.<span class="number">0</span></span><br><span class="line">    DESCRIPTION <span class="string">&quot;项目描述&quot;</span></span><br><span class="line">    LANGUAGES Cxx</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>这样，通过<code>project</code>命令，可以在CMakeLists.txt中指定项目的基本信息，方便管理和描述项目。</p>
<h3 id="2-3-3-添加可执行文件目标"><a href="#2-3-3-添加可执行文件目标" class="headerlink" title="2.3.3 添加可执行文件目标"></a>2.3.3 添加可执行文件目标</h3><p>使用了<code>add_executable</code>命令来定义一个可执行文件。该命令的语法如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_executable</span>(&lt;target_name&gt; &lt;source_files&gt;)</span><br></pre></td></tr></table></figure>

<p>其中，<code>&lt;target_name&gt;</code>是最终生成的可执行文件名，也是在CMake中定义的目标（Target）名。<code>&lt;source_files&gt;</code>是编译目标所使用的源文件。</p>
<p>在你提供的例子中，使用了<code>add_executable</code>命令来定义一个名为<code>first_cmake</code>的目标，并指定了一个源文件<code>main.cpp</code>。这意味着在编译时，会将<code>main.cpp</code>编译为一个可执行文件，该文件的名称将是<code>first_cmake</code>。</p>
<p>示例中的<code>add_executable</code>命令：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_executable</span>(first_cmake main.cpp)</span><br></pre></td></tr></table></figure>

<p>通过<code>add_executable</code>命令，可以在CMakeLists.txt中定义编译目标，并指定相应的源文件。这样，CMake将会根据这些定义生成相应的构建规则和编译指令。</p>
<h3 id="2-3-4-生成静态库并链接"><a href="#2-3-4-生成静态库并链接" class="headerlink" title="2.3.4 生成静态库并链接"></a>2.3.4 生成静态库并链接</h3><p>A. 生成静态库：</p>
<p>在<code>account_dir/CMakeLists.txt</code>中，使用<code>add_library</code>命令来生成静态库。该命令的语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add_library(&lt;library_name&gt; &lt;library_type&gt; &lt;source_files&gt;)</span><br></pre></td></tr></table></figure>

<p>其中，<code>&lt;library_name&gt;</code>是最终生成的库文件名，例如在Linux下会生成<code>libAccount.a</code>。</p>
<p><code>&lt;library_type&gt;</code>用于指定链接库的类型，可以是动态链接库（<code>SHARED</code>）或静态链接库（<code>STATIC</code>）。</p>
<p><code>&lt;source_files&gt;</code>是需要用到的源文件。</p>
<p>例如，在<code>account_dir/CMakeLists.txt</code>中，使用<code>add_library</code>命令生成一个名为<code>Account</code>的静态库，其包含了<code>Account.cpp</code>和<code>Account.h</code>两个源文件。示例命令如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_library</span>(Account STATIC Account.cpp Account.h)</span><br></pre></td></tr></table></figure>

<p>这将生成一个静态库文件<code>libAccount.a</code>。</p>
<p>B. 链接：</p>
<p>在<code>test_account/CMakeLists.txt</code>中，可以通过<code>target_link_libraries</code>命令将生成的静态库链接到目标可执行文件中。该命令的语法如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">target_link_libraries</span>(&lt;target_name&gt; &lt;library_name&gt;)</span><br></pre></td></tr></table></figure>

<p>其中，<code>&lt;target_name&gt;</code>是目标可执行文件的名称，<code>&lt;library_name&gt;</code>是要链接的库文件名。</p>
<p>例如，在<code>test_account/CMakeLists.txt</code>中，假设有一个目标可执行文件名为<code>test_account</code>，需要链接生成的静态库<code>Account</code>。示例命令如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">target_link_libraries</span>(test_account Account)</span><br></pre></td></tr></table></figure>

<p>这样，生成的可执行文件<code>test_account</code>将会链接静态库<code>Account</code>。</p>
<h3 id="2-3-5-生成动态库并连接"><a href="#2-3-5-生成动态库并连接" class="headerlink" title="2.3.5 生成动态库并连接"></a>2.3.5 生成动态库并连接</h3><p>A. 生成动态库：</p>
<p>在<code>account_dir/CMakeLists.txt</code>中，使用<code>add_library</code>命令来生成动态库。与生成静态库不同的是，需要将<code>&lt;library_type&gt;</code>参数设置为<code>SHARED</code>，表示生成动态链接库。</p>
<p>示例命令如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_library</span>(Account SHARED Account.cpp Account.h)</span><br></pre></td></tr></table></figure>

<p>这将生成一个动态库文件<code>libAccount.so</code>。</p>
<p>B. 链接：</p>
<p>链接过程与生成静态库时的操作相同，使用<code>target_link_libraries</code>命令将动态库链接到目标可执行文件中。</p>
<p>示例命令如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">target_link_libraries</span>(test_account Account)</span><br></pre></td></tr></table></figure>

<p>这样，生成的可执行文件<code>test_account</code>将会链接动态库<code>Account</code>。</p>
<h3 id="2-3-6-CMake中的PUBLIC、PRIVATE、INTERFACE"><a href="#2-3-6-CMake中的PUBLIC、PRIVATE、INTERFACE" class="headerlink" title="2.3.6 CMake中的PUBLIC、PRIVATE、INTERFACE"></a>2.3.6 CMake中的PUBLIC、PRIVATE、INTERFACE</h3><p>在CMake中，可以使用<code>target_...()</code>系列命令来操作目标（Target）。这些命令通常支持通过<code>PUBLIC</code>、<code>PRIVATE</code>、<code>INTERFACE</code>关键字来控制属性的传播。</p>
<p>以<code>target_link_libraries(A B)</code>为例，下面是对这些关键字的理解：</p>
<ul>
<li><code>PRIVATE</code>：依赖项B仅链接到目标A。如果有目标C链接了目标A，目标C不会链接目标B。</li>
<li><code>INTERFACE</code>：依赖项B并不链接到目标A。如果有目标C链接了目标A，目标C会链接目标B。</li>
<li><code>PUBLIC</code>：依赖项B链接到目标A。如果有目标C链接了目标A，目标C也会链接目标B。</li>
</ul>
<p>可以将其类比为一个散烟的比方：</p>
<ul>
<li><code>PRIVATE</code>：就是自己抽烟，不给别人抽。</li>
<li><code>INTERFACE</code>：就是自己不抽烟，给别人抽。</li>
<li><code>PUBLIC</code>：就是自己抽烟，也给别人抽。</li>
</ul>
<p>从使用的角度来看，假设有目标C链接了目标A：</p>
<ul>
<li>如果目标B仅用于目标A的实现，并且不在头文件中提供给目标C使用，可以使用<code>PRIVATE</code>。</li>
<li>如果目标B不用于目标A的实现，仅在头文件中作为接口给目标C使用，可以使用<code>INTERFACE</code>。</li>
<li>如果目标B既用于目标A的实现，也在头文件中提供给目标C使用，可以使用<code>PUBLIC</code>。</li>
</ul>
<p>以下是一个示例：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建库</span></span><br><span class="line"><span class="keyword">add_library</span>(c c.cpp)</span><br><span class="line"><span class="keyword">add_library</span>(D d.cpp)</span><br><span class="line"><span class="keyword">add_library</span>(B b.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用target_link_libraries命令进行链接</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(A PRIVATE B)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(A INTERFACE C)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(A PUBLIC D)</span><br></pre></td></tr></table></figure>

<p>在上述示例中，目标<code>A</code>通过<code>target_link_libraries</code>命令链接了目标<code>B</code>、<code>C</code>和<code>D</code>，使用了不同的传播属性。具体属性的选择取决于目标之间的关系和使用需求。</p>
<h3 id="2-3-7-变量"><a href="#2-3-7-变量" class="headerlink" title="2.3.7 变量"></a>2.3.7 变量</h3><p>在CMake中，你可以使用<code>message</code>命令输出消息并进行变量的操作和设置。</p>
<p>以下是一些常见的用法：</p>
<p>1.输出消息：使用<code>message</code>命令可以输出消息到CMake的输出。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message</span>(<span class="string">&quot;输出消息&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>2.消息拼接：使用<code>message</code>命令可以将多个消息进行拼接输出。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message</span>(<span class="string">&quot;输出1&quot;</span> <span class="string">&quot;输出2&quot;</span> <span class="string">&quot;输出3&quot;</span>)  <span class="comment"># 会进行拼接输出</span></span><br></pre></td></tr></table></figure>

<p>3.设置变量：使用<code>set</code>命令可以设置变量的值。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(VAR1 <span class="string">&quot;变量1&quot;</span>)</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;VAR1=&quot;</span> <span class="variable">$&#123;VAR1&#125;</span>)  <span class="comment"># 外部访问</span></span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;输出变量VAR1:$&#123;VAR1&#125;&quot;</span>)  <span class="comment"># 内部拼接</span></span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;\$&#123;VAR1&#125;=$&#123;VAR1&#125;&quot;</span>)  <span class="comment"># 使用\转义</span></span><br></pre></td></tr></table></figure>

<p>4.删除变量：使用<code>unset</code>命令可以删除变量。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unset</span>(VAR1)  <span class="comment"># 删除变量</span></span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;\$&#123;VAR1&#125;=$&#123;VAR1&#125;&quot;</span>)  <span class="comment"># 删除变量后，输出为空</span></span><br></pre></td></tr></table></figure>

<p>5.设置变量缓存：使用<code>set</code>命令的<code>CACHE</code>选项可以设置一个变量的缓存，可以通过命令行的<code>-D</code>参数来修改该变量的值。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(CACHE_VARIABLE_TEST <span class="string">&quot;原始值&quot;</span> CACHE <span class="keyword">STRING</span> <span class="string">&quot;变量缓存的描述&quot;</span>)</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;变量缓存的值:$&#123;CACHE_VARIABLE_TEST&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>6.常见的内置变量：CMake提供了一些内置的变量，用于获取构建系统的信息和配置</p>
<p>第一类: 提供信息的变量</p>
<ul>
<li><code>PROJECT_NAME</code>：项目名称，表示当前CMake项目的名称。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message</span>(<span class="string">&quot;$&#123;PROJECT_NAME&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>CMAKE_SOURCE_DIR</code>：源码目录，表示当前CMake项目的根源码目录。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message</span>(<span class="string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>CMAKE_BINARY_DIR</code>：编译目录，表示当前CMake项目的编译输出目录。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message</span>(<span class="string">&quot;$&#123;CMAKE_BINARY_DIR&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>CMAKE_CURRENT_LIST_FILE</code>：当前CMakeLists.txt文件路径，表示当前正在处理的CMakeLists.txt文件的完整路径。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message</span>(<span class="string">&quot;$&#123;CMAKE_CURRENT_LIST_FILE&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>这些变量提供了与项目、目录结构和文件相关的信息。</p>
<hr>
<p>第二类: 控制CMake运行的变量</p>
<p>CMake中的变量通常是根据构建选项进行命名的，例如<code>BUILD_SHARED_LIBS</code>。这些变量用于控制CMake的运行和构建过程。</p>
<hr>
<p>第三类: 描述系统的变量</p>
<ul>
<li><code>WIN32</code>：表示当前操作系统是否为Windows。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message</span>(<span class="string">&quot;是否是Windows系统: $&#123;WIN32&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>UNIX</code>：表示当前操作系统是否为类Unix（包括Linux、macOS等）。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message</span>(<span class="string">&quot;是否是Unix系统: $&#123;UNIX&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>CMAKE_SYSTEM_NAME</code>：系统名称，表示当前操作系统的名称。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message</span>(<span class="string">&quot;系统名称: $&#123;CMAKE_SYSTEM_NAME&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>这些变量用于描述当前操作系统的一些信息，以便在构建过程中进行条件判断和配置。</p>
<h3 id="2-3-8-include引入其他代码"><a href="#2-3-8-include引入其他代码" class="headerlink" title="2.3.8 include引入其他代码"></a>2.3.8 include引入其他代码</h3><h3 id="2-3-9-条件控制"><a href="#2-3-9-条件控制" class="headerlink" title="2.3.9 条件控制"></a>2.3.9 条件控制</h3><p>CMake提供了条件控制的语法和关键词，使得你可以根据条件来控制构建过程中的行为。以下是一些常用的条件控制关键词和语法：</p>
<ul>
<li><code>if (variable)</code>：当变量的值为真时，执行相应的代码块。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (MY_VARIABLE)</span><br><span class="line">    <span class="comment"># 当MY_VARIABLE为真时执行的代码块</span></span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li><code>else()</code>：在if条件为假时执行的代码块。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (MY_VARIABLE)</span><br><span class="line">    <span class="comment"># 当MY_VARIABLE为真时执行的代码块</span></span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">    <span class="comment"># 当MY_VARIABLE为假时执行的代码块</span></span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li>真值常量：<code>ON</code>、<code>YES</code>、<code>TRUE</code>、<code>Y</code>、<code>1</code>、非零数字等。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (MY_VARIABLE <span class="keyword">STREQUAL</span> <span class="string">&quot;ON&quot;</span>)</span><br><span class="line">    <span class="comment"># 当MY_VARIABLE的值为真时执行的代码块</span></span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li>假值常量：<code>OFF</code>、<code>NO</code>、<code>FALSE</code>、<code>N</code>、<code>0</code>、空字符串、<code>NOTFOUND</code>等。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (MY_VARIABLE <span class="keyword">STREQUAL</span> <span class="string">&quot;OFF&quot;</span>)</span><br><span class="line">    <span class="comment"># 当MY_VARIABLE的值为假时执行的代码块</span></span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li>关键词：<code>NOT</code>、<code>TARGET</code>、<code>EXISTS (file)</code>、<code>DEFINED</code>等，可以与条件一起使用。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">NOT</span> <span class="keyword">TARGET</span> MyTarget)</span><br><span class="line">    <span class="comment"># 当MyTarget不存在时执行的代码块</span></span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li>逻辑运算符：<code>AND</code>、<code>OR</code>用于组合多个条件。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (CONDITION1 <span class="keyword">AND</span> CONDITION2)</span><br><span class="line">    <span class="comment"># 当CONDITION1和CONDITION2同时为真时执行的代码块</span></span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (CONDITION1 <span class="keyword">OR</span> CONDITION2)</span><br><span class="line">    <span class="comment"># 当CONDITION1或CONDITION2至少一个为真时执行的代码块</span></span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li><code>MATCHES (regular expression)</code>：使用正则表达式进行匹配。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (MY_VARIABLE <span class="keyword">MATCHES</span> <span class="string">&quot;^prefix.*&quot;</span>)</span><br><span class="line">    <span class="comment"># 当MY_VARIABLE以&quot;prefix&quot;开头时执行的代码块</span></span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li><code>VERSION LESS</code>、<code>VERSION LESS_EQUAL</code>：用于比较版本号。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (MY_VERSION VERSION <span class="keyword">LESS</span> <span class="number">2.0</span>)</span><br><span class="line">    <span class="comment"># 当MY_VERSION小于2.0时执行的代码块</span></span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>

<p>通过这些条件控制关键词和语法，你可以根据不同的条件来执行不同的代码块，从而实现更灵活和可配置的构建过程。你可以根据具体的需求选择适当的条件控制方式，并结合变量、关键词和运算符来编写CMake脚本。</p>
<h3 id="2-3-10-CMake分步编译"><a href="#2-3-10-CMake分步编译" class="headerlink" title="2.3.10 CMake分步编译"></a>2.3.10 CMake分步编译</h3><p>首先，你使用以下命令查看所有的目标：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmake --build . --target help</span><br></pre></td></tr></table></figure>

<p>这将列出项目中可用的目标列表，包括默认目标”all”、”clean”、”depend”、”rebuild_cache”、”edit_cache”以及其他一些目标。</p>
<p>接下来，你执行以下命令进行预处理：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmake --build . --target main.i</span><br></pre></td></tr></table></figure>

<p>这将对”main.cpp”源文件进行预处理，并将预处理结果保存在”CMakeFiles&#x2F;steps_demo.dir&#x2F;main.cpp.i”文件中。</p>
<p>然后，你执行以下命令进行编译：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmake --build . --target main.sI</span><br></pre></td></tr></table></figure>

<p>这将将”main.cpp”源文件编译为汇编代码，并将汇编代码保存在”CMakeFiles&#x2F;steps_demo.dir&#x2F;main.cpp.s”文件中。</p>
<p>接着，你执行以下命令进行汇编：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmake --build . --target main.o</span><br></pre></td></tr></table></figure>

<p>这将将汇编代码编译为目标文件，并将目标文件保存为”CMakeFiles&#x2F;steps_demo.dir&#x2F;main.cpp.o”。</p>
<p>最后，你执行以下命令进行链接：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmake --build .</span><br></pre></td></tr></table></figure>

<p>这将扫描依赖项并链接生成最终的可执行文件”steps_demo”。</p>
<p>最后，你执行以下命令运行可执行文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./steps_demo</span><br></pre></td></tr></table></figure>

<p>这将运行生成的可执行文件。</p>
<h3 id="2-3-11-生成器表达式"><a href="#2-3-11-生成器表达式" class="headerlink" title="2.3.11 生成器表达式"></a>2.3.11 生成器表达式</h3><p>生成器表达式是CMake中一种用于在生成构建系统时根据不同配置动态生成特定内容的表达式。它可以让代码更加精简和灵活。下面是几种常用的生成器表达式类型：</p>
<p>条件表达式：<code>$&lt;condition:true_string&gt;</code>。当条件为真时，返回<code>true_string</code>，否则返回空字符串。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$&lt;<span class="number">0</span>:<span class="keyword">TEST</span>&gt;           <span class="comment"># 返回空字符串</span></span><br><span class="line">$&lt;<span class="number">1</span>:<span class="keyword">TEST</span>&gt;           <span class="comment"># 返回&quot;TEST&quot;</span></span><br><span class="line">$&lt;$&lt;BOOL:<span class="keyword">TRUE</span>&gt;:<span class="keyword">TEST</span>&gt;  <span class="comment"># 返回&quot;TEST&quot;</span></span><br></pre></td></tr></table></figure>

<p>变量查询（Variable-Query）：通过查询变量来获取动态的值。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$&lt;TARGET_EXISTS:<span class="keyword">target</span>&gt;             <span class="comment"># 判断目标是否存在</span></span><br><span class="line">$&lt;CONFIG:Debug&gt;                     <span class="comment"># 判断当前构建类型是否为Debug</span></span><br></pre></td></tr></table></figure>

<p>目标查询（Target-Query）：通过查询目标来获取相关的信息。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$&lt;TARGET_FILE:<span class="keyword">target</span>&gt;               <span class="comment"># 获取目标的文件路径</span></span><br><span class="line">$&lt;TARGET_FILE_NAME:<span class="keyword">target</span>&gt;          <span class="comment"># 获取目标的文件名</span></span><br></pre></td></tr></table></figure>

<p>输出相关表达式：用于在不同的构建环节使用不同的参数。比如，在<code>install</code>和<code>build</code>阶段使用不同的参数。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_library</span>(Foo ...)</span><br><span class="line"><span class="keyword">target_include_directories</span>(Foo</span><br><span class="line">    PUBLIC</span><br><span class="line">        $&lt;$&lt;CONFIG:Debug&gt;:<span class="variable">$&#123;DEBUG_INCLUDES&#125;</span>&gt;</span><br><span class="line">        $&lt;$&lt;CONFIG:Release&gt;:<span class="variable">$&#123;RELEASE_INCLUDES&#125;</span>&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>在上述示例中，根据不同的构建配置（Debug或Release），生成器表达式选择性地包含不同的头文件路径。</p>
<p>需要注意的是，生成器表达式在生成构建系统时被展开，因此无法通过<code>message</code>命令直接打印。你可以使用类似<code>file(GENERATE OUTPUT &quot;./generator_test.txt&quot; CONTENT &quot;$&lt;$&lt;BOOL:TRUE&gt;:TEST&gt;&quot;)</code>的方式将生成器表达式的结果写入文件，以间接测试生成器表达式的值。</p>
<h3 id="2-3-12-函数和宏"><a href="#2-3-12-函数和宏" class="headerlink" title="2.3.12 函数和宏"></a>2.3.12 函数和宏</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个宏</span></span><br><span class="line"><span class="keyword">macro</span>(my_macro)</span><br><span class="line">    <span class="keyword">message</span>(<span class="string">&quot;宏内部的信息&quot;</span>)</span><br><span class="line">    <span class="keyword">set</span>(macro_var <span class="string">&quot;宏内部变量test&quot;</span>)</span><br><span class="line"><span class="keyword">endmacro</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数</span></span><br><span class="line"><span class="keyword">function</span>(second_func arg1 arg2)</span><br><span class="line">    <span class="keyword">message</span>(<span class="string">&quot;第一个参数: $&#123;arg1&#125;，第二个参数: $&#123;arg2&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">endfunction</span>()</span><br></pre></td></tr></table></figure>

<p>在这个示例中，<code>my_macro</code>是一个没有参数的宏，它在宏内部输出一条信息，并设置了一个变量<code>macro_var</code>的值。</p>
<p><code>second_func</code>是一个函数，它有两个参数<code>arg1</code>和<code>arg2</code>。在函数内部，它输出了两个参数的值。</p>
<p>你可以在CMakeLists.txt文件中使用这些宏和函数，例如：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 调用宏</span></span><br><span class="line">my_macro()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">second_func(<span class="string">&quot;Hello&quot;</span> <span class="string">&quot;World&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>当你运行CMake生成构建系统时，你将看到宏内部的信息输出，并且可以访问在宏或函数内部定义的变量。函数将输出参数的值。</p>
<p>请注意，宏和函数的定义需要在CMakeLists.txt文件的适当位置进行，并且在调用它们之前必须先定义它们。</p>
<h3 id="2-3-13-设置安装"><a href="#2-3-13-设置安装" class="headerlink" title="2.3.13 设置安装"></a>2.3.13 设置安装</h3><p><code>install</code>命令用于设置安装规则，将目标文件和文件夹安装到指定的位置。下面是你提供的代码的解释：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">install</span>(TARGETS instal_demo slib dlib</span><br><span class="line">    RUNTIME DESTINATION bin     <span class="comment"># 可执行文件安装路径</span></span><br><span class="line">    LIBRARY DESTINATION lib     <span class="comment"># 动态库安装路径</span></span><br><span class="line">    ARCHIVE DESTINATION lib     <span class="comment"># 静态库安装路径</span></span><br><span class="line">    PUBLIC_HEADER DESTINATION <span class="keyword">include</span>   <span class="comment"># 公共头文件安装路径</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>在上述代码中，<code>install</code>命令指定了要安装的目标文件列表，其中包括<code>instal_demo</code>、<code>slib</code>和<code>dlib</code>。</p>
<p>接下来，通过指定不同的<code>DESTINATION</code>参数，定义了目标文件在安装过程中的安装路径：</p>
<ul>
<li><code>RUNTIME DESTINATION bin</code>：指定可执行文件的安装路径为<code>bin</code>目录。</li>
<li><code>LIBRARY DESTINATION lib</code>：指定动态库的安装路径为<code>lib</code>目录。</li>
<li><code>ARCHIVE DESTINATION lib</code>：指定静态库的安装路径为<code>lib</code>目录。</li>
<li><code>PUBLIC_HEADER DESTINATION include</code>：指定公共头文件的安装路径为<code>include</code>目录。</li>
</ul>
<p>根据你的需求，这些目标文件将被安装到指定的目录中。</p>
<p>请注意，安装路径是相对于安装目录的，因此你需要确保安装目录在运行<code>make install</code>时正确设置。</p>
<p>要解决在安装后无法找到动态库的问题，可以使用<code>set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)</code>和<code>set(CMAKE_INSTALL_RPATH &quot;$&#123;CMAKE_INSTALL_PREFIX&#125;/lib&quot;)</code>来设置RPATH。</p>
<p>下面是相应的代码：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKE_BUILD_WITH_INSTALL_RPATH <span class="keyword">TRUE</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_INSTALL_RPATH <span class="string">&quot;$&#123;CMAKE_INSTALL_PREFIX&#125;/lib&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><code>set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)</code>指示在构建过程中使用与安装RPATH相同的RPATH。这样，在构建时就可以正确地查找和链接动态库。</p>
<p><code>set(CMAKE_INSTALL_RPATH &quot;$&#123;CMAKE_INSTALL_PREFIX&#125;/lib&quot;)</code>将安装RPATH设置为<code>$&#123;CMAKE_INSTALL_PREFIX&#125;/lib</code>，其中<code>$&#123;CMAKE_INSTALL_PREFIX&#125;</code>是安装目录的路径。这将导致在安装时设置RPATH，使得安装后的可执行文件可以在<code>$&#123;CMAKE_INSTALL_PREFIX&#125;/lib</code>目录中正确地查找和加载动态库。</p>
<p>通过使用这两个设置，你可以解决在安装后无法找到动态库的问题。确保将其放置在CMakeLists.txt文件中的合适位置，并根据实际情况调整<code>$&#123;CMAKE_INSTALL_PREFIX&#125;/lib</code>路径，以匹配你的安装目录结构。</p>
<h3 id="2-3-14-寻找依赖find-package"><a href="#2-3-14-寻找依赖find-package" class="headerlink" title="2.3.14 寻找依赖find_package"></a>2.3.14 寻找依赖find_package</h3><p>对于大多数支持CMake的项目来说，可以使用<code>find_package</code>命令来查找对应的依赖库。通常情况下，如果找到了库，会设置以下变量（这些变量由库的作者设置）：</p>
<ul>
<li><code>&lt;LibaryName&gt;_FOUND</code>：表示是否找到库。</li>
<li><code>&lt;LibaryName&gt;_INCLUDE_DIR</code>：表示库的头文件目录。</li>
<li><code>&lt;LibaryName&gt;_LIBRARIES</code>：表示库的库文件目录。</li>
</ul>
<p>如果你编写了一个新的函数库，并希望其他项目可以通过<code>find_package</code>引用它，你可以使用以下两种方法：</p>
<ol>
<li><p>编写一个<code>Find&lt;LibraryName&gt;.cmake</code>文件：适用于导入非CMake安装的项目。</p>
<p>你可以编写一个名为<code>Find&lt;LibraryName&gt;.cmake</code>的文件，并将其放置在CMake的<code>Modules</code>目录或项目的特定目录中。该文件应包含查找和设置相关变量的逻辑。其他项目可以通过<code>find_package</code>命令来引用这个自定义的查找文件，从而找到并使用你的库。</p>
<p>附件: 15.custom_find</p>
</li>
<li><p>使用<code>install</code>安装并生成<code>&lt;LibraryName&gt;Config.cmake</code>文件：适用于导入你自己开发的CMake项目。</p>
<p>在你的库项目中，可以使用<code>install</code>命令将库文件安装到指定位置，并生成<code>&lt;LibraryName&gt;Config.cmake</code>文件。该文件应包含设置变量和导出目标的逻辑。其他项目可以通过<code>find_package</code>命令找到并使用你的库。</p>
</li>
</ol>
<p>&#x3D;&#x3D;现在只是简单的写了一下学习的内容，但是对于很多内容还并不是很熟悉，一切都要等到最后实战的时候&#x3D;&#x3D;</p>
]]></content>
      <categories>
        <category>3588 npu</category>
      </categories>
      <tags>
        <tag>3588 npu</tag>
      </tags>
  </entry>
  <entry>
    <title>0-0-4 clash for windows 使用</title>
    <url>/2023/09/16/0-0-4-clash-for-windows-%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-1-主页"><a href="#1-1-主页" class="headerlink" title="1.1 主页"></a>1.1 主页</h1><p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309160742737.png" alt="image-20230916074226708"></p>
<ul>
<li>端口：Clash for Windows使用的本地端口号是7890，用于与代理服务器通信。</li>
<li>允许局域网：Clash for Windows允许其他设备在局域网内通过本机访问代理。</li>
<li>绑定地址：Clash for Windows绑定的本地地址为通配符（*），表示可以使用任何可用的本地IP地址。</li>
<li>日志级别：Clash for Windows的日志级别设置为信息级别，这意味着它会记录一般的操作和事件信息。</li>
<li>Clash 内核版本：Clash for Windows使用的Clash内核版本是2022.07.07 Premium（50317）。</li>
<li>主目录：点击此选项可以打开Clash for Windows的主目录文件夹，其中包含配置文件和其他相关文件。</li>
<li>UWP应用联网限制解除工具：这是一个工具，用于解除UWP（Universal Windows Platform）应用程序的联网限制。</li>
<li>启动助手：此选项可能是指Clash for Windows的启动助手功能，可帮助配置和管理启动项。</li>
<li>虚拟网卡安装（TAP模式）：Clash for Windows使用TAP模式安装虚拟网卡以实现代理功能。</li>
<li>管理服务模式：Clash for Windows可以在服务模式下运行，以作为后台服务一直运行。</li>
<li>管理TUN模式：Clash for Windows可以以TUN模式运行，这是一种用于网络隧道的模式。</li>
<li>混合配置自系统代理：Clash for Windows可以与系统代理进行混合配置，以实现更灵活的网络代理设置。</li>
<li>开机自启动：Clash for Windows可以在系统启动时自动启动。</li>
</ul>
<p>要想windows的应用能正常翻墙上网，例如在命令行上传到github，必须开TUN模式，</p>
<h1 id="1-2-代理"><a href="#1-2-代理" class="headerlink" title="1.2 代理"></a>1.2 代理</h1><ul>
<li>全局：这是Clash for Windows的代理模式之一，表示所有的网络流量都通过代理服务器。</li>
<li>规则：这是Clash for Windows的规则模式，代理服务器的使用会根据事先定义的规则进行选择，可以实现更灵活的代理策略。</li>
<li>直连：这是Clash for Windows的代理模式之一，表示所有的网络流量都直接连接到目标服务器，不经过代理。</li>
<li>脚本：这是Clash for Windows中的脚本设置选项，允许您编写自定义脚本来进行代理行为控制或其他自定义操作。</li>
</ul>
<h1 id="1-3-ubuntu-端"><a href="#1-3-ubuntu-端" class="headerlink" title="1.3 ubuntu 端"></a>1.3 ubuntu 端</h1><p>需要注意的是uubntu在软件中设置完成之后并不会直接能用，而是需要修改系统设置里的网络代理</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309160756775.png" alt="image-20230916075614751"></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309160756948.png" alt="image-20230916075625926"></p>
<p>然后要打开混合模式，到这里就可以了。</p>
]]></content>
      <categories>
        <category>翻墙</category>
      </categories>
      <tags>
        <tag>翻墙</tag>
      </tags>
  </entry>
  <entry>
    <title>typora简单使用</title>
    <url>/2023/09/01/0-0-5%20%E4%BB%80%E4%B9%88%E6%98%AFmarkdown/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>MarkDown是什么<br>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p>
<p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p>
<p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p>
<p>Markdown 编写的文档后缀为 .md, .markdown。</p>
<h1 id="1-如何自动生成目录"><a href="#1-如何自动生成目录" class="headerlink" title="1.如何自动生成目录"></a>1.如何自动生成目录</h1><p>点击【视图】——【大纲】</p>
<p>说明：但是此步骤生成的目录，并不是折叠的目录，折叠起来会更美观一些</p>
<p>设置折叠目录</p>
<p>点击【文件】——【偏好设置】——【外观】——侧边栏选择打钩，此时已经折叠成功</p>
<h1 id="2-快捷键"><a href="#2-快捷键" class="headerlink" title="2.快捷键"></a>2.快捷键</h1><p> Ctrl+1 ——设置一级标题</p>
<p>Ctrl+2 ——设置二级标题</p>
<p>Ctrl+3 ——设置三级标题</p>
<p>Ctrl+4 ——设置四级标题</p>
<p>Ctrl+5 ——设置五级标题</p>
<p>Ctrl+6 ——设置六级标题</p>
<p>空格 ——引用</p>
<p>回车、shift + tab ——退出引用</p>
<p>Ctrl + Shift + ] ——无序列表</p>
<p>Ctrl + Shift + [ ——有序列</p>
<p>Ctrl + Shift + ] 、tab——子列表</p>
<p>Shift + tab ——返回上一级列表、</p>
<p>Ctrl + B —— 加粗</p>
<p>Ctrl + T —— 表格</p>
<p>~ ~ 要删除的内容 ~ ~ ——删除线</p>
<h1 id="3-创建链接"><a href="#3-创建链接" class="headerlink" title="3.创建链接"></a>3.创建链接</h1><p>格式为[] ()，其中[]内为要展示的内容，()为链接。</p>
<h1 id="4-图片路径管理"><a href="#4-图片路径管理" class="headerlink" title="4.图片路径管理"></a>4.图片路径管理</h1><p>Typora默认将所有文档的图片都放在一起，但是我们更想每一个文档都有属于自己的一个文件夹，文档中的图片也最好可以自动保存在该文件夹内。解决方法如下：</p>
<p>点击【文件】——【偏好设置】——【图像】——将该界面内容设置如下:</p>
<p> 此时，该文档所在文件夹中会自动生成一个img文件，该路径为本文档中的图片路径。</p>
<p><img src="D:\hexo\blog\source_posts\image-20230902072149501.png"></p>
<h1 id="5-划重点–高亮"><a href="#5-划重点–高亮" class="headerlink" title="5.划重点–高亮"></a>5.划重点–高亮</h1><p>高亮</p>
<p>点击【文件】——【偏好设置】——【Markdown】——高亮处打钩</p>
<p>编辑高亮内容格式如下：</p>
<p>&#x3D;&#x3D; 内容&#x3D;&#x3D; —— 高亮</p>
<p>&#x3D;&#x3D; chai&#x3D;&#x3D;</p>
<p>&#x3D;&#x3D;cccc&#x3D;&#x3D; </p>
<p>&#x3D;&#x3D; key&#x3D;&#x3D;</p>
<p> &#x3D;&#x3D;内容&#x3D;&#x3D; </p>
<p><strong>cha</strong></p>
<p>重启Typora，此时内容处会变成高亮的效果.</p>
<h1 id="6-导入代码块"><a href="#6-导入代码块" class="headerlink" title="6.导入代码块"></a>6.导入代码块</h1><p><strong>~~~</strong> ——代码块，点击代码框可选择语言</p>
<h1 id="7-不使用自动拼写检查"><a href="#7-不使用自动拼写检查" class="headerlink" title="7.不使用自动拼写检查"></a>7.不使用自动拼写检查</h1><p>点击右下角[【Spell Check】勾选【不使用拼写检查】</p>
<h1 id="8设置自动保存"><a href="#8设置自动保存" class="headerlink" title="8设置自动保存"></a>8设置自动保存</h1><p>其实Typora 对文件修改之后并不能自动保存，解决方法：</p>
<p>点击【文件】——【偏好设置】——【通用】——自动保存处打钩</p>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>0-14 香橙派文件系统最终定位</title>
    <url>/2023/09/17/0-14-%E9%A6%99%E6%A9%99%E6%B4%BE%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%9C%80%E7%BB%88%E5%AE%9A%E4%BD%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最终定位的内容如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309171903690.png" alt="image-20230917190330631"></p>
<p>具体的文件路径为  &#x2F;home&#x2F;topeet&#x2F;orangepi-build&#x2F;external&#x2F;config&#x2F;sources&#x2F;families&#x2F;include，如下所示：</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309171903010.png" alt="image-20230917190353993"></p>
<p>其中对我们有用的是rk356x_gpu_vpu.inc  rk3588_gpu_vpu.inc</p>
<p>rk3588_gpu_vpu.inc内容如下所示：</p>
<h1 id="1-ubuntu20-xfce"><a href="#1-ubuntu20-xfce" class="headerlink" title="1.ubuntu20  xfce"></a>1.ubuntu20  xfce</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if [[ $&#123;SELECTED_CONFIGURATION&#125; == desktop &amp;&amp; $&#123;DESKTOP_ENVIRONMENT&#125; == xfce &amp;&amp; $&#123;RELEASE&#125; == focal ]]; then</span><br><span class="line"></span><br><span class="line">	chroot $SDCARD /bin/bash -c &quot;chmod o+x /usr/lib/dbus-1.0/dbus-daemon-launch-helper&quot;</span><br><span class="line"></span><br><span class="line">	#chroot $SDCARD /bin/bash -c &quot;apt-get update&quot;</span><br><span class="line">	#chroot $SDCARD /bin/bash -c &quot;apt-get upgrade -y&quot; &gt; /dev/null</span><br><span class="line">	#chroot $SDCARD /bin/bash -c &quot;apt-get install -y &quot; &gt; /dev/null</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/rkaiq/camera-engine-rkaiq_arm64.deb&quot;</span><br><span class="line">	cp &quot;$EXTER/cache/sources/rk3588_packages_$&#123;RELEASE&#125;/rkaiq/rkaiq_3A_server&quot; $SDCARD/usr/bin/ -f</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/rga/librga2_2.2.0-1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/rga/librga-dev_2.2.0-1_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/mpp/librockchip-mpp1_1.5.0-1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/mpp/librockchip-mpp-dev_1.5.0-1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/mpp/librockchip-vpu0_1.5.0-1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/mpp/rockchip-mpp-demos_1.5.0-1_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">	install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/libmali/libmali-valhall-g610-g6p0-x11_1.9-1_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/gst-rkmpp/gstreamer1.0-rockchip1_1.14-4_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/gstreamer/libgstreamer1.0-0_1.16.3-0ubuntu1.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/gstreamer/libgstreamer1.0-dev_1.16.3-0ubuntu1.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/gstreamer/gir1.2-gstreamer-1.0_1.16.3-0ubuntu1.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/gstreamer/gstreamer1.0-tools_1.16.3-0ubuntu1.1_arm64.deb&quot;</span><br><span class="line">	#dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/gstreamer/gstreamer1.0-doc_1.16.3-0ubuntu1.1_all.deb&quot;</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/gst-plugins-base1.0/libgstreamer-gl1.0-0_1.16.3-0ubuntu1.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/gst-plugins-base1.0/gir1.2-gst-plugins-base-1.0_1.16.3-0ubuntu1.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/gst-plugins-base1.0/gstreamer1.0-alsa_1.16.3-0ubuntu1.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/gst-plugins-base1.0/gstreamer1.0-plugins-base_1.16.3-0ubuntu1.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/gst-plugins-base1.0/gstreamer1.0-plugins-base-apps_1.16.3-0ubuntu1.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/gst-plugins-base1.0/gstreamer1.0-x_1.16.3-0ubuntu1.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/gst-plugins-base1.0/gstreamer1.0-gl_1.16.3-0ubuntu1.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/gst-plugins-base1.0/libgstreamer-plugins-base1.0-0_1.16.3-0ubuntu1.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/gst-plugins-base1.0/libgstreamer-plugins-base1.0-dev_1.16.3-0ubuntu1.1_arm64.deb&quot;</span><br><span class="line">	#dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/gst-plugins-base1.0/gstreamer1.0-plugins-base-doc_1.16.3-0ubuntu1.1_all.deb&quot;</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/gst-plugins-good1.0/gstreamer1.0-plugins-good_1.16.3-0ubuntu1.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/gst-plugins-good1.0/gstreamer1.0-pulseaudio_1.16.3-0ubuntu1.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/gst-plugins-good1.0/gstreamer1.0-gtk3_1.16.3-0ubuntu1.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/gst-plugins-good1.0/gstreamer1.0-qt5_1.16.3-0ubuntu1.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/gst-plugins-good1.0/libgstreamer-plugins-good1.0-0_1.16.3-0ubuntu1.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/gst-plugins-good1.0/libgstreamer-plugins-good1.0-dev_1.16.3-0ubuntu1.1_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">	#dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/gst-plugins-bad1.0/gstreamer1.0-plugins-bad_1.18.5-1_arm64.deb&quot;</span><br><span class="line">	#dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/gst-plugins-bad1.0/libgstreamer-plugins-bad1.0-0_1.18.5-1_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/libv4l/libdvbv5-0_1.18.0-2build1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/libv4l/dvb-tools_1.18.0-2build1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/libv4l/ir-keytable_1.18.0-2build1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/libv4l/libdvbv5-dev_1.18.0-2build1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/libv4l/libdvbv5-doc_1.18.0-2build1_all.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/libv4l/libv4l-0_1.18.0-2build1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/libv4l/libv4l2rds0_1.18.0-2build1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/libv4l/libv4lconvert0_1.18.0-2build1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/libv4l/libv4l-dev_1.18.0-2build1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/libv4l/libv4l-rkmpp_1.4.0-1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/libv4l/v4l-utils_1.18.0-2build1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/libv4l/qv4l2_1.18.0-2build1_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/xserver/xserver-xorg-core_1.20.13-1ubuntu1~20.04.2_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/chromium/chromium-x11_91.0.4472.164_arm64.deb&quot;</span><br><span class="line">	cp $&#123;EXTER&#125;/cache/sources/rk3588_packages_focal/chromium/libjpeg.so.62 $SDCARD/usr/lib/aarch64-linux-gnu/</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/libdrm/libdrm2_2.4.107-8ubuntu1~20.04.2_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/libdrm/libdrm-common_2.4.107-8ubuntu1~20.04.2_all.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/libdrm/libkms1_2.4.107-8ubuntu1~20.04.2_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/libdrm/libdrm-dev_2.4.107-8ubuntu1~20.04.2_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/libdrm-cursor/libdrm-cursor_1.4.0-1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/libdrm-cursor/libdrm-cursor-dev_1.4.0-1_arm64.deb&quot;</span><br><span class="line">	chroot $SDCARD /bin/bash -c &quot;sed -i &#x27;5aexport LD_PRELOAD=libdrm-cursor.so.1&#x27; /usr/bin/X&quot;</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/rktoolkit/rktoolkit_1.0.0-1_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">	#dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/gl4es/gl4es_1.1.5-0armbian1_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/ffmpeg/libavutil56_4.2.7-0ubuntu0.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/ffmpeg/libavutil-dev_4.2.7-0ubuntu0.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/ffmpeg/libpostproc55_4.2.7-0ubuntu0.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/ffmpeg/libpostproc-dev_4.2.7-0ubuntu0.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/ffmpeg/libswresample3_4.2.7-0ubuntu0.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/ffmpeg/libswresample-dev_4.2.7-0ubuntu0.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/ffmpeg/libswscale5_4.2.7-0ubuntu0.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/ffmpeg/libswscale-dev_4.2.7-0ubuntu0.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/ffmpeg/libavcodec58_4.2.7-0ubuntu0.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/ffmpeg/libavcodec-dev_4.2.7-0ubuntu0.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/ffmpeg/libavformat58_4.2.7-0ubuntu0.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/ffmpeg/libavformat-dev_4.2.7-0ubuntu0.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/ffmpeg/libavfilter7_4.2.7-0ubuntu0.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/ffmpeg/libavfilter-dev_4.2.7-0ubuntu0.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/ffmpeg/libavdevice58_4.2.7-0ubuntu0.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/ffmpeg/libavdevice-dev_4.2.7-0ubuntu0.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/ffmpeg/libavresample4_4.2.7-0ubuntu0.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/ffmpeg/libavresample-dev_4.2.7-0ubuntu0.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/ffmpeg/ffmpeg_4.2.7-0ubuntu0.1_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">	chroot $SDCARD /bin/bash -c &quot;rm /etc/mpv/mpv.conf&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/mpv/libmpv1_0.32.0-1ubuntu1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/mpv/libmpv-dev_0.32.0-1ubuntu1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/mpv/mpv_0.32.0-1ubuntu1_arm64.deb&quot;</span><br><span class="line">	cp $&#123;EXTER&#125;/packages/bsp/rk3588/etc/mpv/mpv.conf $SDCARD/etc/mpv/</span><br><span class="line"></span><br><span class="line">	## The chromium using fixed pathes for libv4l2.so</span><br><span class="line">	chroot $SDCARD /bin/bash -c &quot;ln -rsf /usr/lib/*/libv4l2.so /usr/lib/&quot;</span><br><span class="line">	chroot $SDCARD /bin/bash -c &quot;[ -e /usr/lib/aarch64-linux-gnu/ ] &amp;&amp; ln -Tsf lib /usr/lib64&quot;</span><br><span class="line"></span><br><span class="line">	chroot $SDCARD /bin/bash -c &quot;cd /usr/lib/aarch64-linux-gnu/dri/;cp kms_swrast_dri.so swrast_dri.so rockchip_dri.so /&quot;</span><br><span class="line">	chroot $SDCARD /bin/bash -c &quot;rm /usr/lib/aarch64-linux-gnu/dri/*.so;mv /*.so /usr/lib/aarch64-linux-gnu/dri/&quot;</span><br><span class="line"></span><br><span class="line">	if [[ $install_zfs == &quot;yes&quot; ]]; then</span><br><span class="line"></span><br><span class="line">		chroot $SDCARD /bin/bash -c &quot;dpkg -i /opt/$&#123;CHOSEN_KERNEL/image/headers&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/zfs/libnvpair3linux_2.1.6-0york1~20.04_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/zfs/libuutil3linux_2.1.6-0york1~20.04_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/zfs/libzfs4linux_2.1.6-0york1~20.04_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/zfs/libzpool5linux_2.1.6-0york1~20.04_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/zfs/zfsutils-linux_2.1.6-0york1~20.04_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_focal/zfs/zfs-dkms_2.1.6-0york1~20.04_all.deb&quot;</span><br><span class="line">		chroot $SDCARD /bin/bash -c &quot;apt remove -y $&#123;CHOSEN_KERNEL/image/headers&#125;&quot;</span><br><span class="line">		chroot $SDCARD /bin/bash -c &quot;rm -r /usr/src/linux-headers-5.10.110-rockchip-rk3588&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="2-ubuntu22-xfce"><a href="#2-ubuntu22-xfce" class="headerlink" title="2. ubuntu22 xfce"></a>2. ubuntu22 xfce</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">if [[ $&#123;SELECTED_CONFIGURATION&#125; == desktop &amp;&amp; $&#123;DESKTOP_ENVIRONMENT&#125; =~ xfce|kde-plasma &amp;&amp; $&#123;RELEASE&#125; == jammy ]]; then</span><br><span class="line"></span><br><span class="line">	chroot $SDCARD /bin/bash -c &quot;chmod o+x /usr/lib/dbus-1.0/dbus-daemon-launch-helper&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">chroot</span> <span class="variable">$SDCARD</span> /bin/bash -c <span class="string">&quot;apt-get update&quot;</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">chroot</span> <span class="variable">$SDCARD</span> /bin/bash -c <span class="string">&quot;apt-get upgrade -y&quot;</span> &gt; /dev/null</span></span><br><span class="line">	chroot $SDCARD /bin/bash -c &quot;apt-get install -y libgraphene-1.0-0 libqt5waylandclient5 libgdk-pixbuf2.0-0 libjsoncpp-dev&quot; &gt; /dev/null</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/rkaiq/camera-engine-rkaiq_rk3588_arm64.deb&quot;</span><br><span class="line">	cp &quot;$EXTER/cache/sources/rk3588_packages_$&#123;RELEASE&#125;/rkaiq/rkaiq_3A_server&quot; $SDCARD/usr/bin/ -f</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/rga2/librga2_2.2.0-1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/rga2/librga-dev_2.2.0-1_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/mpp/librockchip-mpp1_1.5.0-1.2_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/mpp/librockchip-mpp-dev_1.5.0-1.2_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/mpp/librockchip-vpu0_1.5.0-1.2_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/mpp/rockchip-mpp-demos_1.5.0-1.2_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-rkmpp/gstreamer1.0-rockchip1_1.14-4_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gstreamer/gir1.2-gstreamer-1.0_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gstreamer/gstreamer1.0-tools_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gstreamer/libgstreamer1.0-0_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gstreamer/libgstreamer1.0-dev_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-base1.0/gir1.2-gst-plugins-base-1.0_1.20.3-1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-base1.0/gstreamer1.0-alsa_1.20.3-1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-base1.0/gstreamer1.0-gl_1.20.3-1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-base1.0/gstreamer1.0-plugins-base_1.20.3-1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-base1.0/gstreamer1.0-plugins-base-apps_1.20.3-1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-base1.0/gstreamer1.0-x_1.20.3-1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-base1.0/libgstreamer-gl1.0-0_1.20.3-1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-base1.0/libgstreamer-plugins-base1.0-0_1.20.3-1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-base1.0/libgstreamer-plugins-base1.0-dev_1.20.3-1_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-bad1.0/libgstreamer-plugins-bad1.0-0_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-bad1.0/gir1.2-gst-plugins-bad-1.0_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-bad1.0/libgstreamer-opencv1.0-0_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-bad1.0/gstreamer1.0-opencv_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-bad1.0/gstreamer1.0-plugins-bad_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-bad1.0/gstreamer1.0-plugins-bad-apps_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-bad1.0/gstreamer1.0-wpe_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-bad1.0/libgstreamer-plugins-bad1.0-dev_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-good1.0/gstreamer1.0-gtk3_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-good1.0/gstreamer1.0-plugins-good_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-good1.0/gstreamer1.0-pulseaudio_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-good1.0/gstreamer1.0-qt5_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-good1.0/libgstreamer-plugins-good1.0-0_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-good1.0/libgstreamer-plugins-good1.0-dev_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libv4l/libdvbv5-0_1.22.1-2build1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libv4l/dvb-tools_1.22.1-2build1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libv4l/ir-keytable_1.22.1-2build1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libv4l/libdvbv5-dev_1.22.1-2build1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libv4l/libdvbv5-doc_1.22.1-2build1_all.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libv4l/libv4l-0_1.22.1-2build1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libv4l/libv4l2rds0_1.22.1-2build1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libv4l/libv4lconvert0_1.22.1-2build1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libv4l/libv4l-dev_1.22.1-2build1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libv4l/libv4l-rkmpp_1.5.1-1.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libv4l/v4l-utils_1.22.1-2build1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libv4l/qv4l2_1.22.1-2build1_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/xserver/xserver-xorg-core_21.1.3-2ubuntu2_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/xserver/xserver-common_21.1.3-2ubuntu2_all.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/xserver/xserver-xorg-dev_21.1.3-2ubuntu2_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/xserver/xserver-xorg-legacy_21.1.3-2ubuntu2_arm64.deb&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">dpkg_install_deb_chroot <span class="string">&quot;<span class="variable">$EXTER</span>/cache/sources/rk3588_packages_jammy/chromium/chromium-x11_91.0.4472.164_arm64.deb&quot;</span></span></span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libdrm/libkms1_2.4.110-1ubuntu1_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libdrm-cursor/libdrm-cursor_1.4.0-1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libdrm-cursor/libdrm-cursor-dev_1.4.0-1_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/rktoolkit/rktoolkit_1.0.0-1_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">	install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libmali/libmali-valhall-g610-g6p0-x11_1.9-1_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libavutil56_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libavutil-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libpostproc55_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libpostproc-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libswresample3_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libswresample-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libswscale5_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libswscale-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libavcodec58_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libavcodec-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libavformat58_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libavformat-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libavfilter7_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libavfilter-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libavdevice58_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libavdevice-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/ffmpeg_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">	chroot $SDCARD /bin/bash -c &quot;rm /etc/mpv/mpv.conf&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/mpv/libmpv1_0.34.1-1ubuntu3_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/mpv/libmpv-dev_0.34.1-1ubuntu3_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/mpv/mpv_0.34.1-1ubuntu3_arm64.deb&quot;</span><br><span class="line">	cp $&#123;EXTER&#125;/packages/bsp/rk3588/etc/mpv/mpv.conf $SDCARD/etc/mpv/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">dpkg_install_deb_chroot <span class="string">&quot;<span class="variable">$EXTER</span>/cache/sources/rk3588_packages_jammy/chromium/chromium-x11_91.0.4472.164_arm64.deb&quot;</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">cp</span> <span class="variable">$&#123;EXTER&#125;</span>/cache/sources/rk3588_packages_jammy/chromium/libjpeg.so.62 <span class="variable">$SDCARD</span>/usr/lib/aarch64-linux-gnu/</span></span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_$&#123;RELEASE&#125;/chromium-x11/chromium-codecs-ffmpeg-extra_110.0.5481.4-debian11~bullseye~rkmpp20230130+1_arm64.deb&quot;</span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_$&#123;RELEASE&#125;/chromium-x11/chromium-browser_110.0.5481.4-debian11~bullseye~rkmpp20230130+1_arm64.deb&quot;</span><br><span class="line">	cp $EXTER/cache/sources/rk3588_packages_$&#123;RELEASE&#125;/chromium-x11/default $SDCARD/etc/chromium-browser/</span><br><span class="line"></span><br><span class="line">	chroot $SDCARD /bin/bash -c &quot;sed -i &#x27;5aexport LD_PRELOAD=libdrm-cursor.so.1&#x27; /usr/bin/X&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="comment"># The chromium using fixed pathes for libv4l2.so</span></span></span><br><span class="line">	chroot $SDCARD /bin/bash -c &quot;ln -rsf /usr/lib/*/libv4l2.so /usr/lib/&quot;</span><br><span class="line">	chroot $SDCARD /bin/bash -c &quot;[ -e /usr/lib/aarch64-linux-gnu/ ] &amp;&amp; ln -Tsf lib /usr/lib64&quot;</span><br><span class="line"></span><br><span class="line">	chroot $SDCARD /bin/bash -c &quot;cd /usr/lib/aarch64-linux-gnu/dri/;cp kms_swrast_dri.so swrast_dri.so rockchip_dri.so /&quot;</span><br><span class="line">	chroot $SDCARD /bin/bash -c &quot;rm /usr/lib/aarch64-linux-gnu/dri/*.so;mv /*.so /usr/lib/aarch64-linux-gnu/dri/&quot;</span><br><span class="line"></span><br><span class="line">	if [[ $install_zfs == &quot;yes&quot; ]]; then</span><br><span class="line"></span><br><span class="line">		chroot $SDCARD /bin/bash -c &quot;dpkg -i /opt/$&#123;CHOSEN_KERNEL/image/headers&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/zfs/libnvpair3linux_2.1.6-0york1~22.04_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/zfs/libuutil3linux_2.1.6-0york1~22.04_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/zfs/libzfs4linux_2.1.6-0york1~22.04_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/zfs/libzpool5linux_2.1.6-0york1~22.04_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/zfs/zfsutils-linux_2.1.6-0york1~22.04_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/zfs/zfs-dkms_2.1.6-0york1~22.04_all.deb&quot;</span><br><span class="line">		chroot $SDCARD /bin/bash -c &quot;apt remove -y $&#123;CHOSEN_KERNEL/image/headers&#125;&quot;</span><br><span class="line">		chroot $SDCARD /bin/bash -c &quot;rm -r /usr/src/linux-headers-5.10.110-rockchip-rk3588&quot;</span><br><span class="line">	fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h1 id="3-ubuntu22-gnome"><a href="#3-ubuntu22-gnome" class="headerlink" title="3. ubuntu22 gnome"></a>3. ubuntu22 gnome</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">	if [[ $&#123;SELECTED_CONFIGURATION&#125; == desktop &amp;&amp; $&#123;DESKTOP_ENVIRONMENT&#125; =~ gnome &amp;&amp; $&#123;RELEASE&#125; == jammy ]]; then</span><br><span class="line"></span><br><span class="line">		[[ -f $SDCARD/etc/profile.d/x11.sh ]] &amp;&amp; rm $SDCARD/etc/profile.d/x11.sh</span><br><span class="line"></span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/rkaiq/camera-engine-rkaiq_rk3588_arm64.deb&quot;</span><br><span class="line">		cp &quot;$EXTER/cache/sources/rk3588_packages_$&#123;RELEASE&#125;/rkaiq/rkaiq_3A_server&quot; $SDCARD/usr/bin/ -f</span><br><span class="line"></span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/rga2/librga2_2.2.0-1+git220920.c1d5c71~jammy_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/rga2/librga-dev_2.2.0-1+git220920.c1d5c71~jammy_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/mpp/librockchip-mpp1_1.5.0-1.2_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/mpp/librockchip-mpp-dev_1.5.0-1.2_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/mpp/librockchip-vpu0_1.5.0-1.2_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/mpp/rockchip-mpp-demos_1.5.0-1.2_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-rkmpp/gstreamer1.0-rockchip1_1.14-4_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gstreamer/gir1.2-gstreamer-1.0_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gstreamer/gstreamer1.0-tools_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gstreamer/libgstreamer1.0-0_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gstreamer/libgstreamer1.0-dev_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-base1.0/gir1.2-gst-plugins-base-1.0_1.20.3-1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-base1.0/gstreamer1.0-alsa_1.20.3-1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-base1.0/gstreamer1.0-gl_1.20.3-1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-base1.0/gstreamer1.0-plugins-base_1.20.3-1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-base1.0/gstreamer1.0-plugins-base-apps_1.20.3-1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-base1.0/gstreamer1.0-x_1.20.3-1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-base1.0/libgstreamer-gl1.0-0_1.20.3-1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-base1.0/libgstreamer-plugins-base1.0-0_1.20.3-1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-base1.0/libgstreamer-plugins-base1.0-dev_1.20.3-1_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-bad1.0/libgstreamer-plugins-bad1.0-0_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-bad1.0/gir1.2-gst-plugins-bad-1.0_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-bad1.0/libgstreamer-opencv1.0-0_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-bad1.0/gstreamer1.0-opencv_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-bad1.0/gstreamer1.0-plugins-bad_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-bad1.0/gstreamer1.0-plugins-bad-apps_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-bad1.0/gstreamer1.0-wpe_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-bad1.0/libgstreamer-plugins-bad1.0-dev_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-good1.0/gstreamer1.0-gtk3_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-good1.0/gstreamer1.0-plugins-good_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-good1.0/gstreamer1.0-pulseaudio_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-good1.0/gstreamer1.0-qt5_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-good1.0/libgstreamer-plugins-good1.0-0_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/gst-plugins-good1.0/libgstreamer-plugins-good1.0-dev_1.20.3-0ubuntu1_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libv4l/libdvbv5-0_1.22.1-2build1+rkmpp20221209_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libv4l/dvb-tools_1.22.1-2build1+rkmpp20221209_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libv4l/ir-keytable_1.22.1-2build1+rkmpp20221209_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libv4l/libdvbv5-dev_1.22.1-2build1+rkmpp20221209_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libv4l/libdvbv5-doc_1.22.1-2build1+rkmpp20221209_all.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libv4l/libv4lconvert0_1.22.1-2build1+rkmpp20221209_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libv4l/libv4l-0_1.22.1-2build1+rkmpp20221209_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libv4l/libv4l2rds0_1.22.1-2build1+rkmpp20221209_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libv4l/libv4l-dev_1.22.1-2build1+rkmpp20221209_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libv4l/v4l-utils_1.22.1-2build1+rkmpp20221209_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libv4l/qv4l2_1.22.1-2build1+rkmpp20221209_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libv4l/libv4l-rkmpp_1.5.1-1.1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libv4l/rockchip-multimedia-config_1.0.0-2+jammy_all.deb&quot;</span><br><span class="line"></span><br><span class="line">		#dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/xserver/xserver-xorg-core_21.1.3-2ubuntu2_arm64.deb&quot;</span><br><span class="line">		#dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/xserver/xserver-common_21.1.3-2ubuntu2_all.deb&quot;</span><br><span class="line">		#dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/xserver/xserver-xorg-dev_21.1.3-2ubuntu2_arm64.deb&quot;</span><br><span class="line">		#dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/xserver/xserver-xorg-legacy_21.1.3-2ubuntu2_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">		#dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libdrm/libkms1_2.4.110-1ubuntu1_arm64.deb&quot;</span><br><span class="line">		#dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libdrm-cursor/libdrm-cursor_1.4.0-1_arm64.deb&quot;</span><br><span class="line">		#dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/libdrm-cursor/libdrm-cursor-dev_1.4.0-1_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/chromium/chromium-codecs-ffmpeg-extra_110.0.5481.4-0ubuntu1~jammy~rkmpp20230130_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/chromium/chromium-browser_110.0.5481.4-0ubuntu1~jammy~rkmpp20230130_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/chromium/chromium-browser-l10n_110.0.5481.4-0ubuntu1~jammy~rkmpp20230130_all.deb&quot;</span><br><span class="line">		#dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/chromium/chromium-chromedriver_110.0.5481.4-0ubuntu1~jammy~rkmpp20230130_arm64.deb&quot;</span><br><span class="line">		cp $EXTER/cache/sources/rk3588_packages_jammy/chromium/default $SDCARD/etc/chromium-browser/</span><br><span class="line"></span><br><span class="line">		## for panfork</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/mesa/mali-g610-firmware_1.0.0-1_all.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/mesa/libgbm1_23.0~panfork~csf~git221210.120202c6757~j+3_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/mesa/libgbm-dev_23.0~panfork~csf~git221210.120202c6757~j+3_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/mesa/libglapi-mesa_23.0~panfork~csf~git221210.120202c6757~j+3_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/mesa/libgl1-mesa-dri_23.0~panfork~csf~git221210.120202c6757~j+3_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/mesa/libegl-mesa0_23.0~panfork~csf~git221210.120202c6757~j+3_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/mesa/libglx-mesa0_23.0~panfork~csf~git221210.120202c6757~j+3_arm64.deb&quot;</span><br><span class="line">		# Improve mesa performance</span><br><span class="line">		echo &quot;PAN_MESA_DEBUG=gofaster&quot; &gt;&gt; $SDCARD/etc/environment</span><br><span class="line"></span><br><span class="line">		## for ffmpeg</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libavutil56_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libavutil-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libpostproc55_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libpostproc-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libswresample3_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libswresample-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libswscale5_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libswscale-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libavcodec58_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libavcodec-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libavformat58_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libavformat-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libavfilter7_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libavfilter-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libavdevice58_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/libavdevice-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/ffmpeg/ffmpeg_4.4.2-0ubuntu0.22.04.1_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">		chroot $SDCARD /bin/bash -c &quot;rm /etc/mpv/mpv.conf&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/mpv/libmpv1_0.34.1-1ubuntu3_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/mpv/libmpv-dev_0.34.1-1ubuntu3_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/mpv/wayland/mpv_0.34.1-1ubuntu3_arm64.deb&quot;</span><br><span class="line">		cp $&#123;EXTER&#125;/cache/sources/rk3588_packages_jammy/mpv/mpv.conf $SDCARD/etc/mpv/</span><br><span class="line"></span><br><span class="line">		## for kodi</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/kodi/kodi-bin_19.4+dfsg1-2+gles2_arm64.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/kodi/kodi-data_19.4+dfsg1-2+gles2_all.deb&quot;</span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/kodi/kodi_19.4+dfsg1-2+gles2_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">		dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/rktoolkit/rktoolkit_1.0.0-1_arm64.deb&quot;</span><br><span class="line"></span><br><span class="line">		if [[ $install_zfs == &quot;yes&quot; ]]; then</span><br><span class="line"></span><br><span class="line">			chroot $SDCARD /bin/bash -c &quot;dpkg -i /opt/$&#123;CHOSEN_KERNEL/image/headers&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot;</span><br><span class="line">			dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/zfs/libnvpair3linux_2.1.6-0york1~22.04_arm64.deb&quot;</span><br><span class="line">			dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/zfs/libuutil3linux_2.1.6-0york1~22.04_arm64.deb&quot;</span><br><span class="line">			dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/zfs/libzfs4linux_2.1.6-0york1~22.04_arm64.deb&quot;</span><br><span class="line">			dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/zfs/libzpool5linux_2.1.6-0york1~22.04_arm64.deb&quot;</span><br><span class="line">			dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/zfs/zfsutils-linux_2.1.6-0york1~22.04_arm64.deb&quot;</span><br><span class="line">			dpkg_install_deb_chroot &quot;$EXTER/cache/sources/rk3588_packages_jammy/zfs/zfs-dkms_2.1.6-0york1~22.04_all.deb&quot;</span><br><span class="line">			chroot $SDCARD /bin/bash -c &quot;apt remove -y $&#123;CHOSEN_KERNEL/image/headers&#125;&quot;</span><br><span class="line">			chroot $SDCARD /bin/bash -c &quot;rm -r /usr/src/linux-headers-5.10.110-rockchip-rk3588&quot;</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install -y libopencv-calib3d-dev libopencv-calib3d4.2  \</span><br><span class="line">libopencv-contrib-dev libopencv-contrib4.2 libopencv-core-dev libopencv-core4.2 libopencv-dev \</span><br><span class="line">libopencv-dnn-dev libopencv-dnn4.2 libopencv-features2d-dev libopencv-features2d4.2 \</span><br><span class="line">libopencv-flann-dev libopencv-flann4.2 libopencv-highgui-dev libopencv-highgui4.2 libopencv-imgcodecs-dev \</span><br><span class="line">libopencv-imgcodecs4.2 libopencv-imgproc-dev libopencv-imgproc4.2 libopencv-ml-dev libopencv-ml4.2  \</span><br><span class="line">libopencv-objdetect-dev libopencv-objdetect4.2 libopencv-photo-dev libopencv-photo4.2 libopencv-shape-dev \</span><br><span class="line">libopencv-shape4.2 libopencv-stitching-dev  libopencv-stitching4.2 libopencv-superres-dev libopencv-superres4.2 \</span><br><span class="line">libopencv-video-dev libopencv-video4.2 libopencv-videoio-dev libopencv-videoio4.2 libopencv-videostab-dev \</span><br><span class="line">libopencv-videostab4.2 libopencv-viz-dev libopencv-viz4.2 libopencv4.2-java libopencv4.2-jni</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>香橙派构建脚本分析</category>
      </categories>
      <tags>
        <tag>瑞芯微脚本分析</tag>
      </tags>
  </entry>
  <entry>
    <title>0-13 香橙派文件系统构建脚本分析</title>
    <url>/2023/09/17/0-13-%E9%A6%99%E6%A9%99%E6%B4%BE%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%9E%84%E5%BB%BA%E8%84%9A%E6%9C%AC%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-build-sh-分析"><a href="#1-build-sh-分析" class="headerlink" title="1.build.sh 分析"></a>1.build.sh 分析</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Copyright (c) 2013-2021 Igor Pecovnik, igor.pecovnik@gma**.com</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This file is licensed under the terms of the GNU General Public</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">License version 2. This program is licensed <span class="string">&quot;as is&quot;</span> without any</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">warranty of any kind, whether express or implied.</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">DO NOT EDIT THIS FILE</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">use configuration files like config-default.conf to <span class="built_in">set</span> the build configuration</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Please check Orange Pi documentation <span class="keyword">for</span> more info</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> http://www.orangepi.cn/downloadresourcescn</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> http://www.orangepi.org/downloadresources</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根目录地址</span></span><br><span class="line">SRC=&quot;$(dirname &quot;$(realpath &quot;$&#123;BASH_SOURCE[0]&#125;&quot;)&quot;)&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">check <span class="keyword">for</span> whitespace <span class="keyword">in</span> <span class="variable">$&#123;SRC&#125;</span> and <span class="built_in">exit</span> <span class="keyword">for</span> safety reasons</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查变量 <span class="variable">$&#123;SRC&#125;</span> 是否包含空白字符</span></span><br><span class="line">grep -q &quot;[[:space:]]&quot; &lt;&lt;&lt;&quot;$&#123;SRC&#125;&quot; &amp;&amp; &#123; echo &quot;\&quot;$&#123;SRC&#125;\&quot; contains whitespace. Not supported. Aborting.&quot; &gt;&amp;2 ; exit 1 ; &#125;</span><br><span class="line"></span><br><span class="line">cd &quot;$&#123;SRC&#125;&quot; || exit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这个变量没有，所以不会进入</span></span><br><span class="line">if [[ &quot;$&#123;ORANGEPI_ENABLE_CALL_TRACING&#125;&quot; == &quot;yes&quot; ]]; then</span><br><span class="line">	set -T # inherit return/debug traps</span><br><span class="line">	mkdir -p &quot;$&#123;SRC&#125;&quot;/output/debug</span><br><span class="line">	echo -n &quot;&quot; &gt; &quot;$&#123;SRC&#125;&quot;/output/debug/calls.txt</span><br><span class="line">	trap &#x27;echo &quot;$&#123;BASH_LINENO[@]&#125;|$&#123;BASH_SOURCE[@]&#125;|$&#123;FUNCNAME[@]&#125;&quot; &gt;&gt; $&#123;SRC&#125;/output/debug/calls.txt ;&#x27; RETURN</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这个general.sh 脚本是有的，所以会执行，下一个小节就是他的讲解，关于这个文件只是定义了一些函数，实际上没有要执行的</span></span><br><span class="line">if [[ -f &quot;$&#123;SRC&#125;&quot;/scripts/general.sh ]]; then</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">shellcheck <span class="built_in">source</span>=scripts/general.sh</span></span><br><span class="line">	source &quot;$&#123;SRC&#125;&quot;/scripts/general.sh</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line"></span><br><span class="line">	echo &quot;Error: missing build directory structure&quot;</span><br><span class="line">	echo &quot;Please clone the full repository by https://github.com/orangepi-xunlong/orangepi-build&quot;</span><br><span class="line">	exit 255</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> Add the variables needed at the beginning of the path</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查传入的参数并设置相应的变量，我这里并没有传入变量，而是直接的build.sh</span></span><br><span class="line">check_args ()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">for p in &quot;$@&quot;; do</span><br><span class="line"></span><br><span class="line">	case &quot;$&#123;p%=*&#125;&quot; in</span><br><span class="line">		LIB_TAG)</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">Take a variable <span class="keyword">if</span> the branch exists locally</span></span><br><span class="line">			if [ &quot;$&#123;p#*=&#125;&quot; == &quot;$(git branch | \</span><br><span class="line">				gawk -v b=&quot;$&#123;p#*=&#125;&quot; &#x27;&#123;if ( $NF == b ) &#123;print $NF&#125;&#125;&#x27;)&quot; ]; then</span><br><span class="line">				echo -e &quot;[\e[0;35m warn \x1B[0m] Setting $p&quot;</span><br><span class="line">				eval &quot;$p&quot;</span><br><span class="line">			else</span><br><span class="line">				echo -e &quot;[\e[0;35m warn \x1B[0m] Skip $p setting as LIB_TAG=\&quot;\&quot;&quot;</span><br><span class="line">				eval LIB_TAG=&quot;&quot;</span><br><span class="line">			fi</span><br><span class="line">			;;</span><br><span class="line">	esac</span><br><span class="line"></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所以这里并没有值</span></span><br><span class="line">check_args &quot;$@&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新源代码，不用理解</span></span><br><span class="line">update_src() &#123;</span><br><span class="line"></span><br><span class="line">	cd &quot;$&#123;SRC&#125;&quot; || exit</span><br><span class="line">	if [[ ! -f &quot;$&#123;SRC&#125;&quot;/.ignore_changes ]]; then</span><br><span class="line">		echo -e &quot;[\e[0;32m o.k. \x1B[0m] This script will try to update&quot;</span><br><span class="line"></span><br><span class="line">		CHANGED_FILES=$(git diff --name-only)</span><br><span class="line">		if [[ -n &quot;$&#123;CHANGED_FILES&#125;&quot; ]]; then</span><br><span class="line">			echo -e &quot;[\e[0;35m warn \x1B[0m] Can&#x27;t update since you made changes to: \e[0;32m\n$&#123;CHANGED_FILES&#125;\x1B[0m&quot;</span><br><span class="line">			while true; do</span><br><span class="line">				echo -e &quot;Press \e[0;33m&lt;Ctrl-C&gt;\x1B[0m or \e[0;33mexit\x1B[0m to abort compilation&quot;\</span><br><span class="line">				&quot;, \e[0;33m&lt;Enter&gt;\x1B[0m to ignore and continue, \e[0;33mdiff\x1B[0m to display changes&quot;</span><br><span class="line">				read -r</span><br><span class="line">				if [[ &quot;$&#123;REPLY&#125;&quot; == &quot;diff&quot; ]]; then</span><br><span class="line">					git diff</span><br><span class="line">				elif [[ &quot;$&#123;REPLY&#125;&quot; == &quot;exit&quot; ]]; then</span><br><span class="line">					exit 1</span><br><span class="line">				elif [[ &quot;$&#123;REPLY&#125;&quot; == &quot;&quot; ]]; then</span><br><span class="line">					break</span><br><span class="line">				else</span><br><span class="line">					echo &quot;Unknown command!&quot;</span><br><span class="line">				fi</span><br><span class="line">			done</span><br><span class="line">		elif [[ $(git branch | grep &quot;*&quot; | awk &#x27;&#123;print $2&#125;&#x27;) != &quot;$&#123;LIB_TAG&#125;&quot; &amp;&amp; -n &quot;$&#123;LIB_TAG&#125;&quot; ]]; then</span><br><span class="line">			git checkout &quot;$&#123;LIB_TAG:-master&#125;&quot;</span><br><span class="line">			git pull</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个临时文件,重定向</span></span><br><span class="line">TMPFILE=$(mktemp)</span><br><span class="line">chmod 644 &quot;$&#123;TMPFILE&#125;&quot;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	echo SRC=&quot;$SRC&quot;</span><br><span class="line">	echo LIB_TAG=&quot;$LIB_TAG&quot;</span><br><span class="line">	declare -f update_src</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;update_src&quot;</span></span></span><br><span class="line"></span><br><span class="line">&#125;  &gt; &quot;$TMPFILE&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">do</span> not update/checkout git with root privileges to messup files onwership.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">due to <span class="keyword">in</span> docker/VM, we can<span class="string">&#x27;t su to a normal user, so do not update/checkout git.</span></span></span><br><span class="line">if [[ $(systemd-detect-virt) == &#x27;none&#x27; ]]; then</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$&#123;EUID&#125;&quot; == &quot;0&quot; ]]; then</span><br><span class="line">		su &quot;$(stat --format=%U &quot;$&#123;SRC&#125;&quot;/.git)&quot; -c &quot;bash $&#123;TMPFILE&#125;&quot;</span><br><span class="line">	else</span><br><span class="line">		bash &quot;$&#123;TMPFILE&#125;&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rm &quot;$&#123;TMPFILE&#125;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [[ &quot;$&#123;EUID&#125;&quot; == &quot;0&quot; ]] || [[ &quot;$&#123;1&#125;&quot; == &quot;vagrant&quot; ]]; then</span><br><span class="line">	:</span><br><span class="line">elif [[ &quot;$&#123;1&#125;&quot; == docker || &quot;$&#123;1&#125;&quot; == dockerpurge || &quot;$&#123;1&#125;&quot; == docker-shell ]] &amp;&amp; grep -q &quot;$(whoami)&quot; &lt;(getent group docker); then</span><br><span class="line">	:</span><br><span class="line">else</span><br><span class="line">	display_alert &quot;This script requires root privileges, trying to use sudo&quot; &quot;&quot; &quot;wrn&quot;</span><br><span class="line">	sudo &quot;$&#123;SRC&#125;/build.sh&quot; &quot;$@&quot;</span><br><span class="line">	exit $?</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;$OFFLINE_WORK&quot; == &quot;yes&quot; ]; then</span><br><span class="line"></span><br><span class="line">	echo -e &quot;\n&quot;</span><br><span class="line">	display_alert &quot;* &quot; &quot;You are working offline.&quot;</span><br><span class="line">	display_alert &quot;* &quot; &quot;Sources, time and host will not be checked&quot;</span><br><span class="line">	echo -e &quot;\n&quot;</span><br><span class="line">	sleep 3s</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">check and install the basic utilities here</span></span></span><br><span class="line">	prepare_host_basic</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Check for Vagrant</span></span></span><br><span class="line">if [[ &quot;$&#123;1&#125;&quot; == vagrant &amp;&amp; -z &quot;$(command -v vagrant)&quot; ]]; then</span><br><span class="line">	display_alert &quot;Vagrant not installed.&quot; &quot;Installing&quot;</span><br><span class="line">	sudo apt-get update</span><br><span class="line">	sudo apt-get install -y vagrant virtualbox</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Purge Orange Pi Docker images</span></span></span><br><span class="line">if [[ &quot;$&#123;1&#125;&quot; == dockerpurge &amp;&amp; -f /etc/debian_version ]]; then</span><br><span class="line">	display_alert &quot;Purging Orange Pi Docker containers&quot; &quot;&quot; &quot;wrn&quot;</span><br><span class="line">	docker container ls -a | grep orangepi | awk &#x27;&#123;print $1&#125;&#x27; | xargs docker container rm &amp;&gt; /dev/null</span><br><span class="line">	docker image ls | grep orangepi | awk &#x27;&#123;print $3&#125;&#x27; | xargs docker image rm &amp;&gt; /dev/null</span><br><span class="line">	shift</span><br><span class="line">	set -- &quot;docker&quot; &quot;$@&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Docker shell</span></span></span><br><span class="line">if [[ &quot;$&#123;1&#125;&quot; == docker-shell ]]; then</span><br><span class="line">	shift</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">shellcheck disable=SC2034</span></span></span><br><span class="line">	SHELL_ONLY=yes</span><br><span class="line">	set -- &quot;docker&quot; &quot;$@&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Install Docker if not there but wanted. We cover only Debian based distro install. On other distros, manual Docker install is needed</span></span></span><br><span class="line">if [[ &quot;$&#123;1&#125;&quot; == docker &amp;&amp; -f /etc/debian_version &amp;&amp; -z &quot;$(command -v docker)&quot; ]]; then</span><br><span class="line"></span><br><span class="line">	DOCKER_BINARY=&quot;docker-ce&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">add exception for Ubuntu Focal until Docker provides dedicated binary</span></span></span><br><span class="line">	codename=$(cat /etc/os-release | grep VERSION_CODENAME | cut -d&quot;=&quot; -f2)</span><br><span class="line">	codeid=$(cat /etc/os-release | grep ^NAME | cut -d&quot;=&quot; -f2 | awk &#x27;&#123;print tolower($0)&#125;&#x27; | tr -d &#x27;&quot;&#x27; | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">	[[ &quot;$&#123;codename&#125;&quot; == &quot;debbie&quot; ]] &amp;&amp; codename=&quot;buster&quot; &amp;&amp; codeid=&quot;debian&quot;</span><br><span class="line">	[[ &quot;$&#123;codename&#125;&quot; == &quot;ulyana&quot; || &quot;$&#123;codename&#125;&quot; == &quot;jammy&quot; ]] &amp;&amp; codename=&quot;focal&quot; &amp;&amp; codeid=&quot;ubuntu&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">different binaries for some. TBD. Need to check for all others</span></span></span><br><span class="line">	[[ &quot;$&#123;codename&#125;&quot; =~ focal|hirsute ]] &amp;&amp; DOCKER_BINARY=&quot;docker containerd docker.io&quot;</span><br><span class="line"></span><br><span class="line">	display_alert &quot;Docker not installed.&quot; &quot;Installing&quot; &quot;Info&quot;</span><br><span class="line">	sudo bash -c &quot;echo \&quot;deb [arch=$(dpkg --print-architecture)] https://download.docker.com/linux/$&#123;codeid&#125; $&#123;codename&#125; stable\&quot; &gt; /etc/apt/sources.list.d/docker.list&quot;</span><br><span class="line"></span><br><span class="line">	sudo bash -c &quot;curl -fsSL \&quot;https://download.docker.com/linux/$&#123;codeid&#125;/gpg\&quot; | apt-key add -qq - &gt; /dev/null 2&gt;&amp;1 &quot;</span><br><span class="line">	export DEBIAN_FRONTEND=noninteractive</span><br><span class="line">	sudo apt-get update</span><br><span class="line">	sudo apt-get install -y -qq --no-install-recommends $&#123;DOCKER_BINARY&#125;</span><br><span class="line">	display_alert &quot;Add yourself to docker group to avoid root privileges&quot; &quot;&quot; &quot;wrn&quot;</span><br><span class="line">	&quot;$&#123;SRC&#125;/build.sh&quot; &quot;$@&quot;</span><br><span class="line">	exit $?</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">上面都是关于docker的，可以先不用理解</span></span></span><br><span class="line"></span><br><span class="line">EXTER=&quot;$&#123;SRC&#125;/external&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Create userpatches directory if not exists</span></span></span><br><span class="line">mkdir -p &quot;$&#123;SRC&#125;&quot;/userpatches</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Create example configs if none found in userpatches</span></span></span><br><span class="line">if ! ls &quot;$&#123;SRC&#125;&quot;/userpatches/&#123;config-example.conf,config-docker.conf,config-vagrant.conf&#125; 1&gt; /dev/null 2&gt;&amp;1; then</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Migrate old configs</span></span></span><br><span class="line">	if ls &quot;$&#123;SRC&#125;&quot;/*.conf 1&gt; /dev/null 2&gt;&amp;1; then</span><br><span class="line">		display_alert &quot;Migrate config files to userpatches directory&quot; &quot;all *.conf&quot; &quot;info&quot;</span><br><span class="line">                cp &quot;$&#123;SRC&#125;&quot;/*.conf &quot;$&#123;SRC&#125;&quot;/userpatches  || exit 1</span><br><span class="line">		rm &quot;$&#123;SRC&#125;&quot;/*.conf</span><br><span class="line">		[[ ! -L &quot;$&#123;SRC&#125;&quot;/userpatches/config-example.conf ]] &amp;&amp; ln -fs config-example.conf &quot;$&#123;SRC&#125;&quot;/userpatches/config-default.conf || exit 1</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	display_alert &quot;Create example config file using template&quot; &quot;config-default.conf&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Create example config</span></span></span><br><span class="line">	if [[ ! -f &quot;$&#123;SRC&#125;&quot;/userpatches/config-example.conf ]]; then</span><br><span class="line">		cp &quot;$&#123;EXTER&#125;&quot;/config/templates/config-example.conf &quot;$&#123;SRC&#125;&quot;/userpatches/config-example.conf || exit 1</span><br><span class="line">                ln -fs config-example.conf &quot;$&#123;SRC&#125;&quot;/userpatches/config-default.conf || exit 1</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Create Docker config</span></span></span><br><span class="line">	if [[ ! -f &quot;$&#123;SRC&#125;&quot;/userpatches/config-docker.conf ]]; then</span><br><span class="line">		cp &quot;$&#123;EXTER&#125;&quot;/config/templates/config-docker.conf &quot;$&#123;SRC&#125;&quot;/userpatches/config-docker.conf || exit 1</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Create Docker file</span></span></span><br><span class="line">        if [[ ! -f &quot;$&#123;SRC&#125;&quot;/userpatches/Dockerfile ]]; then</span><br><span class="line">                cp &quot;$&#123;EXTER&#125;&quot;/config/templates/Dockerfile &quot;$&#123;SRC&#125;&quot;/userpatches/Dockerfile || exit 1</span><br><span class="line">        fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Create Vagrant config</span></span></span><br><span class="line">	if [[ ! -f &quot;$&#123;SRC&#125;&quot;/userpatches/config-vagrant.conf ]]; then</span><br><span class="line">	        cp &quot;$&#123;EXTER&#125;&quot;/config/templates/config-vagrant.conf &quot;$&#123;SRC&#125;&quot;/userpatches/config-vagrant.conf || exit 1</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Create Vagrant file</span></span></span><br><span class="line">	if [[ ! -f &quot;$&#123;SRC&#125;&quot;/userpatches/Vagrantfile ]]; then</span><br><span class="line">		cp &quot;$&#123;EXTER&#125;&quot;/config/templates/Vagrantfile &quot;$&#123;SRC&#125;&quot;/userpatches/Vagrantfile || exit 1</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ -z &quot;$&#123;CONFIG&#125;&quot; &amp;&amp; -n &quot;$1&quot; &amp;&amp; -f &quot;$&#123;SRC&#125;/userpatches/config-$1.conf&quot; ]]; then</span><br><span class="line">	CONFIG=&quot;userpatches/config-$1.conf&quot;</span><br><span class="line">	shift</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">usind default if custom not found</span></span></span><br><span class="line">if [[ -z &quot;$&#123;CONFIG&#125;&quot; &amp;&amp; -f &quot;$&#123;SRC&#125;/userpatches/config-default.conf&quot; ]]; then</span><br><span class="line">	CONFIG=&quot;userpatches/config-default.conf&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">source build configuration file</span></span></span><br><span class="line">CONFIG_FILE=&quot;$(realpath &quot;$&#123;CONFIG&#125;&quot;)&quot;</span><br><span class="line"></span><br><span class="line">if [[ ! -f &quot;$&#123;CONFIG_FILE&#125;&quot; ]]; then</span><br><span class="line">	display_alert &quot;Config file does not exist&quot; &quot;$&#123;CONFIG&#125;&quot; &quot;error&quot;</span><br><span class="line">	exit 254</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">CONFIG_PATH=$(dirname &quot;$&#123;CONFIG_FILE&#125;&quot;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Source the extensions manager library at this point, before sourcing the config.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">This allows early calls to enable_extension(), but initialization proper is done later.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">shellcheck source=scripts/extensions.sh</span></span></span><br><span class="line">source &quot;$&#123;SRC&#125;&quot;/scripts/extensions.sh</span><br><span class="line"></span><br><span class="line">display_alert &quot;Using config file&quot; &quot;$&#123;CONFIG_FILE&#125;&quot; &quot;info&quot;</span><br><span class="line">pushd &quot;$&#123;CONFIG_PATH&#125;&quot; &gt; /dev/null || exit</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">shellcheck source=/dev/null</span></span></span><br><span class="line">source &quot;$&#123;CONFIG_FILE&#125;&quot;</span><br><span class="line">popd &gt; /dev/null || exit</span><br><span class="line"></span><br><span class="line">[[ -z &quot;$&#123;USERPATCHES_PATH&#125;&quot; ]] &amp;&amp; USERPATCHES_PATH=&quot;$&#123;CONFIG_PATH&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Script parameters handling</span></span></span><br><span class="line">while [[ &quot;$&#123;1&#125;&quot; == *=* ]]; do</span><br><span class="line"></span><br><span class="line">	parameter=$&#123;1%%=*&#125;</span><br><span class="line">	value=$&#123;1##*=&#125;</span><br><span class="line">	shift</span><br><span class="line">	display_alert &quot;Command line: setting $parameter to&quot; &quot;$&#123;value:-(empty)&#125;&quot; &quot;info&quot;</span><br><span class="line">	eval &quot;$parameter=\&quot;$value\&quot;&quot;</span><br><span class="line"></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [[ &quot;$&#123;BUILD_ALL&#125;&quot; == &quot;yes&quot; || &quot;$&#123;BUILD_ALL&#125;&quot; == &quot;demo&quot; ]]; then</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">shellcheck source=scripts/build-all-ng.sh</span></span></span><br><span class="line">	source &quot;$&#123;SRC&#125;&quot;/scripts/build-all-ng.sh</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">shellcheck source=scripts/main.sh</span></span></span><br><span class="line">	source &quot;$&#123;SRC&#125;&quot;/scripts/main.sh</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其实上面对我有用的也就是general.sh脚本和main.sh，general脚本是一些用于的函数，而main,sh是最重要的，在第三个章节会进行讲解。</p>
<h1 id="2-general-sh分析"><a href="#2-general-sh分析" class="headerlink" title="2.general.sh分析"></a>2.general.sh分析</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Copyright (c) 2015 Igor Pecovnik, igor.pecovnik@gma**.com</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This file is licensed under the terms of the GNU General Public</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">License version 2. This program is licensed <span class="string">&quot;as is&quot;</span> without any</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">warranty of any kind, whether express or implied.</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Functions:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cleaning 清理操作</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">exit_with_error 输出错误并退出</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">get_package_list_hash 获取软件包列表的哈希值。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">create_sources_list 创建源列表</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">clean_up_git 清理 Git 相关操作</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">waiter_local_git 等待本地 Git 操作完成</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">fetch_from_repo 。从仓库获取文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">improved_git改进的 Git 操作。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">display_alert 显示警告。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">fingerprint_image 生成图像指纹</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">distro_menu 显示发行版菜单</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">addtorepo 将软件包添加到仓库</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">repo-remove-old-packages 从仓库中移除旧的软件包</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">wait_for_package_manager 等待软件包管理器完成操作</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">install_pkg_deb 安装 deb 软件包</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prepare_host_basic 准备基本主机环境</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prepare_host 准备主机环境</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">webseed 使用 Webseed 下载文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">download_and_verify 下载并验证文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">show_developer_warning 显示开发者警告信息</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">show_checklist_variables 显示清单变量</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cleaning &lt;target&gt;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># target: what to clean</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;make&quot;</span> - <span class="string">&quot;make clean&quot;</span> <span class="keyword">for</span> selected kernel and u-boot</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;debs&quot;</span> - delete output/debs <span class="keyword">for</span> board&amp;branch</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;ubootdebs&quot;</span> - delete output/debs <span class="keyword">for</span> uboot&amp;board&amp;branch</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;alldebs&quot;</span> - delete output/debs</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;cache&quot;</span> - delete output/cache</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;oldcache&quot;</span> - remove old output/cache</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;images&quot;</span> - delete output/images</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;sources&quot;</span> - delete output/sources</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"></span></span><br><span class="line">cleaning()</span><br><span class="line">&#123;</span><br><span class="line">	case $1 in</span><br><span class="line">		debs) # delete $&#123;DEB_STORAGE&#125; for current branch and family</span><br><span class="line">		if [[ -d &quot;$&#123;DEB_STORAGE&#125;&quot; ]]; then</span><br><span class="line">			display_alert &quot;Cleaning $&#123;DEB_STORAGE&#125; for&quot; &quot;$BOARD $BRANCH&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">easier than dealing with variable expansion and escaping dashes <span class="keyword">in</span> file names</span></span><br><span class="line">			find &quot;$&#123;DEB_STORAGE&#125;&quot; -name &quot;$&#123;CHOSEN_UBOOT&#125;_*.deb&quot; -delete</span><br><span class="line">			find &quot;$&#123;DEB_STORAGE&#125;&quot; \( -name &quot;$&#123;CHOSEN_KERNEL&#125;_*.deb&quot; -o \</span><br><span class="line">				-name &quot;orangepi-*.deb&quot; -o \</span><br><span class="line">				-name &quot;plymouth-theme-orangepi_*.deb&quot; -o \</span><br><span class="line">				-name &quot;$&#123;CHOSEN_KERNEL/image/dtb&#125;_*.deb&quot; -o \</span><br><span class="line">				-name &quot;$&#123;CHOSEN_KERNEL/image/headers&#125;_*.deb&quot; -o \</span><br><span class="line">				-name &quot;$&#123;CHOSEN_KERNEL/image/source&#125;_*.deb&quot; -o \</span><br><span class="line">				-name &quot;$&#123;CHOSEN_KERNEL/image/firmware-image&#125;_*.deb&quot; \) -delete</span><br><span class="line">			[[ -n $RELEASE ]] &amp;&amp; rm -f &quot;$&#123;DEB_STORAGE&#125;/$&#123;RELEASE&#125;/$&#123;CHOSEN_ROOTFS&#125;&quot;_*.deb</span><br><span class="line">			[[ -n $RELEASE ]] &amp;&amp; rm -f &quot;$&#123;DEB_STORAGE&#125;/$&#123;RELEASE&#125;/orangepi-desktop-$&#123;RELEASE&#125;&quot;_*.deb</span><br><span class="line">		fi</span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">		ubootdebs) # delete $&#123;DEB_STORAGE&#125; for uboot, current branch and family</span><br><span class="line">		if [[ -d &quot;$&#123;DEB_STORAGE&#125;&quot; ]]; then</span><br><span class="line">			display_alert &quot;Cleaning $&#123;DEB_STORAGE&#125; for u-boot&quot; &quot;$BOARD $BRANCH&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">easier than dealing with variable expansion and escaping dashes <span class="keyword">in</span> file names</span></span><br><span class="line">			find &quot;$&#123;DEB_STORAGE&#125;&quot; -name &quot;$&#123;CHOSEN_UBOOT&#125;_*.deb&quot; -delete</span><br><span class="line">		fi</span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">		extras) # delete $&#123;DEB_STORAGE&#125;/extra/$RELEASE for all architectures</span><br><span class="line">		if [[ -n $RELEASE &amp;&amp; -d $&#123;DEB_STORAGE&#125;/extra/$RELEASE ]]; then</span><br><span class="line">			display_alert &quot;Cleaning $&#123;DEB_STORAGE&#125;/extra for&quot; &quot;$RELEASE&quot; &quot;info&quot;</span><br><span class="line">			rm -rf &quot;$&#123;DEB_STORAGE&#125;/extra/$&#123;RELEASE&#125;&quot;</span><br><span class="line">		fi</span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">		alldebs) # delete output/debs</span><br><span class="line">		[[ -d &quot;$&#123;DEB_STORAGE&#125;&quot; ]] &amp;&amp; display_alert &quot;Cleaning&quot; &quot;$&#123;DEB_STORAGE&#125;&quot; &quot;info&quot; &amp;&amp; rm -rf &quot;$&#123;DEB_STORAGE&#125;&quot;/*</span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">		cache) # delete output/cache</span><br><span class="line">		[[ -d $EXTER/cache/rootfs ]] &amp;&amp; display_alert &quot;Cleaning&quot; &quot;rootfs cache (all)&quot; &quot;info&quot; &amp;&amp; find $EXTER/cache/rootfs -type f -delete</span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">		images) # delete output/images</span><br><span class="line">		[[ -d &quot;$&#123;DEST&#125;&quot;/images ]] &amp;&amp; display_alert &quot;Cleaning&quot; &quot;output/images&quot; &quot;info&quot; &amp;&amp; rm -rf &quot;$&#123;DEST&#125;&quot;/images/*</span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">		sources) # delete output/sources and output/buildpkg</span><br><span class="line">		[[ -d $EXTER/cache/sources ]] &amp;&amp; display_alert &quot;Cleaning&quot; &quot;sources&quot; &quot;info&quot; &amp;&amp; rm -rf $EXTER/cache/sources/* &quot;$&#123;DEST&#125;&quot;/buildpkg/*</span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">		oldcache) # remove old `cache/rootfs` except for the newest 8 files</span><br><span class="line">		if [[ -d $EXTER/cache/rootfs &amp;&amp; $(ls -1 $EXTER/cache/rootfs/*.lz4 2&gt; /dev/null | wc -l) -gt &quot;$&#123;ROOTFS_CACHE_MAX&#125;&quot; ]]; then</span><br><span class="line">			display_alert &quot;Cleaning&quot; &quot;rootfs cache (old)&quot; &quot;info&quot;</span><br><span class="line">			(cd $EXTER/cache/rootfs; ls -t *.lz4 | sed -e &quot;1,$&#123;ROOTFS_CACHE_MAX&#125;d&quot; | xargs -d &#x27;\n&#x27; rm -f)</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">Remove signatures <span class="keyword">if</span> they are present. We use them <span class="keyword">for</span> internal purpose</span></span><br><span class="line">			(cd $EXTER/cache/rootfs; ls -t *.asc | sed -e &quot;1,$&#123;ROOTFS_CACHE_MAX&#125;d&quot; | xargs -d &#x27;\n&#x27; rm -f)</span><br><span class="line">		fi</span><br><span class="line">		;;</span><br><span class="line">	esac</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">exit_with_error &lt;message&gt; &lt;highlight&gt;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># a way to terminate build process</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">with verbose error message</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"></span></span><br><span class="line">exit_with_error()</span><br><span class="line">&#123;</span><br><span class="line">	local _file</span><br><span class="line">	local _line=$&#123;BASH_LINENO[0]&#125;</span><br><span class="line">	local _function=$&#123;FUNCNAME[1]&#125;</span><br><span class="line">	local _description=$1</span><br><span class="line">	local _highlight=$2</span><br><span class="line">	_file=$(basename &quot;$&#123;BASH_SOURCE[1]&#125;&quot;)</span><br><span class="line">	local stacktrace=&quot;$(get_extension_hook_stracktrace &quot;$&#123;BASH_SOURCE[*]&#125;&quot; &quot;$&#123;BASH_LINENO[*]&#125;&quot;)&quot;</span><br><span class="line"></span><br><span class="line">	display_alert &quot;ERROR in function $_function&quot; &quot;$stacktrace&quot; &quot;err&quot;</span><br><span class="line">	display_alert &quot;$_description&quot; &quot;$_highlight&quot; &quot;err&quot;</span><br><span class="line">	display_alert &quot;Process terminated&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$&#123;ERROR_DEBUG_SHELL&#125;&quot; == &quot;yes&quot; ]]; then</span><br><span class="line">		display_alert &quot;MOUNT&quot; &quot;$&#123;MOUNT&#125;&quot; &quot;err&quot;</span><br><span class="line">		display_alert &quot;SDCARD&quot; &quot;$&#123;SDCARD&#125;&quot; &quot;err&quot;</span><br><span class="line">		display_alert &quot;Here&#x27;s a shell.&quot; &quot;debug it&quot; &quot;err&quot;</span><br><span class="line">		bash &lt; /dev/tty || true</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">TODO: execute run_after_build here?</span></span><br><span class="line">	overlayfs_wrapper &quot;cleanup&quot;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">unlock loop device access <span class="keyword">in</span> <span class="keyword">case</span> of starvation</span></span><br><span class="line">	exec &#123;FD&#125;&gt;/var/lock/orangepi-debootstrap-losetup</span><br><span class="line">	flock -u &quot;$&#123;FD&#125;&quot;</span><br><span class="line"></span><br><span class="line">	exit 255</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">get_package_list_hash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># returns md5 hash for current package list and rootfs cache version</span></span></span><br><span class="line"></span><br><span class="line">get_package_list_hash()</span><br><span class="line">&#123;</span><br><span class="line">	local package_arr exclude_arr</span><br><span class="line">	local list_content</span><br><span class="line">	read -ra package_arr &lt;&lt;&lt; &quot;$&#123;DEBOOTSTRAP_LIST&#125; $&#123;PACKAGE_LIST&#125;&quot;</span><br><span class="line">	read -ra exclude_arr &lt;&lt;&lt; &quot;$&#123;PACKAGE_LIST_EXCLUDE&#125;&quot;</span><br><span class="line">	( ( printf &quot;%s\n&quot; &quot;$&#123;package_arr[@]&#125;&quot;; printf -- &quot;-%s\n&quot; &quot;$&#123;exclude_arr[@]&#125;&quot; ) | sort -u; echo &quot;$&#123;1&#125;&quot; ) \</span><br><span class="line">		| md5sum | cut -d&#x27; &#x27; -f 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">create_sources_list &lt;release&gt; &lt;basedir&gt;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># &lt;release&gt;: buster|bullseye|bookworm|bionic|focal|jammy|hirsute|sid</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;basedir&gt;: path to root directory</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">create_sources_list()</span></span><br><span class="line">&#123;</span><br><span class="line">	local release=$1</span><br><span class="line">	local basedir=$2</span><br><span class="line">	[[ -z $basedir ]] &amp;&amp; exit_with_error &quot;No basedir passed to create_sources_list&quot;</span><br><span class="line"></span><br><span class="line">	case $release in</span><br><span class="line">	stretch|buster)</span><br><span class="line">	cat &lt;&lt;-EOF &gt; &quot;$&#123;basedir&#125;&quot;/etc/apt/sources.list</span><br><span class="line">	deb http://$&#123;DEBIAN_MIRROR&#125; $release main contrib non-free</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;DEBIAN_MIRROR&#125;</span> <span class="variable">$release</span> main contrib non-free</span></span><br><span class="line"></span><br><span class="line">	deb http://$&#123;DEBIAN_MIRROR&#125; $&#123;release&#125;-updates main contrib non-free</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;DEBIAN_MIRROR&#125;</span> <span class="variable">$&#123;release&#125;</span>-updates main contrib non-free</span></span><br><span class="line"></span><br><span class="line">	deb http://$&#123;DEBIAN_MIRROR&#125; $&#123;release&#125;-backports main contrib non-free</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;DEBIAN_MIRROR&#125;</span> <span class="variable">$&#123;release&#125;</span>-backports main contrib non-free</span></span><br><span class="line"></span><br><span class="line">	deb http://$&#123;DEBIAN_SECURTY&#125; $&#123;release&#125;/updates main contrib non-free</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;DEBIAN_SECURTY&#125;</span> <span class="variable">$&#123;release&#125;</span>/updates main contrib non-free</span></span><br><span class="line">	EOF</span><br><span class="line">	;;</span><br><span class="line"></span><br><span class="line">	bullseye)</span><br><span class="line">	cat &lt;&lt;-EOF &gt; &quot;$&#123;basedir&#125;&quot;/etc/apt/sources.list</span><br><span class="line">	deb https://$&#123;DEBIAN_MIRROR&#125; $release main contrib non-free</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src https://<span class="variable">$&#123;DEBIAN_MIRROR&#125;</span> <span class="variable">$release</span> main contrib non-free</span></span><br><span class="line"></span><br><span class="line">	deb https://$&#123;DEBIAN_MIRROR&#125; $&#123;release&#125;-updates main contrib non-free</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src https://<span class="variable">$&#123;DEBIAN_MIRROR&#125;</span> <span class="variable">$&#123;release&#125;</span>-updates main contrib non-free</span></span><br><span class="line"></span><br><span class="line">	deb https://$&#123;DEBIAN_MIRROR&#125; $&#123;release&#125;-backports main contrib non-free</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src https://<span class="variable">$&#123;DEBIAN_MIRROR&#125;</span> <span class="variable">$&#123;release&#125;</span>-backports main contrib non-free</span></span><br><span class="line"></span><br><span class="line">	deb https://$&#123;DEBIAN_SECURTY&#125; $&#123;release&#125;-security main contrib non-free</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src https://<span class="variable">$&#123;DEBIAN_SECURTY&#125;</span> <span class="variable">$&#123;release&#125;</span>-security main contrib non-free</span></span><br><span class="line">	EOF</span><br><span class="line">	;;</span><br><span class="line"></span><br><span class="line">	bookworm)</span><br><span class="line">	cat &lt;&lt;- EOF &gt; &quot;$&#123;basedir&#125;&quot;/etc/apt/sources.list</span><br><span class="line">	deb http://$&#123;DEBIAN_MIRROR&#125; $release main contrib non-free non-free-firmware</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;DEBIAN_MIRROR&#125;</span> <span class="variable">$release</span> main contrib non-free non-free-firmware</span></span><br><span class="line"></span><br><span class="line">	deb http://$&#123;DEBIAN_MIRROR&#125; $&#123;release&#125;-updates main contrib non-free non-free-firmware</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;DEBIAN_MIRROR&#125;</span> <span class="variable">$&#123;release&#125;</span>-updates main contrib non-free non-free-firmware</span></span><br><span class="line"></span><br><span class="line">	deb http://$&#123;DEBIAN_MIRROR&#125; $&#123;release&#125;-backports main contrib non-free non-free-firmware</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;DEBIAN_MIRROR&#125;</span> <span class="variable">$&#123;release&#125;</span>-backports main contrib non-free non-free-firmware</span></span><br><span class="line"></span><br><span class="line">	deb http://$&#123;DEBIAN_SECURTY&#125; $&#123;release&#125;-security main contrib non-free non-free-firmware</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;DEBIAN_SECURTY&#125;</span> <span class="variable">$&#123;release&#125;</span>-security main contrib non-free non-free-firmware</span></span><br><span class="line">	EOF</span><br><span class="line">	;;</span><br><span class="line"></span><br><span class="line">	sid) # sid is permanent unstable development and has no such thing as updates or security</span><br><span class="line">	cat &lt;&lt;- EOF &gt; &quot;$&#123;basedir&#125;&quot;/etc/apt/sources.list</span><br><span class="line">	deb http://$&#123;DEBIAN_MIRROR&#125; $release main contrib non-free non-free-firmware</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;DEBIAN_MIRROR&#125;</span> <span class="variable">$release</span> main contrib non-free non-free-firmware</span></span><br><span class="line"></span><br><span class="line">	deb http://$&#123;DEBIAN_MIRROR&#125; unstable main contrib non-free non-free-firmware</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;DEBIAN_MIRROR&#125;</span> unstable main contrib non-free non-free-firmware</span></span><br><span class="line">	EOF</span><br><span class="line">	;;</span><br><span class="line"></span><br><span class="line">	xenial|bionic|focal|hirsute|impish|jammy)</span><br><span class="line">	cat &lt;&lt;-EOF &gt; &quot;$&#123;basedir&#125;&quot;/etc/apt/sources.list</span><br><span class="line">	deb http://$&#123;UBUNTU_MIRROR&#125; $release main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;UBUNTU_MIRROR&#125;</span> <span class="variable">$release</span> main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line">	deb http://$&#123;UBUNTU_MIRROR&#125; $&#123;release&#125;-security main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;UBUNTU_MIRROR&#125;</span> <span class="variable">$&#123;release&#125;</span>-security main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line">	deb http://$&#123;UBUNTU_MIRROR&#125; $&#123;release&#125;-updates main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;UBUNTU_MIRROR&#125;</span> <span class="variable">$&#123;release&#125;</span>-updates main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line">	deb http://$&#123;UBUNTU_MIRROR&#125; $&#123;release&#125;-backports main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;UBUNTU_MIRROR&#125;</span> <span class="variable">$&#123;release&#125;</span>-backports main restricted universe multiverse</span></span><br><span class="line">	EOF</span><br><span class="line">	;;</span><br><span class="line"></span><br><span class="line">	raspi)</span><br><span class="line">	cat &lt;&lt;-EOF &gt; &quot;$&#123;basedir&#125;&quot;/etc/apt/sources.list</span><br><span class="line">	deb http://$&#123;DEBIAN_MIRROR&#125; bullseye main contrib non-free</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;DEBIAN_MIRROR&#125;</span> bullseye main contrib non-free</span></span><br><span class="line"></span><br><span class="line">	deb http://$&#123;DEBIAN_MIRROR&#125; bullseye-updates main contrib non-free</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;DEBIAN_MIRROR&#125;</span> bullseye-updates main contrib non-free</span></span><br><span class="line"></span><br><span class="line">	deb http://$&#123;DEBIAN_MIRROR&#125; bullseye-backports main contrib non-free</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;DEBIAN_MIRROR&#125;</span> bullseye-backports main contrib non-free</span></span><br><span class="line"></span><br><span class="line">	deb http://$&#123;DEBIAN_SECURTY&#125; bullseye-security main contrib non-free</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://<span class="variable">$&#123;DEBIAN_SECURTY&#125;</span> bullseye-security main contrib non-free</span></span><br><span class="line">	EOF</span><br><span class="line"></span><br><span class="line">	cat &lt;&lt;-EOF &gt; &quot;$&#123;basedir&#125;&quot;/etc/apt/sources.list.d/raspi.list</span><br><span class="line">	deb http://$&#123;RASPI_MIRROR&#125; bullseye main</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Uncomment line below <span class="keyword">then</span> <span class="string">&#x27;apt-get update&#x27;</span> to <span class="built_in">enable</span> <span class="string">&#x27;apt-get source&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">deb-src http://archive.raspberrypi.org/debian/ bullseye main</span></span><br><span class="line">	EOF</span><br><span class="line"></span><br><span class="line">	if [ -n &quot;$APT_PROXY&quot; ]; then</span><br><span class="line">		install -m 644 files/51cache &quot;$&#123;APT_PROXY&#125;/etc/apt/apt.conf.d/51cache&quot;</span><br><span class="line">		sed &quot;$&#123;basedir&#125;/etc/apt/apt.conf.d/51cache&quot; -i -e &quot;s|APT_PROXY|$&#123;APT_PROXY&#125;|&quot;</span><br><span class="line">	else</span><br><span class="line">		rm -f &quot;$&#123;basedir&#125;/etc/apt/apt.conf.d/51cache&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	cat $&#123;EXTER&#125;/packages/raspi/stage0/00-configure-apt/files/raspberrypi.gpg.key | gpg --dearmor &gt; &quot;$&#123;basedir&#125;/raspberrypi-archive-stable.gpg&quot;</span><br><span class="line">	install -m 644 &quot;$&#123;basedir&#125;/raspberrypi-archive-stable.gpg&quot; &quot;$&#123;basedir&#125;/etc/apt/trusted.gpg.d/&quot;</span><br><span class="line">	;;</span><br><span class="line">	esac</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">stage: add armbian repository and install key</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="keyword">if</span> [[ <span class="variable">$DOWNLOAD_MIRROR</span> == <span class="string">&quot;china&quot;</span> ]]; <span class="keyword">then</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">	<span class="built_in">echo</span> <span class="string">&quot;deb https://mirrors.tuna.tsinghua.edu.cn/armbian <span class="variable">$RELEASE</span> main <span class="variable">$&#123;RELEASE&#125;</span>-utils <span class="variable">$&#123;RELEASE&#125;</span>-desktop&quot;</span> &gt; <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/etc/apt/sources.list.d/armbian.list</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="keyword">elif</span> [[ <span class="variable">$DOWNLOAD_MIRROR</span> == <span class="string">&quot;bfsu&quot;</span> ]]; <span class="keyword">then</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">   <span class="built_in">echo</span> <span class="string">&quot;deb http://mirrors.bfsu.edu.cn/armbian <span class="variable">$RELEASE</span> main <span class="variable">$&#123;RELEASE&#125;</span>-utils <span class="variable">$&#123;RELEASE&#125;</span>-desktop&quot;</span> &gt; <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/etc/apt/sources.list.d/armbian.list</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="keyword">else</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">	<span class="built_in">echo</span> <span class="string">&quot;deb http://&quot;</span>$([[ <span class="variable">$BETA</span> == <span class="built_in">yes</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;beta&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;apt&quot;</span> )<span class="string">&quot;.armbian.com <span class="variable">$RELEASE</span> main <span class="variable">$&#123;RELEASE&#125;</span>-utils <span class="variable">$&#123;RELEASE&#125;</span>-desktop&quot;</span> &gt; <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/etc/apt/sources.list.d/armbian.list</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="keyword">fi</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">replace <span class="built_in">local</span> package server <span class="keyword">if</span> defined. Suitable <span class="keyword">for</span> development</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">[[ -n <span class="variable">$LOCAL_MIRROR</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;deb http://<span class="variable">$LOCAL_MIRROR</span> <span class="variable">$RELEASE</span> main <span class="variable">$&#123;RELEASE&#125;</span>-utils <span class="variable">$&#123;RELEASE&#125;</span>-desktop&quot;</span> &gt; <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/etc/apt/sources.list.d/armbian.list</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">display_alert <span class="string">&quot;Adding Armbian repository and authentication key&quot;</span> <span class="string">&quot;/etc/apt/sources.list.d/armbian.list&quot;</span> <span class="string">&quot;info&quot;</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">cp</span> <span class="string">&quot;<span class="variable">$&#123;EXTER&#125;</span>&quot;</span>/config/armbian.key <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">chroot</span> <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span> /bin/bash -c <span class="string">&quot;cat armbian.key | apt-key add - &gt; /dev/null 2&gt;&amp;1&quot;</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">rm</span> <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/armbian.key</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This function retries Git operations to avoid failure in case remote is borked</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">If the git team needs to call a remote server, use this <span class="keyword">function</span>.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">improved_git()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	local realgit=$(command -v git)</span><br><span class="line">	local retries=3</span><br><span class="line">	local delay=10</span><br><span class="line">	local count=1</span><br><span class="line">	while [ $count -lt $retries ]; do</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">realgit <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span></span><br><span class="line">		if [[ $? -eq 0 || -f .git/index.lock ]]; then</span><br><span class="line">			retries=0</span><br><span class="line">			break</span><br><span class="line">		fi</span><br><span class="line">	let count=$count+1</span><br><span class="line">	sleep $delay</span><br><span class="line">	done</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clean_up_git ()</span><br><span class="line">&#123;</span><br><span class="line">	local target_dir=$1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Files that are not tracked by git and were added</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">when the patch was applied must be removed.</span></span><br><span class="line">	git -C $target_dir clean -qdf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Return the files that are tracked by git to the initial state.</span></span><br><span class="line">	git -C $target_dir checkout -qf HEAD</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">used : waiter_local_git arg1=<span class="string">&#x27;value&#x27;</span> arg2:<span class="string">&#x27;value&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">		 waiter_local_git \</span></span><br><span class="line"><span class="language-bash"><span class="comment">#			url=&#x27;https://github.com/megous/linux&#x27; \</span></span></span><br><span class="line"><span class="language-bash"><span class="comment">#			name=&#x27;megous&#x27; \</span></span></span><br><span class="line"><span class="language-bash"><span class="comment">#			dir=&#x27;linux-mainline/5.14&#x27; \</span></span></span><br><span class="line"><span class="language-bash"><span class="comment">#			branch=&#x27;orange-pi-5.14&#x27; \</span></span></span><br><span class="line"><span class="language-bash"><span class="comment">#			obj=&lt;tag|commit&gt; or tag:$tag ...</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">An optional parameter <span class="keyword">for</span> switching to a git object such as a tag, commit,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or a specific branch. The object must exist <span class="keyword">in</span> the <span class="built_in">local</span> repository.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This optional parameter takes precedence. If it is specified, <span class="keyword">then</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the commit state corresponding to the specified git object will be extracted</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">to the working directory. Otherwise, the commit corresponding to the top of</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the branch will be extracted.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The settings <span class="keyword">for</span> the kernel variables of the original kernel</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VAR_SHALLOW_ORIGINAL=var_origin_kernel must be <span class="keyword">in</span> the main script</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">before calling the <span class="keyword">function</span></span></span><br><span class="line">waiter_local_git ()</span><br><span class="line">&#123;</span><br><span class="line">	for arg in $@;do</span><br><span class="line"></span><br><span class="line">		case $arg in</span><br><span class="line">			url=*|https://*|git://*)	eval &quot;local url=$&#123;arg/url=/&#125;&quot;</span><br><span class="line">				;;</span><br><span class="line">			dir=*|/*/*/*)	eval &quot;local dir=$&#123;arg/dir=/&#125;&quot;</span><br><span class="line">				;;</span><br><span class="line">			*=*|*:*)	eval &quot;local $&#123;arg/:/=&#125;&quot;</span><br><span class="line">				;;</span><br><span class="line">		esac</span><br><span class="line"></span><br><span class="line">	done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Required variables cannot be empty.</span></span><br><span class="line">	for var in url name dir branch; do</span><br><span class="line">		[ &quot;$&#123;var#*=&#125;&quot; == &quot;&quot; ] &amp;&amp; exit_with_error &quot;Error in configuration&quot;</span><br><span class="line">	done</span><br><span class="line"></span><br><span class="line">	local reachability</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">The <span class="string">&#x27;offline&#x27;</span> variable must always be <span class="built_in">set</span> to <span class="string">&#x27;true&#x27;</span> or <span class="string">&#x27;false&#x27;</span></span></span><br><span class="line">	if [ &quot;$OFFLINE_WORK&quot; == &quot;yes&quot; ]; then</span><br><span class="line">		local offline=true</span><br><span class="line">	else</span><br><span class="line">		local offline=false</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	local work_dir=&quot;$(realpath $&#123;EXTER&#125;/cache/sources)/$dir&quot;</span><br><span class="line">	mkdir -p $work_dir</span><br><span class="line">	cd $work_dir || exit_with_error</span><br><span class="line"></span><br><span class="line">	display_alert &quot;Checking git sources&quot; &quot;$dir $url$name/$branch&quot; &quot;info&quot;</span><br><span class="line"></span><br><span class="line">	if [ &quot;$(git rev-parse --git-dir 2&gt;/dev/null)&quot; != &quot;.git&quot; ]; then</span><br><span class="line">		git init -q .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">Run <span class="keyword">in</span> the sub shell to avoid mixing environment variables.</span></span><br><span class="line">		if [ -n &quot;$VAR_SHALLOW_ORIGINAL&quot; ]; then</span><br><span class="line">			(</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">VAR_SHALLOW_ORIGINAL</span></span><br><span class="line"></span><br><span class="line">			display_alert &quot;Add original git sources&quot; &quot;$dir $name/$branch&quot; &quot;info&quot;</span><br><span class="line">			if [ &quot;$(improved_git ls-remote -h $url $branch | \</span><br><span class="line">				awk -F&#x27;/&#x27; &#x27;&#123;if (NR == 1) print $NF&#125;&#x27;)&quot; != &quot;$branch&quot; ];then</span><br><span class="line">				display_alert &quot;Bad $branch for $url in $VAR_SHALLOW_ORIGINAL&quot;</span><br><span class="line">				exit 177</span><br><span class="line">			fi</span><br><span class="line"></span><br><span class="line">			git remote add -t $branch $name $url</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">Handle an exception <span class="keyword">if</span> the initial tag is the top of the branch</span></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">As v5.16 == HEAD</span></span><br><span class="line">			if [ &quot;$&#123;start_tag&#125;.1&quot; == &quot;$(improved_git ls-remote -t $url $&#123;start_tag&#125;.1 | \</span><br><span class="line">					awk -F&#x27;/&#x27; &#x27;&#123; print $NF &#125;&#x27;)&quot; ]</span><br><span class="line">			then</span><br><span class="line">				improved_git fetch --shallow-exclude=$start_tag $name</span><br><span class="line">			else</span><br><span class="line">				improved_git fetch --depth 1 $name</span><br><span class="line">			fi</span><br><span class="line">			improved_git fetch --deepen=1 $name</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">For a shallow <span class="built_in">clone</span>, this works quickly and saves space.</span></span><br><span class="line">			git gc</span><br><span class="line">			)</span><br><span class="line"></span><br><span class="line">			[ &quot;$?&quot; == &quot;177&quot; ] &amp;&amp; exit</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	files_for_clean=&quot;$(git status -s | wc -l)&quot;</span><br><span class="line">	if [ &quot;$files_for_clean&quot; != &quot;0&quot; ];then</span><br><span class="line">		display_alert &quot; Cleaning .... &quot; &quot;$files_for_clean files&quot;</span><br><span class="line">		clean_up_git $work_dir</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [ &quot;$name&quot; != &quot;$(git remote show | grep $name)&quot; ];then</span><br><span class="line">		git remote add -t $branch $name $url</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if ! $offline; then</span><br><span class="line">		for t_name in $(git remote show);do</span><br><span class="line">			improved_git fetch $t_name</span><br><span class="line">		done</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">When switching, we use the concept of only <span class="string">&quot;detached branch&quot;</span>. Therefore,</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">we extract the <span class="built_in">hash</span> from the tag, the branch name, or from the <span class="built_in">hash</span> itself.</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">This serves as a check of the reachability of the extraction.</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">We <span class="keyword">do</span> not use variables that characterize the current state of the git,</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">such as `HEAD` and `FETCH_HEAD`.</span></span><br><span class="line">	reachability=false</span><br><span class="line">	for var in obj tag commit branch;do</span><br><span class="line">		eval pval=\$$var</span><br><span class="line"></span><br><span class="line">		if [ -n &quot;$pval&quot; ] &amp;&amp; [ &quot;$pval&quot; != *HEAD ]; then</span><br><span class="line">			case $var in</span><br><span class="line">				obj|tag|commit) obj=$pval ;;</span><br><span class="line">				branch) obj=$&#123;name&#125;/$branch ;;</span><br><span class="line">			esac</span><br><span class="line"></span><br><span class="line">			if  t_hash=$(git rev-parse $obj 2&gt;/dev/null);then</span><br><span class="line">				reachability=true</span><br><span class="line">				break</span><br><span class="line">			else</span><br><span class="line">				display_alert &quot;Variable $var=$obj unreachable for extraction&quot;</span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line">	done</span><br><span class="line"></span><br><span class="line">	if $reachability &amp;&amp; [ &quot;$t_hash&quot; != &quot;$(git rev-parse @ 2&gt;/dev/null)&quot; ];then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">Switch <span class="string">&quot;detached branch&quot;</span> as <span class="built_in">hash</span></span></span><br><span class="line">		display_alert &quot;Switch $obj = $t_hash&quot;</span><br><span class="line">		git checkout -qf $t_hash</span><br><span class="line">	else</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">the working directory corresponds to the target commit,</span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">nothing needs to be <span class="keyword">done</span></span></span><br><span class="line">		display_alert &quot;Up to date&quot;</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">fetch_from_repo &lt;url&gt; &lt;directory&gt; &lt;ref&gt; &lt;ref_subdir&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;url&gt;: remote repository URL</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;directory&gt;: <span class="built_in">local</span> directory; subdir <span class="keyword">for</span> branch/tag will be created</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;ref&gt;:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">	branch:name</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">	tag:name</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">	<span class="built_in">head</span>(*)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">	commit:<span class="built_in">hash</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># *: Implies ref_subdir=no</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># &lt;ref_subdir&gt;: &quot;yes&quot; to create subdirectory for tag or branch name</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">fetch_from_repo()</span></span><br><span class="line">&#123;</span><br><span class="line">	local url=$1</span><br><span class="line">	local dir=$2</span><br><span class="line">	local ref=$3</span><br><span class="line">	local ref_subdir=$4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Set GitHub mirror before anything <span class="keyword">else</span> touches <span class="variable">$url</span></span></span><br><span class="line">	url=$&#123;url//&#x27;https://github.com/&#x27;/$GITHUB_SOURCE&#x27;/&#x27;&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">The <span class="string">&#x27;offline&#x27;</span> variable must always be <span class="built_in">set</span> to <span class="string">&#x27;true&#x27;</span> or <span class="string">&#x27;false&#x27;</span></span></span><br><span class="line">	if [ &quot;$OFFLINE_WORK&quot; == &quot;yes&quot; ]; then</span><br><span class="line">		local offline=true</span><br><span class="line">	else</span><br><span class="line">		local offline=false</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	[[ -z $ref || ( $ref != tag:* &amp;&amp; $ref != branch:* &amp;&amp; $ref != head &amp;&amp; $ref != commit:* ) ]] &amp;&amp; exit_with_error &quot;Error in configuration&quot;</span><br><span class="line">	local ref_type=$&#123;ref%%:*&#125;</span><br><span class="line">	if [[ $ref_type == head ]]; then</span><br><span class="line">		local ref_name=HEAD</span><br><span class="line">	else</span><br><span class="line">		local ref_name=$&#123;ref##*:&#125;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	display_alert &quot;Checking git sources&quot; &quot;$dir $ref_name&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">get default remote branch name without cloning</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="built_in">local</span> ref_name=$(git ls-remote --symref <span class="variable">$url</span> HEAD | grep -o <span class="string">&#x27;refs/heads/\S*&#x27;</span> | sed <span class="string">&#x27;s%refs/heads/%%&#x27;</span>)</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="keyword">for</span> git:// protocol comparing hashes of <span class="string">&quot;git ls-remote -h <span class="variable">$url</span>&quot;</span> and <span class="string">&quot;git ls-remote --symref <span class="variable">$url</span> HEAD&quot;</span> is needed</span></span><br><span class="line"></span><br><span class="line">	if [[ $ref_subdir == yes ]]; then</span><br><span class="line">		local workdir=$dir/$ref_name</span><br><span class="line">	else</span><br><span class="line">		local workdir=$dir</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	mkdir -p &quot;$&#123;workdir&#125;&quot; 2&gt;/dev/null || \</span><br><span class="line">		exit_with_error &quot;No path or no write permission&quot; &quot;$&#123;workdir&#125;&quot;</span><br><span class="line"></span><br><span class="line">	cd &quot;$&#123;workdir&#125;&quot; || exit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">check <span class="keyword">if</span> existing remote URL <span class="keyword">for</span> the repo or branch does not match current one</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">may not be supported by older git versions</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"> Check the folder as a git repository.</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"> Then the target URL matches the <span class="built_in">local</span> URL.</span></span><br><span class="line"></span><br><span class="line">	if [[ &quot;$(git rev-parse --git-dir 2&gt;/dev/null)&quot; == &quot;.git&quot; &amp;&amp; \</span><br><span class="line">		  &quot;$url&quot; != *&quot;$(git remote get-url origin | sed &#x27;s/^.*@//&#x27; | sed &#x27;s/^.*\/\///&#x27; 2&gt;/dev/null)&quot; ]]; then</span><br><span class="line">		display_alert &quot;Remote URL does not match, removing existing local copy&quot;</span><br><span class="line">		rm -rf .git ./*</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$(git rev-parse --git-dir 2&gt;/dev/null)&quot; != &quot;.git&quot; ]]; then</span><br><span class="line">		display_alert &quot;Creating local copy&quot;</span><br><span class="line">		git init -q .</span><br><span class="line">		git remote add origin &quot;$&#123;url&#125;&quot;</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">Here you need to upload from a new address</span></span><br><span class="line">		offline=false</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	local changed=false</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">when we work offline we simply <span class="built_in">return</span> the sources to their original state</span></span><br><span class="line">	if ! $offline; then</span><br><span class="line">		local local_hash</span><br><span class="line">		local_hash=$(git rev-parse @ 2&gt;/dev/null)</span><br><span class="line"></span><br><span class="line">		case $ref_type in</span><br><span class="line">			branch)</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">TODO: grep refs/heads/<span class="variable">$name</span></span></span><br><span class="line">			local remote_hash</span><br><span class="line">			remote_hash=$(improved_git ls-remote -h &quot;$&#123;url&#125;&quot; &quot;$ref_name&quot; | head -1 | cut -f1)</span><br><span class="line">			[[ -z $local_hash || &quot;$&#123;local_hash&#125;&quot; != &quot;$&#123;remote_hash&#125;&quot; ]] &amp;&amp; changed=true</span><br><span class="line">			;;</span><br><span class="line"></span><br><span class="line">			tag)</span><br><span class="line">			local remote_hash</span><br><span class="line">			remote_hash=$(improved_git ls-remote -t &quot;$&#123;url&#125;&quot; &quot;$ref_name&quot; | cut -f1)</span><br><span class="line">			if [[ -z $local_hash || &quot;$&#123;local_hash&#125;&quot; != &quot;$&#123;remote_hash&#125;&quot; ]]; then</span><br><span class="line">				remote_hash=$(improved_git ls-remote -t &quot;$&#123;url&#125;&quot; &quot;$ref_name^&#123;&#125;&quot; | cut -f1)</span><br><span class="line">				[[ -z $remote_hash || &quot;$&#123;local_hash&#125;&quot; != &quot;$&#123;remote_hash&#125;&quot; ]] &amp;&amp; changed=true</span><br><span class="line">			fi</span><br><span class="line">			;;</span><br><span class="line"></span><br><span class="line">			head)</span><br><span class="line">			local remote_hash</span><br><span class="line">			remote_hash=$(improved_git ls-remote &quot;$&#123;url&#125;&quot; HEAD | cut -f1)</span><br><span class="line">			[[ -z $local_hash || &quot;$&#123;local_hash&#125;&quot; != &quot;$&#123;remote_hash&#125;&quot; ]] &amp;&amp; changed=true</span><br><span class="line">			;;</span><br><span class="line"></span><br><span class="line">			commit)</span><br><span class="line">			[[ -z $local_hash || $local_hash == &quot;@&quot; ]] &amp;&amp; changed=true</span><br><span class="line">			;;</span><br><span class="line">		esac</span><br><span class="line"></span><br><span class="line">	fi # offline</span><br><span class="line"></span><br><span class="line">	if [[ $changed == true ]]; then</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">remote was updated, fetch and check out updates</span></span><br><span class="line">		display_alert &quot;Fetching updates&quot;</span><br><span class="line">		case $ref_type in</span><br><span class="line">			branch) improved_git fetch --depth 200 origin &quot;$&#123;ref_name&#125;&quot; ;;</span><br><span class="line">			tag) improved_git fetch --depth 200 origin tags/&quot;$&#123;ref_name&#125;&quot; ;;</span><br><span class="line">			head) improved_git fetch --depth 200 origin HEAD ;;</span><br><span class="line">		esac</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">commit <span class="built_in">type</span> needs support <span class="keyword">for</span> older git servers that doesn<span class="string">&#x27;t support fetching id directly</span></span></span><br><span class="line">		if [[ $ref_type == commit ]]; then</span><br><span class="line"></span><br><span class="line">			improved_git fetch --depth 200 origin &quot;$&#123;ref_name&#125;&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">cover old type</span></span></span><br><span class="line">			if [[ $? -ne 0 ]]; then</span><br><span class="line"></span><br><span class="line">				display_alert &quot;Commit checkout not supported on this repository. Doing full clone.&quot; &quot;&quot; &quot;wrn&quot;</span><br><span class="line">				improved_git pull</span><br><span class="line">				git checkout -fq &quot;$&#123;ref_name&#125;&quot;</span><br><span class="line">				display_alert &quot;Checkout out to&quot; &quot;$(git --no-pager log -2 --pretty=format:&quot;$ad%s [%an]&quot; | head -1)&quot; &quot;info&quot;</span><br><span class="line"></span><br><span class="line">			else</span><br><span class="line"></span><br><span class="line">				display_alert &quot;Checking out&quot;</span><br><span class="line">				git checkout -f -q FETCH_HEAD</span><br><span class="line">				git clean -qdf</span><br><span class="line"></span><br><span class="line">			fi</span><br><span class="line">		else</span><br><span class="line"></span><br><span class="line">			display_alert &quot;Checking out&quot;</span><br><span class="line">			git checkout -f -q FETCH_HEAD</span><br><span class="line">			git clean -qdf</span><br><span class="line"></span><br><span class="line">		fi</span><br><span class="line">	elif [[ -n $(git status -uno --porcelain --ignore-submodules=all) ]]; then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">working directory is not clean</span></span></span><br><span class="line">		display_alert &quot; Cleaning .... &quot; &quot;$(git status -s | wc -l) files&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">Return the files that are tracked by git to the initial state.</span></span></span><br><span class="line">		git checkout -f -q HEAD</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">Files that are not tracked by git and were added</span></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">when the patch was applied must be removed.</span></span></span><br><span class="line">		git clean -qdf</span><br><span class="line">	else</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">working directory is clean, nothing to do</span></span></span><br><span class="line">		display_alert &quot;Up to date&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ -f .gitmodules ]]; then</span><br><span class="line">		display_alert &quot;Updating submodules&quot; &quot;&quot; &quot;ext&quot;</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">FML: http://stackoverflow.com/a/17692710</span></span></span><br><span class="line">		for i in $(git config -f .gitmodules --get-regexp path | awk &#x27;&#123; print $2 &#125;&#x27;); do</span><br><span class="line">			cd &quot;$&#123;workdir&#125;&quot; || exit</span><br><span class="line">			local surl sref</span><br><span class="line">			surl=$(git config -f .gitmodules --get &quot;submodule.$i.url&quot;)</span><br><span class="line">			sref=$(git config -f .gitmodules --get &quot;submodule.$i.branch&quot;)</span><br><span class="line">			if [[ -n $sref ]]; then</span><br><span class="line">				sref=&quot;branch:$sref&quot;</span><br><span class="line">			else</span><br><span class="line">				sref=&quot;head&quot;</span><br><span class="line">			fi</span><br><span class="line">			fetch_from_repo &quot;$surl&quot; &quot;$workdir/$i&quot; &quot;$sref&quot;</span><br><span class="line">		done</span><br><span class="line">	fi</span><br><span class="line">&#125; #############################################################################</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">--------------------------------------------------------------------------------------------------------------------------------</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Let&#x27;</span>s have unique way of displaying alerts</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line">display_alert()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="built_in">log</span> <span class="keyword">function</span> parameters to install.log</span></span><br><span class="line">	[[ -n &quot;$&#123;DEST&#125;&quot; ]] &amp;&amp; echo &quot;Displaying message: $@&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/output.log</span><br><span class="line"></span><br><span class="line">	local tmp=&quot;&quot;</span><br><span class="line">	[[ -n $2 ]] &amp;&amp; tmp=&quot;[\e[0;33m $2 \x1B[0m]&quot;</span><br><span class="line"></span><br><span class="line">	case $3 in</span><br><span class="line">		err)</span><br><span class="line">		echo -e &quot;[\e[0;31m error \x1B[0m] $1 $tmp&quot;</span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">		wrn)</span><br><span class="line">		echo -e &quot;[\e[0;35m warn \x1B[0m] $1 $tmp&quot;</span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">		ext)</span><br><span class="line">		echo -e &quot;[\e[0;32m o.k. \x1B[0m] \e[1;32m$1\x1B[0m $tmp&quot;</span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">		info)</span><br><span class="line">		echo -e &quot;[\e[0;32m o.k. \x1B[0m] $1 $tmp&quot;</span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">		*)</span><br><span class="line">		echo -e &quot;[\e[0;32m .... \x1B[0m] $1 $tmp&quot;</span><br><span class="line">		;;</span><br><span class="line">	esac</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">fingerprint_image &lt;out_txt_file&gt; [image_filename]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Saving build summary to the image</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line">fingerprint_image()</span><br><span class="line">&#123;</span><br><span class="line">	cat &lt;&lt;-EOF &gt; &quot;$&#123;1&#125;&quot;</span><br><span class="line">	--------------------------------------------------------------------------------</span><br><span class="line">	Title:			$&#123;VENDOR&#125; $REVISION $&#123;BOARD^&#125; $DISTRIBUTION $RELEASE $BRANCH</span><br><span class="line">	Kernel:			Linux $VER</span><br><span class="line">	Build date:		$(date +&#x27;%d.%m.%Y&#x27;)</span><br><span class="line">	Maintainer:		$MAINTAINER &lt;$MAINTAINERMAIL&gt;</span><br><span class="line">	Sources: 		https://github.com/orangepi-xunlong/orangepi-build</span><br><span class="line">	Support: 		http://www.orangepi.org/</span><br><span class="line">	EOF</span><br><span class="line"></span><br><span class="line">	if [ -n &quot;$2&quot; ]; then</span><br><span class="line">		cat &lt;&lt;-EOF &gt;&gt; &quot;$&#123;1&#125;&quot;</span><br><span class="line">		--------------------------------------------------------------------------------</span><br><span class="line">		Partitioning configuration: $IMAGE_PARTITION_TABLE offset: $OFFSET</span><br><span class="line">		Boot partition type: $&#123;BOOTFS_TYPE:-(none)&#125; $&#123;BOOTSIZE:+&quot;($&#123;BOOTSIZE&#125; MB)&quot;&#125;</span><br><span class="line">		Root partition type: $ROOTFS_TYPE $&#123;FIXED_IMAGE_SIZE:+&quot;($&#123;FIXED_IMAGE_SIZE&#125; MB)&quot;&#125;</span><br><span class="line"></span><br><span class="line">		CPU configuration: $CPUMIN - $CPUMAX with $GOVERNOR</span><br><span class="line">		--------------------------------------------------------------------------------</span><br><span class="line">		Verify GPG signature:</span><br><span class="line">		gpg --verify $2.img.asc</span><br><span class="line"></span><br><span class="line">		Verify image file integrity:</span><br><span class="line">		sha256sum --check $2.img.sha</span><br><span class="line"></span><br><span class="line">		Prepare SD card (four methodes):</span><br><span class="line">		zcat $2.img.gz | pv | dd of=/dev/sdX bs=1M</span><br><span class="line">		dd if=$2.img of=/dev/sdX bs=1M</span><br><span class="line">		balena-etcher $2.img.gz -d /dev/sdX</span><br><span class="line">		balena-etcher $2.img -d /dev/sdX</span><br><span class="line">		EOF</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	cat &lt;&lt;-EOF &gt;&gt; &quot;$&#123;1&#125;&quot;</span><br><span class="line">	--------------------------------------------------------------------------------</span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">(<span class="built_in">cat</span> <span class="string">&quot;<span class="variable">$&#123;SRC&#125;</span>&quot;</span>/LICENSE)</span></span><br><span class="line">	--------------------------------------------------------------------------------</span><br><span class="line">	EOF</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Create kernel boot logo from packages/blobs/splash/logo.png and packages/blobs/splash/spinner.gif (animated)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">and place to the file /lib/firmware/bootsplash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line">function boot_logo ()</span><br><span class="line">&#123;</span><br><span class="line">display_alert &quot;Building kernel splash logo&quot; &quot;$RELEASE&quot; &quot;info&quot;</span><br><span class="line"></span><br><span class="line">	LOGO=$&#123;EXTER&#125;/packages/blobs/splash/logo.png</span><br><span class="line">	LOGO_WIDTH=$(identify $LOGO | cut -d &quot; &quot; -f 3 | cut -d x -f 1)</span><br><span class="line">	LOGO_HEIGHT=$(identify $LOGO | cut -d &quot; &quot; -f 3 | cut -d x -f 2)</span><br><span class="line">	THROBBER=$&#123;EXTER&#125;/packages/blobs/splash/spinner.gif</span><br><span class="line">	THROBBER_WIDTH=$(identify $THROBBER | head -1 | cut -d &quot; &quot; -f 3 | cut -d x -f 1)</span><br><span class="line">	THROBBER_HEIGHT=$(identify $THROBBER | head -1 | cut -d &quot; &quot; -f 3 | cut -d x -f 2)</span><br><span class="line">	convert -alpha remove -background &quot;#000000&quot;	$LOGO &quot;$&#123;SDCARD&#125;&quot;/tmp/logo.rgb</span><br><span class="line">	convert -alpha remove -background &quot;#000000&quot; $THROBBER &quot;$&#123;SDCARD&#125;&quot;/tmp/throbber%02d.rgb</span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">&#123;EXTER&#125;/packages/blobs/splash/bootsplash-packer \</span></span><br><span class="line"><span class="language-bash">	--bg_red 0x00 \</span></span><br><span class="line"><span class="language-bash">	--bg_green 0x00 \</span></span><br><span class="line"><span class="language-bash">	--bg_blue 0x00 \</span></span><br><span class="line"><span class="language-bash">	--frame_ms 48 \</span></span><br><span class="line"><span class="language-bash">	--picture \</span></span><br><span class="line"><span class="language-bash">	--pic_width <span class="variable">$LOGO_WIDTH</span> \</span></span><br><span class="line"><span class="language-bash">	--pic_height <span class="variable">$LOGO_HEIGHT</span> \</span></span><br><span class="line"><span class="language-bash">	--pic_position 0 \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/logo.rgb \</span></span><br><span class="line"><span class="language-bash">	--picture \</span></span><br><span class="line"><span class="language-bash">	--pic_width <span class="variable">$THROBBER_WIDTH</span> \</span></span><br><span class="line"><span class="language-bash">	--pic_height <span class="variable">$THROBBER_HEIGHT</span> \</span></span><br><span class="line"><span class="language-bash">	--pic_position 0x05 \</span></span><br><span class="line"><span class="language-bash">	--pic_position_offset 200 \</span></span><br><span class="line"><span class="language-bash">	--pic_anim_type 1 \</span></span><br><span class="line"><span class="language-bash">	--pic_anim_loop 0 \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber00.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber01.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber02.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber03.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber04.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber05.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber06.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber07.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber08.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber09.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber10.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber11.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber12.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber13.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber14.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber15.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber16.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber17.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber18.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber19.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber20.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber21.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber22.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber23.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber24.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber25.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber26.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber27.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber28.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber29.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber30.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber31.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber32.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber33.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber34.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber35.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber36.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber37.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber38.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber39.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber40.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber41.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber42.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber43.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber44.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber45.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber46.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber47.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber48.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber49.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber50.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber51.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber52.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber53.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber54.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber55.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber56.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber57.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber58.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber59.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber60.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber61.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber62.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber63.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber64.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber65.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber66.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber67.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber68.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber69.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber70.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber71.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber72.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber73.rgb \</span></span><br><span class="line"><span class="language-bash">	--blob <span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/tmp/throbber74.rgb \</span></span><br><span class="line"><span class="language-bash">	<span class="string">&quot;<span class="variable">$&#123;SDCARD&#125;</span>&quot;</span>/lib/firmware/bootsplash.orangepi &gt;/dev/null 2&gt;&amp;1</span></span><br><span class="line">	if [[ $BOOT_LOGO == yes || $BOOT_LOGO == desktop &amp;&amp; $BUILD_DESKTOP == yes &amp;&amp; $RELEASE != buster ]]; then</span><br><span class="line">		[[ -f &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt ]] &amp;&amp;	grep -q &#x27;^bootlogo&#x27; &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt &amp;&amp; \</span><br><span class="line">		sed -i &#x27;s/^bootlogo.*/bootlogo=true/&#x27; &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt || echo &#x27;bootlogo=true&#x27; &gt;&gt; &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt</span><br><span class="line">		[[ -f &quot;$&#123;SDCARD&#125;&quot;/boot/boot.ini ]] &amp;&amp;	sed -i &#x27;s/^setenv bootlogo.*/setenv bootlogo &quot;true&quot;/&#x27; &quot;$&#123;SDCARD&#125;&quot;/boot/boot.ini</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="built_in">enable</span> additional services</span></span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl --no-reload enable bootsplash-ask-password-console.path &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl --no-reload enable bootsplash-hide-when-booted.service &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl --no-reload enable bootsplash-show-on-shutdown.service &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DISTRIBUTIONS_DESC_DIR=&quot;external/config/distributions&quot;</span><br><span class="line"></span><br><span class="line">function distro_menu ()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">create a <span class="keyword">select</span> menu <span class="keyword">for</span> choosing a distribution based EXPERT status</span></span><br><span class="line"></span><br><span class="line">	local distrib_dir=&quot;$&#123;1&#125;&quot;</span><br><span class="line"></span><br><span class="line">	if [[ -d &quot;$&#123;distrib_dir&#125;&quot; &amp;&amp; -f &quot;$&#123;distrib_dir&#125;/support&quot; ]]; then</span><br><span class="line">		local support_level=&quot;$(cat &quot;$&#123;distrib_dir&#125;/support&quot;)&quot;</span><br><span class="line">		if [[ &quot;$&#123;support_level&#125;&quot; != &quot;supported&quot; &amp;&amp; $EXPERT != &quot;yes&quot; ]]; then</span><br><span class="line">			:</span><br><span class="line">		else</span><br><span class="line">			local distro_codename=&quot;$(basename &quot;$&#123;distrib_dir&#125;&quot;)&quot;</span><br><span class="line">			local distro_fullname=&quot;$(cat &quot;$&#123;distrib_dir&#125;/name&quot;)&quot;</span><br><span class="line">			local expert_infos=&quot;&quot;</span><br><span class="line">			[[ $EXPERT == &quot;yes&quot; ]] &amp;&amp; expert_infos=&quot;($&#123;support_level&#125;)&quot;</span><br><span class="line"></span><br><span class="line">			if [[ &quot;$&#123;BRANCH&#125;&quot; == &quot;legacy&quot; ]]; then</span><br><span class="line">				DISTRIB_TYPE=&quot;$&#123;DISTRIB_TYPE_LEGACY&#125;&quot;</span><br><span class="line">				[[ -z &quot;$&#123;DISTRIB_TYPE_LEGACY&#125;&quot; ]] &amp;&amp; DISTRIB_TYPE=&quot;buster bionic focal&quot;</span><br><span class="line">			elif [[ &quot;$&#123;BRANCH&#125;&quot; == &quot;current&quot; ]]; then</span><br><span class="line">				DISTRIB_TYPE=&quot;$&#123;DISTRIB_TYPE_CURRENT&#125;&quot;</span><br><span class="line">				[[ -z &quot;$&#123;DISTRIB_TYPE_CURRENT&#125;&quot; ]] &amp;&amp; DISTRIB_TYPE=&quot;bullseye bookworm focal jammy&quot;</span><br><span class="line">			elif [[ &quot;$&#123;BRANCH&#125;&quot; == &quot;next&quot; ]]; then</span><br><span class="line">				if [[ -n &quot;$&#123;DISTRIB_TYPE_NEXT&#125;&quot; ]]; then</span><br><span class="line">					DISTRIB_TYPE=&quot;$&#123;DISTRIB_TYPE_NEXT&#125;&quot;</span><br><span class="line">				else</span><br><span class="line">					DISTRIB_TYPE=&quot;$&#123;DISTRIB_TYPE_CURRENT&#125;&quot;</span><br><span class="line">					[[ -z &quot;$&#123;DISTRIB_TYPE_CURRENT&#125;&quot; ]] &amp;&amp; DISTRIB_TYPE=&quot;bullseye bookworm focal jammy&quot;</span><br><span class="line">				fi</span><br><span class="line">			fi</span><br><span class="line"></span><br><span class="line">			if [[ &quot;$&#123;DISTRIB_TYPE&#125;&quot; =~ &quot;$&#123;distro_codename&#125;&quot; ]]; then</span><br><span class="line">				options+=(&quot;$&#123;distro_codename&#125;&quot; &quot;$&#123;distro_fullname&#125; $&#123;expert_infos&#125;&quot;)</span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function distros_options() &#123;</span><br><span class="line">	for distrib_dir in &quot;$&#123;DISTRIBUTIONS_DESC_DIR&#125;/&quot;*; do</span><br><span class="line">		distro_menu &quot;$&#123;distrib_dir&#125;&quot;</span><br><span class="line">	done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function set_distribution_status() &#123;</span><br><span class="line"></span><br><span class="line">	local distro_support_desc_filepath=&quot;$&#123;SRC&#125;/$&#123;DISTRIBUTIONS_DESC_DIR&#125;/$&#123;RELEASE&#125;/support&quot;</span><br><span class="line">	if [[ ! -f &quot;$&#123;distro_support_desc_filepath&#125;&quot; ]]; then</span><br><span class="line">		exit_with_error &quot;Distribution $&#123;distribution_name&#125; does not exist&quot;</span><br><span class="line">	else</span><br><span class="line">		DISTRIBUTION_STATUS=&quot;$(cat &quot;$&#123;distro_support_desc_filepath&#125;&quot;)&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	[[ &quot;$&#123;DISTRIBUTION_STATUS&#125;&quot; != &quot;supported&quot; ]] &amp;&amp; [[ &quot;$&#123;EXPERT&#125;&quot; != &quot;yes&quot; ]] &amp;&amp; exit_with_error &quot;Orange Pi $&#123;RELEASE&#125; is unsupported and, therefore, only available to experts (EXPERT=yes)&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">adding_packages()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">add deb files to repository <span class="keyword">if</span> they are not already there</span></span><br><span class="line"></span><br><span class="line">	display_alert &quot;Checking and adding to repository $release&quot; &quot;$3&quot; &quot;ext&quot;</span><br><span class="line">	for f in &quot;$&#123;DEB_STORAGE&#125;$&#123;2&#125;&quot;/*.deb</span><br><span class="line">	do</span><br><span class="line">		local name version arch</span><br><span class="line">		name=$(dpkg-deb -I &quot;$&#123;f&#125;&quot; | grep Package | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">		version=$(dpkg-deb -I &quot;$&#123;f&#125;&quot; | grep Version | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">		arch=$(dpkg-deb -I &quot;$&#123;f&#125;&quot; | grep Architecture | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">add <span class="keyword">if</span> not already there</span></span><br><span class="line">		aptly repo search -architectures=&quot;$&#123;arch&#125;&quot; -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;1&#125;&quot; &#x27;Name (% &#x27;$&#123;name&#125;&#x27;), $Version (=&#x27;$&#123;version&#125;&#x27;), $Architecture (=&#x27;$&#123;arch&#125;&#x27;)&#x27; &amp;&gt;/dev/null</span><br><span class="line">		if [[ $? -ne 0 ]]; then</span><br><span class="line">			display_alert &quot;Adding $&#123;1&#125;&quot; &quot;$name&quot; &quot;info&quot;</span><br><span class="line">			aptly repo add -force-replace=true -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;1&#125;&quot; &quot;$&#123;f&#125;&quot; &amp;&gt;/dev/null</span><br><span class="line">		fi</span><br><span class="line">	done</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">addtorepo()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">create repository</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">parameter <span class="string">&quot;remove&quot;</span> dumps all and creates new</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">parameter <span class="string">&quot;delete&quot;</span> remove incoming directory <span class="keyword">if</span> publishing is succesful</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">function</span>: cycle trough distributions</span></span><br><span class="line"></span><br><span class="line">	local distributions=(&quot;stretch&quot; &quot;bionic&quot; &quot;buster&quot; &quot;bullseye&quot; &quot;bookworm&quot; &quot;focal&quot; &quot;hirsute&quot; &quot;jammy&quot; &quot;sid&quot;)</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">local</span> distributions=($(grep -rw config/distributions/*/ -e <span class="string">&#x27;supported&#x27;</span> | <span class="built_in">cut</span> -d<span class="string">&quot;/&quot;</span> -f3))</span></span><br><span class="line">	local errors=0</span><br><span class="line"></span><br><span class="line">	for release in &quot;$&#123;distributions[@]&#125;&quot;; do</span><br><span class="line"></span><br><span class="line">		local forceoverwrite=&quot;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="built_in">let</span><span class="string">&#x27;s drop from publish if exits</span></span></span><br><span class="line">		if [[ -n $(aptly publish list -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; -raw | awk &#x27;&#123;print $(NF)&#125;&#x27; | grep &quot;$&#123;release&#125;&quot;) ]]; then</span><br><span class="line">			aptly publish drop -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;release&#125;&quot; &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">create local repository if not exist</span></span></span><br><span class="line">		if [[ -z $(aptly repo list -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; -raw | awk &#x27;&#123;print $(NF)&#125;&#x27; | grep &quot;$&#123;release&#125;&quot;) ]]; then</span><br><span class="line">			display_alert &quot;Creating section&quot; &quot;main&quot; &quot;info&quot;</span><br><span class="line">			aptly repo create -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; -distribution=&quot;$&#123;release&#125;&quot; -component=&quot;main&quot; \</span><br><span class="line">			-comment=&quot;Armbian main repository&quot; &quot;$&#123;release&#125;&quot; &gt;/dev/null</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		if [[ -z $(aptly repo list -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; -raw | awk &#x27;&#123;print $(NF)&#125;&#x27; | grep &quot;^utils&quot;) ]]; then</span><br><span class="line">			aptly repo create -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; -distribution=&quot;$&#123;release&#125;&quot; -component=&quot;utils&quot; \</span><br><span class="line">			-comment=&quot;Armbian utilities (backwards compatibility)&quot; utils &gt;/dev/null</span><br><span class="line">		fi</span><br><span class="line">		if [[ -z $(aptly repo list -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; -raw | awk &#x27;&#123;print $(NF)&#125;&#x27; | grep &quot;$&#123;release&#125;-utils&quot;) ]]; then</span><br><span class="line">			aptly repo create -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; -distribution=&quot;$&#123;release&#125;&quot; -component=&quot;$&#123;release&#125;-utils&quot; \</span><br><span class="line">			-comment=&quot;Armbian $&#123;release&#125; utilities&quot; &quot;$&#123;release&#125;-utils&quot; &gt;/dev/null</span><br><span class="line">		fi</span><br><span class="line">		if [[ -z $(aptly repo list -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; -raw | awk &#x27;&#123;print $(NF)&#125;&#x27; | grep &quot;$&#123;release&#125;-desktop&quot;) ]]; then</span><br><span class="line">			aptly repo create -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; -distribution=&quot;$&#123;release&#125;&quot; -component=&quot;$&#123;release&#125;-desktop&quot; \</span><br><span class="line">			-comment=&quot;Armbian $&#123;release&#125; desktop&quot; &quot;$&#123;release&#125;-desktop&quot; &gt;/dev/null</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">adding main</span></span></span><br><span class="line">		if find &quot;$&#123;DEB_STORAGE&#125;&quot;/ -maxdepth 1 -type f -name &quot;*.deb&quot; 2&gt;/dev/null | grep -q .; then</span><br><span class="line">			adding_packages &quot;$release&quot; &quot;&quot; &quot;main&quot;</span><br><span class="line">		else</span><br><span class="line">			aptly repo add -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;release&#125;&quot; &quot;$&#123;SCRIPTPATH&#125;config/templates/example.deb&quot; &gt;/dev/null</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		local COMPONENTS=&quot;main&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">adding main distribution packages</span></span></span><br><span class="line">		if find &quot;$&#123;DEB_STORAGE&#125;/$&#123;release&#125;&quot; -maxdepth 1 -type f -name &quot;*.deb&quot; 2&gt;/dev/null | grep -q .; then</span><br><span class="line">			adding_packages &quot;$&#123;release&#125;-utils&quot; &quot;/$&#123;release&#125;&quot; &quot;release packages&quot;</span><br><span class="line">		else</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">workaround - add dummy package to not trigger error</span></span></span><br><span class="line">			aptly repo add -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;release&#125;&quot; &quot;$&#123;SCRIPTPATH&#125;config/templates/example.deb&quot; &gt;/dev/null</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">adding release-specific utils</span></span></span><br><span class="line">		if find &quot;$&#123;DEB_STORAGE&#125;/extra/$&#123;release&#125;-utils&quot; -maxdepth 1 -type f -name &quot;*.deb&quot; 2&gt;/dev/null | grep -q .; then</span><br><span class="line">			adding_packages &quot;$&#123;release&#125;-utils&quot; &quot;/extra/$&#123;release&#125;-utils&quot; &quot;release utils&quot;</span><br><span class="line">		else</span><br><span class="line">			aptly repo add -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;release&#125;-utils&quot; &quot;$&#123;SCRIPTPATH&#125;config/templates/example.deb&quot; &gt;/dev/null</span><br><span class="line">		fi</span><br><span class="line">		COMPONENTS=&quot;$&#123;COMPONENTS&#125; $&#123;release&#125;-utils&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">adding desktop</span></span></span><br><span class="line">		if find &quot;$&#123;DEB_STORAGE&#125;/extra/$&#123;release&#125;-desktop&quot; -maxdepth 1 -type f -name &quot;*.deb&quot; 2&gt;/dev/null | grep -q .; then</span><br><span class="line">			adding_packages &quot;$&#123;release&#125;-desktop&quot; &quot;/extra/$&#123;release&#125;-desktop&quot; &quot;desktop&quot;</span><br><span class="line">		else</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">workaround - add dummy package to not trigger error</span></span></span><br><span class="line">			aptly repo add -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;release&#125;-desktop&quot; &quot;$&#123;SCRIPTPATH&#125;config/templates/example.deb&quot; &gt;/dev/null</span><br><span class="line">		fi</span><br><span class="line">		COMPONENTS=&quot;$&#123;COMPONENTS&#125; $&#123;release&#125;-desktop&quot;</span><br><span class="line"></span><br><span class="line">		local mainnum utilnum desknum</span><br><span class="line">		mainnum=$(aptly repo show -with-packages -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;release&#125;&quot; | grep &quot;Number of packages&quot; | awk &#x27;&#123;print $NF&#125;&#x27;)</span><br><span class="line">		utilnum=$(aptly repo show -with-packages -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;release&#125;-desktop&quot; | grep &quot;Number of packages&quot; | awk &#x27;&#123;print $NF&#125;&#x27;)</span><br><span class="line">		desknum=$(aptly repo show -with-packages -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;release&#125;-utils&quot; | grep &quot;Number of packages&quot; | awk &#x27;&#123;print $NF&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">		if [ $mainnum -gt 0 ] &amp;&amp; [ $utilnum -gt 0 ] &amp;&amp; [ $desknum -gt 0 ]; then</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">publish</span></span></span><br><span class="line">			aptly publish \</span><br><span class="line">			-acquire-by-hash \</span><br><span class="line">			-passphrase=&quot;$&#123;GPG_PASS&#125;&quot; \</span><br><span class="line">			-origin=&quot;Armbian&quot; \</span><br><span class="line">			-label=&quot;Armbian&quot; \</span><br><span class="line">			-config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; \</span><br><span class="line">			-component=&quot;$&#123;COMPONENTS// /,&#125;&quot; \</span><br><span class="line">			-distribution=&quot;$&#123;release&#125;&quot; repo &quot;$&#123;release&#125;&quot; $&#123;COMPONENTS//main/&#125; &gt;/dev/null</span><br><span class="line"></span><br><span class="line">			if [[ $? -ne 0 ]]; then</span><br><span class="line">				display_alert &quot;Publishing failed&quot; &quot;$&#123;release&#125;&quot; &quot;err&quot;</span><br><span class="line">				errors=$((errors+1))</span><br><span class="line">				exit 0</span><br><span class="line">			fi</span><br><span class="line">		else</span><br><span class="line">			errors=$((errors+1))</span><br><span class="line">			local err_txt=&quot;: All components must be present: main, utils and desktop for first build&quot;</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">	done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">cleanup</span></span></span><br><span class="line">	display_alert &quot;Cleaning repository&quot; &quot;$&#123;DEB_STORAGE&#125;&quot; &quot;info&quot;</span><br><span class="line">	aptly db cleanup -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">display what we have</span></span></span><br><span class="line">	echo &quot;&quot;</span><br><span class="line">	display_alert &quot;List of local repos&quot; &quot;local&quot; &quot;info&quot;</span><br><span class="line">	(aptly repo list -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot;) | grep -E packages</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">remove debs if no errors found</span></span></span><br><span class="line">	if [[ $errors -eq 0 ]]; then</span><br><span class="line">		if [[ &quot;$2&quot; == &quot;delete&quot; ]]; then</span><br><span class="line">			display_alert &quot;Purging incoming debs&quot; &quot;all&quot; &quot;ext&quot;</span><br><span class="line">			find &quot;$&#123;DEB_STORAGE&#125;&quot; -name &quot;*.deb&quot; -type f -delete</span><br><span class="line">		fi</span><br><span class="line">	else</span><br><span class="line">		display_alert &quot;There were some problems $err_txt&quot; &quot;leaving incoming directory intact&quot; &quot;err&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">repo-manipulate()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">repository manipulation</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;show&quot; displays packages in each repository</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;server&quot; serve repository - useful for local diagnostics</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;unique&quot; manually select which package should be removed from all repositories</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;update&quot; search for new files in output/debs* to add them to repository</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;purge&quot; leave only last 5 versions</span></span></span><br><span class="line"></span><br><span class="line">	local DISTROS=(&quot;stretch&quot; &quot;bionic&quot; &quot;buster&quot; &quot;bullseye&quot; &quot;bookworm&quot; &quot;focal&quot; &quot;hirsute&quot; &quot;jammy&quot; &quot;sid&quot;)</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">local DISTROS=($(grep -rw config/distributions/*/ -e &#x27;</span>supported<span class="string">&#x27; | cut -d&quot;/&quot; -f3))</span></span></span><br><span class="line"></span><br><span class="line">	case $@ in</span><br><span class="line"></span><br><span class="line">		serve)</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">display repository content</span></span></span><br><span class="line">			display_alert &quot;Serving content&quot; &quot;common utils&quot; &quot;ext&quot;</span><br><span class="line">			aptly serve -listen=$(ip -f inet addr | grep -Po &#x27;inet \K[\d.]+&#x27; | grep -v 127.0.0.1 | head -1):80 -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot;</span><br><span class="line">			exit 0</span><br><span class="line">			;;</span><br><span class="line"></span><br><span class="line">		show)</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">display repository content</span></span></span><br><span class="line">			for release in &quot;$&#123;DISTROS[@]&#125;&quot;; do</span><br><span class="line">				display_alert &quot;Displaying repository contents for&quot; &quot;$release&quot; &quot;ext&quot;</span><br><span class="line">				aptly repo show -with-packages -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;release&#125;&quot; | tail -n +7</span><br><span class="line">				aptly repo show -with-packages -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;release&#125;-desktop&quot; | tail -n +7</span><br><span class="line">			done</span><br><span class="line">			display_alert &quot;Displaying repository contents for&quot; &quot;common utils&quot; &quot;ext&quot;</span><br><span class="line">			aptly repo show -with-packages -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; utils | tail -n +7</span><br><span class="line">			echo &quot;done.&quot;</span><br><span class="line">			exit 0</span><br><span class="line">			;;</span><br><span class="line"></span><br><span class="line">		unique)</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">which package should be removed from all repositories</span></span></span><br><span class="line">			IFS=$&#x27;\n&#x27;</span><br><span class="line">			while true; do</span><br><span class="line">				LIST=()</span><br><span class="line">				for release in &quot;$&#123;DISTROS[@]&#125;&quot;; do</span><br><span class="line">					LIST+=( $(aptly repo show -with-packages -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;release&#125;&quot; | tail -n +7) )</span><br><span class="line">					LIST+=( $(aptly repo show -with-packages -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;release&#125;-desktop&quot; | tail -n +7) )</span><br><span class="line">				done</span><br><span class="line">				LIST+=( $(aptly repo show -with-packages -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; utils | tail -n +7) )</span><br><span class="line">				LIST=( $(echo &quot;$&#123;LIST[@]&#125;&quot; | tr &#x27; &#x27; &#x27;\n&#x27; | sort -u))</span><br><span class="line">				new_list=()</span><br><span class="line">				# create a human readable menu</span><br><span class="line">				for ((n=0;n&lt;$(($&#123;#LIST[@]&#125;));n++));</span><br><span class="line">				do</span><br><span class="line">					new_list+=( &quot;$&#123;LIST[$n]&#125;&quot; )</span><br><span class="line">					new_list+=( &quot;&quot; )</span><br><span class="line">				done</span><br><span class="line">				LIST=(&quot;$&#123;new_list[@]&#125;&quot;)</span><br><span class="line">				LIST_LENGTH=$(($&#123;#LIST[@]&#125;/2));</span><br><span class="line">				exec 3&gt;&amp;1</span><br><span class="line">				TARGET_VERSION=$(dialog --cancel-label &quot;Cancel&quot; --backtitle &quot;BACKTITLE&quot; --no-collapse --title &quot;Remove packages from repositories&quot; --clear --menu &quot;Delete&quot; $((9+$&#123;LIST_LENGTH&#125;)) 82 65 &quot;$&#123;LIST[@]&#125;&quot; 2&gt;&amp;1 1&gt;&amp;3)</span><br><span class="line">				exitstatus=$?;</span><br><span class="line">				exec 3&gt;&amp;-</span><br><span class="line">				if [[ $exitstatus -eq 0 ]]; then</span><br><span class="line">					for release in &quot;$&#123;DISTROS[@]&#125;&quot;; do</span><br><span class="line">						aptly repo remove -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot;  &quot;$&#123;release&#125;&quot; &quot;$TARGET_VERSION&quot;</span><br><span class="line">						aptly repo remove -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot;  &quot;$&#123;release&#125;-desktop&quot; &quot;$TARGET_VERSION&quot;</span><br><span class="line">					done</span><br><span class="line">					aptly repo remove -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;utils&quot; &quot;$TARGET_VERSION&quot;</span><br><span class="line">				else</span><br><span class="line">					exit 1</span><br><span class="line">				fi</span><br><span class="line">				aptly db cleanup -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">			done</span><br><span class="line">			;;</span><br><span class="line"></span><br><span class="line">		update)</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">display full help test</span></span></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">run repository update</span></span></span><br><span class="line">			addtorepo &quot;update&quot; &quot;&quot;</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">add a key to repo</span></span></span><br><span class="line">			cp &quot;$&#123;SCRIPTPATH&#125;&quot;config/armbian.key &quot;$&#123;REPO_STORAGE&#125;&quot;/public/</span><br><span class="line">			exit 0</span><br><span class="line">			;;</span><br><span class="line"></span><br><span class="line">		purge)</span><br><span class="line">			for release in &quot;$&#123;DISTROS[@]&#125;&quot;; do</span><br><span class="line">				repo-remove-old-packages &quot;$release&quot; &quot;armhf&quot; &quot;5&quot;</span><br><span class="line">				repo-remove-old-packages &quot;$release&quot; &quot;arm64&quot; &quot;5&quot;</span><br><span class="line">				repo-remove-old-packages &quot;$release&quot; &quot;amd64&quot; &quot;5&quot;</span><br><span class="line">				repo-remove-old-packages &quot;$release&quot; &quot;all&quot; &quot;5&quot;</span><br><span class="line">				aptly -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; -passphrase=&quot;$&#123;GPG_PASS&#125;&quot; publish update &quot;$&#123;release&#125;&quot; &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">			done</span><br><span class="line">			exit 0</span><br><span class="line">			;;</span><br><span class="line"></span><br><span class="line">                purgeedge)</span><br><span class="line">                        for release in &quot;$&#123;DISTROS[@]&#125;&quot;; do</span><br><span class="line">				repo-remove-old-packages &quot;$release&quot; &quot;armhf&quot; &quot;3&quot; &quot;edge&quot;</span><br><span class="line">				repo-remove-old-packages &quot;$release&quot; &quot;arm64&quot; &quot;3&quot; &quot;edge&quot;</span><br><span class="line">				repo-remove-old-packages &quot;$release&quot; &quot;amd64&quot; &quot;3&quot; &quot;edge&quot;</span><br><span class="line">				repo-remove-old-packages &quot;$release&quot; &quot;all&quot; &quot;3&quot; &quot;edge&quot;</span><br><span class="line">				aptly -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; -passphrase=&quot;$&#123;GPG_PASS&#125;&quot; publish update &quot;$&#123;release&#125;&quot; &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">                        done</span><br><span class="line">                        exit 0</span><br><span class="line">                        ;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		purgesource)</span><br><span class="line">			for release in &quot;$&#123;DISTROS[@]&#125;&quot;; do</span><br><span class="line">				aptly repo remove -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;release&#125;&quot; &#x27;Name (% *-source*)&#x27;</span><br><span class="line">				aptly -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; -passphrase=&quot;$&#123;GPG_PASS&#125;&quot; publish update &quot;$&#123;release&#125;&quot;  &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">			done</span><br><span class="line">			aptly db cleanup -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">			exit 0</span><br><span class="line">			;;</span><br><span class="line">		*)</span><br><span class="line"></span><br><span class="line">			echo -e &quot;Usage: repository show | serve | unique | create | update | purge | purgesource\n&quot;</span><br><span class="line">			echo -e &quot;\n show           = display repository content&quot;</span><br><span class="line">			echo -e &quot;\n serve          = publish your repositories on current server over HTTP&quot;</span><br><span class="line">			echo -e &quot;\n unique         = manually select which package should be removed from all repositories&quot;</span><br><span class="line">			echo -e &quot;\n update         = updating repository&quot;</span><br><span class="line">			echo -e &quot;\n purge          = removes all but last 5 versions&quot;</span><br><span class="line">			echo -e &quot;\n purgeedge      = removes all but last 3 edge versions&quot;</span><br><span class="line">			echo -e &quot;\n purgesource    = removes all sources\n\n&quot;</span><br><span class="line">			exit 0</span><br><span class="line">			;;</span><br><span class="line"></span><br><span class="line">	esac</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Removes old packages in the received repo</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># $1: Repository</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">$2: Architecture</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">$3: Amount of packages to keep</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">$4: Additional search pattern</span></span></span><br><span class="line">repo-remove-old-packages() &#123;</span><br><span class="line">	local repo=$1</span><br><span class="line">	local arch=$2</span><br><span class="line">	local keep=$3</span><br><span class="line">	for pkg in $(aptly repo search -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;repo&#125;&quot; &quot;Architecture ($arch)&quot; | grep -v &quot;ERROR: no results&quot; | sort -t &#x27;.&#x27; -nk4 | grep -e &quot;$4&quot;); do</span><br><span class="line">		local pkg_name</span><br><span class="line">		count=0</span><br><span class="line">		pkg_name=$(echo &quot;$&#123;pkg&#125;&quot; | cut -d_ -f1)</span><br><span class="line">		for subpkg in $(aptly repo search -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;repo&#125;&quot; &quot;Name ($pkg_name)&quot;  | grep -v &quot;ERROR: no results&quot; | sort -rt &#x27;.&#x27; -nk4); do</span><br><span class="line">			((count+=1))</span><br><span class="line">			if [[ $count -gt $keep ]]; then</span><br><span class="line">			pkg_version=$(echo &quot;$&#123;subpkg&#125;&quot; | cut -d_ -f2)</span><br><span class="line">			aptly repo remove -config=&quot;$&#123;SCRIPTPATH&#125;config/$&#123;REPO_CONFIG&#125;&quot; &quot;$&#123;repo&#125;&quot; &quot;Name ($pkg_name), Version (= $pkg_version)&quot;</span><br><span class="line">			fi</span><br><span class="line">		done</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">wait_for_package_manager</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># * installation will break if we try to install when package manager is running</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">wait_for_package_manager()</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">exit if package manager is running in the back</span></span></span><br><span class="line">	while true; do</span><br><span class="line">		if [[ &quot;$(fuser /var/lib/dpkg/lock 2&gt;/dev/null; echo $?)&quot; != 1 &amp;&amp; &quot;$(fuser /var/lib/dpkg/lock-frontend 2&gt;/dev/null; echo $?)&quot; != 1 ]]; then</span><br><span class="line">				display_alert &quot;Package manager is running in the background.&quot; &quot;Please wait! Retrying in 30 sec&quot; &quot;wrn&quot;</span><br><span class="line">				sleep 30</span><br><span class="line">			else</span><br><span class="line">				break</span><br><span class="line">		fi</span><br><span class="line">	done</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Installing debian packages in the orangepi build system.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The function accepts four optional parameters:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">autoupdate - If the installation list is not empty then update first.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">upgrade, clean - the same name for apt</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">verbose - detailed log for the function</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># list=&quot;pkg1 pkg2 pkg3 pkgbadname pkg-1.0 | pkg-2.0 pkg5 (&gt;= 9)&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">install_pkg_deb upgrade verbose $list</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">or</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">install_pkg_deb autoupdate $list</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># If the package has a bad name, we will see it in the log file.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">If there is an LOG_OUTPUT_FILE variable and it has a value as</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the full real path to the log file, then all the information will be there.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The LOG_OUTPUT_FILE variable must be defined in the calling function</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">before calling the install_pkg_deb function and unset after.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">install_pkg_deb ()</span></span></span><br><span class="line">&#123;</span><br><span class="line">	local list=&quot;&quot;</span><br><span class="line">	local log_file</span><br><span class="line">	local for_install</span><br><span class="line">	local need_autoup=false</span><br><span class="line">	local need_upgrade=false</span><br><span class="line">	local need_clean=false</span><br><span class="line">	local need_verbose=false</span><br><span class="line">	local _line=$&#123;BASH_LINENO[0]&#125;</span><br><span class="line">	local _function=$&#123;FUNCNAME[1]&#125;</span><br><span class="line">	local _file=$(basename &quot;$&#123;BASH_SOURCE[1]&#125;&quot;)</span><br><span class="line">	local tmp_file=$(mktemp /tmp/install_log_XXXXX)</span><br><span class="line">	export DEBIAN_FRONTEND=noninteractive</span><br><span class="line"></span><br><span class="line">	list=$(</span><br><span class="line">	for p in $*;do</span><br><span class="line">		case $p in</span><br><span class="line">			autoupdate) need_autoup=true; continue ;;</span><br><span class="line">			upgrade) need_upgrade=true; continue ;;</span><br><span class="line">			clean) need_clean=true; continue ;;</span><br><span class="line">			verbose) need_verbose=true; continue ;;</span><br><span class="line">			\||\(*|*\)) continue ;;</span><br><span class="line">		esac</span><br><span class="line">		echo &quot; $p&quot;</span><br><span class="line">	done</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	if [ -d $(dirname $LOG_OUTPUT_FILE) ]; then</span><br><span class="line">		log_file=$&#123;LOG_OUTPUT_FILE&#125;</span><br><span class="line">	else</span><br><span class="line">		log_file=&quot;$&#123;SRC&#125;/output/$&#123;LOG_SUBPATH&#125;/install.log&quot;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">This is necessary first when there is no apt cache.</span></span></span><br><span class="line">	if $need_upgrade; then</span><br><span class="line">		apt-get -q update || echo &quot;apt cannot update&quot; &gt;&gt;$tmp_file</span><br><span class="line">		apt-get -y upgrade || echo &quot;apt cannot upgrade&quot; &gt;&gt;$tmp_file</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">If the package is not installed, check the latest</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">up-to-date version in the apt cache.</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Exclude bad package names and send a message to the log.</span></span></span><br><span class="line">	for_install=$(</span><br><span class="line">	for p in $list;do</span><br><span class="line">	  if $(dpkg-query -W -f &#x27;$&#123;db:Status-Abbrev&#125;&#x27; $p |&amp; awk &#x27;/ii/&#123;exit 1&#125;&#x27;);then</span><br><span class="line">		apt-cache  show $p -o APT::Cache::AllVersions=no |&amp; \</span><br><span class="line">		awk -v p=$p -v tmp_file=$tmp_file \</span><br><span class="line">		&#x27;/^Package:/&#123;print $2&#125; /^E:/&#123;print &quot;Bad package name: &quot;,p &gt;&gt;tmp_file&#125;&#x27;</span><br><span class="line">	  fi</span><br><span class="line">	done</span><br><span class="line">	)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">This information should be logged.</span></span></span><br><span class="line">	if [ -s $tmp_file ]; then</span><br><span class="line">		echo -e &quot;\nInstalling packages in function: $_function&quot; &quot;[$_file:$_line]&quot; \</span><br><span class="line"><span class="meta prompt_">		&gt;</span><span class="language-bash"><span class="string">&gt;$log_file</span></span></span><br><span class="line">		echo -e &quot;\nIncoming list:&quot; &gt;&gt;$log_file</span><br><span class="line">		printf &quot;%-30s %-30s %-30s %-30s\n&quot; $list &gt;&gt;$log_file</span><br><span class="line">		echo &quot;&quot; &gt;&gt;$log_file</span><br><span class="line">		cat $tmp_file &gt;&gt;$log_file</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [ -n &quot;$for_install&quot; ]; then</span><br><span class="line">		if $need_autoup; then</span><br><span class="line">			apt-get -q update</span><br><span class="line">			apt-get -y upgrade</span><br><span class="line">		fi</span><br><span class="line">		apt-get install -qq -y --no-install-recommends $for_install</span><br><span class="line">		echo -e &quot;\nPackages installed:&quot; &gt;&gt;$log_file</span><br><span class="line">		dpkg-query -W \</span><br><span class="line">		  -f &#x27;$&#123;binary:Package;-27&#125; $&#123;Version;-23&#125;\n&#x27; \</span><br><span class="line">		  $for_install &gt;&gt;$log_file</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">We will show the status after installation all listed</span></span></span><br><span class="line">	if $need_verbose; then</span><br><span class="line">		echo -e &quot;\nstatus after installation:&quot; &gt;&gt;$log_file</span><br><span class="line">		dpkg-query -W \</span><br><span class="line">		  -f &#x27;$&#123;binary:Package;-27&#125; $&#123;Version;-23&#125; [ $&#123;Status&#125; ]\n&#x27; \</span><br><span class="line">		  $list &gt;&gt;$log_file</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if $need_clean;then apt-get clean; fi</span><br><span class="line">	rm $tmp_file</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">prepare_host_basic</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># * installs only basic packages</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">prepare_host_basic()</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">command:package1 package2 ...</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">list of commands that are neeeded:packages where this command is</span></span></span><br><span class="line">	local check_pack install_pack</span><br><span class="line">	local checklist=(</span><br><span class="line">			&quot;whiptail:whiptail&quot;</span><br><span class="line">			&quot;dialog:dialog&quot;</span><br><span class="line">			&quot;fuser:psmisc&quot;</span><br><span class="line">			&quot;getfacl:acl&quot;</span><br><span class="line">			&quot;uuid:uuid uuid-runtime&quot;</span><br><span class="line">			&quot;curl:curl&quot;</span><br><span class="line">			&quot;gpg:gnupg&quot;</span><br><span class="line">			&quot;gawk:gawk&quot;</span><br><span class="line">			&quot;git:git&quot;</span><br><span class="line">			)</span><br><span class="line"></span><br><span class="line">	for check_pack in &quot;$&#123;checklist[@]&#125;&quot;; do</span><br><span class="line">	        if ! which $&#123;check_pack%:*&#125; &gt;/dev/null; then local install_pack+=$&#123;check_pack#*:&#125;&quot; &quot;; fi</span><br><span class="line">	done</span><br><span class="line"></span><br><span class="line">	if [[ -n $install_pack ]]; then</span><br><span class="line">		display_alert &quot;Installing basic packages&quot; &quot;$install_pack&quot;</span><br><span class="line">		sudo bash -c &quot;apt-get -qq update &amp;&amp; apt-get install -qq -y --no-install-recommends $install_pack&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">prepare_host</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># * checks and installs necessary packages</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">* creates directory structure</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">* changes system settings</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">prepare_host()</span></span></span><br><span class="line">&#123;</span><br><span class="line">	display_alert &quot;Preparing&quot; &quot;host&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">The &#x27;</span>offline<span class="string">&#x27; variable must always be set to &#x27;</span><span class="literal">true</span><span class="string">&#x27; or &#x27;</span><span class="literal">false</span><span class="string">&#x27;</span></span></span><br><span class="line">	if [ &quot;$OFFLINE_WORK&quot; == &quot;yes&quot; ]; then</span><br><span class="line">		local offline=true</span><br><span class="line">	else</span><br><span class="line">		local offline=false</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">wait until package manager finishes possible system maintanace</span></span></span><br><span class="line">	wait_for_package_manager</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">fix for Locales settings</span></span></span><br><span class="line">	if ! grep -q &quot;^en_US.UT</span><br><span class="line">	-8 UTF-8&quot; /etc/locale.gen; then</span><br><span class="line">		sudo sed -i &#x27;s/# en_US.UTF-8/en_US.UTF-8/&#x27; /etc/locale.gen</span><br><span class="line">		sudo locale-gen</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	export LC_ALL=&quot;en_US.UTF-8&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">packages list for host</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">NOTE: please sync any changes here with the Dockerfile and Vagrantfile</span></span></span><br><span class="line"></span><br><span class="line">	local hostdeps=&quot;acl aptly aria2 bc binfmt-support bison btrfs-progs       \</span><br><span class="line">	build-essential  ca-certificates ccache cpio cryptsetup curl              \</span><br><span class="line">	debian-archive-keyring debian-keyring debootstrap device-tree-compiler    \</span><br><span class="line">	dialog dirmngr dosfstools dwarves f2fs-tools fakeroot flex gawk           \</span><br><span class="line">	gcc-arm-linux-gnueabihf gdisk gpg imagemagick jq kmod libbison-dev \</span><br><span class="line">	libc6-dev-armhf-cross libelf-dev libfdt-dev libfile-fcntllock-perl        \</span><br><span class="line">	libfl-dev liblz4-tool libncurses-dev libpython2.7-dev libssl-dev          \</span><br><span class="line">	libusb-1.0-0-dev linux-base locales lzop ncurses-base ncurses-term        \</span><br><span class="line">	nfs-kernel-server ntpdate p7zip-full parted patchutils pigz pixz          \</span><br><span class="line">	pkg-config pv python3-dev python3-distutils qemu-user-static rsync swig   \</span><br><span class="line">	systemd-container u-boot-tools udev unzip uuid-dev wget whiptail zip      \</span><br><span class="line">	zlib1g-dev&quot;</span><br><span class="line"></span><br><span class="line">  if [[ $(dpkg --print-architecture) == amd64 ]]; then</span><br><span class="line"></span><br><span class="line">	hostdeps+=&quot; distcc lib32ncurses-dev lib32stdc++6 libc6-i386&quot;</span><br><span class="line">	grep -q i386 &lt;(dpkg --print-foreign-architectures) || dpkg --add-architecture i386</span><br><span class="line"></span><br><span class="line">  elif [[ $(dpkg --print-architecture) == arm64 ]]; then</span><br><span class="line"></span><br><span class="line">	hostdeps+=&quot; gcc-arm-linux-gnueabi gcc-arm-none-eabi libc6 libc6-amd64-cross qemu&quot;</span><br><span class="line"></span><br><span class="line">  else</span><br><span class="line"></span><br><span class="line">	display_alert &quot;Please read documentation to set up proper compilation environment&quot;</span><br><span class="line">	display_alert &quot;https://www.armbian.com/using-armbian-tools/&quot;</span><br><span class="line">	exit_with_error &quot;Running this tool on non x86_64 build host is not supported&quot;</span><br><span class="line"></span><br><span class="line">  fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Add support for Ubuntu 20.04, 21.04 and Mint 20.x</span></span></span><br><span class="line">	if [[ $HOSTRELEASE =~ ^(focal|hirsute|jammy|ulyana|ulyssa|bullseye|bookworm|uma)$ ]]; then</span><br><span class="line">		hostdeps+=&quot; python2 python3&quot;</span><br><span class="line">		ln -fs /usr/bin/python2.7 /usr/bin/python2</span><br><span class="line">		ln -fs /usr/bin/python2.7 /usr/bin/python</span><br><span class="line">	else</span><br><span class="line">		hostdeps+=&quot; python libpython-dev&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	display_alert &quot;Build host OS release&quot; &quot;$&#123;HOSTRELEASE:-(unknown)&#125;&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Ubuntu 21.04.x (Hirsute) x86_64 is the only fully supported host OS release</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Using Docker/VirtualBox/Vagrant is the only supported way to run the build script on other Linux distributions</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">	# NO_HOST_RELEASE_CHECK overrides the check for a supported host system</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Disable host OS check at your own risk. Any issues reported with unsupported releases will be closed without discussion</span></span></span><br><span class="line">	if [[ -z $HOSTRELEASE || &quot;focal jammy&quot; != *&quot;$HOSTRELEASE&quot;* ]]; then</span><br><span class="line">		if [[ $NO_HOST_RELEASE_CHECK == yes ]]; then</span><br><span class="line">			display_alert &quot;You are running on an unsupported system&quot; &quot;$&#123;HOSTRELEASE:-(unknown)&#125;&quot; &quot;wrn&quot;</span><br><span class="line">			display_alert &quot;Do not report any errors, warnings or other issues encountered beyond this point&quot; &quot;&quot; &quot;wrn&quot;</span><br><span class="line">		else</span><br><span class="line">			exit_with_error &quot;It seems you ignore documentation and run an unsupported build system: $&#123;HOSTRELEASE:-(unknown)&#125;&quot;</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if grep -qE &quot;(Microsoft|WSL)&quot; /proc/version; then</span><br><span class="line">		if [ -f /.dockerenv ]; then</span><br><span class="line">			display_alert &quot;Building images using Docker on WSL2 may fail&quot; &quot;&quot; &quot;wrn&quot;</span><br><span class="line">		else</span><br><span class="line">			exit_with_error &quot;Windows subsystem for Linux is not a supported build environment&quot;</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if systemd-detect-virt -q -c; then</span><br><span class="line">		display_alert &quot;Running in container&quot; &quot;$(systemd-detect-virt)&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">disable apt-cacher unless NO_APT_CACHER=no is not specified explicitly</span></span></span><br><span class="line">		if [[ $NO_APT_CACHER != no ]]; then</span><br><span class="line">			display_alert &quot;apt-cacher is disabled in containers, set NO_APT_CACHER=no to override&quot; &quot;&quot; &quot;wrn&quot;</span><br><span class="line">			NO_APT_CACHER=yes</span><br><span class="line">		fi</span><br><span class="line">		CONTAINER_COMPAT=yes</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">trying to use nested containers is not a good idea, so don&#x27;</span>t permit EXTERNAL_NEW=compile</span></span><br><span class="line">		if [[ $EXTERNAL_NEW == compile ]]; then</span><br><span class="line">			display_alert &quot;EXTERNAL_NEW=compile is not available when running in container, setting to prebuilt&quot; &quot;&quot; &quot;wrn&quot;</span><br><span class="line">			EXTERNAL_NEW=prebuilt</span><br><span class="line">		fi</span><br><span class="line">		SYNC_CLOCK=no</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Skip verification <span class="keyword">if</span> you are working offline</span></span><br><span class="line">	if ! $offline; then</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">warning: apt-cacher-ng will fail <span class="keyword">if</span> installed and used both on host and <span class="keyword">in</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">container/chroot environment with shared network</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="built_in">set</span> NO_APT_CACHER=<span class="built_in">yes</span> to prevent installation errors <span class="keyword">in</span> such <span class="keyword">case</span></span></span><br><span class="line">	if [[ $NO_APT_CACHER != yes ]]; then hostdeps+=&quot; apt-cacher-ng&quot;; fi</span><br><span class="line"></span><br><span class="line">	export EXTRA_BUILD_DEPS=&quot;&quot;</span><br><span class="line">	call_extension_method &quot;add_host_dependencies&quot; &lt;&lt;- &#x27;ADD_HOST_DEPENDENCIES&#x27;</span><br><span class="line">	*run before installing host dependencies*</span><br><span class="line">	you can add packages to install, space separated, to $&#123;EXTRA_BUILD_DEPS&#125; here.</span><br><span class="line">	ADD_HOST_DEPENDENCIES</span><br><span class="line"></span><br><span class="line">	if [ -n &quot;$&#123;EXTRA_BUILD_DEPS&#125;&quot; ]; then hostdeps+=&quot; $&#123;EXTRA_BUILD_DEPS&#125;&quot;; fi</span><br><span class="line"></span><br><span class="line">	display_alert &quot;Installing build dependencies&quot;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">don<span class="string">&#x27;t prompt for apt cacher selection</span></span></span><br><span class="line">	sudo echo &quot;apt-cacher-ng    apt-cacher-ng/tunnelenable      boolean false&quot; | sudo debconf-set-selections</span><br><span class="line"></span><br><span class="line">	LOG_OUTPUT_FILE=&quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/hostdeps.log</span><br><span class="line">	install_pkg_deb &quot;autoupdate $hostdeps&quot;</span><br><span class="line">	unset LOG_OUTPUT_FILE</span><br><span class="line"></span><br><span class="line">	update-ccache-symlinks</span><br><span class="line"></span><br><span class="line">	export FINAL_HOST_DEPS=&quot;$hostdeps $&#123;EXTRA_BUILD_DEPS&#125;&quot;</span><br><span class="line">	call_extension_method &quot;host_dependencies_ready&quot; &lt;&lt;- &#x27;HOST_DEPENDENCIES_READY&#x27;</span><br><span class="line">	*run after all host dependencies are installed*</span><br><span class="line">	At this point we can read `$&#123;FINAL_HOST_DEPS&#125;`, but changing won&#x27;t have any effect.</span><br><span class="line">	All the dependencies, including the default/core deps and the ones added via `$&#123;EXTRA_BUILD_DEPS&#125;`</span><br><span class="line">	are installed at this point. The system clock has not yet been synced.</span><br><span class="line">	HOST_DEPENDENCIES_READY</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">sync clock</span></span></span><br><span class="line">	if [[ $SYNC_CLOCK != no ]]; then</span><br><span class="line">		display_alert &quot;Syncing clock&quot; &quot;$&#123;NTP_SERVER:-pool.ntp.org&#125;&quot; &quot;info&quot;</span><br><span class="line">		ntpdate -s &quot;$&#123;NTP_SERVER:-pool.ntp.org&#125;&quot;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">create directory structure</span></span></span><br><span class="line">	mkdir -p $SRC/output $EXTER/cache $USERPATCHES_PATH</span><br><span class="line">	if [[ -n $SUDO_USER ]]; then</span><br><span class="line">		chgrp --quiet sudo cache output &quot;$&#123;USERPATCHES_PATH&#125;&quot;</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">SGID bit on cache/sources breaks kernel dpkg packaging</span></span></span><br><span class="line">		chmod --quiet g+w,g+s output &quot;$&#123;USERPATCHES_PATH&#125;&quot;</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">fix existing permissions</span></span></span><br><span class="line">		find &quot;$&#123;SRC&#125;&quot;/output &quot;$&#123;USERPATCHES_PATH&#125;&quot; -type d ! -group sudo -exec chgrp --quiet sudo &#123;&#125; \;</span><br><span class="line">		find &quot;$&#123;SRC&#125;&quot;/output &quot;$&#123;USERPATCHES_PATH&#125;&quot; -type d ! -perm -g+w,g+s -exec chmod --quiet g+w,g+s &#123;&#125; \;</span><br><span class="line">	fi</span><br><span class="line">	mkdir -p $DEST/debs/&#123;extra,u-boot&#125;  $DEST/&#123;config,debug,patch,images&#125; $USERPATCHES_PATH/overlay $EXTER/cache/&#123;debs,sources,hash&#125; $SRC/toolchains  $SRC/.tmp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">build aarch64</span></span></span><br><span class="line">	if [[ $(dpkg --print-architecture) == amd64 ]]; then</span><br><span class="line">		if [[ &quot;$&#123;SKIP_EXTERNAL_TOOLCHAINS&#125;&quot; != &quot;yes&quot; ]]; then</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">bind mount toolchain if defined</span></span></span><br><span class="line">			if [[ -d &quot;$&#123;ARMBIAN_CACHE_TOOLCHAIN_PATH&#125;&quot; ]]; then</span><br><span class="line">				mountpoint -q &quot;$&#123;SRC&#125;&quot;/cache/toolchain &amp;&amp; umount -l &quot;$&#123;SRC&#125;&quot;/cache/toolchain</span><br><span class="line">				mount --bind &quot;$&#123;ARMBIAN_CACHE_TOOLCHAIN_PATH&#125;&quot; &quot;$&#123;SRC&#125;&quot;/cache/toolchain</span><br><span class="line">			fi</span><br><span class="line"></span><br><span class="line">			display_alert &quot;Checking for external GCC compilers&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">download external Linaro compiler and missing special dependencies since they are needed for certain sources</span></span></span><br><span class="line"></span><br><span class="line">		local toolchains=(</span><br><span class="line">			&quot;gcc-linaro-aarch64-none-elf-4.8-2013.11_linux.tar.xz&quot;</span><br><span class="line">			&quot;gcc-linaro-arm-none-eabi-4.8-2014.04_linux.tar.xz&quot;</span><br><span class="line">			&quot;gcc-linaro-arm-linux-gnueabihf-4.8-2014.04_linux.tar.xz&quot;</span><br><span class="line">			&quot;gcc-linaro-4.9.4-2017.01-x86_64_arm-linux-gnueabi.tar.xz&quot;</span><br><span class="line">			&quot;gcc-linaro-4.9.4-2017.01-x86_64_aarch64-linux-gnu.tar.xz&quot;</span><br><span class="line">			&quot;gcc-linaro-5.5.0-2017.10-x86_64_arm-linux-gnueabihf.tar.xz&quot;</span><br><span class="line">			&quot;gcc-linaro-7.4.1-2019.02-x86_64_arm-linux-gnueabi.tar.xz&quot;</span><br><span class="line">			&quot;gcc-linaro-7.4.1-2019.02-x86_64_aarch64-linux-gnu.tar.xz&quot;</span><br><span class="line">			&quot;gcc-arm-9.2-2019.12-x86_64-arm-none-linux-gnueabihf.tar.xz&quot;</span><br><span class="line">			&quot;gcc-arm-9.2-2019.12-x86_64-aarch64-none-linux-gnu.tar.xz&quot;</span><br><span class="line">			&quot;gcc-arm-11.2-2022.02-x86_64-arm-none-linux-gnueabihf.tar.xz&quot;</span><br><span class="line">			&quot;gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu.tar.xz&quot;</span><br><span class="line">			)</span><br><span class="line"></span><br><span class="line">		USE_TORRENT_STATUS=$&#123;USE_TORRENT&#125;</span><br><span class="line">		USE_TORRENT=&quot;no&quot;</span><br><span class="line">		for toolchain in $&#123;toolchains[@]&#125;; do</span><br><span class="line">			download_and_verify &quot;_toolchain&quot; &quot;$&#123;toolchain##*/&#125;&quot;</span><br><span class="line">		done</span><br><span class="line">		USE_TORRENT=$&#123;USE_TORRENT_STATUS&#125;</span><br><span class="line"></span><br><span class="line">		rm -rf $SRC/toolchains/*.tar.xz*</span><br><span class="line">		local existing_dirs=( $(ls -1 $SRC/toolchains) )</span><br><span class="line">		for dir in $&#123;existing_dirs[@]&#125;; do</span><br><span class="line">			local found=no</span><br><span class="line">			for toolchain in $&#123;toolchains[@]&#125;; do</span><br><span class="line">				local filename=$&#123;toolchain##*/&#125;</span><br><span class="line">				local dirname=$&#123;filename//.tar.xz&#125;</span><br><span class="line">				[[ $dir == $dirname ]] &amp;&amp; found=yes</span><br><span class="line">			done</span><br><span class="line">			if [[ $found == no ]]; then</span><br><span class="line">				display_alert &quot;Removing obsolete toolchain&quot; &quot;$dir&quot;</span><br><span class="line">				rm -rf $SRC/toolchains/$dir</span><br><span class="line">			fi</span><br><span class="line">		done</span><br><span class="line">			else</span><br><span class="line">				display_alert &quot;Ignoring toolchains&quot; &quot;SKIP_EXTERNAL_TOOLCHAINS: $&#123;SKIP_EXTERNAL_TOOLCHAINS&#125;&quot; &quot;info&quot;</span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">	fi # check offline</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">enable arm binary format so that the cross-architecture chroot environment will work</span></span></span><br><span class="line">	if [[ $BUILD_OPT == &quot;image&quot; || $BUILD_OPT == &quot;rootfs&quot; ]]; then</span><br><span class="line">		modprobe -q binfmt_misc</span><br><span class="line">		mountpoint -q /proc/sys/fs/binfmt_misc/ || mount binfmt_misc -t binfmt_misc /proc/sys/fs/binfmt_misc</span><br><span class="line">		if [[ &quot;$(arch)&quot; != &quot;aarch64&quot; ]]; then</span><br><span class="line">			test -e /proc/sys/fs/binfmt_misc/qemu-arm || update-binfmts --enable qemu-arm</span><br><span class="line">			test -e /proc/sys/fs/binfmt_misc/qemu-aarch64 || update-binfmts --enable qemu-aarch64</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	[[ ! -f &quot;$&#123;USERPATCHES_PATH&#125;&quot;/customize-image.sh ]] &amp;&amp; cp &quot;$&#123;EXTER&#125;&quot;/config/templates/customize-image.sh.template &quot;$&#123;USERPATCHES_PATH&#125;&quot;/customize-image.sh</span><br><span class="line"></span><br><span class="line">	if [[ ! -f &quot;$&#123;USERPATCHES_PATH&#125;&quot;/README ]]; then</span><br><span class="line">		rm -f &quot;$&#123;USERPATCHES_PATH&#125;&quot;/readme.txt</span><br><span class="line">		echo &#x27;Please read documentation about customizing build configuration&#x27; &gt; &quot;$&#123;USERPATCHES_PATH&#125;&quot;/README</span><br><span class="line">		echo &#x27;https:/www.orangepi.org&#x27; &gt;&gt; &quot;$&#123;USERPATCHES_PATH&#125;&quot;/README</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">create patches directory structure under USERPATCHES_PATH</span></span></span><br><span class="line">		find $EXTER/patch -maxdepth 2 -type d ! -name . | sed &quot;s%/.*patch%/$USERPATCHES_PATH%&quot; | xargs mkdir -p</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">check free space (basic)</span></span></span><br><span class="line">	local freespace=$(findmnt --target &quot;$&#123;SRC&#125;&quot; -n -o AVAIL -b 2&gt;/dev/null) # in bytes</span><br><span class="line">	if [[ -n $freespace &amp;&amp; $(( $freespace / 1073741824 )) -lt 10 ]]; then</span><br><span class="line">		display_alert &quot;Low free space left&quot; &quot;$(( $freespace / 1073741824 )) GiB&quot; &quot;wrn&quot;</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">pause here since dialog-based menu will hide this message otherwise</span></span></span><br><span class="line">		echo -e &quot;Press \e[0;33m&lt;Ctrl-C&gt;\x1B[0m to abort compilation, \e[0;33m&lt;Enter&gt;\x1B[0m to ignore and continue&quot;</span><br><span class="line">		read</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function webseed ()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">list of mirrors that host our files</span></span></span><br><span class="line">	unset text</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Hardcoded to EU mirrors since</span></span></span><br><span class="line">	local CCODE=$(curl -s redirect.armbian.com/geoip | jq &#x27;.continent.code&#x27; -r)</span><br><span class="line">	WEBSEED=($(curl -s https://redirect.armbian.com/mirrors | jq -r &#x27;.&#x27;$&#123;CCODE&#125;&#x27; | .[] | values&#x27;))</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">aria2 simply split chunks based on sources count not depending on download speed</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">when selecting china mirrors, use only China mirror, others are very slow there</span></span></span><br><span class="line">	if [[ $DOWNLOAD_MIRROR == china ]]; then</span><br><span class="line">		WEBSEED=(</span><br><span class="line">		https://mirrors.tuna.tsinghua.edu.cn/armbian-releases/</span><br><span class="line">		)</span><br><span class="line">	elif [[ $DOWNLOAD_MIRROR == bfsu ]]; then</span><br><span class="line">		WEBSEED=(</span><br><span class="line">		https://mirrors.bfsu.edu.cn/armbian-releases/</span><br><span class="line">		)</span><br><span class="line">	fi</span><br><span class="line">	for toolchain in $&#123;WEBSEED[@]&#125;; do</span><br><span class="line">		text=&quot;$&#123;text&#125; $&#123;toolchain&#125;$&#123;1&#125;&quot;</span><br><span class="line">	done</span><br><span class="line">	text=&quot;$&#123;text:1&#125;&quot;</span><br><span class="line">	echo &quot;$&#123;text&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">download_and_verify()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	local remotedir=$1</span><br><span class="line">	local filename=$2</span><br><span class="line">	local localdir=$SRC/toolchains</span><br><span class="line">	local dirname=$&#123;filename//.tar.xz&#125;</span><br><span class="line"></span><br><span class="line">        if [[ $DOWNLOAD_MIRROR == china ]]; then</span><br><span class="line">			local server=&quot;https://mirrors.tuna.tsinghua.edu.cn/armbian-releases/&quot;</span><br><span class="line">		elif [[ $DOWNLOAD_MIRROR == bfsu ]]; then</span><br><span class="line">			local server=&quot;https://mirrors.bfsu.edu.cn/armbian-releases/&quot;</span><br><span class="line">		else</span><br><span class="line">			local server=$&#123;ARMBIAN_MIRROR&#125;</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">	if [[ -f $&#123;localdir&#125;/$&#123;dirname&#125;/.download-complete ]]; then</span><br><span class="line">		return</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">switch to china mirror if US timeouts</span></span></span><br><span class="line">	timeout 10 curl --head --fail --silent $&#123;server&#125;$&#123;remotedir&#125;/$&#123;filename&#125; 2&gt;&amp;1 &gt;/dev/null</span><br><span class="line">	if [[ $? -ne 7 &amp;&amp; $? -ne 22 &amp;&amp; $? -ne 0 ]]; then</span><br><span class="line">		display_alert &quot;Timeout from $server&quot; &quot;retrying&quot; &quot;info&quot;</span><br><span class="line">		server=&quot;https://mirrors.tuna.tsinghua.edu.cn/armbian-releases/&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">switch to another china mirror if tuna timeouts</span></span></span><br><span class="line">		timeout 10 curl --head --fail --silent $&#123;server&#125;$&#123;remotedir&#125;/$&#123;filename&#125; 2&gt;&amp;1 &gt;/dev/null</span><br><span class="line">		if [[ $? -ne 7 &amp;&amp; $? -ne 22 &amp;&amp; $? -ne 0 ]]; then</span><br><span class="line">			display_alert &quot;Timeout from $server&quot; &quot;retrying&quot; &quot;info&quot;</span><br><span class="line">			server=&quot;https://mirrors.bfsu.edu.cn/armbian-releases/&quot;</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">check if file exists on remote server before running aria2 downloader</span></span></span><br><span class="line">	[[ ! `timeout 10 curl --head --fail --silent $&#123;server&#125;$&#123;remotedir&#125;/$&#123;filename&#125;` ]] &amp;&amp; return</span><br><span class="line"></span><br><span class="line">	cd &quot;$&#123;localdir&#125;&quot; || exit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">use local control file</span></span></span><br><span class="line">	if [[ -f &quot;$&#123;EXTER&#125;&quot;/config/torrents/$&#123;filename&#125;.asc ]]; then</span><br><span class="line">		local torrent=&quot;$&#123;EXTER&#125;&quot;/config/torrents/$&#123;filename&#125;.torrent</span><br><span class="line">		ln -sf &quot;$&#123;EXTER&#125;/config/torrents/$&#123;filename&#125;.asc&quot; &quot;$&#123;localdir&#125;/$&#123;filename&#125;.asc&quot;</span><br><span class="line">	elif [[ ! `timeout 10 curl --head --fail --silent &quot;$&#123;server&#125;$&#123;remotedir&#125;/$&#123;filename&#125;.asc&quot;` ]]; then</span><br><span class="line">		return</span><br><span class="line">	else</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">download control file</span></span></span><br><span class="line">		local torrent=$&#123;server&#125;$remotedir/$&#123;filename&#125;.torrent</span><br><span class="line">		aria2c --download-result=hide --disable-ipv6=true --summary-interval=0 --console-log-level=error --auto-file-renaming=false \</span><br><span class="line">		--continue=false --allow-overwrite=true --dir=&quot;$&#123;localdir&#125;&quot; $&#123;server&#125;$&#123;remotedir&#125;/$&#123;filename&#125;.asc $(webseed &quot;$remotedir/$&#123;filename&#125;.asc&quot;) -o &quot;$&#123;filename&#125;.asc&quot;</span><br><span class="line">		[[ $? -ne 0 ]] &amp;&amp; display_alert &quot;Failed to download control file&quot; &quot;&quot; &quot;wrn&quot;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">download torrent first</span></span></span><br><span class="line">	if [[ $&#123;USE_TORRENT&#125; == &quot;yes&quot; ]]; then</span><br><span class="line"></span><br><span class="line">		display_alert &quot;downloading using torrent network&quot; &quot;$filename&quot;</span><br><span class="line">		local ariatorrent=&quot;--summary-interval=0 --auto-save-interval=0 --seed-time=0 --bt-stop-timeout=120 --console-log-level=error \</span><br><span class="line">		--allow-overwrite=true --download-result=hide --rpc-save-upload-metadata=false --auto-file-renaming=false \</span><br><span class="line">		--file-allocation=trunc --continue=true $&#123;torrent&#125; \</span><br><span class="line">		--dht-file-path=$EXTER/cache/.aria2/dht.dat --disable-ipv6=true --stderr --follow-torrent=mem --dir=$&#123;localdir&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">exception. It throws error if dht.dat file does not exists. Error suppress needed only at first download.</span></span></span><br><span class="line">		if [[ -f $EXTER/cache/.aria2/dht.dat ]]; then</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">shellcheck disable=SC2086</span></span></span><br><span class="line">			aria2c $&#123;ariatorrent&#125;</span><br><span class="line">		else</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">shellcheck disable=SC2035</span></span></span><br><span class="line">			aria2c $&#123;ariatorrent&#125; &amp;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/torrent.log</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">mark complete</span></span></span><br><span class="line">		[[ $? -eq 0 ]] &amp;&amp; touch &quot;$&#123;localdir&#125;/$&#123;filename&#125;.complete&quot;</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">direct download if torrent fails</span></span></span><br><span class="line">	if [[ ! -f &quot;$&#123;localdir&#125;/$&#123;filename&#125;.complete&quot; ]]; then</span><br><span class="line">		if [[ ! `timeout 10 curl --head --fail --silent $&#123;server&#125;$&#123;remotedir&#125;/$&#123;filename&#125; 2&gt;&amp;1 &gt;/dev/null` ]]; then</span><br><span class="line">			display_alert &quot;downloading using http(s) network&quot; &quot;$filename&quot;</span><br><span class="line">			aria2c --download-result=hide --rpc-save-upload-metadata=false --console-log-level=error \</span><br><span class="line">			--dht-file-path=&quot;$&#123;SRC&#125;&quot;/cache/.aria2/dht.dat --disable-ipv6=true --summary-interval=0 --auto-file-renaming=false --dir=&quot;$&#123;localdir&#125;&quot; $&#123;server&#125;$&#123;remotedir&#125;/$&#123;filename&#125; $(webseed &quot;$&#123;remotedir&#125;/$&#123;filename&#125;&quot;) -o &quot;$&#123;filename&#125;&quot;</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">mark complete</span></span></span><br><span class="line">			[[ $? -eq 0 ]] &amp;&amp; touch &quot;$&#123;localdir&#125;/$&#123;filename&#125;.complete&quot; &amp;&amp; echo &quot;&quot;</span><br><span class="line"></span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ -f $&#123;localdir&#125;/$&#123;filename&#125;.asc ]]; then</span><br><span class="line"></span><br><span class="line">		if grep -q &#x27;BEGIN PGP SIGNATURE&#x27; &quot;$&#123;localdir&#125;/$&#123;filename&#125;.asc&quot;; then</span><br><span class="line"></span><br><span class="line">			if [[ ! -d $EXTER/cache/.gpg ]]; then</span><br><span class="line">				mkdir -p $EXTER/cache/.gpg</span><br><span class="line">				chmod 700 $EXTER/cache/.gpg</span><br><span class="line">				touch $EXTER/cache/.gpg/gpg.conf</span><br><span class="line">				chmod 600 $EXTER/cache/.gpg/gpg.conf</span><br><span class="line">			fi</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">Verify archives with Linaro and Armbian GPG keys</span></span></span><br><span class="line"></span><br><span class="line">			if [ x&quot;&quot; != x&quot;$&#123;http_proxy&#125;&quot; ]; then</span><br><span class="line">				(gpg --homedir &quot;$&#123;EXTER&#125;&quot;/cache/.gpg --no-permission-warning --list-keys 8F427EAF &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/output.log 2&gt;&amp;1\</span><br><span class="line">				 || gpg --homedir &quot;$&#123;EXTER&#125;&quot;/cache/.gpg --no-permission-warning \</span><br><span class="line">				--keyserver hkp://keyserver.ubuntu.com:80 --keyserver-options http-proxy=&quot;$&#123;http_proxy&#125;&quot; \</span><br><span class="line">				--recv-keys 8F427EAF &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/output.log 2&gt;&amp;1)</span><br><span class="line"></span><br><span class="line">				(gpg --homedir &quot;$&#123;EXTER&#125;&quot;/cache/.gpg --no-permission-warning --list-keys 9F0E78D5 &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/output.log 2&gt;&amp;1\</span><br><span class="line">				|| gpg --homedir &quot;$&#123;EXTER&#125;&quot;/cache/.gpg --no-permission-warning \</span><br><span class="line">				--keyserver hkp://keyserver.ubuntu.com:80 --keyserver-options http-proxy=&quot;$&#123;http_proxy&#125;&quot; \</span><br><span class="line">				--recv-keys 9F0E78D5 &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/output.log 2&gt;&amp;1)</span><br><span class="line">			else</span><br><span class="line">				(gpg --homedir &quot;$&#123;EXTER&#125;&quot;/cache/.gpg --no-permission-warning --list-keys 8F427EAF &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/output.log 2&gt;&amp;1\</span><br><span class="line">				 || gpg --homedir &quot;$&#123;EXTER&#125;&quot;/cache/.gpg --no-permission-warning \</span><br><span class="line">				--keyserver hkp://keyserver.ubuntu.com:80 \</span><br><span class="line">				--recv-keys 8F427EAF &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/output.log 2&gt;&amp;1)</span><br><span class="line"></span><br><span class="line">				(gpg --homedir &quot;$&#123;EXTER&#125;&quot;/cache/.gpg --no-permission-warning --list-keys 9F0E78D5 &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/output.log 2&gt;&amp;1\</span><br><span class="line">				|| gpg --homedir &quot;$&#123;EXTER&#125;&quot;/cache/.gpg --no-permission-warning \</span><br><span class="line">				--keyserver hkp://keyserver.ubuntu.com:80 \</span><br><span class="line">				--recv-keys 9F0E78D5 &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/output.log 2&gt;&amp;1)</span><br><span class="line">			fi</span><br><span class="line"></span><br><span class="line">			gpg --homedir &quot;$&#123;EXTER&#125;&quot;/cache/.gpg --no-permission-warning --verify \</span><br><span class="line">			--trust-model always -q &quot;$&#123;localdir&#125;/$&#123;filename&#125;.asc&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/output.log 2&gt;&amp;1</span><br><span class="line">			[[ $&#123;PIPESTATUS[0]&#125; -eq 0 ]] &amp;&amp; verified=true &amp;&amp; display_alert &quot;Verified&quot; &quot;PGP&quot; &quot;info&quot;</span><br><span class="line"></span><br><span class="line">		else</span><br><span class="line"></span><br><span class="line">			md5sum -c --status &quot;$&#123;localdir&#125;/$&#123;filename&#125;.asc&quot; &amp;&amp; verified=true &amp;&amp; display_alert &quot;Verified&quot; &quot;MD5&quot; &quot;info&quot;</span><br><span class="line"></span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		if [[ $verified == true ]]; then</span><br><span class="line">			if [[ &quot;$&#123;filename:(-6)&#125;&quot; == &quot;tar.xz&quot; ]]; then</span><br><span class="line"></span><br><span class="line">				display_alert &quot;decompressing&quot;</span><br><span class="line">				pv -p -b -r -c -N &quot;[ .... ] $&#123;filename&#125;&quot; &quot;$&#123;filename&#125;&quot; | xz -dc | tar xp --xattrs --no-same-owner --overwrite</span><br><span class="line">				[[ $? -eq 0 ]] &amp;&amp; touch &quot;$&#123;localdir&#125;/$&#123;dirname&#125;/.download-complete&quot;</span><br><span class="line">			fi</span><br><span class="line">		else</span><br><span class="line">			exit_with_error &quot;verification failed&quot;</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show_developer_warning()</span><br><span class="line">&#123;</span><br><span class="line">	local temp_rc</span><br><span class="line">	temp_rc=$(mktemp)</span><br><span class="line">	cat &lt;&lt;-&#x27;EOF&#x27; &gt; &quot;$&#123;temp_rc&#125;&quot;</span><br><span class="line">	screen_color = (WHITE,RED,ON)</span><br><span class="line">	EOF</span><br><span class="line">	local warn_text=&quot;You are switching to the \Z1EXPERT MODE\Zn</span><br><span class="line"></span><br><span class="line">	This allows building experimental configurations that are provided</span><br><span class="line">	\Z1AS IS\Zn to developers and expert users,</span><br><span class="line">	\Z1WITHOUT ANY RESPONSIBILITIES\Zn from the Armbian team:</span><br><span class="line"></span><br><span class="line">	- You are using these configurations \Z1AT YOUR OWN RISK\Zn</span><br><span class="line">	- Bug reports related to the dev kernel, CSC, WIP and EOS boards</span><br><span class="line">	\Z1will be closed without a discussion\Zn</span><br><span class="line">	- Forum posts related to dev kernel, CSC, WIP and EOS boards</span><br><span class="line">	should be created in the \Z2\&quot;Community forums\&quot;\Zn section</span><br><span class="line">	&quot;</span><br><span class="line">	DIALOGRC=$temp_rc dialog --title &quot;Expert mode warning&quot; --backtitle &quot;$&#123;backtitle&#125;&quot; --colors --defaultno --no-label &quot;I do not agree&quot; \</span><br><span class="line">		--yes-label &quot;I understand and agree&quot; --yesno &quot;$warn_text&quot; &quot;$&#123;TTY_Y&#125;&quot; &quot;$&#123;TTY_X&#125;&quot;</span><br><span class="line">	[[ $? -ne 0 ]] &amp;&amp; exit_with_error &quot;Error switching to the expert mode&quot;</span><br><span class="line">	SHOW_WARNING=no</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">is a formatted output of the values of variables</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">from the list at the place of the function call.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The LOG_OUTPUT_FILE variable must be defined in the calling function</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">before calling the `show_checklist_variables` function and unset after.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">show_checklist_variables ()</span></span></span><br><span class="line">&#123;</span><br><span class="line">	local checklist=$*</span><br><span class="line">	local var pval</span><br><span class="line">	local log_file=$&#123;LOG_OUTPUT_FILE:-&quot;$&#123;SRC&#125;&quot;/output/$&#123;LOG_SUBPATH&#125;/trash.log&#125;</span><br><span class="line">	local _line=$&#123;BASH_LINENO[0]&#125;</span><br><span class="line">	local _function=$&#123;FUNCNAME[1]&#125;</span><br><span class="line">	local _file=$(basename &quot;$&#123;BASH_SOURCE[1]&#125;&quot;)</span><br><span class="line"></span><br><span class="line">	echo -e &quot;Show variables in function: $_function&quot; &quot;[$_file:$_line]\n&quot; &gt;&gt;$log_file</span><br><span class="line"></span><br><span class="line">	for var in $checklist;do</span><br><span class="line">		eval pval=\$$var</span><br><span class="line">		echo -e &quot;\n$var =:&quot; &gt;&gt;$log_file</span><br><span class="line">		if [ $(echo &quot;$pval&quot; | awk -F&quot;/&quot; &#x27;&#123;print NF&#125;&#x27;) -ge 4 ];then</span><br><span class="line">			printf &quot;%s\n&quot; $pval &gt;&gt;$log_file</span><br><span class="line">		else</span><br><span class="line">			printf &quot;%-30s %-30s %-30s %-30s\n&quot; $pval &gt;&gt;$log_file</span><br><span class="line">		fi</span><br><span class="line">	done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install_wiringop()</span><br><span class="line">&#123;</span><br><span class="line">	install_deb_chroot &quot;$EXTER/cache/debs/arm64/wiringpi_2.51.deb&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;apt-mark hold wiringpi&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">	if [[ $&#123;IGNORE_UPDATES&#125; != yes ]]; then</span><br><span class="line"></span><br><span class="line">		fetch_from_repo &quot;https://github.com/orangepi-xunlong/wiringOP.git&quot; &quot;$&#123;EXTER&#125;/cache/sources/wiringOP&quot; &quot;branch:next&quot; &quot;yes&quot;</span><br><span class="line">		fetch_from_repo &quot;https://github.com/orangepi-xunlong/wiringOP-Python.git&quot; &quot;$&#123;EXTER&#125;/cache/sources/wiringOP-Python&quot; &quot;branch:next&quot; &quot;yes&quot;</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	cp $&#123;EXTER&#125;/cache/sources/wiringOP/next $&#123;SDCARD&#125;/usr/src/wiringOP -rfa</span><br><span class="line">	cp $&#123;EXTER&#125;/cache/sources/wiringOP-Python/next $&#123;SDCARD&#125;/usr/src/wiringOP-Python -rfa</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install_docker() &#123;</span><br><span class="line"></span><br><span class="line">	[[ $install_docker != yes ]] &amp;&amp; return</span><br><span class="line"></span><br><span class="line">	display_alert &quot;Installing&quot; &quot;docker&quot; &quot;info&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;apt-get install -y -qq apt-transport-https ca-certificates curl gnupg2 software-properties-common &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line"></span><br><span class="line">	case $&#123;RELEASE&#125; in</span><br><span class="line">		buster|bullseye|bookworm)</span><br><span class="line">		distributor_id=&quot;debian&quot;</span><br><span class="line">		;;</span><br><span class="line">		xenial|bionic|focal|jammy)</span><br><span class="line">		distributor_id=&quot;ubuntu&quot;</span><br><span class="line">		;;</span><br><span class="line">	esac</span><br><span class="line"></span><br><span class="line">	if [[ $&#123;SELECTED_CONFIGURATION&#125; == desktop ]]; then</span><br><span class="line">		mirror_url=https://repo.huaweicloud.com</span><br><span class="line">	else</span><br><span class="line">		mirror_url=https://mirrors.aliyun.com</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;curl -fsSL $&#123;mirror_url&#125;/docker-ce/linux/$&#123;distributor_id&#125;/gpg | apt-key add -&quot;</span><br><span class="line">	echo &quot;deb [arch=$&#123;ARCH&#125;] $&#123;mirror_url&#125;/docker-ce/linux/$&#123;distributor_id&#125; $&#123;RELEASE&#125; stable&quot; &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/apt/sources.list.d/docker.list</span><br><span class="line"></span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;apt-get update&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;apt-get install -y -qq docker-ce docker-ce-cli containerd.io&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;sudo groupadd docker&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;sudo usermod -aG docker $&#123;OPI_USERNAME&#125;&quot;</span><br><span class="line"></span><br><span class="line">	run_on_sdcard &quot;systemctl --no-reload disable docker.service&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="3-main-sh分析"><a href="#3-main-sh分析" class="headerlink" title="3.main.sh分析"></a>3.main.sh分析</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Copyright (c) 2013-2021 Igor Pecovnik, igor.pecovnik@gma**.com</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This file is licensed under the terms of the GNU General Public</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">License version 2. This program is licensed <span class="string">&quot;as is&quot;</span> without any</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">warranty of any kind, whether express or implied.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Main program</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"></span><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">函数，清理列表中的空白字符。</span></span><br><span class="line">cleanup_list() &#123;</span><br><span class="line">	local varname=&quot;$&#123;1&#125;&quot;</span><br><span class="line">	local list_to_clean=&quot;$&#123;!varname&#125;&quot;</span><br><span class="line">	list_to_clean=&quot;$&#123;list_to_clean#&quot;$&#123;list_to_clean%%[![:space:]]*&#125;&quot;&#125;&quot;</span><br><span class="line">	list_to_clean=&quot;$&#123;list_to_clean%&quot;$&#123;list_to_clean##*[![:space:]]&#125;&quot;&#125;&quot;</span><br><span class="line">	echo $&#123;list_to_clean&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不能是直接执行main.sh,而是要间接执行</span></span><br><span class="line">if [[ $(basename &quot;$0&quot;) == main.sh ]]; then</span><br><span class="line"></span><br><span class="line">	echo &quot;Please use build.sh to start the build process&quot;</span><br><span class="line">	exit 255</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">default <span class="built_in">umask</span> <span class="keyword">for</span> root is 022 so parent directories won<span class="string">&#x27;t be group writeable without this</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">this is used instead of making the chmod in prepare_host() recursive</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">通过修改根用户的 umask 值，可以确保在创建新的父目录时，组成员具有写权限，而不需要进行递归的权限更改操作。</span></span></span><br><span class="line">umask 002</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">destination 设置输出目录</span></span></span><br><span class="line">if [ -d &quot;$CONFIG_PATH/output&quot; ]; then</span><br><span class="line">	DEST=&quot;$&#123;CONFIG_PATH&#125;&quot;/output</span><br><span class="line">else</span><br><span class="line">	DEST=&quot;$&#123;SRC&#125;&quot;/output</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">设置版本号</span></span></span><br><span class="line">[[ -z $REVISION ]] &amp;&amp; REVISION=&quot;3.0.8&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">设置ntp时间</span></span></span><br><span class="line">[[ $DOWNLOAD_MIRROR == &quot;china&quot; ]] &amp;&amp; NTP_SERVER=&quot;cn.pool.ntp.org&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">开始绘制节目</span></span></span><br><span class="line">if [[ $BUILD_ALL != &quot;yes&quot; ]]; then</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">override stty size</span></span></span><br><span class="line">	[[ -n $COLUMNS ]] &amp;&amp; stty cols $COLUMNS</span><br><span class="line">	[[ -n $LINES ]] &amp;&amp; stty rows $LINES</span><br><span class="line">	TTY_X=$(($(stty size | awk &#x27;&#123;print $2&#125;&#x27;)-6)) 			# determine terminal width</span><br><span class="line">	TTY_Y=$(($(stty size | awk &#x27;&#123;print $1&#125;&#x27;)-6)) 			# determine terminal height</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">We&#x27;</span>ll use this title on all menus</span></span><br><span class="line">backtitle=&quot;Orange Pi building script, http://www.orangepi.org&quot; </span><br><span class="line">titlestr=&quot;Choose an option&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Warnings mitigation</span></span><br><span class="line">[[ -z $LANGUAGE ]] &amp;&amp; export LANGUAGE=&quot;en_US:en&quot;            # set to english if not set</span><br><span class="line">[[ -z $CONSOLE_CHAR ]] &amp;&amp; export CONSOLE_CHAR=&quot;UTF-8&quot;       # set console to UTF-8 if not set</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Libraries include</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">source</span>=debootstrap.sh</span></span><br><span class="line">source &quot;$&#123;SRC&#125;&quot;/scripts/debootstrap.sh	# system specific install 系统特定的安装脚本。</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">source</span>=image-helpers.sh</span></span><br><span class="line">source &quot;$&#123;SRC&#125;&quot;/scripts/image-helpers.sh	# helpers for OS image building  用于操作系统镜像构建的辅助函数脚本</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">source</span>=distributions.sh</span></span><br><span class="line">source &quot;$&#123;SRC&#125;&quot;/scripts/distributions.sh	# system specific install 系统特定的安装脚本</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">source</span>=desktop.sh</span></span><br><span class="line">source &quot;$&#123;SRC&#125;&quot;/scripts/desktop.sh		# desktop specific install  桌面环境特定的安装脚本</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">source</span>=compilation.sh</span></span><br><span class="line">source &quot;$&#123;SRC&#125;&quot;/scripts/compilation.sh	# patching and compilation of kernel, uboot, ATF 补丁和编译内核、uboot、ATF（Arm Trusted Firmware）的脚本</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">source</span>=compilation-prepare.sh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">source</span> <span class="string">&quot;<span class="variable">$&#123;SRC&#125;</span>&quot;</span>/scripts/compilation-prepare.sh	<span class="comment"># drivers that are not upstreamed 非上游驱动程序的脚本。</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">source</span>=makeboarddeb.sh</span></span><br><span class="line">source &quot;$&#123;SRC&#125;&quot;/scripts/makeboarddeb.sh		# board support package 用于构建板级支持软件包的脚本</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">source</span>=general.sh</span></span><br><span class="line">source &quot;$&#123;SRC&#125;&quot;/scripts/general.sh		# general functions  通用函数脚本</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">source</span>=chroot-buildpackages.sh</span></span><br><span class="line">source &quot;$&#123;SRC&#125;&quot;/scripts/chroot-buildpackages.sh	# chroot packages building  在 chroot 环境中构建软件包的脚本</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">source</span>=pack.sh</span></span><br><span class="line">source &quot;$&#123;SRC&#125;&quot;/scripts/pack-uboot.sh  打包 uboot 的脚本</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">set</span> <span class="built_in">log</span> path</span></span><br><span class="line">LOG_SUBPATH=$&#123;LOG_SUBPATH:=debug&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">compress and remove old logs</span></span><br><span class="line">mkdir -p &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;</span><br><span class="line">(cd &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125; &amp;&amp; tar -czf logs-&quot;$(&lt;timestamp)&quot;.tgz ./*.log) &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">rm -f &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/*.log &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">date +&quot;%d_%m_%Y-%H_%M_%S&quot; &gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/timestamp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">delete compressed logs older than 7 days</span></span><br><span class="line">(cd &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125; &amp;&amp; find . -name &#x27;*.tgz&#x27; -mtime +7 -delete) &gt; /dev/null</span><br><span class="line"></span><br><span class="line">if [[ $PROGRESS_DISPLAY == none ]]; then</span><br><span class="line"></span><br><span class="line">	OUTPUT_VERYSILENT=yes</span><br><span class="line"></span><br><span class="line">elif [[ $PROGRESS_DISPLAY == dialog ]]; then</span><br><span class="line"></span><br><span class="line">	OUTPUT_DIALOG=yes</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $PROGRESS_LOG_TO_FILE != yes ]]; then unset PROGRESS_LOG_TO_FILE; fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SHOW_WARNING=yes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [[ $USE_CCACHE != no ]]; then</span><br><span class="line"></span><br><span class="line">	CCACHE=ccache</span><br><span class="line">	export PATH=&quot;/usr/lib/ccache:$PATH&quot;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">private ccache directory to avoid permission issues when using build script with <span class="string">&quot;sudo&quot;</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">see https://ccache.samba.org/manual.html<span class="comment">#_sharing_a_cache for alternative solution</span></span></span><br><span class="line">	[[ $PRIVATE_CCACHE == yes ]] &amp;&amp; export CCACHE_DIR=$EXTER/cache/ccache</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line"></span><br><span class="line">	CCACHE=&quot;&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [[ -n $REPOSITORY_UPDATE ]]; then</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="keyword">select</span> stable/beta configuration</span></span><br><span class="line">		if [[ $BETA == yes ]]; then</span><br><span class="line">				DEB_STORAGE=$DEST/debs-beta</span><br><span class="line">				REPO_STORAGE=$DEST/repository-beta</span><br><span class="line">				REPO_CONFIG=&quot;aptly-beta.conf&quot;</span><br><span class="line">		else</span><br><span class="line">				DEB_STORAGE=$DEST/debs</span><br><span class="line">				REPO_STORAGE=$DEST/repository</span><br><span class="line">				REPO_CONFIG=&quot;aptly.conf&quot;</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">For user override</span></span><br><span class="line">		if [[ -f &quot;$&#123;USERPATCHES_PATH&#125;&quot;/lib.config ]]; then</span><br><span class="line">				display_alert &quot;Using user configuration override&quot; &quot;userpatches/lib.config&quot; &quot;info&quot;</span><br><span class="line">			source &quot;$&#123;USERPATCHES_PATH&#125;&quot;/lib.config</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		repo-manipulate &quot;$REPOSITORY_UPDATE&quot;</span><br><span class="line">		exit</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个选项数组 options，并为每个选项添加标签和描述 ，也就是执行之后进入的第一个界面，有4个选择，uboot 内核 文件系统和完整镜像，最后保存到BUILD_OPT</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">if</span> BUILD_OPT, KERNEL_CONFIGURE, BOARD, BRANCH or RELEASE are not <span class="built_in">set</span>, display selection menu</span></span><br><span class="line">if [[ -z $BUILD_OPT ]]; then</span><br><span class="line"></span><br><span class="line">	options+=(&quot;u-boot&quot;	 &quot;U-boot package&quot;)</span><br><span class="line">	options+=(&quot;kernel&quot;	 &quot;Kernel package&quot;)</span><br><span class="line">	options+=(&quot;rootfs&quot;	 &quot;Rootfs and all deb packages&quot;)</span><br><span class="line">	options+=(&quot;image&quot;	 &quot;Full OS image for flashing&quot;)</span><br><span class="line"></span><br><span class="line">	menustr=&quot;Compile image | rootfs | kernel | u-boot&quot;</span><br><span class="line">	BUILD_OPT=$(whiptail --title &quot;$&#123;titlestr&#125;&quot; --backtitle &quot;$&#123;backtitle&#125;&quot; --notags \</span><br><span class="line">			  --menu &quot;$&#123;menustr&#125;&quot; &quot;$&#123;TTY_Y&#125;&quot; &quot;$&#123;TTY_X&#125;&quot; $((TTY_Y - 8))  \</span><br><span class="line">			  --cancel-button Exit --ok-button Select &quot;$&#123;options[@]&#125;&quot; \</span><br><span class="line">			  3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)</span><br><span class="line"></span><br><span class="line">	unset options</span><br><span class="line">	[[ -z $BUILD_OPT ]] &amp;&amp; exit_with_error &quot;No option selected&quot;</span><br><span class="line">	[[ $BUILD_OPT == rootfs ]] &amp;&amp; ROOT_FS_CREATE_ONLY=&quot;yes&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">内核的选择，两个选择，最后保存到KERNEL_CONFIGURE</span></span><br><span class="line">if [[ $&#123;BUILD_OPT&#125; =~ kernel|image ]]; then</span><br><span class="line"></span><br><span class="line">	if [[ -z $KERNEL_CONFIGURE ]]; then</span><br><span class="line"></span><br><span class="line">		options+=(&quot;no&quot; &quot;Do not change the kernel configuration&quot;)</span><br><span class="line">		options+=(&quot;yes&quot; &quot;Show a kernel configuration menu before compilation&quot;)</span><br><span class="line"></span><br><span class="line">		menustr=&quot;Select the kernel configuration.&quot;</span><br><span class="line">		KERNEL_CONFIGURE=$(whiptail --title &quot;$&#123;titlestr&#125;&quot; --backtitle &quot;$backtitle&quot; --notags \</span><br><span class="line">						 --menu &quot;$&#123;menustr&#125;&quot; $TTY_Y $TTY_X $((TTY_Y - 8)) \</span><br><span class="line">						 --cancel-button Exit --ok-button Select &quot;$&#123;options[@]&#125;&quot; \</span><br><span class="line">						 3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)</span><br><span class="line"></span><br><span class="line">		unset options</span><br><span class="line">		[[ -z $KERNEL_CONFIGURE ]] &amp;&amp; exit_with_error &quot;No option selected&quot;</span><br><span class="line">	fi</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">板子的选择，我这里选择orangepi5b，最后保存到BOARD变量中</span></span><br><span class="line">if [[ -z $BOARD ]]; then</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepir1&quot;</span>			<span class="string">&quot;Allwinner H2+ quad core 256MB RAM WiFi SPI 2xETH&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepizero&quot;</span>		<span class="string">&quot;Allwinner H2+ quad core 256MB/512MB RAM WiFi SPI&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepipc&quot;</span>			<span class="string">&quot;Allwinner H3 quad core 1GB RAM&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepipcplus&quot;</span>		<span class="string">&quot;Allwinner H3 quad core 1GB RAM WiFi eMMC&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepione&quot;</span>			<span class="string">&quot;Allwinner H3 quad core 512MB RAM&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepilite&quot;</span>		<span class="string">&quot;Allwinner H3 quad core 512MB RAM WiFi&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepiplus&quot;</span>		<span class="string">&quot;Allwinner H3 quad core 1GB/2GB RAM WiFi GBE eMMC&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepiplus2e&quot;</span>		<span class="string">&quot;Allwinner H3 quad core 2GB RAM WiFi GBE eMMC&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepizeroplus2h3&quot;</span> 	<span class="string">&quot;Allwinner H3 quad core 512MB RAM WiFi/BT eMMC&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepipch5&quot;</span>                <span class="string">&quot;Allwinner H5 quad core 1GB RAM&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepipc2&quot;</span>			<span class="string">&quot;Allwinner H5 quad core 1GB RAM GBE SPI&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepioneh5&quot;</span>               <span class="string">&quot;Allwinner H5 quad core 512MB/1GB RAM&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepiprime&quot;</span>		<span class="string">&quot;Allwinner H5 quad core 2GB RAM GBE WiFi/BT&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepizeroplus&quot;</span>		<span class="string">&quot;Allwinner H5 quad core 512MB RAM GBE WiFi SPI&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepizeroplus2h5&quot;</span>		<span class="string">&quot;Allwinner H5 quad core 512MB RAM WiFi/BT eMMC&quot;</span>)</span></span><br><span class="line">	options+=(&quot;orangepi3&quot;			&quot;Allwinner H6 quad core 1GB/2GB RAM GBE WiFi/BT eMMC USB3&quot;)</span><br><span class="line">	options+=(&quot;orangepi3-lts&quot;		&quot;Allwinner H6 quad core 2GB RAM GBE WiFi/BT-AW859A eMMC USB3&quot;)</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepilite2&quot;</span>		<span class="string">&quot;Allwinner H6 quad core 1GB RAM WiFi/BT USB3&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepioneplus&quot;</span>		<span class="string">&quot;Allwinner H6 quad core 1GB RAM GBE&quot;</span>)</span></span><br><span class="line">	options+=(&quot;orangepizero2&quot;		&quot;Allwinner H616 quad core 512MB/1GB RAM WiFi/BT GBE SPI&quot;)</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepizero2-b&quot;</span>		<span class="string">&quot;Allwinner H616 quad core 512MB/1GB RAM WiFi/BT GBE SPI&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepizero2-lts&quot;</span>           <span class="string">&quot;Allwinner H616 quad core 1.5GB RAM WiFi/BT GBE SPI&quot;</span>)</span></span><br><span class="line">	options+=(&quot;orangepizero3&quot;		&quot;Allwinner H618 quad core 1GB/1.5GB/2GB/4GB RAM WiFi/BT GBE SPI&quot;)</span><br><span class="line">	options+=(&quot;orangepizero2w&quot;		&quot;Allwinner H618 quad core 1GB/1.5GB/2GB/4GB RAM WiFi/BT SPI&quot;)</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepir1b&quot;</span>			<span class="string">&quot;Allwinner H618 quad core 1.5GB/2GB/4GB RAM WiFi/BT GBE SPI&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepi400&quot;</span>			<span class="string">&quot;Allwinner H616 quad core 4GB RAM WiFi/BT GBE eMMC VGA&quot;</span>)</span></span><br><span class="line">	options+=(&quot;orangepi4&quot;                   &quot;Rockchip  RK3399 hexa core 4GB RAM GBE eMMC USB3 USB-C WiFi/BT&quot;)</span><br><span class="line">	options+=(&quot;orangepi4-lts&quot;                 &quot;Rockchip  RK3399 hexa core 4GB RAM GBE eMMC USB3 USB-C WiFi/BT&quot;)</span><br><span class="line">	options+=(&quot;orangepi800&quot;                 &quot;Rockchip  RK3399 hexa core 4GB RAM GBE eMMC USB3 USB-C WiFi/BT VGA&quot;)</span><br><span class="line">	options+=(&quot;orangepi5&quot;                 &quot;Rockchip  RK3588S octa core 4-16GB RAM GBE USB3 USB-C NVMe&quot;)</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepicm5&quot;</span>                 <span class="string">&quot;Rockchip  RK3588S octa core 4-16GB RAM GBE USB3 USB-C&quot;</span>)</span></span><br><span class="line">	options+=(&quot;orangepi5b&quot;                 &quot;Rockchip  RK3588S octa core 4-16GB RAM GBE USB3 USB-C WiFi/BT eMMC&quot;)</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepitab&quot;</span>                 <span class="string">&quot;Rockchip  RK3588S octa core 4-16GB RAM USB-C WiFi/BT NVMe&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepi900&quot;</span>                 <span class="string">&quot;Rockchip  RK3588 octa core 4-16GB RAM 2.5GBE USB3 USB-C WiFi/BT NVMe&quot;</span>)</span></span><br><span class="line">	options+=(&quot;orangepi5plus&quot;                 &quot;Rockchip  RK3588 octa core 4-32GB RAM 2.5GBE USB3 USB-C WiFi/BT NVMe eMMC&quot;)</span><br><span class="line">	options+=(&quot;orangepicm4&quot;                 &quot;Rockchip  RK3566 quad core 2-8GB RAM GBE eMMC USB3 NvMe WiFi/BT&quot;)</span><br><span class="line">	options+=(&quot;orangepi3b&quot;                  &quot;Rockchip  RK3566 quad core 2-8GB RAM GBE eMMC USB3 NvMe WiFi/BT&quot;)</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">options+=(<span class="string">&quot;orangepir1plus&quot;</span>              <span class="string">&quot;Rockchip  RK3328 quad core 1GB RAM 2xGBE USB2 SPI&quot;</span>)</span></span><br><span class="line"></span><br><span class="line">	menustr=&quot;Please choose a Board.&quot;</span><br><span class="line">	BOARD=$(whiptail --title &quot;$&#123;titlestr&#125;&quot; --backtitle &quot;$&#123;backtitle&#125;&quot; \</span><br><span class="line">			  --menu &quot;$&#123;menustr&#125;&quot; &quot;$&#123;TTY_Y&#125;&quot; &quot;$&#123;TTY_X&#125;&quot; $((TTY_Y - 8))  \</span><br><span class="line">			  --cancel-button Exit --ok-button Select &quot;$&#123;options[@]&#125;&quot; \</span><br><span class="line">			  3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)</span><br><span class="line"></span><br><span class="line">	unset options</span><br><span class="line">	[[ -z $BOARD ]] &amp;&amp; exit_with_error &quot;No option selected&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">BOARD_TYPE=&quot;conf&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">source</span>=/dev/null</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">external/config/boards/orangepi5b.conf，类似于瑞芯微的环境配置文件，</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Rockchip RK3588s SoC</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">BOARD_NAME=<span class="string">&quot;Orange Pi 5B&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">BOARDFAMILY=<span class="string">&quot;rockchip-rk3588&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">BOOTCONFIG=<span class="string">&quot;orangepi_5b_defconfig&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">KERNEL_TARGET=<span class="string">&quot;legacy&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">BOOT_LOGO=<span class="string">&quot;desktop&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">BOOT_FDT_FILE=<span class="string">&quot;rockchip/rk3588s-orangepi-5b.dtb&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">BOOT_SCENARIO=<span class="string">&quot;spl-blobs&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">IMAGE_PARTITION_TABLE=<span class="string">&quot;gpt&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">BOOT_SUPPORT_SPI=<span class="string">&quot;yes&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SKIP_BOOTSPLASH=<span class="string">&quot;yes&quot;</span> <span class="comment"># Skip boot splash patch, conflicts with CONFIG_VT=yes</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">DISTRIB_TYPE_LEGACY=<span class="string">&quot;bullseye bookworm bionic focal jammy&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">BOOTFS_TYPE=<span class="string">&quot;fat&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">REVISION=<span class="string">&quot;1.0.8&quot;</span></span></span><br><span class="line"></span><br><span class="line">source &quot;$&#123;EXTER&#125;/config/boards/$&#123;BOARD&#125;.$&#123;BOARD_TYPE&#125;&quot;</span><br><span class="line">LINUXFAMILY=&quot;$&#123;BOARDFAMILY&#125;&quot;</span><br><span class="line"></span><br><span class="line">[[ -z $KERNEL_TARGET ]] &amp;&amp; exit_with_error &quot;Board configuration does not define valid kernel config&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这个没有进入，跳过</span></span><br><span class="line">if [[ -z $BRANCH ]]; then</span><br><span class="line"></span><br><span class="line">	options=()</span><br><span class="line">	[[ $KERNEL_TARGET == *current* ]] &amp;&amp; options+=(&quot;current&quot; &quot;Recommended. Come with best support&quot;)</span><br><span class="line">	[[ $KERNEL_TARGET == *legacy* ]] &amp;&amp; options+=(&quot;legacy&quot; &quot;Old stable / Legacy&quot;)</span><br><span class="line">	[[ $KERNEL_TARGET == *next* ]] &amp;&amp; options+=(&quot;next&quot; &quot;Use the latest kernel&quot;)</span><br><span class="line"></span><br><span class="line">	menustr=&quot;Select the target kernel branch\nExact kernel versions depend on selected board&quot;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="keyword">do</span> not display selection dialog <span class="keyword">if</span> only one kernel branch is available</span></span><br><span class="line">	if [[ &quot;$&#123;#options[@]&#125;&quot; == 2 ]]; then</span><br><span class="line">		BRANCH=&quot;$&#123;options[0]&#125;&quot;</span><br><span class="line">	else</span><br><span class="line">		BRANCH=$(whiptail --title &quot;$&#123;titlestr&#125;&quot; --backtitle &quot;$&#123;backtitle&#125;&quot; \</span><br><span class="line">				  --menu &quot;$&#123;menustr&#125;&quot; &quot;$&#123;TTY_Y&#125;&quot; &quot;$&#123;TTY_X&#125;&quot; $((TTY_Y - 8))  \</span><br><span class="line">				  --cancel-button Exit --ok-button Select &quot;$&#123;options[@]&#125;&quot; \</span><br><span class="line">				  3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)</span><br><span class="line">	fi</span><br><span class="line">	unset options</span><br><span class="line">	[[ -z $BRANCH ]] &amp;&amp; exit_with_error &quot;No kernel branch selected&quot;</span><br><span class="line">	[[ $BRANCH == dev &amp;&amp; $SHOW_WARNING == yes ]] &amp;&amp; show_developer_warning</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里没进入</span></span><br><span class="line">if [[ -z $&#123;MEM_TYPE&#125; &amp;&amp; $&#123;BOARD&#125; =~ orangepizero3|orangepir1b|orangepizero2w &amp;&amp; $&#123;BUILD_OPT&#125; =~ u-boot|image &amp;&amp; $&#123;BRANCH&#125; == next ]]; then</span><br><span class="line"></span><br><span class="line">	options+=(&quot;1500MB&quot;    &quot;1.5 GB Memory&quot;)</span><br><span class="line">	options+=(&quot;Others&quot;    &quot;1/2/4 GB Memory&quot;)</span><br><span class="line"></span><br><span class="line">	menustr=&quot;Please choose memory size for $&#123;BOARD&#125;.&quot;</span><br><span class="line">	MEM_TYPE=$(whiptail --title &quot;$&#123;titlestr&#125;&quot; --backtitle &quot;$&#123;backtitle&#125;&quot; \</span><br><span class="line">			  --menu &quot;$&#123;menustr&#125;&quot; &quot;$&#123;TTY_Y&#125;&quot; &quot;$&#123;TTY_X&#125;&quot; $((TTY_Y - 8))  \</span><br><span class="line">			  --cancel-button Exit --ok-button Select &quot;$&#123;options[@]&#125;&quot; \</span><br><span class="line">			  3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)</span><br><span class="line"></span><br><span class="line">	unset options</span><br><span class="line">	[[ -z $MEM_TYPE ]] &amp;&amp; exit_with_error &quot;No option selected&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里也没进入</span></span><br><span class="line">if [[ $BUILD_OPT =~ rootfs|image &amp;&amp; -z $RELEASE ]]; then</span><br><span class="line"></span><br><span class="line">	options=()</span><br><span class="line"></span><br><span class="line">	distros_options</span><br><span class="line"></span><br><span class="line">	menustr=&quot;Select the target OS release package base&quot;</span><br><span class="line">	RELEASE=$(whiptail --title &quot;Choose a release package base&quot; --backtitle &quot;$&#123;backtitle&#125;&quot; \</span><br><span class="line">			  --menu &quot;$&#123;menustr&#125;&quot; &quot;$&#123;TTY_Y&#125;&quot; &quot;$&#123;TTY_X&#125;&quot; $((TTY_Y - 8))  \</span><br><span class="line">			  --cancel-button Exit --ok-button Select &quot;$&#123;options[@]&#125;&quot; \</span><br><span class="line">			  3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;options : <span class="variable">$&#123;options&#125;</span>&quot;</span></span></span><br><span class="line">	[[ -z $RELEASE ]] &amp;&amp; exit_with_error &quot;No release selected&quot;</span><br><span class="line"></span><br><span class="line">	unset options</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择桌面端还是服务器端，保存到BUILD_DESKTOP变量中</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">don<span class="string">&#x27;t show desktop option if we choose minimal build</span></span></span><br><span class="line">[[ $BUILD_MINIMAL == yes ]] &amp;&amp; BUILD_DESKTOP=no</span><br><span class="line"></span><br><span class="line">if [[ $BUILD_OPT =~ rootfs|image &amp;&amp; -z $BUILD_DESKTOP ]]; then</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">read distribution support status which is written to the orangepi-release file</span></span></span><br><span class="line">	set_distribution_status</span><br><span class="line"></span><br><span class="line">	options=()</span><br><span class="line">	options+=(&quot;no&quot; &quot;Image with console interface (server)&quot;)</span><br><span class="line">	options+=(&quot;yes&quot; &quot;Image with desktop environment&quot;)</span><br><span class="line"></span><br><span class="line">	menustr=&quot;Select the target image type&quot;</span><br><span class="line">	BUILD_DESKTOP=$(whiptail --title &quot;Choose image type&quot; --backtitle &quot;$&#123;backtitle&#125;&quot; \</span><br><span class="line">			  --menu &quot;$&#123;menustr&#125;&quot; &quot;$&#123;TTY_Y&#125;&quot; &quot;$&#123;TTY_X&#125;&quot; $((TTY_Y - 8))  \</span><br><span class="line">			  --cancel-button Exit --ok-button Select &quot;$&#123;options[@]&#125;&quot; \</span><br><span class="line">			  3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)</span><br><span class="line">	unset options</span><br><span class="line">	[[ -z $BUILD_DESKTOP ]] &amp;&amp; exit_with_error &quot;No option selected&quot;</span><br><span class="line">	if [[ $&#123;BUILD_DESKTOP&#125; == &quot;yes&quot; ]]; then</span><br><span class="line">		BUILD_MINIMAL=no</span><br><span class="line">		SELECTED_CONFIGURATION=&quot;desktop&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">服务端的选择，我这里不会进入</span></span></span><br><span class="line">if [[ $BUILD_OPT =~ rootfs|image &amp;&amp; $BUILD_DESKTOP == no &amp;&amp; -z $BUILD_MINIMAL ]]; then</span><br><span class="line"></span><br><span class="line">	options=()</span><br><span class="line">	options+=(&quot;no&quot; &quot;Standard image with console interface&quot;)</span><br><span class="line">	options+=(&quot;yes&quot; &quot;Minimal image with console interface&quot;)</span><br><span class="line">	menustr=&quot;Select the target image type&quot;</span><br><span class="line">	BUILD_MINIMAL=$(whiptail --title &quot;Choose image type&quot; --backtitle &quot;$&#123;backtitle&#125;&quot; \</span><br><span class="line">			  --menu &quot;$&#123;menustr&#125;&quot; &quot;$&#123;TTY_Y&#125;&quot; &quot;$&#123;TTY_X&#125;&quot; $((TTY_Y - 8))  \</span><br><span class="line">			  --cancel-button Exit --ok-button Select &quot;$&#123;options[@]&#125;&quot; \</span><br><span class="line">			  3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3)</span><br><span class="line">	unset options</span><br><span class="line">	[[ -z $BUILD_MINIMAL ]] &amp;&amp; exit_with_error &quot;No option selected&quot;</span><br><span class="line">	if [[ $BUILD_MINIMAL == &quot;yes&quot; ]]; then</span><br><span class="line">		SELECTED_CONFIGURATION=&quot;cli_minimal&quot;</span><br><span class="line">	else</span><br><span class="line">		SELECTED_CONFIGURATION=&quot;cli_standard&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">prevent conflicting setup</span></span></span><br><span class="line">if [[ $BUILD_DESKTOP == &quot;yes&quot; ]]; then</span><br><span class="line">	BUILD_MINIMAL=no</span><br><span class="line">	SELECTED_CONFIGURATION=&quot;desktop&quot;</span><br><span class="line">elif [[ $BUILD_MINIMAL != &quot;yes&quot; || -z &quot;$&#123;BUILD_MINIMAL&#125;&quot; ]]; then</span><br><span class="line">	BUILD_MINIMAL=no # Just in case BUILD_MINIMAL is not defined</span><br><span class="line">	BUILD_DESKTOP=no</span><br><span class="line">	SELECTED_CONFIGURATION=&quot;cli_standard&quot;</span><br><span class="line">elif [[ $BUILD_MINIMAL == &quot;yes&quot; ]]; then</span><br><span class="line">	BUILD_DESKTOP=no</span><br><span class="line">	SELECTED_CONFIGURATION=&quot;cli_minimal&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">[[ $&#123;KERNEL_CONFIGURE&#125; == prebuilt ]] &amp;&amp; [[ -z $&#123;REPOSITORY_INSTALL&#125; ]] &amp;&amp; \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">#REPOSITORY_INSTALL=&quot;u-boot,kernel,bsp,orangepi-zsh,orangepi-config,orangepi-firmware$&#123;BUILD_DESKTOP:+,orangepi-desktop&#125;&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">shellcheck source=configuration.sh</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">这个脚本可能有问题，具体看一下，也是一些配置，</span></span></span><br><span class="line">source &quot;$&#123;SRC&#125;&quot;/scripts/configuration.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">optimize build time with 100% CPU usage</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">获取CPU最大的线程数</span></span></span><br><span class="line">CPUS=$(grep -c &#x27;processor&#x27; /proc/cpuinfo)</span><br><span class="line">if [[ $USEALLCORES != no ]]; then</span><br><span class="line"></span><br><span class="line">	CTHREADS=&quot;-j$((CPUS + CPUS/2))&quot;</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line"></span><br><span class="line">	CTHREADS=&quot;-j1&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">call_extension_method &quot;post_determine_cthreads&quot; &quot;config_post_determine_cthreads&quot; &lt;&lt; &#x27;POST_DETERMINE_CTHREADS&#x27;</span><br><span class="line">*give config a chance modify CTHREADS programatically. A build server may work better with hyperthreads-1 for example.*</span><br><span class="line">Called early, before any compilation work starts.</span><br><span class="line">POST_DETERMINE_CTHREADS</span><br><span class="line"></span><br><span class="line">if [[ $BETA == yes ]]; then</span><br><span class="line">	IMAGE_TYPE=nightly</span><br><span class="line">elif [[ $BETA != &quot;yes&quot; &amp;&amp; $BUILD_ALL == yes &amp;&amp; -n $GPG_PASS ]]; then</span><br><span class="line">	IMAGE_TYPE=stable</span><br><span class="line">else</span><br><span class="line">	IMAGE_TYPE=user-built</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">branch2dir() &#123;</span><br><span class="line">	[[ &quot;$&#123;1&#125;&quot; == &quot;head&quot; ]] &amp;&amp; echo &quot;HEAD&quot; || echo &quot;$&#123;1##*:&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOTSOURCEDIR=&quot;$&#123;BOOTDIR&#125;/$(branch2dir &quot;$&#123;BOOTBRANCH&#125;&quot;)&quot;</span><br><span class="line">LINUXSOURCEDIR=&quot;$&#123;KERNELDIR&#125;/$(branch2dir &quot;$&#123;KERNELBRANCH&#125;&quot;)&quot;</span><br><span class="line">[[ -n $ATFSOURCE ]] &amp;&amp; ATFSOURCEDIR=&quot;$&#123;ATFDIR&#125;/$(branch2dir &quot;$&#123;ATFBRANCH&#125;&quot;)&quot;</span><br><span class="line"></span><br><span class="line">BSP_CLI_PACKAGE_NAME=&quot;orangepi-bsp-cli-$&#123;BOARD&#125;&quot;</span><br><span class="line">BSP_CLI_PACKAGE_FULLNAME=&quot;$&#123;BSP_CLI_PACKAGE_NAME&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;&quot;</span><br><span class="line">BSP_DESKTOP_PACKAGE_NAME=&quot;orangepi-bsp-desktop-$&#123;BOARD&#125;&quot;</span><br><span class="line">BSP_DESKTOP_PACKAGE_FULLNAME=&quot;$&#123;BSP_DESKTOP_PACKAGE_NAME&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;&quot;</span><br><span class="line"></span><br><span class="line">CHOSEN_UBOOT=linux-u-boot-$&#123;BRANCH&#125;-$&#123;BOARD&#125;</span><br><span class="line">CHOSEN_KERNEL=linux-image-$&#123;BRANCH&#125;-$&#123;LINUXFAMILY&#125;</span><br><span class="line">CHOSEN_ROOTFS=$&#123;BSP_CLI_PACKAGE_NAME&#125;</span><br><span class="line">CHOSEN_DESKTOP=orangepi-$&#123;RELEASE&#125;-desktop-$&#123;DESKTOP_ENVIRONMENT&#125;</span><br><span class="line">CHOSEN_KSRC=linux-source-$&#123;BRANCH&#125;-$&#123;LINUXFAMILY&#125;</span><br><span class="line"></span><br><span class="line">do_default() &#123;</span><br><span class="line"></span><br><span class="line">start=$(date +%s)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Check and install dependencies, directory structure and settings</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The OFFLINE_WORK variable inside the function</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">下载编译器等以及一些环境依赖</span></span></span><br><span class="line">prepare_host</span><br><span class="line"></span><br><span class="line">[[ &quot;$&#123;JUST_INIT&#125;&quot; == &quot;yes&quot; ]] &amp;&amp; exit 0</span><br><span class="line"></span><br><span class="line">[[ $CLEAN_LEVEL == *sources* ]] &amp;&amp; cleaning &quot;sources&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">fetch_from_repo &lt;url&gt; &lt;dir&gt; &lt;ref&gt; &lt;subdir_flag&gt;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">ignore updates help on building all images - for internal purposes</span></span></span><br><span class="line">if [[ $&#123;IGNORE_UPDATES&#125; != yes ]]; then</span><br><span class="line"></span><br><span class="line">	display_alert &quot;Downloading sources&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">同步uboot和内核</span></span></span><br><span class="line">	[[ $BUILD_OPT =~ u-boot|image ]] &amp;&amp; fetch_from_repo &quot;$BOOTSOURCE&quot; &quot;$BOOTDIR&quot; &quot;$BOOTBRANCH&quot; &quot;yes&quot;</span><br><span class="line">	[[ $BUILD_OPT =~ kernel|image ]] &amp;&amp; fetch_from_repo &quot;$KERNELSOURCE&quot; &quot;$KERNELDIR&quot; &quot;$KERNELBRANCH&quot; &quot;yes&quot;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">同步atfa</span></span></span><br><span class="line">	if [[ -n $&#123;ATFSOURCE&#125; ]]; then</span><br><span class="line"></span><br><span class="line">		[[ $&#123;BUILD_OPT&#125; =~ u-boot|image ]] &amp;&amp; fetch_from_repo &quot;$ATFSOURCE&quot; &quot;$&#123;EXTER&#125;/cache/sources/$ATFDIR&quot; &quot;$ATFBRANCH&quot; &quot;yes&quot;</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ $&#123;BOARD&#125; =~ orangepi4|orangepi4-lts|orangepi800 &amp;&amp; $BRANCH == legacy ]]; then</span><br><span class="line"></span><br><span class="line">		[[ $BUILD_OPT =~ image ]] &amp;&amp; fetch_from_repo &quot;https://github.com/orangepi-xunlong/rk3399_gst_xserver_libs.git&quot; &quot;$&#123;EXTER&#125;/cache/sources/rk3399_gst_xserver_libs&quot; &quot;branch:main&quot;</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ $&#123;BOARD&#125; =~ orangepi4|orangepi4-lts|orangepi800 &amp;&amp; $RELEASE =~ focal|buster|bullseye|bookworm ]]; then</span><br><span class="line"></span><br><span class="line">		[[ $&#123;BUILD_OPT&#125; == image ]] &amp;&amp; fetch_from_repo &quot;https://github.com/orangepi-xunlong/rk-rootfs-build.git&quot; &quot;$&#123;EXTER&#125;/cache/sources/rk-rootfs-build-$&#123;RELEASE&#125;&quot; &quot;branch:rk-rootfs-build-$&#123;RELEASE&#125;&quot;</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">同步3588的package</span></span></span><br><span class="line">	if [[ $&#123;BOARDFAMILY&#125; == &quot;rockchip-rk3588&quot; &amp;&amp; $RELEASE =~ bullseye|bookworm|focal|jammy|raspi ]]; then</span><br><span class="line"></span><br><span class="line">		[[ $&#123;BUILD_OPT&#125; == image ]] &amp;&amp; fetch_from_repo &quot;https://github.com/orangepi-xunlong/rk-rootfs-build.git&quot; &quot;$&#123;EXTER&#125;/cache/sources/rk3588_packages_$&#123;RELEASE&#125;&quot; &quot;branch:rk3588_packages_$&#123;RELEASE&#125;&quot;</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ $&#123;BOARDFAMILY&#125; == &quot;rockchip-rk356x&quot; &amp;&amp; $RELEASE =~ bullseye|focal|jammy|raspi ]]; then</span><br><span class="line"></span><br><span class="line">		[[ $&#123;BUILD_OPT&#125; == image ]] &amp;&amp; fetch_from_repo &quot;https://github.com/orangepi-xunlong/rk-rootfs-build.git&quot; &quot;$&#123;EXTER&#125;/cache/sources/rk356x_packages&quot; &quot;branch:rk356x_packages&quot;</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ $&#123;BOARD&#125; =~ orangepi3|orangepi3-lts &amp;&amp; $RELEASE =~ bullseye &amp;&amp; $BRANCH == current ]]; then</span><br><span class="line"></span><br><span class="line">		[[ $&#123;BUILD_OPT&#125; == image ]] &amp;&amp; fetch_from_repo &quot;https://github.com/orangepi-xunlong/rk-rootfs-build.git&quot; &quot;$&#123;EXTER&#125;/cache/sources/ffmpeg_kodi_$&#123;RELEASE&#125;&quot; &quot;branch:ffmpeg_kodi_$&#123;RELEASE&#125;&quot;</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ $&#123;BOARD&#125; =~ orangepi4|orangepi4-lts|orangepi800 &amp;&amp; $RELEASE =~ jammy &amp;&amp; $BRANCH == next ]]; then</span><br><span class="line"></span><br><span class="line">		[[ $&#123;BUILD_OPT&#125; == image ]] &amp;&amp; fetch_from_repo &quot;https://github.com/orangepi-xunlong/rk-rootfs-build.git&quot; &quot;$&#123;EXTER&#125;/cache/sources/ffmpeg_kodi_$&#123;RELEASE&#125;&quot; &quot;branch:ffmpeg_kodi_$&#123;RELEASE&#125;&quot;</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	call_extension_method &quot;fetch_sources_tools&quot;  &lt;&lt;- &#x27;FETCH_SOURCES_TOOLS&#x27;</span><br><span class="line">	*fetch host-side sources needed for tools and build*</span><br><span class="line">	Run early to fetch_from_repo or otherwise obtain sources for needed tools.</span><br><span class="line">	FETCH_SOURCES_TOOLS</span><br><span class="line"></span><br><span class="line">	call_extension_method &quot;build_host_tools&quot;  &lt;&lt;- &#x27;BUILD_HOST_TOOLS&#x27;</span><br><span class="line">	*build needed tools for the build, host-side*</span><br><span class="line">	After sources are fetched, build host-side tools needed for the build.</span><br><span class="line">	BUILD_HOST_TOOLS</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">for option in $(tr &#x27;,&#x27; &#x27; &#x27; &lt;&lt;&lt; &quot;$CLEAN_LEVEL&quot;); do</span><br><span class="line">	[[ $option != sources ]] &amp;&amp; cleaning &quot;$option&quot;</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Compile u-boot if packed .deb does not exist or use the one from Orange Pi</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">编译uboot</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">编译TF-a</span></span></span><br><span class="line">if [[ $BUILD_OPT == u-boot || $BUILD_OPT == image ]]; then</span><br><span class="line"></span><br><span class="line">	if [[ ! -f &quot;$&#123;DEB_STORAGE&#125;&quot;/u-boot/$&#123;CHOSEN_UBOOT&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb ]]; then</span><br><span class="line"></span><br><span class="line">		[[ -n &quot;$&#123;ATFSOURCE&#125;&quot; &amp;&amp; &quot;$&#123;REPOSITORY_INSTALL&#125;&quot; != *u-boot* ]] &amp;&amp; compile_atf</span><br><span class="line">		</span><br><span class="line">		[[ $&#123;REPOSITORY_INSTALL&#125; != *u-boot* ]] &amp;&amp; compile_uboot</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ $BUILD_OPT == &quot;u-boot&quot; ]]; then</span><br><span class="line">		unset BUILD_MINIMAL BUILD_DESKTOP COMPRESS_OUTPUTIMAGE</span><br><span class="line">		display_alert &quot;U-boot build done&quot; &quot;@host&quot; &quot;info&quot;</span><br><span class="line">		display_alert &quot;Target directory&quot; &quot;$&#123;DEB_STORAGE&#125;/u-boot&quot; &quot;info&quot;</span><br><span class="line">		display_alert &quot;File name&quot; &quot;$&#123;CHOSEN_UBOOT&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot; &quot;info&quot;</span><br><span class="line">	fi</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">编译内核</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Compile kernel if packed .deb does not exist or use the one from Orange Pi</span></span></span><br><span class="line">if [[ $BUILD_OPT == kernel || $BUILD_OPT == image ]]; then</span><br><span class="line"></span><br><span class="line">	if [[ ! -f $&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KERNEL&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb ]]; then </span><br><span class="line"></span><br><span class="line">		KDEB_CHANGELOG_DIST=$RELEASE</span><br><span class="line">		[[ &quot;$&#123;REPOSITORY_INSTALL&#125;&quot; != *kernel* ]] &amp;&amp; compile_kernel</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ $BUILD_OPT == &quot;kernel&quot; ]]; then</span><br><span class="line">		unset BUILD_MINIMAL BUILD_DESKTOP COMPRESS_OUTPUTIMAGE</span><br><span class="line">		display_alert &quot;Kernel build done&quot; &quot;@host&quot; &quot;info&quot;</span><br><span class="line">		display_alert &quot;Target directory&quot; &quot;$&#123;DEB_STORAGE&#125;/&quot; &quot;info&quot;</span><br><span class="line">		display_alert &quot;File name&quot; &quot;$&#123;CHOSEN_KERNEL&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot; &quot;info&quot;</span><br><span class="line">	fi</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">编译文件系统，这里是最重要的</span></span></span><br><span class="line">if [[ $BUILD_OPT == rootfs || $BUILD_OPT == image ]]; then</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Compile orangepi-config if packed .deb does not exist or use the one from Orange Pi</span></span></span><br><span class="line">	if [[ ! -f $&#123;DEB_STORAGE&#125;/orangepi-config_$&#123;REVISION&#125;_all.deb ]]; then</span><br><span class="line">	</span><br><span class="line">		[[ &quot;$&#123;REPOSITORY_INSTALL&#125;&quot; != *orangepi-config* ]] &amp;&amp; compile_orangepi-config</span><br><span class="line">	fi </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Compile orangepi-zsh if packed .deb does not exist or use the one from repository</span></span></span><br><span class="line">	if [[ ! -f $&#123;DEB_STORAGE&#125;/orangepi-zsh_$&#123;REVISION&#125;_all.deb ]]; then</span><br><span class="line"></span><br><span class="line">	        [[ &quot;$&#123;REPOSITORY_INSTALL&#125;&quot; != *orangepi-zsh* ]] &amp;&amp; compile_orangepi-zsh</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Compile plymouth-theme-orangepi if packed .deb does not exist or use the one from repository</span></span></span><br><span class="line">	if [[ ! -f $&#123;DEB_STORAGE&#125;/plymouth-theme-orangepi_$&#123;REVISION&#125;_all.deb ]]; then</span><br><span class="line"></span><br><span class="line">		[[ &quot;$&#123;REPOSITORY_INSTALL&#125;&quot; != *plymouth-theme-orangepi* ]] &amp;&amp; compile_plymouth-theme-orangepi</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Compile orangepi-firmware if packed .deb does not exist or use the one from repository</span></span></span><br><span class="line">	if [[ &quot;$&#123;REPOSITORY_INSTALL&#125;&quot; != *orangepi-firmware* ]]; then</span><br><span class="line"></span><br><span class="line">		if ! ls &quot;$&#123;DEB_STORAGE&#125;/orangepi-firmware_$&#123;REVISION&#125;_all.deb&quot; 1&gt; /dev/null 2&gt;&amp;1; then</span><br><span class="line"></span><br><span class="line">			FULL=&quot;&quot;</span><br><span class="line">			REPLACE=&quot;-full&quot;</span><br><span class="line">			compile_firmware</span><br><span class="line"></span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"><span class="string">if ! ls &quot;$&#123;DEB_STORAGE&#125;/orangepi-firmware-full_$&#123;REVISION&#125;_all.deb&quot; 1&gt; /dev/null 2&gt;&amp;1; then</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			#</span><span class="language-bash"><span class="string">FULL=&quot;-full&quot;</span></span></span><br><span class="line"><span class="meta prompt_">			#</span><span class="language-bash"><span class="string">REPLACE=&quot;&quot;</span></span></span><br><span class="line"><span class="meta prompt_">			#</span><span class="language-bash"><span class="string">compile_firmware</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"><span class="string">fi</span></span></span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	overlayfs_wrapper &quot;cleanup&quot;</span><br><span class="line"><span class="meta prompt_">	</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">create board support package</span></span></span><br><span class="line">	[[ -n $RELEASE &amp;&amp; ! -f $&#123;DEB_STORAGE&#125;/$RELEASE/$&#123;BSP_CLI_PACKAGE_FULLNAME&#125;.deb ]] &amp;&amp; create_board_package</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">create desktop package</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">[[ -n $RELEASE &amp;&amp; $DESKTOP_ENVIRONMENT &amp;&amp; ! -f $&#123;DEB_STORAGE&#125;/$RELEASE/$&#123;CHOSEN_DESKTOP&#125;_$&#123;REVISION&#125;_all.deb ]] &amp;&amp; create_desktop_package</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">[[ -n $RELEASE &amp;&amp; $DESKTOP_ENVIRONMENT &amp;&amp; ! -f $&#123;DEB_STORAGE&#125;/$&#123;RELEASE&#125;/$&#123;BSP_DESKTOP_PACKAGE_FULLNAME&#125;.deb ]] &amp;&amp; create_bsp_desktop_package</span></span></span><br><span class="line">	[[ -n $RELEASE &amp;&amp; $DESKTOP_ENVIRONMENT ]] &amp;&amp; create_desktop_package</span><br><span class="line">	[[ -n $RELEASE &amp;&amp; $DESKTOP_ENVIRONMENT ]] &amp;&amp; create_bsp_desktop_package</span><br><span class="line"><span class="meta prompt_">	</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">build additional packages</span></span></span><br><span class="line">	[[ $EXTERNAL_NEW == compile ]] &amp;&amp; chroot_build_packages</span><br><span class="line">	</span><br><span class="line">	[[ $BSP_BUILD != yes ]] &amp;&amp; debootstrap_ng</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">hook for function to run after build, i.e. to change owner of $SRC</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">NOTE: this will run only if there were no errors during build process</span></span></span><br><span class="line">[[ $(type -t run_after_build) == function ]] &amp;&amp; run_after_build || true</span><br><span class="line"></span><br><span class="line">end=$(date +%s)</span><br><span class="line">runtime=$(((end-start)/60))</span><br><span class="line">display_alert &quot;Runtime&quot; &quot;$runtime min&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Make it easy to repeat build by displaying build options used</span></span></span><br><span class="line">[ &quot;$(systemd-detect-virt)&quot; == &#x27;docker&#x27; ] &amp;&amp; BUILD_CONFIG=&#x27;docker&#x27;</span><br><span class="line"></span><br><span class="line">display_alert &quot;Repeat Build Options&quot; &quot;sudo ./build.sh $&#123;BUILD_CONFIG&#125; BOARD=$&#123;BOARD&#125; BRANCH=$&#123;BRANCH&#125; \</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="string">([[ -n $BUILD_OPT ]] &amp;&amp; echo &quot;BUILD_OPT=$&#123;BUILD_OPT&#125; &quot;)\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">$([[ -n $RELEASE ]] &amp;&amp; echo &quot;RELEASE=$&#123;RELEASE&#125; &quot;)\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">$([[ -n $BUILD_MINIMAL ]] &amp;&amp; echo &quot;BUILD_MINIMAL=$&#123;BUILD_MINIMAL&#125; &quot;)\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">$([[ -n $BUILD_DESKTOP ]] &amp;&amp; echo &quot;BUILD_DESKTOP=$&#123;BUILD_DESKTOP&#125; &quot;)\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">$([[ -n $KERNEL_CONFIGURE ]] &amp;&amp; echo &quot;KERNEL_CONFIGURE=$&#123;KERNEL_CONFIGURE&#125; &quot;)\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">$([[ -n $DESKTOP_ENVIRONMENT ]] &amp;&amp; echo &quot;DESKTOP_ENVIRONMENT=$&#123;DESKTOP_ENVIRONMENT&#125; &quot;)\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">$([[ -n $DESKTOP_ENVIRONMENT_CONFIG_NAME  ]] &amp;&amp; echo &quot;DESKTOP_ENVIRONMENT_CONFIG_NAME=$&#123;DESKTOP_ENVIRONMENT_CONFIG_NAME&#125; &quot;)\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">$([[ -n $DESKTOP_APPGROUPS_SELECTED ]] &amp;&amp; echo &quot;DESKTOP_APPGROUPS_SELECTED=\&quot;$&#123;DESKTOP_APPGROUPS_SELECTED&#125;\&quot; &quot;)\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">$([[ -n $DESKTOP_APT_FLAGS_SELECTED ]] &amp;&amp; echo &quot;DESKTOP_APT_FLAGS_SELECTED=\&quot;$&#123;DESKTOP_APT_FLAGS_SELECTED&#125;\&quot; &quot;)\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">$([[ -n $COMPRESS_OUTPUTIMAGE ]] &amp;&amp; echo &quot;COMPRESS_OUTPUTIMAGE=$&#123;COMPRESS_OUTPUTIMAGE&#125; &quot;)\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">&quot; &quot;ext&quot;</span></span></span><br><span class="line"></span><br><span class="line">&#125; # end of do_default()</span><br><span class="line"></span><br><span class="line">if [[ -z $1 ]]; then</span><br><span class="line">	do_default</span><br><span class="line">else</span><br><span class="line">	eval &quot;$@&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h1 id="4-configuration-sh分析"><a href="#4-configuration-sh分析" class="headerlink" title="4.configuration.sh分析"></a>4.configuration.sh分析</h1><p>看样子是配置一些环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Copyright (c) 2013-2021 Igor Pecovnik, igor.pecovnik@gma**.com</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This file is licensed under the terms of the GNU General Public</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">License version 2. This program is licensed <span class="string">&quot;as is&quot;</span> without any</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">warranty of any kind, whether express or implied.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[[ -z $VENDOR ]] &amp;&amp; VENDOR=&quot;Orange Pi&quot;</span><br><span class="line">[[ -z $ROOTPWD ]] &amp;&amp; ROOTPWD=&quot;orangepi&quot; # Must be changed @first login</span><br><span class="line">[[ -z $OPI_USERNAME ]] &amp;&amp; OPI_USERNAME=&quot;orangepi&quot; </span><br><span class="line">[[ -z $OPI_PWD ]] &amp;&amp; OPI_PWD=&quot;orangepi&quot; </span><br><span class="line">[[ -z $MAINTAINER ]] &amp;&amp; MAINTAINER=&quot;Orange Pi&quot; # deb signature</span><br><span class="line">[[ -z $MAINTAINERMAIL ]] &amp;&amp; MAINTAINERMAIL=&quot;leeboby@aliyun.com&quot; # deb signature</span><br><span class="line">[[ -z $DEB_COMPRESS ]] &amp;&amp; DEB_COMPRESS=&quot;xz&quot; # compress .debs with XZ by default. Use &#x27;none&#x27; for faster/larger builds</span><br><span class="line">TZDATA=$(cat /etc/timezone) # Timezone for target is taken from host or defined here.</span><br><span class="line">USEALLCORES=yes # Use all CPU cores for compiling</span><br><span class="line">HOSTRELEASE=$(cat /etc/os-release | grep VERSION_CODENAME | cut -d&quot;=&quot; -f2)</span><br><span class="line">[[ -z $HOSTRELEASE ]] &amp;&amp; HOSTRELEASE=$(cut -d&#x27;/&#x27; -f1 /etc/debian_version)</span><br><span class="line">[[ -z $EXIT_PATCHING_ERROR ]] &amp;&amp; EXIT_PATCHING_ERROR=&quot;&quot; # exit patching if failed</span><br><span class="line">[[ -z $HOST ]] &amp;&amp; HOST=&quot;$BOARD&quot; # set hostname to the board</span><br><span class="line">[[ -z $CHINA_DOWNLOAD_MIRROR ]] &amp;&amp; CHINA_DOWNLOAD_MIRROR=huawei</span><br><span class="line">cd &quot;$&#123;SRC&#125;&quot; || exit</span><br><span class="line">[[ -z &quot;$&#123;ROOTFSCACHE_VERSION&#125;&quot; ]] &amp;&amp; ROOTFSCACHE_VERSION=11</span><br><span class="line">[[ -z &quot;$&#123;CHROOT_CACHE_VERSION&#125;&quot; ]] &amp;&amp; CHROOT_CACHE_VERSION=7</span><br><span class="line">[[ -z $PLYMOUTH ]] &amp;&amp; PLYMOUTH=&quot;yes&quot;</span><br><span class="line"></span><br><span class="line">cd $&#123;SRC&#125;/scripts</span><br><span class="line">BUILD_REPOSITORY_URL=$(improved_git remote get-url $(improved_git remote 2&gt;/dev/null | grep origin) 2&gt;/dev/null)</span><br><span class="line">BUILD_REPOSITORY_COMMIT=$(improved_git describe --match=d_e_a_d_b_e_e_f --always --dirty 2&gt;/dev/null)</span><br><span class="line">ROOTFS_CACHE_MAX=200 # max number of rootfs cache, older ones will be cleaned up</span><br><span class="line"></span><br><span class="line">DEB_STORAGE=$DEST/debs</span><br><span class="line">DEB_ORANGEPI=$EXTER/cache/debs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">TODO: fixed name can<span class="string">&#x27;t be used for parallel image building</span></span></span><br><span class="line">ROOT_MAPPER=&quot;orangepi-root&quot;</span><br><span class="line">[[ -z $ROOTFS_TYPE ]] &amp;&amp; ROOTFS_TYPE=ext4 # default rootfs type is ext4</span><br><span class="line">[[ &quot;ext4 f2fs btrfs xfs nfs fel&quot; != *$ROOTFS_TYPE* ]] &amp;&amp; exit_with_error &quot;Unknown rootfs type&quot; &quot;$ROOTFS_TYPE&quot;</span><br><span class="line"></span><br><span class="line">[[ -z $BTRFS_COMPRESSION ]] &amp;&amp; BTRFS_COMPRESSION=zlib # default btrfs filesystem compression method is zlib</span><br><span class="line">[[ ! $BTRFS_COMPRESSION =~ zlib|lzo|zstd|none ]] &amp;&amp; exit_with_error &quot;Unknown btrfs compression method&quot; &quot;$BTRFS_COMPRESSION&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Fixed image size is in 1M dd blocks (MiB)</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">to get size of block device /dev/sdX execute as root:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">echo $(( $(blockdev --getsize64 /dev/sdX) / 1024 / 1024 ))</span></span></span><br><span class="line">[[ &quot;f2fs&quot; == *$ROOTFS_TYPE* &amp;&amp; -z $FIXED_IMAGE_SIZE ]] &amp;&amp; exit_with_error &quot;Please define FIXED_IMAGE_SIZE&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">a passphrase is mandatory if rootfs encryption is enabled</span></span></span><br><span class="line">if [[ $CRYPTROOT_ENABLE == yes &amp;&amp; -z $CRYPTROOT_PASSPHRASE ]]; then</span><br><span class="line">	exit_with_error &quot;Root encryption is enabled but CRYPTROOT_PASSPHRASE is not set&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">small SD card with kernel, boot script and .dtb/.bin files</span></span></span><br><span class="line">[[ $ROOTFS_TYPE == nfs ]] &amp;&amp; FIXED_IMAGE_SIZE=64</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Since we are having too many options for mirror management,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">then here is yet another mirror related option.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Respecting user&#x27;</span>s override <span class="keyword">in</span> <span class="keyword">case</span> a mirror is unreachable.</span></span><br><span class="line">case $REGIONAL_MIRROR in</span><br><span class="line">	china)</span><br><span class="line">		[[ -z $USE_MAINLINE_GOOGLE_MIRROR ]] &amp;&amp; [[ -z $MAINLINE_MIRROR ]] &amp;&amp; MAINLINE_MIRROR=tuna</span><br><span class="line">		[[ -z $USE_GITHUB_UBOOT_MIRROR ]] &amp;&amp; [[ -z $UBOOT_MIRROR ]] &amp;&amp; UBOOT_MIRROR=gitee</span><br><span class="line">		[[ -z $GITHUB_MIRROR ]] &amp;&amp; GITHUB_MIRROR=gitclone</span><br><span class="line">		[[ -z $DOWNLOAD_MIRROR ]] &amp;&amp; DOWNLOAD_MIRROR=china</span><br><span class="line">		;;</span><br><span class="line">	*)</span><br><span class="line">		;;</span><br><span class="line">esac</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">used by multiple sources - reduce code duplication</span></span><br><span class="line">[[ $USE_MAINLINE_GOOGLE_MIRROR == yes ]] &amp;&amp; MAINLINE_MIRROR=google</span><br><span class="line"></span><br><span class="line">case $MAINLINE_MIRROR in</span><br><span class="line">	google)</span><br><span class="line">		MAINLINE_KERNEL_SOURCE=&#x27;https://kernel.googlesource.com/pub/scm/linux/kernel/git/stable/linux-stable&#x27;</span><br><span class="line">		MAINLINE_FIRMWARE_SOURCE=&#x27;https://kernel.googlesource.com/pub/scm/linux/kernel/git/firmware/linux-firmware.git&#x27;</span><br><span class="line">		;;</span><br><span class="line">	tuna)</span><br><span class="line">		MAINLINE_KERNEL_SOURCE=&#x27;https://mirrors.tuna.tsinghua.edu.cn/git/linux-stable.git&#x27;</span><br><span class="line">		MAINLINE_FIRMWARE_SOURCE=&#x27;https://mirrors.tuna.tsinghua.edu.cn/git/linux-firmware.git&#x27;</span><br><span class="line">		;;</span><br><span class="line">	bfsu)</span><br><span class="line">		MAINLINE_KERNEL_SOURCE=&#x27;https://mirrors.bfsu.edu.cn/git/linux-stable.git&#x27;</span><br><span class="line">		MAINLINE_FIRMWARE_SOURCE=&#x27;https://mirrors.bfsu.edu.cn/git/linux-firmware.git&#x27;</span><br><span class="line">		;;</span><br><span class="line">	*)</span><br><span class="line">		MAINLINE_KERNEL_SOURCE=&#x27;git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git&#x27;</span><br><span class="line">		MAINLINE_FIRMWARE_SOURCE=&#x27;git://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git&#x27;</span><br><span class="line">		;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">MAINLINE_KERNEL_DIR=&quot;$SRC/kernel&quot;</span><br><span class="line"></span><br><span class="line">[[ $USE_GITHUB_UBOOT_MIRROR == yes ]] &amp;&amp; UBOOT_MIRROR=github</span><br><span class="line"></span><br><span class="line">case $UBOOT_MIRROR in</span><br><span class="line">	gitee)</span><br><span class="line">		MAINLINE_UBOOT_SOURCE=&#x27;https://github.com/orangepi-xunlong/u-boot-orangepi.git&#x27;</span><br><span class="line">		;;</span><br><span class="line">	github)</span><br><span class="line">		MAINLINE_UBOOT_SOURCE=&#x27;https://github.com/orangepi-xunlong/u-boot-orangepi.git&#x27;</span><br><span class="line">		;;</span><br><span class="line">	*)</span><br><span class="line">		MAINLINE_UBOOT_SOURCE=&#x27;https://source.denx.de/u-boot/u-boot.git&#x27;</span><br><span class="line">		;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">MAINLINE_UBOOT_DIR=&quot;$SRC/u-boot&quot;</span><br><span class="line"></span><br><span class="line">case $GITHUB_MIRROR in</span><br><span class="line">	fastgit)</span><br><span class="line">		GITHUB_SOURCE=&#x27;https://hub.fastgit.xyz&#x27;</span><br><span class="line">		;;</span><br><span class="line">	gitclone)</span><br><span class="line">		GITHUB_SOURCE=&#x27;https://gitclone.com/github.com&#x27;</span><br><span class="line">		;;</span><br><span class="line">	*)</span><br><span class="line">		GITHUB_SOURCE=&#x27;https://github.com&#x27;</span><br><span class="line">		;;</span><br><span class="line">esac</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Let<span class="string">&#x27;s set default data if not defined in board configuration above</span></span></span><br><span class="line">[[ -z $OFFSET ]] &amp;&amp; OFFSET=4 # offset to 1st partition (we use 4MiB boundaries by default)</span><br><span class="line">ARCH=armhf</span><br><span class="line">KERNEL_IMAGE_TYPE=zImage</span><br><span class="line">CAN_BUILD_STRETCH=yes</span><br><span class="line">ATF_COMPILE=yes</span><br><span class="line">[[ -z $CRYPTROOT_SSH_UNLOCK ]] &amp;&amp; CRYPTROOT_SSH_UNLOCK=yes</span><br><span class="line">[[ -z $CRYPTROOT_SSH_UNLOCK_PORT ]] &amp;&amp; CRYPTROOT_SSH_UNLOCK_PORT=2022</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Default to pdkdf2, this used to be the default with cryptroot &lt;= 2.0, however</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">cryptroot 2.1 changed that to Argon2i. Argon2i is a memory intensive</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">algorithm which doesn&#x27;</span>t play well with SBCs (need 1GiB RAM by default !)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://gitlab.com/cryptsetup/cryptsetup/-/issues/372</span></span><br><span class="line">[[ -z $CRYPTROOT_PARAMETERS ]] &amp;&amp; CRYPTROOT_PARAMETERS=&quot;--pbkdf pbkdf2&quot;</span><br><span class="line">[[ -z $WIREGUARD ]] &amp;&amp; WIREGUARD=&quot;no&quot;</span><br><span class="line">[[ -z $EXTRAWIFI ]] &amp;&amp; EXTRAWIFI=&quot;yes&quot;</span><br><span class="line">[[ -z $SKIP_BOOTSPLASH ]] &amp;&amp; SKIP_BOOTSPLASH=&quot;no&quot;</span><br><span class="line">[[ -z $AUFS ]] &amp;&amp; AUFS=&quot;yes&quot;</span><br><span class="line">[[ -z $IMAGE_PARTITION_TABLE ]] &amp;&amp; IMAGE_PARTITION_TABLE=&quot;msdos&quot;</span><br><span class="line">[[ -z $EXTRA_BSP_NAME ]] &amp;&amp; EXTRA_BSP_NAME=&quot;&quot;</span><br><span class="line">[[ -z $EXTRA_ROOTFS_MIB_SIZE ]] &amp;&amp; EXTRA_ROOTFS_MIB_SIZE=0</span><br><span class="line">[[ -z $BUILD_KSRC ]] &amp;&amp; BUILD_KSRC=&quot;no&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">single ext4 partition is the default and preferred configuration</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">BOOTFS_TYPE=<span class="string">&#x27;&#x27;</span></span></span><br><span class="line">[[ ! -f $&#123;EXTER&#125;/config/sources/families/$LINUXFAMILY.conf ]] &amp;&amp; \</span><br><span class="line">	exit_with_error &quot;Sources configuration not found&quot; &quot;$LINUXFAMILY&quot;</span><br><span class="line"></span><br><span class="line">source &quot;$&#123;EXTER&#125;/config/sources/families/$&#123;LINUXFAMILY&#125;.conf&quot;</span><br><span class="line"></span><br><span class="line">if [[ -f $USERPATCHES_PATH/sources/families/$LINUXFAMILY.conf ]]; then</span><br><span class="line">	display_alert &quot;Adding user provided $LINUXFAMILY overrides&quot;</span><br><span class="line">	source &quot;$USERPATCHES_PATH/sources/families/$&#123;LINUXFAMILY&#125;.conf&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">load architecture defaults</span></span><br><span class="line">source &quot;$&#123;EXTER&#125;/config/sources/$&#123;ARCH&#125;.conf&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Extensions: at this point we&#x27;ve sourced all the config files that will be used,</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#             and (hopefully) not yet invoked any extension methods. So this is the perfect</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#             place to initialize the extension manager. It will create functions</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#             like the &#x27;post_family_config&#x27; that is invoked below.</span></span></span><br><span class="line">initialize_extension_manager</span><br><span class="line"></span><br><span class="line">call_extension_method &quot;post_family_config&quot; &quot;config_tweaks_post_family_config&quot; &lt;&lt; &#x27;POST_FAMILY_CONFIG&#x27;</span><br><span class="line">*give the config a chance to override the family/arch defaults*</span><br><span class="line">This hook is called after the family configuration (`sources/families/xxx.conf`) is sourced.</span><br><span class="line">Since the family can override values from the user configuration and the board configuration,</span><br><span class="line">it is often used to in turn override those.</span><br><span class="line">POST_FAMILY_CONFIG</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Myy : Menu configuration <span class="keyword">for</span> choosing desktop configurations</span></span><br><span class="line"></span><br><span class="line">show_menu() &#123;</span><br><span class="line">	provided_title=$1</span><br><span class="line">	provided_backtitle=$2</span><br><span class="line">	provided_menuname=$3</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Myy : I don<span class="string">&#x27;t know why there&#x27;</span>s a TTY_Y - 8...</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;Provided title : <span class="variable">$provided_title</span>&quot;</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;Provided backtitle : <span class="variable">$provided_backtitle</span>&quot;</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;Provided menuname : <span class="variable">$provided_menuname</span>&quot;</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;Provided options : &quot;</span> <span class="string">&quot;<span class="variable">$&#123;@:4&#125;</span>&quot;</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;TTY X: <span class="variable">$TTY_X</span> Y: <span class="variable">$TTY_Y</span>&quot;</span></span></span><br><span class="line">	whiptail --title &quot;$&#123;provided_title&#125;&quot; --backtitle &quot;$&#123;provided_backtitle&#125;&quot; --notags \</span><br><span class="line">                          --menu &quot;$&#123;provided_menuname&#125;&quot; &quot;$&#123;TTY_Y&#125;&quot; &quot;$&#123;TTY_X&#125;&quot; $((TTY_Y - 8))  \</span><br><span class="line">			  &quot;$&#123;@:4&#125;&quot; \</span><br><span class="line">			  3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Myy : FIXME Factorize</span></span><br><span class="line">show_select_menu() &#123;</span><br><span class="line">	provided_title=$1</span><br><span class="line">	provided_backtitle=$2</span><br><span class="line">	provided_menuname=$3</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">dialog --stdout --title <span class="string">&quot;<span class="variable">$&#123;provided_title&#125;</span>&quot;</span> --backtitle <span class="string">&quot;<span class="variable">$&#123;provided_backtitle&#125;</span>&quot;</span> \</span></span><br><span class="line"><span class="language-bash">	<span class="comment">#--checklist &quot;$&#123;provided_menuname&#125;&quot; $TTY_Y $TTY_X $((TTY_Y - 8)) &quot;$&#123;@:4&#125;&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">whiptail --separate-output --title <span class="string">&quot;<span class="variable">$&#123;provided_title&#125;</span>&quot;</span> --backtitle <span class="string">&quot;<span class="variable">$&#123;provided_backtitle&#125;</span>&quot;</span> \</span></span><br><span class="line"><span class="language-bash">	<span class="comment">#                  --checklist &quot;$&#123;provided_menuname&#125;&quot; &quot;$&#123;TTY_Y&#125;&quot; &quot;$&#123;TTY_X&#125;&quot; $((TTY_Y - 8))  \</span></span></span><br><span class="line"><span class="language-bash">	<span class="comment">#		  &quot;$&#123;@:4&#125;&quot; \</span></span></span><br><span class="line"><span class="language-bash">	<span class="comment">#		  3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3</span></span></span><br><span class="line"></span><br><span class="line">	whiptail --title &quot;$&#123;provided_title&#125;&quot; --backtitle &quot;$&#123;provided_backtitle&#125;&quot; \</span><br><span class="line">	                  --checklist &quot;$&#123;provided_menuname&#125;&quot; &quot;$&#123;TTY_Y&#125;&quot; &quot;$&#123;TTY_X&#125;&quot; $((TTY_Y - 8))  \</span><br><span class="line">			  &quot;$&#123;@:4&#125;&quot; \</span><br><span class="line">			  3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Myy : Once we got a list of selected <span class="built_in">groups</span>, parse the PACKAGE_LIST inside configuration.sh</span></span><br><span class="line"></span><br><span class="line">DESKTOP_ELEMENTS_DIR=&quot;$&#123;EXTER&#125;/config/desktop/$&#123;RELEASE&#125;&quot;</span><br><span class="line">DESKTOP_CONFIGS_DIR=&quot;$&#123;DESKTOP_ELEMENTS_DIR&#125;/environments&quot;</span><br><span class="line">DESKTOP_CONFIG_PREFIX=&quot;config_&quot;</span><br><span class="line">DESKTOP_APPGROUPS_DIR=&quot;$&#123;DESKTOP_ELEMENTS_DIR&#125;/appgroups&quot;</span><br><span class="line"></span><br><span class="line">desktop_element_available_for_arch() &#123;</span><br><span class="line">	local desktop_element_path=&quot;$&#123;1&#125;&quot;</span><br><span class="line">	local targeted_arch=&quot;$&#123;2&#125;&quot;</span><br><span class="line"></span><br><span class="line">	local arch_limitation_file=&quot;$&#123;1&#125;/only_for&quot;</span><br><span class="line"></span><br><span class="line">	echo &quot;Checking if $&#123;desktop_element_path&#125; is available for $&#123;targeted_arch&#125; in $&#123;arch_limitation_file&#125;&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/output.log</span><br><span class="line">	if [[ -f &quot;$&#123;arch_limitation_file&#125;&quot; ]]; then</span><br><span class="line">		grep -- &quot;$&#123;targeted_arch&#125;&quot; &quot;$&#123;arch_limitation_file&#125;&quot; &gt; /dev/null</span><br><span class="line">		return $?</span><br><span class="line">	else</span><br><span class="line">		return 0</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">desktop_element_supported() &#123;</span><br><span class="line"></span><br><span class="line">	local desktop_element_path=&quot;$&#123;1&#125;&quot;</span><br><span class="line"></span><br><span class="line">	local support_level_filepath=&quot;$&#123;desktop_element_path&#125;/support&quot;</span><br><span class="line">	if [[ -f &quot;$&#123;support_level_filepath&#125;&quot; ]]; then</span><br><span class="line">		local support_level=&quot;$(cat &quot;$&#123;support_level_filepath&#125;&quot;)&quot;</span><br><span class="line">		if [[ &quot;$&#123;support_level&#125;&quot; != &quot;supported&quot; &amp;&amp; &quot;$&#123;EXPERT&#125;&quot; != &quot;yes&quot; ]]; then</span><br><span class="line">			return 65</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		desktop_element_available_for_arch &quot;$&#123;desktop_element_path&#125;&quot; &quot;$&#123;ARCH&#125;&quot;</span><br><span class="line">		if [[ $? -ne 0 ]]; then</span><br><span class="line">			return 66</span><br><span class="line">		fi</span><br><span class="line">	else</span><br><span class="line">		return 64</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	return 0</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if [[ $BUILD_DESKTOP == &quot;yes&quot; &amp;&amp; -z $DESKTOP_ENVIRONMENT ]]; then</span><br><span class="line"></span><br><span class="line">	desktop_environments_prepare_menu() &#123;</span><br><span class="line">		for desktop_env_dir in &quot;$&#123;DESKTOP_CONFIGS_DIR&#125;/&quot;*; do</span><br><span class="line">			local desktop_env_name=$(basename $&#123;desktop_env_dir&#125;)</span><br><span class="line">			local expert_infos=&quot;&quot;</span><br><span class="line">			[[ &quot;$&#123;EXPERT&#125;&quot; == &quot;yes&quot; ]] &amp;&amp; expert_infos=&quot;[$(cat &quot;$&#123;desktop_env_dir&#125;/support&quot; 2&gt; /dev/null)]&quot;</span><br><span class="line">			desktop_element_supported &quot;$&#123;desktop_env_dir&#125;&quot; &quot;$&#123;ARCH&#125;&quot; &amp;&amp; options+=(&quot;$&#123;desktop_env_name&#125;&quot; &quot;$&#123;desktop_env_name^&#125; desktop environment $&#123;expert_infos&#125;&quot;)</span><br><span class="line">		done</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	options=()</span><br><span class="line">	desktop_environments_prepare_menu</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$&#123;options[0]&#125;&quot; == &quot;&quot; ]]; then</span><br><span class="line">		exit_with_error &quot;No desktop environment seems to be available for your board $&#123;BOARD&#125; (ARCH : $&#123;ARCH&#125; - EXPERT : $&#123;EXPERT&#125;)&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	DESKTOP_ENVIRONMENT=$(show_menu &quot;Choose a desktop environment&quot; &quot;$backtitle&quot; &quot;Select the default desktop environment to bundle with this image&quot; &quot;$&#123;options[@]&#125;&quot;)</span><br><span class="line"></span><br><span class="line">	unset options</span><br><span class="line"></span><br><span class="line">	if [[ -z &quot;$&#123;DESKTOP_ENVIRONMENT&#125;&quot; ]]; then</span><br><span class="line">		exit_with_error &quot;No desktop environment selected...&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $BUILD_DESKTOP == &quot;yes&quot; ]]; then</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Expected environment variables :</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">- options</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">- ARCH</span></span><br><span class="line"></span><br><span class="line">	desktop_environment_check_if_valid() &#123;</span><br><span class="line"></span><br><span class="line">		local error_msg=&quot;&quot;</span><br><span class="line">		desktop_element_supported &quot;$&#123;DESKTOP_ENVIRONMENT_DIRPATH&#125;&quot; &quot;$&#123;ARCH&#125;&quot;</span><br><span class="line">		local retval=$?</span><br><span class="line"></span><br><span class="line">		if [[ $&#123;retval&#125; == 0 ]]; then</span><br><span class="line">			return</span><br><span class="line">		elif [[ $&#123;retval&#125; == 64 ]]; then</span><br><span class="line">			error_msg+=&quot;Either the desktop environment $&#123;DESKTOP_ENVIRONMENT&#125; does not exist &quot;</span><br><span class="line">			error_msg+=&quot;or the file $&#123;DESKTOP_ENVIRONMENT_DIRPATH&#125;/support is missing&quot;</span><br><span class="line">		elif [[ $&#123;retval&#125; == 65 ]]; then</span><br><span class="line">			error_msg+=&quot;Only experts can build an image with the desktop environment \&quot;$&#123;DESKTOP_ENVIRONMENT&#125;\&quot;, since the Armbian team won&#x27;t offer any support for it (EXPERT=$&#123;EXPERT&#125;)&quot;</span><br><span class="line">		elif [[ $&#123;retval&#125; == 66 ]]; then</span><br><span class="line">			error_msg+=&quot;The desktop environment \&quot;$&#123;DESKTOP_ENVIRONMENT&#125;\&quot; has no packages for your targeted board architecture (BOARD=$&#123;BOARD&#125; ARCH=$&#123;ARCH&#125;). &quot;</span><br><span class="line">			error_msg+=&quot;The supported boards architectures are : &quot;</span><br><span class="line">			error_msg+=&quot;$(cat &quot;$&#123;DESKTOP_ENVIRONMENT_DIRPATH&#125;/only_for&quot;)&quot;</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">supress error when cache is rebuilding</span></span><br><span class="line">		[[ -n &quot;$ROOT_FS_CREATE_ONLY&quot; ]] &amp;&amp; exit 0</span><br><span class="line"></span><br><span class="line">		exit_with_error &quot;$&#123;error_msg&#125;&quot;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	DESKTOP_ENVIRONMENT_DIRPATH=&quot;$&#123;DESKTOP_CONFIGS_DIR&#125;/$&#123;DESKTOP_ENVIRONMENT&#125;&quot;</span><br><span class="line"></span><br><span class="line">	desktop_environment_check_if_valid</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $BUILD_DESKTOP == &quot;yes&quot; &amp;&amp; -z $DESKTOP_ENVIRONMENT_CONFIG_NAME ]]; then</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">FIXME Check <span class="keyword">for</span> empty folders, just <span class="keyword">in</span> <span class="keyword">case</span> the current maintainer</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">messed up</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Note, we could also ignore it and don<span class="string">&#x27;t show anything in the previous</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">menu, but that hides information and make debugging harder, which I</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">don&#x27;</span>t like. Adding desktop environments as a maintainer is not a</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">trivial nor common task.</span></span><br><span class="line"></span><br><span class="line">	options=()</span><br><span class="line">	for configuration in &quot;$&#123;DESKTOP_ENVIRONMENT_DIRPATH&#125;/$&#123;DESKTOP_CONFIG_PREFIX&#125;&quot;*; do</span><br><span class="line">		config_filename=$(basename $&#123;configuration&#125;)</span><br><span class="line">		config_name=$&#123;config_filename#&quot;$&#123;DESKTOP_CONFIG_PREFIX&#125;&quot;&#125;</span><br><span class="line">		options+=(&quot;$&#123;config_filename&#125;&quot; &quot;$&#123;config_name&#125; configuration&quot;)</span><br><span class="line">	done</span><br><span class="line"></span><br><span class="line">	DESKTOP_ENVIRONMENT_CONFIG_NAME=$(show_menu &quot;Choose the desktop environment config&quot; &quot;$backtitle&quot; &quot;Select the configuration for this environment.\nThese are sourced from $&#123;desktop_environment_config_dir&#125;&quot; &quot;$&#123;options[@]&#125;&quot;)</span><br><span class="line">	unset options</span><br><span class="line"></span><br><span class="line">	if [[ -z $DESKTOP_ENVIRONMENT_CONFIG_NAME ]]; then</span><br><span class="line">		exit_with_error &quot;No desktop configuration selected... Do you really want a desktop environment ?&quot;</span><br><span class="line">	fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $BUILD_DESKTOP == &quot;yes&quot; ]]; then</span><br><span class="line">	DESKTOP_ENVIRONMENT_PACKAGE_LIST_DIRPATH=&quot;$&#123;DESKTOP_ENVIRONMENT_DIRPATH&#125;/$&#123;DESKTOP_ENVIRONMENT_CONFIG_NAME&#125;&quot;</span><br><span class="line">	DESKTOP_ENVIRONMENT_PACKAGE_LIST_FILEPATH=&quot;$&#123;DESKTOP_ENVIRONMENT_PACKAGE_LIST_DIRPATH&#125;/packages&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;-z <span class="variable">$&#123;VAR+x&#125;</span>&quot;</span> allows to check <span class="keyword">for</span> <span class="built_in">unset</span> variable</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Technically, someone might want to build a desktop with no additional</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">appgroups.</span></span><br><span class="line">if [[ $BUILD_DESKTOP == &quot;yes&quot; &amp;&amp; -z $&#123;DESKTOP_APPGROUPS_SELECTED+x&#125; &amp;&amp; $&#123;RELEASE&#125; != &quot;raspi&quot; ]]; then</span><br><span class="line"></span><br><span class="line">	options=()</span><br><span class="line">	for appgroup_path in &quot;$&#123;DESKTOP_APPGROUPS_DIR&#125;/&quot;*; do</span><br><span class="line">		appgroup=&quot;$(basename &quot;$&#123;appgroup_path&#125;&quot;)&quot;</span><br><span class="line">		options+=(&quot;$&#123;appgroup&#125;&quot; &quot;$&#123;appgroup^&#125;&quot; off)</span><br><span class="line">	done</span><br><span class="line"></span><br><span class="line">	DESKTOP_APPGROUPS_SELECTED=$(\</span><br><span class="line">		show_select_menu \</span><br><span class="line">		&quot;Choose desktop softwares to add&quot; \</span><br><span class="line">		&quot;$backtitle&quot; \</span><br><span class="line">		&quot;Select which kind of softwares you&#x27;d like to add to your build&quot; \</span><br><span class="line">		&quot;$&#123;options[@]&#125;&quot;)</span><br><span class="line"></span><br><span class="line">	DESKTOP_APPGROUPS_SELECTED=$&#123;DESKTOP_APPGROUPS_SELECTED//\&quot;/&#125;</span><br><span class="line"></span><br><span class="line">	unset options</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">exit_with_error <span class="string">&#x27;Testing&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Expected variables</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">- aggregated_content</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">- potential_paths</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">- separator</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Write to variables :</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">- aggregated_content</span></span><br><span class="line">aggregate_content() &#123;</span><br><span class="line">	LOG_OUTPUT_FILE=&quot;$&#123;SRC&#125;/output/$&#123;LOG_SUBPATH&#125;/potential-paths.log&quot;</span><br><span class="line">	echo -e &quot;Potential paths :&quot; &gt;&gt; &quot;$&#123;LOG_OUTPUT_FILE&#125;&quot;</span><br><span class="line">	show_checklist_variables potential_paths</span><br><span class="line">	for filepath in $&#123;potential_paths&#125;; do</span><br><span class="line">		if [[ -f &quot;$&#123;filepath&#125;&quot; ]]; then</span><br><span class="line">			echo -e &quot;$&#123;filepath/&quot;$EXTER&quot;\//&#125; yes&quot; &gt;&gt; &quot;$&#123;LOG_OUTPUT_FILE&#125;&quot;</span><br><span class="line">			aggregated_content+=$(cat &quot;$&#123;filepath&#125;&quot;)</span><br><span class="line">			aggregated_content+=&quot;$&#123;separator&#125;&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">		<span class="keyword">else</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">			<span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;filepath/&quot;$EXTER&quot;\//&#125;</span> no\n&quot;</span> &gt;&gt; <span class="string">&quot;<span class="variable">$&#123;LOG_OUTPUT_FILE&#125;</span>&quot;</span></span></span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">	done</span><br><span class="line">	echo &quot;&quot; &gt;&gt; &quot;$&#123;LOG_OUTPUT_FILE&#125;&quot;</span><br><span class="line">	unset LOG_OUTPUT_FILE</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">set</span> unique mounting directory</span></span><br><span class="line">MOUNT_UUID=$(uuidgen)</span><br><span class="line">SDCARD=&quot;$&#123;SRC&#125;/.tmp/rootfs-$&#123;MOUNT_UUID&#125;&quot;</span><br><span class="line">MOUNT=&quot;$&#123;SRC&#125;/.tmp/mount-$&#123;MOUNT_UUID&#125;&quot;</span><br><span class="line">DESTIMG=&quot;$&#123;SRC&#125;/.tmp/image-$&#123;MOUNT_UUID&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dropbear needs to be configured differently</span></span><br><span class="line">[[ $CRYPTROOT_ENABLE == yes &amp;&amp; $RELEASE == xenial ]] &amp;&amp; exit_with_error &quot;Encrypted rootfs is not supported in Xenial&quot;</span><br><span class="line">[[ $RELEASE == stretch &amp;&amp; $CAN_BUILD_STRETCH != yes ]] &amp;&amp; exit_with_error &quot;Building Debian Stretch images with selected kernel is not supported&quot;</span><br><span class="line">[[ $RELEASE == bionic &amp;&amp; $CAN_BUILD_STRETCH != yes ]] &amp;&amp; exit_with_error &quot;Building Ubuntu Bionic images with selected kernel is not supported&quot;</span><br><span class="line">[[ $RELEASE == hirsute &amp;&amp; $HOSTRELEASE == focal ]] &amp;&amp; exit_with_error &quot;Building Ubuntu Hirsute images requires Hirsute build host. Please upgrade your host or select a different target OS&quot;</span><br><span class="line"></span><br><span class="line">[[ -n $ATFSOURCE &amp;&amp; -z $ATF_USE_GCC ]] &amp;&amp; exit_with_error &quot;Error in configuration: ATF_USE_GCC is unset&quot;</span><br><span class="line">[[ -z $UBOOT_USE_GCC ]] &amp;&amp; exit_with_error &quot;Error in configuration: UBOOT_USE_GCC is unset&quot;</span><br><span class="line">[[ -z $KERNEL_USE_GCC ]] &amp;&amp; exit_with_error &quot;Error in configuration: KERNEL_USE_GCC is unset&quot;</span><br><span class="line"></span><br><span class="line">BOOTCONFIG_VAR_NAME=BOOTCONFIG_$&#123;BRANCH^^&#125;</span><br><span class="line">[[ -n $&#123;!BOOTCONFIG_VAR_NAME&#125; ]] &amp;&amp; BOOTCONFIG=$&#123;!BOOTCONFIG_VAR_NAME&#125;</span><br><span class="line">[[ -z $LINUXCONFIG ]] &amp;&amp; LINUXCONFIG=&quot;linux-$&#123;LINUXFAMILY&#125;-$&#123;BRANCH&#125;&quot;</span><br><span class="line">[[ -z $BOOTPATCHDIR ]] &amp;&amp; BOOTPATCHDIR=&quot;u-boot-$LINUXFAMILY&quot;</span><br><span class="line">[[ -z $ATFPATCHDIR ]] &amp;&amp; ATFPATCHDIR=&quot;atf-$LINUXFAMILY&quot;</span><br><span class="line">[[ -z $KERNELPATCHDIR ]] &amp;&amp; KERNELPATCHDIR=&quot;$LINUXFAMILY-$BRANCH&quot;</span><br><span class="line"></span><br><span class="line">if [[ &quot;$RELEASE&quot; =~ ^(xenial|bionic|focal|hirsute|impish|jammy)$ ]]; then</span><br><span class="line">		DISTRIBUTION=&quot;Ubuntu&quot;</span><br><span class="line">elif [[ &quot;$RELEASE&quot; == raspi ]]; then</span><br><span class="line">		DISTRIBUTION=&quot;Bullseye&quot;</span><br><span class="line">	else</span><br><span class="line">		DISTRIBUTION=&quot;Debian&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">CLI_CONFIG_PATH=&quot;$&#123;EXTER&#125;/config/cli/$&#123;RELEASE&#125;&quot;</span><br><span class="line">DEBOOTSTRAP_CONFIG_PATH=&quot;$&#123;CLI_CONFIG_PATH&#125;/debootstrap&quot;</span><br><span class="line"></span><br><span class="line">if [[ $? != 0 ]]; then</span><br><span class="line">	exit_with_error &quot;The desktop environment $&#123;DESKTOP_ENVIRONMENT&#125; is not available for your architecture $&#123;ARCH&#125;&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">AGGREGATION_SEARCH_ROOT_ABSOLUTE_DIRS=&quot;</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;EXTER&#125;/config</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;EXTER&#125;/config/optional/_any_board/_config</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;EXTER&#125;/config/optional/architectures/<span class="variable">$&#123;ARCH&#125;</span>/_config</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;EXTER&#125;/config/optional/families/<span class="variable">$&#123;LINUXFAMILY&#125;</span>/_config</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;EXTER&#125;/config/optional/boards/<span class="variable">$&#123;BOARD&#125;</span>/_config</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;USERPATCHES_PATH&#125;</span></span><br><span class="line">&quot;</span><br><span class="line"></span><br><span class="line">DEBOOTSTRAP_SEARCH_RELATIVE_DIRS=&quot;</span><br><span class="line">cli/_all_distributions/debootstrap</span><br><span class="line"><span class="meta prompt_">cli/$</span><span class="language-bash">&#123;RELEASE&#125;/debootstrap</span></span><br><span class="line">&quot;</span><br><span class="line"></span><br><span class="line">CLI_SEARCH_RELATIVE_DIRS=&quot;</span><br><span class="line">cli/_all_distributions/main</span><br><span class="line"><span class="meta prompt_">cli/$</span><span class="language-bash">&#123;RELEASE&#125;/main</span></span><br><span class="line">&quot;</span><br><span class="line"></span><br><span class="line">PACKAGES_SEARCH_ROOT_ABSOLUTE_DIRS=&quot;</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;EXTER&#125;/packages</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;EXTER&#125;/config/optional/_any_board/_packages</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;EXTER&#125;/config/optional/architectures/<span class="variable">$&#123;ARCH&#125;</span>/_packages</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;EXTER&#125;/config/optional/families/<span class="variable">$&#123;LINUXFAMILY&#125;</span>/_packages</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;EXTER&#125;/config/optional/boards/<span class="variable">$&#123;BOARD&#125;</span>/_packages</span></span><br><span class="line">&quot;</span><br><span class="line"></span><br><span class="line">DESKTOP_ENVIRONMENTS_SEARCH_RELATIVE_DIRS=&quot;</span><br><span class="line">desktop/_all_distributions/environments/_all_environments</span><br><span class="line"><span class="meta prompt_">desktop/_all_distributions/environments/$</span><span class="language-bash">&#123;DESKTOP_ENVIRONMENT&#125;</span></span><br><span class="line"><span class="meta prompt_">desktop/_all_distributions/environments/$</span><span class="language-bash">&#123;DESKTOP_ENVIRONMENT&#125;/<span class="variable">$&#123;DESKTOP_ENVIRONMENT_CONFIG_NAME&#125;</span></span></span><br><span class="line"><span class="meta prompt_">desktop/$</span><span class="language-bash">&#123;RELEASE&#125;/environments/_all_environments</span></span><br><span class="line"><span class="meta prompt_">desktop/$</span><span class="language-bash">&#123;RELEASE&#125;/environments/<span class="variable">$&#123;DESKTOP_ENVIRONMENT&#125;</span></span></span><br><span class="line"><span class="meta prompt_">desktop/$</span><span class="language-bash">&#123;RELEASE&#125;/environments/<span class="variable">$&#123;DESKTOP_ENVIRONMENT&#125;</span>/<span class="variable">$&#123;DESKTOP_ENVIRONMENT_CONFIG_NAME&#125;</span></span></span><br><span class="line">&quot;</span><br><span class="line"></span><br><span class="line">DESKTOP_APPGROUPS_SEARCH_RELATIVE_DIRS=&quot;</span><br><span class="line">desktop/_all_distributions/appgroups</span><br><span class="line"><span class="meta prompt_">desktop/_all_distributions/environments/$</span><span class="language-bash">&#123;DESKTOP_ENVIRONMENT&#125;/appgroups</span></span><br><span class="line"><span class="meta prompt_">desktop/$</span><span class="language-bash">&#123;RELEASE&#125;/appgroups</span></span><br><span class="line"><span class="meta prompt_">desktop/$</span><span class="language-bash">&#123;RELEASE&#125;/environments/<span class="variable">$&#123;DESKTOP_ENVIRONMENT&#125;</span>/appgroups</span></span><br><span class="line">&quot;</span><br><span class="line"></span><br><span class="line">get_all_potential_paths() &#123;</span><br><span class="line">	local root_dirs=&quot;$&#123;AGGREGATION_SEARCH_ROOT_ABSOLUTE_DIRS&#125;&quot;</span><br><span class="line">	local rel_dirs=&quot;$&#123;1&#125;&quot;</span><br><span class="line">	local sub_dirs=&quot;$&#123;2&#125;&quot;</span><br><span class="line">	local looked_up_subpath=&quot;$&#123;3&#125;&quot;</span><br><span class="line">	for root_dir in $&#123;root_dirs&#125;; do</span><br><span class="line">		for rel_dir in $&#123;rel_dirs&#125;; do</span><br><span class="line">			for sub_dir in $&#123;sub_dirs&#125;; do</span><br><span class="line">				potential_paths+=&quot;$&#123;root_dir&#125;/$&#123;rel_dir&#125;/$&#123;sub_dir&#125;/$&#123;looked_up_subpath&#125; &quot;</span><br><span class="line">			done</span><br><span class="line">		done</span><br><span class="line">	done</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="keyword">for</span> ppath <span class="keyword">in</span> <span class="variable">$&#123;potential_paths&#125;</span>; <span class="keyword">do</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"> 	<span class="built_in">echo</span> <span class="string">&quot;Checking for <span class="variable">$&#123;ppath&#125;</span>&quot;</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"> 	<span class="keyword">if</span> [[ -f <span class="string">&quot;<span class="variable">$&#123;ppath&#125;</span>&quot;</span> ]]; <span class="keyword">then</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"> 		<span class="built_in">echo</span> <span class="string">&quot;OK !|&quot;</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"> 	<span class="keyword">else</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"> 		<span class="built_in">echo</span> <span class="string">&quot;Nope|&quot;</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"> 	<span class="keyword">fi</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="keyword">done</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Environment variables expected :</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">- aggregated_content</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Arguments :</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. File to look up <span class="keyword">in</span> each directory</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. The separator to add between each concatenated file</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. Relative directories paths added to <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4. Relative directories paths added to <span class="variable">$&#123;4&#125;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># The function will basically generate a list of potential paths by</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">generating all the potential paths combinations leading to the</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">looked up file</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;AGGREGATION_SEARCH_ROOT_ABSOLUTE_DIRS&#125;</span>/<span class="variable">$&#123;3&#125;</span>/<span class="variable">$&#123;4&#125;</span>/<span class="variable">$&#123;1&#125;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Then it will concatenate the content of all the available files</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">into <span class="variable">$&#123;aggregated_content&#125;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># TODO :</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;4&#125;</span> could be removed by just adding the appropriate paths to <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dynamically <span class="keyword">for</span> each <span class="keyword">case</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(debootstrap, cli, desktop environments, desktop appgroups, ...)</span></span><br><span class="line"></span><br><span class="line">aggregate_all_root_rel_sub() &#123;</span><br><span class="line">	local separator=&quot;$&#123;2&#125;&quot;</span><br><span class="line"></span><br><span class="line">	local potential_paths=&quot;&quot;</span><br><span class="line">	get_all_potential_paths &quot;$&#123;3&#125;&quot; &quot;$&#123;4&#125;&quot; &quot;$&#123;1&#125;&quot;</span><br><span class="line"></span><br><span class="line">	aggregate_content</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">aggregate_all_debootstrap() &#123;</span><br><span class="line">	local sub_dirs_to_check=&quot;. &quot;</span><br><span class="line">	if [[ ! -z &quot;$&#123;SELECTED_CONFIGURATION+x&#125;&quot; ]]; then</span><br><span class="line">		sub_dirs_to_check+=&quot;config_$&#123;SELECTED_CONFIGURATION&#125;&quot;</span><br><span class="line">	fi</span><br><span class="line">	aggregate_all_root_rel_sub &quot;$&#123;1&#125;&quot; &quot;$&#123;2&#125;&quot; &quot;$&#123;DEBOOTSTRAP_SEARCH_RELATIVE_DIRS&#125;&quot; &quot;$&#123;sub_dirs_to_check&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">aggregate_all_cli() &#123;</span><br><span class="line">	local sub_dirs_to_check=&quot;. &quot;</span><br><span class="line">	if [[ ! -z &quot;$&#123;SELECTED_CONFIGURATION+x&#125;&quot; ]]; then</span><br><span class="line">		sub_dirs_to_check+=&quot;config_$&#123;SELECTED_CONFIGURATION&#125;&quot;</span><br><span class="line">	fi</span><br><span class="line">	aggregate_all_root_rel_sub &quot;$&#123;1&#125;&quot; &quot;$&#123;2&#125;&quot; &quot;$&#123;CLI_SEARCH_RELATIVE_DIRS&#125;&quot; &quot;$&#123;sub_dirs_to_check&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">aggregate_all_desktop() &#123;</span><br><span class="line">	aggregate_all_root_rel_sub &quot;$&#123;1&#125;&quot; &quot;$&#123;2&#125;&quot; &quot;$&#123;DESKTOP_ENVIRONMENTS_SEARCH_RELATIVE_DIRS&#125;&quot; &quot;.&quot;</span><br><span class="line">	aggregate_all_root_rel_sub &quot;$&#123;1&#125;&quot; &quot;$&#123;2&#125;&quot; &quot;$&#123;DESKTOP_APPGROUPS_SEARCH_RELATIVE_DIRS&#125;&quot; &quot;$&#123;DESKTOP_APPGROUPS_SELECTED&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">one_line() &#123;</span><br><span class="line">	local aggregate_func_name=&quot;$&#123;1&#125;&quot;</span><br><span class="line">	local aggregated_content=&quot;&quot;</span><br><span class="line">	shift 1</span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">aggregate_func_name <span class="string">&quot;<span class="variable">$&#123;@&#125;</span>&quot;</span></span></span><br><span class="line">	cleanup_list aggregated_content</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DEBOOTSTRAP_LIST=&quot;$(one_line aggregate_all_debootstrap &quot;packages&quot; &quot; &quot;)&quot;</span><br><span class="line">DEBOOTSTRAP_COMPONENTS=&quot;$(one_line aggregate_all_debootstrap &quot;components&quot; &quot; &quot;)&quot;</span><br><span class="line">DEBOOTSTRAP_COMPONENTS=&quot;$&#123;DEBOOTSTRAP_COMPONENTS// /,&#125;&quot;</span><br><span class="line">PACKAGE_LIST=&quot;$(one_line aggregate_all_cli &quot;packages&quot; &quot; &quot;)&quot;</span><br><span class="line">PACKAGE_LIST_ADDITIONAL=&quot;$(one_line aggregate_all_cli &quot;packages.additional&quot; &quot; &quot;)&quot;</span><br><span class="line"></span><br><span class="line">LOG_OUTPUT_FILE=&quot;$SRC/output/$&#123;LOG_SUBPATH&#125;/debootstrap-list.log&quot;</span><br><span class="line">show_checklist_variables &quot;DEBOOTSTRAP_LIST DEBOOTSTRAP_COMPONENTS PACKAGE_LIST PACKAGE_LIST_ADDITIONAL PACKAGE_LIST_UNINSTALL&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Dependent desktop packages</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Myy : Sources packages from file here</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Myy : FIXME Rename aggregate_all to aggregate_all_desktop</span></span><br><span class="line">if [[ $BUILD_DESKTOP == &quot;yes&quot; ]]; then</span><br><span class="line">	PACKAGE_LIST_DESKTOP+=&quot;$(one_line aggregate_all_desktop &quot;packages&quot; &quot; &quot;)&quot;</span><br><span class="line">	echo -e &quot;\nGroups selected $&#123;DESKTOP_APPGROUPS_SELECTED&#125; -&gt; PACKAGES :&quot; &gt;&gt; &quot;$&#123;LOG_OUTPUT_FILE&#125;&quot;</span><br><span class="line">	show_checklist_variables PACKAGE_LIST_DESKTOP</span><br><span class="line">fi</span><br><span class="line">unset LOG_OUTPUT_FILE</span><br><span class="line"></span><br><span class="line">DEBIAN_MIRROR=&#x27;deb.debian.org/debian&#x27;</span><br><span class="line">DEBIAN_SECURTY=&#x27;security.debian.org/&#x27;</span><br><span class="line">UBUNTU_MIRROR=&#x27;ports.ubuntu.com/&#x27;</span><br><span class="line">RASPI_MIRROR=&#x27;archive.raspberrypi.org/debian/&#x27;</span><br><span class="line"></span><br><span class="line">if [[ $DOWNLOAD_MIRROR == &quot;china&quot; ]] ; then</span><br><span class="line"></span><br><span class="line">	if [[ $&#123;CHINA_DOWNLOAD_MIRROR&#125; == tsinghua ]]; then</span><br><span class="line">		DEBIAN_MIRROR=&#x27;mirrors.tuna.tsinghua.edu.cn/debian&#x27;</span><br><span class="line">		DEBIAN_SECURTY=&#x27;mirrors.tuna.tsinghua.edu.cn/debian-security&#x27;</span><br><span class="line">		UBUNTU_MIRROR=&#x27;mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/&#x27;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ $&#123;CHINA_DOWNLOAD_MIRROR&#125; == huawei ]]; then</span><br><span class="line">		DEBIAN_MIRROR=&#x27;repo.huaweicloud.com/debian&#x27;</span><br><span class="line">		DEBIAN_SECURTY=&#x27;repo.huaweicloud.com/debian-security&#x27;</span><br><span class="line">		UBUNTU_MIRROR=&#x27;repo.huaweicloud.com/ubuntu-ports/&#x27;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	RASPI_MIRROR=&#x27;mirrors.ustc.edu.cn/archive.raspberrypi.org/debian/&#x27;</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $DOWNLOAD_MIRROR == &quot;bfsu&quot; ]] ; then</span><br><span class="line">	DEBIAN_MIRROR=&#x27;mirrors.bfsu.edu.cn/debian&#x27;</span><br><span class="line">	DEBIAN_SECURTY=&#x27;mirrors.bfsu.edu.cn/debian-security&#x27;</span><br><span class="line">	UBUNTU_MIRROR=&#x27;mirrors.bfsu.edu.cn/ubuntu-ports/&#x27;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ &quot;$&#123;ARCH&#125;&quot; == &quot;amd64&quot; ]]; then</span><br><span class="line">	UBUNTU_MIRROR=&#x27;archive.ubuntu.com/ubuntu&#x27; # ports are only for non-amd64, of course.</span><br><span class="line"></span><br><span class="line">		if [[ -n $&#123;CUSTOM_UBUNTU_MIRROR&#125; ]]; then # ubuntu redirector doesn&#x27;t work well on amd64</span><br><span class="line">			UBUNTU_MIRROR=&quot;$&#123;CUSTOM_UBUNTU_MIRROR&#125;&quot;</span><br><span class="line">		fi</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">don<span class="string">&#x27;t use mirrors that throws garbage on 404</span></span></span><br><span class="line">if [[ -z $&#123;ARMBIAN_MIRROR&#125; ]]; then</span><br><span class="line">	while true; do</span><br><span class="line"></span><br><span class="line">		ARMBIAN_MIRROR=$(wget -SO- -T 1 -t 1 https://redirect.armbian.com 2&gt;&amp;1 | egrep -i &quot;Location&quot; | awk &#x27;&#123;print $2&#125;&#x27; | head -1)</span><br><span class="line">		[[ $&#123;ARMBIAN_MIRROR&#125; != *armbian.hosthatch* ]] &amp;&amp; break</span><br><span class="line"></span><br><span class="line">	done</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">For (late) user override.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Notice: it is too late to define hook functions or add extensions in lib.config, since the extension initialization already ran by now.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">        in case the user tries to use them in lib.config, hopefully they&#x27;</span>ll be detected as <span class="string">&quot;wishful hooking&quot;</span> and the user will be wrn<span class="string">&#x27;ed.</span></span></span><br><span class="line">if [[ -f $USERPATCHES_PATH/lib.config ]]; then</span><br><span class="line">	display_alert &quot;Using user configuration override&quot; &quot;$USERPATCHES_PATH/lib.config&quot; &quot;info&quot;</span><br><span class="line">	source &quot;$USERPATCHES_PATH&quot;/lib.config</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">call_extension_method &quot;user_config&quot; &lt;&lt; &#x27;USER_CONFIG&#x27;</span><br><span class="line">*Invoke function with user override*</span><br><span class="line">Allows for overriding configuration values set anywhere else.</span><br><span class="line">It is called after sourcing the `lib.config` file if it exists,</span><br><span class="line">but before assembling any package lists.</span><br><span class="line">USER_CONFIG</span><br><span class="line"></span><br><span class="line">call_extension_method &quot;extension_prepare_config&quot; &lt;&lt; &#x27;EXTENSION_PREPARE_CONFIG&#x27;</span><br><span class="line">*allow extensions to prepare their own config, after user config is done*</span><br><span class="line">Implementors should preserve variable values pre-set, but can default values an/or validate them.</span><br><span class="line">This runs *after* user_config. Don&#x27;t change anything not coming from other variables or meant to be configured by the user.</span><br><span class="line">EXTENSION_PREPARE_CONFIG</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">apt-cacher-ng mirror configurarion</span></span></span><br><span class="line">if [[ $DISTRIBUTION == Ubuntu ]]; then</span><br><span class="line">	APT_MIRROR=$UBUNTU_MIRROR</span><br><span class="line">else</span><br><span class="line">	APT_MIRROR=$DEBIAN_MIRROR</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">[[ -n $APT_PROXY_ADDR ]] &amp;&amp; display_alert &quot;Using custom apt-cacher-ng address&quot; &quot;$APT_PROXY_ADDR&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Build final package list after possible override</span></span></span><br><span class="line">PACKAGE_LIST=&quot;$PACKAGE_LIST $PACKAGE_LIST_RELEASE $PACKAGE_LIST_ADDITIONAL&quot;</span><br><span class="line">PACKAGE_MAIN_LIST=&quot;$(cleanup_list PACKAGE_LIST)&quot;</span><br><span class="line"></span><br><span class="line">[[ $BUILD_DESKTOP == yes ]] &amp;&amp; PACKAGE_LIST=&quot;$PACKAGE_LIST $PACKAGE_LIST_DESKTOP&quot;</span><br><span class="line">PACKAGE_LIST=&quot;$(cleanup_list PACKAGE_LIST)&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">remove any packages defined in PACKAGE_LIST_RM in lib.config</span></span></span><br><span class="line">aggregated_content=&quot;$&#123;PACKAGE_LIST_RM&#125; &quot;</span><br><span class="line">aggregate_all_cli &quot;packages.remove&quot; &quot; &quot;</span><br><span class="line">aggregate_all_desktop &quot;packages.remove&quot; &quot; &quot;</span><br><span class="line">PACKAGE_LIST_RM=&quot;$(cleanup_list aggregated_content)&quot;</span><br><span class="line">unset aggregated_content</span><br><span class="line"></span><br><span class="line">aggregated_content=&quot;&quot;</span><br><span class="line">aggregate_all_cli &quot;packages.uninstall&quot; &quot; &quot;</span><br><span class="line">aggregate_all_desktop &quot;packages.uninstall&quot; &quot; &quot;</span><br><span class="line">PACKAGE_LIST_UNINSTALL=&quot;$(cleanup_list aggregated_content)&quot;</span><br><span class="line">unset aggregated_content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [[ -n $PACKAGE_LIST_RM ]]; then</span><br><span class="line">	display_alert &quot;Package remove list $&#123;PACKAGE_LIST_RM&#125;&quot;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Turns out that \b can be tricked by dashes.</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">So if you remove mesa-utils but still want to install &quot;mesa-utils-extra&quot;</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">a &quot;\b(mesa-utils)\b&quot; filter will convert &quot;mesa-utils-extra&quot; to &quot;-extra&quot;.</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">\W is not tricked by this but consumes the surrounding spaces, so we</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">replace the occurence by one space, to avoid sticking the next word to</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">the previous one after consuming the spaces.</span></span></span><br><span class="line">	DEBOOTSTRAP_LIST=$(sed -r &quot;s/\W($(tr &#x27; &#x27; &#x27;|&#x27; &lt;&lt;&lt; $&#123;PACKAGE_LIST_RM&#125;))\W/ /g&quot; &lt;&lt;&lt; &quot; $&#123;DEBOOTSTRAP_LIST&#125; &quot;)</span><br><span class="line">	PACKAGE_LIST=$(sed -r &quot;s/\W($(tr &#x27; &#x27; &#x27;|&#x27; &lt;&lt;&lt; $&#123;PACKAGE_LIST_RM&#125;))\W/ /g&quot; &lt;&lt;&lt; &quot; $&#123;PACKAGE_LIST&#125; &quot;)</span><br><span class="line">	PACKAGE_MAIN_LIST=$(sed -r &quot;s/\W($(tr &#x27; &#x27; &#x27;|&#x27; &lt;&lt;&lt; $&#123;PACKAGE_LIST_RM&#125;))\W/ /g&quot; &lt;&lt;&lt; &quot; $&#123;PACKAGE_MAIN_LIST&#125; &quot;)</span><br><span class="line">	if [[ $BUILD_DESKTOP == &quot;yes&quot; ]]; then</span><br><span class="line">		PACKAGE_LIST_DESKTOP=$(sed -r &quot;s/\W($(tr &#x27; &#x27; &#x27;|&#x27; &lt;&lt;&lt; $&#123;PACKAGE_LIST_RM&#125;))\W/ /g&quot; &lt;&lt;&lt; &quot; $&#123;PACKAGE_LIST_DESKTOP&#125; &quot;)</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">Removing double spaces... AGAIN, since we might have used a sed on them</span></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">Do not quote the variables. This would defeat the trick.</span></span></span><br><span class="line">		PACKAGE_LIST_DESKTOP=&quot;$(echo $&#123;PACKAGE_LIST_DESKTOP&#125;)&quot;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Removing double spaces... AGAIN, since we might have used a sed on them</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Do not quote the variables. This would defeat the trick.</span></span></span><br><span class="line">	DEBOOTSTRAP_LIST=&quot;$(echo $&#123;DEBOOTSTRAP_LIST&#125;)&quot;</span><br><span class="line">	PACKAGE_LIST=&quot;$(echo $&#123;PACKAGE_LIST&#125;)&quot;</span><br><span class="line">	PACKAGE_MAIN_LIST=&quot;$(echo $&#123;PACKAGE_MAIN_LIST&#125;)&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LOG_OUTPUT_FILE=&quot;$SRC/output/$&#123;LOG_SUBPATH&#125;/debootstrap-list.log&quot;</span><br><span class="line">echo -e &quot;\nVariables after manual configuration&quot; &gt;&gt;$LOG_OUTPUT_FILE</span><br><span class="line">show_checklist_variables &quot;DEBOOTSTRAP_COMPONENTS DEBOOTSTRAP_LIST PACKAGE_LIST PACKAGE_MAIN_LIST&quot;</span><br><span class="line">unset LOG_OUTPUT_FILE</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Give the option to configure DNS server used in the chroot during the build process</span></span></span><br><span class="line">[[ -z $NAMESERVER ]] &amp;&amp; NAMESERVER=&quot;1.0.0.1&quot; # default is cloudflare alternate</span><br><span class="line"></span><br><span class="line">call_extension_method &quot;post_aggregate_packages&quot; &quot;user_config_post_aggregate_packages&quot; &lt;&lt; &#x27;POST_AGGREGATE_PACKAGES&#x27;</span><br><span class="line">*For final user override, using a function, after all aggregations are done*</span><br><span class="line">Called after aggregating all package lists, before the end of `compilation.sh`.</span><br><span class="line">Packages will still be installed after this is called, so it is the last chance</span><br><span class="line">to confirm or change any packages.</span><br><span class="line">POST_AGGREGATE_PACKAGES</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">debug</span></span></span><br><span class="line">cat &lt;&lt;-EOF &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/output.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"># BUILD SCRIPT ENVIRONMENT</span></span></span><br><span class="line"></span><br><span class="line">Repository: $REPOSITORY_URL</span><br><span class="line">Version: $REPOSITORY_COMMIT</span><br><span class="line"></span><br><span class="line">Host OS: $HOSTRELEASE</span><br><span class="line">Host arch: $(dpkg --print-architecture)</span><br><span class="line">Host system: $(uname -a)</span><br><span class="line">Virtualization type: $(systemd-detect-virt)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"># Build script directories</span></span></span><br><span class="line">Build directory is located on:</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="string">(findmnt -o TARGET,SOURCE,FSTYPE,AVAIL -T &quot;$&#123;SRC&#125;&quot;)</span></span></span><br><span class="line"></span><br><span class="line">Build directory permissions:</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="string">(getfacl -p &quot;$&#123;SRC&#125;&quot;)</span></span></span><br><span class="line"></span><br><span class="line">Temp directory permissions:</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="string">(getfacl -p &quot;$&#123;SRC&#125;&quot;/.tmp 2&gt; /dev/null)</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"># BUILD CONFIGURATION</span></span></span><br><span class="line"></span><br><span class="line">Build target:</span><br><span class="line">Board: $BOARD</span><br><span class="line">Branch: $BRANCH</span><br><span class="line">Minimal: $BUILD_MINIMAL</span><br><span class="line">Desktop: $BUILD_DESKTOP</span><br><span class="line">Desktop Environment: $DESKTOP_ENVIRONMENT</span><br><span class="line">Software groups: $DESKTOP_APPGROUPS_SELECTED</span><br><span class="line"></span><br><span class="line">Kernel configuration:</span><br><span class="line">Repository: $KERNELSOURCE</span><br><span class="line">Branch: $KERNELBRANCH</span><br><span class="line">Config file: $LINUXCONFIG</span><br><span class="line"></span><br><span class="line">U-boot configuration:</span><br><span class="line">Repository: $BOOTSOURCE</span><br><span class="line">Branch: $BOOTBRANCH</span><br><span class="line">Config file: $BOOTCONFIG</span><br><span class="line"></span><br><span class="line">Partitioning configuration: $IMAGE_PARTITION_TABLE offset: $OFFSET</span><br><span class="line">Boot partition type: $&#123;BOOTFS_TYPE:-(none)&#125; $&#123;BOOTSIZE:+&quot;($&#123;BOOTSIZE&#125; MB)&quot;&#125;</span><br><span class="line">Root partition type: $ROOTFS_TYPE $&#123;FIXED_IMAGE_SIZE:+&quot;($&#123;FIXED_IMAGE_SIZE&#125; MB)&quot;&#125;</span><br><span class="line"></span><br><span class="line">CPU configuration: $CPUMIN - $CPUMAX with $GOVERNOR</span><br><span class="line">EOF</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="5-debootstrap-ng-分析"><a href="#5-debootstrap-ng-分析" class="headerlink" title="5.debootstrap_ng 分析"></a>5.debootstrap_ng 分析</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Copyright (c) 2013-2021 Igor Pecovnik, igor.pecovnik@gma**.com</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This file is licensed under the terms of the GNU General Public</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">License version 2. This program is licensed <span class="string">&quot;as is&quot;</span> without any</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">warranty of any kind, whether express or implied.</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Functions:</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">debootstrap_ng</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">create_rootfs_cache</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prepare_partitions</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">update_initramfs</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">create_image</span></span><br><span class="line"></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">debootstrap_ng</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">debootstrap_ng()</span></span><br><span class="line">&#123;</span><br><span class="line">	display_alert &quot;Starting rootfs and image building process for&quot; &quot;$&#123;BRANCH&#125; $&#123;BOARD&#125; $&#123;RELEASE&#125; $&#123;DESKTOP_APPGROUPS_SELECTED:-null&#125; $&#123;DESKTOP_ENVIRONMENT:-null&#125; $&#123;BUILD_MINIMAL&#125;&quot; &quot;info&quot;</span><br><span class="line"></span><br><span class="line">	[[ $ROOTFS_TYPE != ext4 ]] &amp;&amp; display_alert &quot;Assuming $BOARD $BRANCH kernel supports $ROOTFS_TYPE&quot; &quot;&quot; &quot;wrn&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="built_in">trap</span> to unmount stuff <span class="keyword">in</span> <span class="keyword">case</span> of error/manual interruption</span></span><br><span class="line">	trap unmount_on_exit INT TERM EXIT</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">stage: clean and create directories</span></span><br><span class="line">	rm -rf $SDCARD $MOUNT</span><br><span class="line">	mkdir -p $SDCARD $MOUNT $DEST/images $EXTER/cache/rootfs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">stage: verify tmpfs configuration and mount</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">CLI needs ~1.5GiB, desktop - ~3.5GiB</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">calculate and <span class="built_in">set</span> tmpfs mount to use 9/10 of available RAM+SWAP</span></span><br><span class="line">	local phymem=$(( (($(awk &#x27;/MemTotal/ &#123;print $2&#125;&#x27; /proc/meminfo) + $(awk &#x27;/SwapTotal/ &#123;print $2&#125;&#x27; /proc/meminfo))) / 1024 * 9 / 10 )) # MiB</span><br><span class="line">	if [[ $BUILD_DESKTOP == yes ]]; then local tmpfs_max_size=3500; else local tmpfs_max_size=1500; fi # MiB</span><br><span class="line">	if [[ $FORCE_USE_RAMDISK == no ]]; then	local use_tmpfs=no</span><br><span class="line">	elif [[ $FORCE_USE_RAMDISK == yes || $phymem -gt $tmpfs_max_size ]]; then</span><br><span class="line">		local use_tmpfs=yes</span><br><span class="line">	fi</span><br><span class="line">	[[ -n $FORCE_TMPFS_SIZE ]] &amp;&amp; phymem=$FORCE_TMPFS_SIZE</span><br><span class="line"></span><br><span class="line">	[[ $use_tmpfs == yes ]] &amp;&amp; mount -t tmpfs -o size=$&#123;phymem&#125;M tmpfs $SDCARD</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">stage: prepare basic rootfs: unpack cache or create from scratch</span></span><br><span class="line">	create_rootfs_cache</span><br><span class="line"></span><br><span class="line">	call_extension_method &quot;pre_install_distribution_specific&quot; &quot;config_pre_install_distribution_specific&quot; &lt;&lt; &#x27;PRE_INSTALL_DISTRIBUTION_SPECIFIC&#x27;</span><br><span class="line">*give config a chance to act before install_distribution_specific*</span><br><span class="line">Called after `create_rootfs_cache` (_prepare basic rootfs: unpack cache or create from scratch_) but before `install_distribution_specific` (_install distribution and board specific applications_).</span><br><span class="line">PRE_INSTALL_DISTRIBUTION_SPECIFIC</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">stage: install kernel and u-boot packages</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">install distribution and board specific applications</span></span><br><span class="line"></span><br><span class="line">	if [[ $&#123;RELEASE&#125; == &quot;raspi&quot; ]]; then</span><br><span class="line">		install_opi_specific</span><br><span class="line">	else</span><br><span class="line">		install_distribution_specific</span><br><span class="line">		install_common</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">install locally built packages or install pre-built packages from orangepi</span></span><br><span class="line">		[[ $EXTERNAL_NEW == compile || $EXTERNAL_NEW == prebuilt ]] &amp;&amp; chroot_installpackages_local</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">[[ <span class="variable">$EXTERNAL_NEW</span> == prebuilt ]] &amp;&amp; chroot_installpackages <span class="string">&quot;yes&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">stage: user customization script</span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">NOTE: installing too many packages may fill tmpfs mount</span></span><br><span class="line">		customize_image</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">remove packages that are no longer needed. Since we have intrudoced uninstall feature, we might want to clean things that are no longer needed</span></span><br><span class="line">		display_alert &quot;No longer needed packages&quot; &quot;purge&quot; &quot;info&quot;</span><br><span class="line">		chroot $SDCARD /bin/bash -c &quot;apt-get autoremove -y&quot;  &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">create list of installed packages <span class="keyword">for</span> debug purposes</span></span><br><span class="line">		chroot $SDCARD /bin/bash -c &quot;dpkg --get-selections&quot; | grep -v deinstall | awk &#x27;&#123;print $1&#125;&#x27; | cut -f1 -d&#x27;:&#x27; &gt; $DEST/$&#123;LOG_SUBPATH&#125;/installed-packages-$&#123;RELEASE&#125;$([[ $&#123;BUILD_MINIMAL&#125; == yes ]] &amp;&amp; echo &quot;-minimal&quot;)$([[ $&#123;BUILD_DESKTOP&#125; == yes  ]] &amp;&amp; echo &quot;-desktop&quot;).list 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">clean up / prepare <span class="keyword">for</span> making the image</span></span><br><span class="line">	umount_chroot &quot;$SDCARD&quot;</span><br><span class="line">	post_debootstrap_tweaks</span><br><span class="line"></span><br><span class="line">	if [[ $ROOTFS_TYPE == fel ]]; then</span><br><span class="line">		FEL_ROOTFS=$SDCARD/</span><br><span class="line">		display_alert &quot;Starting FEL boot&quot; &quot;$BOARD&quot; &quot;info&quot;</span><br><span class="line">		source $SRC/scripts/fel-load.sh</span><br><span class="line">	else</span><br><span class="line">		prepare_partitions</span><br><span class="line">		create_image</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">stage: unmount tmpfs</span></span><br><span class="line">	umount $SDCARD 2&gt;&amp;1</span><br><span class="line">	if [[ $use_tmpfs = yes ]]; then</span><br><span class="line">		while grep -qs &quot;$SDCARD&quot; /proc/mounts</span><br><span class="line">		do</span><br><span class="line">			umount $SDCARD</span><br><span class="line">			sleep 5</span><br><span class="line">		done</span><br><span class="line">	fi</span><br><span class="line">	rm -rf $SDCARD</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">remove <span class="built_in">exit</span> <span class="built_in">trap</span></span></span><br><span class="line">	trap - INT TERM EXIT</span><br><span class="line">&#125; #############################################################################</span><br><span class="line"></span><br><span class="line">bootstrap()&#123;</span><br><span class="line">	local BOOTSTRAP_CMD=debootstrap</span><br><span class="line">	local BOOTSTRAP_ARGS=()</span><br><span class="line"></span><br><span class="line">	export CAPSH_ARG=&quot;--drop=cap_setfcap&quot;</span><br><span class="line">	export http_proxy=$&#123;APT_PROXY&#125;</span><br><span class="line"></span><br><span class="line">	BOOTSTRAP_ARGS+=(--arch arm64)</span><br><span class="line">	BOOTSTRAP_ARGS+=(--include gnupg)</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">BOOTSTRAP_ARGS+=(--components <span class="string">&quot;main,contrib,non-free&quot;</span>)</span></span><br><span class="line">	BOOTSTRAP_ARGS+=(--components &quot;main&quot;)</span><br><span class="line">	BOOTSTRAP_ARGS+=(--exclude=info)</span><br><span class="line">	BOOTSTRAP_ARGS+=(--include=ca-certificates)</span><br><span class="line">	BOOTSTRAP_ARGS+=(&quot;$@&quot;)</span><br><span class="line">	printf -v BOOTSTRAP_STR &#x27;%q &#x27; &quot;$&#123;BOOTSTRAP_ARGS[@]&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">&#123;BOOTSTRAP_CMD&#125; <span class="variable">$BOOTSTRAP_STR</span> || <span class="literal">true</span></span></span><br><span class="line">&#125;</span><br><span class="line">export -f bootstrap</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">create_rootfs_cache</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># unpacks cached rootfs for $RELEASE or creates one</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">create_rootfs_cache()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	local packages_hash=$(get_package_list_hash &quot;$ROOTFSCACHE_VERSION&quot;)</span><br><span class="line">	local cache_type=&quot;cli&quot;</span><br><span class="line">	[[ $&#123;BUILD_DESKTOP&#125; == yes ]] &amp;&amp; local cache_type=&quot;xfce-desktop&quot;</span><br><span class="line">	[[ -n $&#123;DESKTOP_ENVIRONMENT&#125; ]] &amp;&amp; local cache_type=&quot;$&#123;DESKTOP_ENVIRONMENT&#125;&quot;</span><br><span class="line">	[[ $&#123;BUILD_MINIMAL&#125; == yes ]] &amp;&amp; local cache_type=&quot;minimal&quot;</span><br><span class="line">	local cache_name=$&#123;RELEASE&#125;-$&#123;cache_type&#125;-$&#123;ARCH&#125;.$packages_hash.tar.lz4</span><br><span class="line">	local cache_fname=$&#123;EXTER&#125;/cache/rootfs/$&#123;cache_name&#125;</span><br><span class="line">	local display_name=$&#123;RELEASE&#125;-$&#123;cache_type&#125;-$&#123;ARCH&#125;.$&#123;packages_hash:0:3&#125;...$&#123;packages_hash:29&#125;.tar.lz4</span><br><span class="line"></span><br><span class="line">	if [[ -f $cache_fname &amp;&amp; &quot;$ROOT_FS_CREATE_ONLY&quot; != &quot;force&quot; ]]; then</span><br><span class="line">		local date_diff=$(( ($(date +%s) - $(stat -c %Y $cache_fname)) / 86400 ))</span><br><span class="line">		display_alert &quot;Extracting $display_name&quot; &quot;$date_diff days old&quot; &quot;info&quot;</span><br><span class="line">		pv -p -b -r -c -N &quot;[ .... ] $display_name&quot; &quot;$cache_fname&quot; | lz4 -dc | tar xp --xattrs -C $SDCARD/</span><br><span class="line">		[[ $? -ne 0 ]] &amp;&amp; rm $cache_fname &amp;&amp; exit_with_error &quot;Cache $cache_fname is corrupted and was deleted. Restart.&quot;</span><br><span class="line">		rm $SDCARD/etc/resolv.conf</span><br><span class="line">		echo &quot;nameserver $NAMESERVER&quot; &gt;&gt; $SDCARD/etc/resolv.conf</span><br><span class="line">		create_sources_list &quot;$RELEASE&quot; &quot;$SDCARD/&quot;</span><br><span class="line">	elif [[ $RELEASE == &quot;raspi&quot; ]]; then</span><br><span class="line">		display_alert &quot;local not found&quot; &quot;Creating new rootfs cache for $RELEASE&quot; &quot;info&quot;</span><br><span class="line"></span><br><span class="line">		cd $SDCARD # this will prevent error sh: 0: getcwd() failed</span><br><span class="line"></span><br><span class="line">		bootstrap bullseye &quot;$SDCARD&quot; &quot;https://mirrors.ustc.edu.cn/debian/&quot;</span><br><span class="line"></span><br><span class="line">		mount_chroot &quot;$SDCARD&quot;</span><br><span class="line"></span><br><span class="line">		display_alert &quot;Diverting&quot; &quot;initctl/start-stop-daemon&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">policy-rc.d script prevents starting or reloading services during image creation</span></span><br><span class="line">		printf &#x27;#!/bin/sh\nexit 101&#x27; &gt; $SDCARD/usr/sbin/policy-rc.d</span><br><span class="line">		LC_ALL=C LANG=C chroot $SDCARD /bin/bash -c &quot;dpkg-divert --quiet --local --rename --add /sbin/initctl&quot; &amp;&gt; /dev/null</span><br><span class="line">		LC_ALL=C LANG=C chroot $SDCARD /bin/bash -c &quot;dpkg-divert --quiet --local --rename --add /sbin/start-stop-daemon&quot; &amp;&gt; /dev/null</span><br><span class="line">		printf &#x27;#!/bin/sh\necho &quot;Warning: Fake start-stop-daemon called, doing nothing&quot;&#x27; &gt; $SDCARD/sbin/start-stop-daemon</span><br><span class="line">		printf &#x27;#!/bin/sh\necho &quot;Warning: Fake initctl called, doing nothing&quot;&#x27; &gt; $SDCARD/sbin/initctl</span><br><span class="line">		chmod 755 $SDCARD/usr/sbin/policy-rc.d</span><br><span class="line">		chmod 755 $SDCARD/sbin/initctl</span><br><span class="line">		chmod 755 $SDCARD/sbin/start-stop-daemon</span><br><span class="line"></span><br><span class="line">		install_raspi_specific</span><br><span class="line"></span><br><span class="line">		umount_chroot &quot;$SDCARD&quot;</span><br><span class="line"></span><br><span class="line">		tar cp --xattrs --directory=$SDCARD/ --exclude=&#x27;./dev/*&#x27; --exclude=&#x27;./proc/*&#x27; --exclude=&#x27;./run/*&#x27; --exclude=&#x27;./tmp/*&#x27; \</span><br><span class="line">			--exclude=&#x27;./sys/*&#x27; . | pv -p -b -r -s $(du -sb $SDCARD/ | cut -f1) -N &quot;$display_name&quot; | lz4 -5 -c &gt; $cache_fname</span><br><span class="line">	else</span><br><span class="line">		display_alert &quot;local not found&quot; &quot;Creating new rootfs cache for $RELEASE&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">stage: debootstrap base system</span></span><br><span class="line">		if [[ $NO_APT_CACHER != yes ]]; then</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">apt-cacher-ng apt-get proxy parameter</span></span><br><span class="line">			local apt_extra=&quot;-o Acquire::http::Proxy=\&quot;http://$&#123;APT_PROXY_ADDR:-localhost:3142&#125;\&quot;&quot;</span><br><span class="line">			local apt_mirror=&quot;http://$&#123;APT_PROXY_ADDR:-localhost:3142&#125;/$APT_MIRROR&quot;</span><br><span class="line">		else</span><br><span class="line">			local apt_mirror=&quot;http://$APT_MIRROR&quot;</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">fancy progress bars</span></span><br><span class="line">		[[ -z $OUTPUT_DIALOG ]] &amp;&amp; local apt_extra_progress=&quot;--show-progress -o DPKG::Progress-Fancy=1&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">Ok so <span class="keyword">for</span> <span class="built_in">eval</span>+PIPESTATUS.</span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">Try this on your bash shell:</span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">ONEVAR=<span class="string">&quot;testing&quot;</span> <span class="built_in">eval</span> <span class="string">&#x27;bash -c &quot;echo value once $ONEVAR &amp;&amp; false &amp;&amp; echo value twice $ONEVAR&quot;&#x27;</span> <span class="string">&#x27;| grep value&#x27;</span>  <span class="string">&#x27;| grep value&#x27;</span> ; <span class="built_in">echo</span> <span class="variable">$&#123;PIPESTATUS[*]&#125;</span></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">Notice how PIPESTATUS has only one element. and it is always <span class="literal">true</span>, although we failed explicitly with <span class="literal">false</span> <span class="keyword">in</span> the middle of the bash.</span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">That is because <span class="built_in">eval</span> itself is considered a single <span class="built_in">command</span>, no matter how many pipes you put <span class="keyword">in</span> there, you<span class="string">&#x27;ll get a single value, the return code of the LAST pipe.</span></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">Lets export the value of the pipe inside eval so we know outside what happened:</span></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">ONEVAR=&quot;testing&quot; eval &#x27;</span>bash -e -c <span class="string">&quot;echo value once <span class="variable">$ONEVAR</span> &amp;&amp; false &amp;&amp; echo value twice <span class="variable">$ONEVAR</span>&quot;</span><span class="string">&#x27; &#x27;</span>| grep value<span class="string">&#x27;  &#x27;</span>| grep value<span class="string">&#x27; &#x27;</span>;EVALPIPE=(<span class="variable">$&#123;PIPESTATUS[@]&#125;</span>)<span class="string">&#x27; ; echo $&#123;EVALPIPE[*]&#125;</span></span></span><br><span class="line"></span><br><span class="line">		display_alert &quot;Installing base system&quot; &quot;Stage 1/2&quot; &quot;info&quot;</span><br><span class="line">		cd $SDCARD # this will prevent error sh: 0: getcwd() failed</span><br><span class="line"></span><br><span class="line">		eval &#x27;debootstrap --variant=minbase --include=$&#123;DEBOOTSTRAP_LIST// /,&#125; $&#123;PACKAGE_LIST_EXCLUDE:+ --exclude=$&#123;PACKAGE_LIST_EXCLUDE// /,&#125;&#125; \</span><br><span class="line">			--arch=$ARCH --components=$&#123;DEBOOTSTRAP_COMPONENTS&#125; $DEBOOTSTRAP_OPTION --foreign $RELEASE $SDCARD/ $apt_mirror&#x27; \</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash"><span class="string">&#123;PROGRESS_LOG_TO_FILE:+&#x27;</span> | <span class="built_in">tee</span> -a <span class="variable">$DEST</span>/<span class="variable">$&#123;LOG_SUBPATH&#125;</span>/debootstrap.log<span class="string">&#x27;&#125; \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			$&#123;OUTPUT_DIALOG:+&#x27;</span> | dialog --backtitle <span class="string">&quot;<span class="variable">$backtitle</span>&quot;</span> --progressbox <span class="string">&quot;Debootstrap (stage 1/2)...&quot;</span> <span class="variable">$TTY_Y</span> <span class="variable">$TTY_X</span><span class="string">&#x27;&#125; \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			$&#123;OUTPUT_VERYSILENT:+&#x27;</span> &gt;/dev/null 2&gt;/dev/null<span class="string">&#x27;&#125; &#x27;</span>;EVALPIPE=(<span class="variable">$&#123;PIPESTATUS[@]&#125;</span>)<span class="string">&#x27;</span></span></span><br><span class="line"></span><br><span class="line">		[[ $&#123;EVALPIPE[0]&#125; -ne 0 || ! -f $SDCARD/debootstrap/debootstrap ]] &amp;&amp; exit_with_error &quot;Debootstrap base system for $&#123;BRANCH&#125; $&#123;BOARD&#125; $&#123;RELEASE&#125; $&#123;DESKTOP_APPGROUPS_SELECTED&#125; $&#123;DESKTOP_ENVIRONMENT&#125; $&#123;BUILD_MINIMAL&#125; first stage failed&quot;</span><br><span class="line"></span><br><span class="line">		cp /usr/bin/$QEMU_BINARY $SDCARD/usr/bin/</span><br><span class="line"></span><br><span class="line">		mkdir -p $SDCARD/usr/share/keyrings/</span><br><span class="line">		cp /usr/share/keyrings/*-archive-keyring.gpg $SDCARD/usr/share/keyrings/</span><br><span class="line"></span><br><span class="line">		display_alert &quot;Installing base system&quot; &quot;Stage 2/2&quot; &quot;info&quot;</span><br><span class="line">		eval &#x27;LC_ALL=C LANG=C chroot $SDCARD /bin/bash -e -c &quot;/debootstrap/debootstrap --second-stage&quot;&#x27; \</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash"><span class="string">&#123;PROGRESS_LOG_TO_FILE:+&#x27;</span> | <span class="built_in">tee</span> -a <span class="variable">$DEST</span>/<span class="variable">$&#123;LOG_SUBPATH&#125;</span>/debootstrap.log<span class="string">&#x27;&#125; \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			$&#123;OUTPUT_DIALOG:+&#x27;</span> | dialog --backtitle <span class="string">&quot;<span class="variable">$backtitle</span>&quot;</span> --progressbox <span class="string">&quot;Debootstrap (stage 2/2)...&quot;</span> <span class="variable">$TTY_Y</span> <span class="variable">$TTY_X</span><span class="string">&#x27;&#125; \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			$&#123;OUTPUT_VERYSILENT:+&#x27;</span> &gt;/dev/null 2&gt;/dev/null<span class="string">&#x27;&#125; &#x27;</span>;EVALPIPE=(<span class="variable">$&#123;PIPESTATUS[@]&#125;</span>)<span class="string">&#x27;</span></span></span><br><span class="line"></span><br><span class="line">		[[ $&#123;EVALPIPE[0]&#125; -ne 0 || ! -f $SDCARD/bin/bash ]] &amp;&amp; exit_with_error &quot;Debootstrap base system for $&#123;BRANCH&#125; $&#123;BOARD&#125; $&#123;RELEASE&#125; $&#123;DESKTOP_APPGROUPS_SELECTED&#125; $&#123;DESKTOP_ENVIRONMENT&#125; $&#123;BUILD_MINIMAL&#125; second stage failed&quot;</span><br><span class="line"></span><br><span class="line">		mount_chroot &quot;$SDCARD&quot;</span><br><span class="line"></span><br><span class="line">		display_alert &quot;Diverting&quot; &quot;initctl/start-stop-daemon&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">policy-rc.d script prevents starting or reloading services during image creation</span></span></span><br><span class="line">		printf &#x27;#!/bin/sh\nexit 101&#x27; &gt; $SDCARD/usr/sbin/policy-rc.d</span><br><span class="line">		LC_ALL=C LANG=C chroot $SDCARD /bin/bash -c &quot;dpkg-divert --quiet --local --rename --add /sbin/initctl&quot; &amp;&gt; /dev/null</span><br><span class="line">		LC_ALL=C LANG=C chroot $SDCARD /bin/bash -c &quot;dpkg-divert --quiet --local --rename --add /sbin/start-stop-daemon&quot; &amp;&gt; /dev/null</span><br><span class="line">		printf &#x27;#!/bin/sh\necho &quot;Warning: Fake start-stop-daemon called, doing nothing&quot;&#x27; &gt; $SDCARD/sbin/start-stop-daemon</span><br><span class="line">		printf &#x27;#!/bin/sh\necho &quot;Warning: Fake initctl called, doing nothing&quot;&#x27; &gt; $SDCARD/sbin/initctl</span><br><span class="line">		chmod 755 $SDCARD/usr/sbin/policy-rc.d</span><br><span class="line">		chmod 755 $SDCARD/sbin/initctl</span><br><span class="line">		chmod 755 $SDCARD/sbin/start-stop-daemon</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">stage: configure language and locales</span></span></span><br><span class="line">		display_alert &quot;Configuring locales&quot; &quot;$DEST_LANG&quot; &quot;info&quot;</span><br><span class="line"></span><br><span class="line">		[[ -f $SDCARD/etc/locale.gen ]] &amp;&amp; sed -i &quot;s/^# $DEST_LANG/$DEST_LANG/&quot; $SDCARD/etc/locale.gen</span><br><span class="line">		eval &#x27;LC_ALL=C LANG=C chroot $SDCARD /bin/bash -c &quot;locale-gen $DEST_LANG&quot;&#x27; $&#123;OUTPUT_VERYSILENT:+&#x27; &gt;/dev/null 2&gt;/dev/null&#x27;&#125;</span><br><span class="line">		eval &#x27;LC_ALL=C LANG=C chroot $SDCARD /bin/bash -c &quot;update-locale LANG=$DEST_LANG LANGUAGE=$DEST_LANG LC_MESSAGES=$DEST_LANG&quot;&#x27; \</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash"><span class="string">&#123;OUTPUT_VERYSILENT:+&#x27;</span> &gt;/dev/null 2&gt;/dev/null<span class="string">&#x27;&#125;</span></span></span><br><span class="line"></span><br><span class="line">		if [[ -f $SDCARD/etc/default/console-setup ]]; then</span><br><span class="line">			sed -e &#x27;s/CHARMAP=.*/CHARMAP=&quot;UTF-8&quot;/&#x27; -e &#x27;s/FONTSIZE=.*/FONTSIZE=&quot;8x16&quot;/&#x27; \</span><br><span class="line">				-e &#x27;s/CODESET=.*/CODESET=&quot;guess&quot;/&#x27; -i $SDCARD/etc/default/console-setup</span><br><span class="line">			eval &#x27;LC_ALL=C LANG=C chroot $SDCARD /bin/bash -c &quot;setupcon --save --force&quot;&#x27;</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">stage: create apt-get sources list</span></span></span><br><span class="line">		create_sources_list &quot;$RELEASE&quot; &quot;$SDCARD/&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">add armhf arhitecture to arm64, unless configured not to do so.</span></span></span><br><span class="line">		if [[ &quot;a$&#123;ARMHF_ARCH&#125;&quot; != &quot;askip&quot; ]]; then</span><br><span class="line">			[[ $ARCH == arm64 ]] &amp;&amp; eval &#x27;LC_ALL=C LANG=C chroot $SDCARD /bin/bash -c &quot;dpkg --add-architecture armhf&quot;&#x27;</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">this should fix resolvconf installation failure in some cases</span></span></span><br><span class="line">		chroot $SDCARD /bin/bash -c &#x27;echo &quot;resolvconf resolvconf/linkify-resolvconf boolean false&quot; | debconf-set-selections&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">stage: update packages list</span></span></span><br><span class="line">		display_alert &quot;Updating package list&quot; &quot;$RELEASE&quot; &quot;info&quot;</span><br><span class="line">		eval &#x27;LC_ALL=C LANG=C chroot $SDCARD /bin/bash -e -c &quot;apt-get -q -y $apt_extra update&quot;&#x27; \</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash"><span class="string">&#123;PROGRESS_LOG_TO_FILE:+&#x27;</span> | <span class="built_in">tee</span> -a <span class="variable">$DEST</span>/<span class="variable">$&#123;LOG_SUBPATH&#125;</span>/debootstrap.log<span class="string">&#x27;&#125; \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			$&#123;OUTPUT_DIALOG:+&#x27;</span> | dialog --backtitle <span class="string">&quot;<span class="variable">$backtitle</span>&quot;</span> --progressbox <span class="string">&quot;Updating package lists...&quot;</span> <span class="variable">$TTY_Y</span> <span class="variable">$TTY_X</span><span class="string">&#x27;&#125; \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			$&#123;OUTPUT_VERYSILENT:+&#x27;</span> &gt;/dev/null 2&gt;/dev/null<span class="string">&#x27;&#125; &#x27;</span>;EVALPIPE=(<span class="variable">$&#123;PIPESTATUS[@]&#125;</span>)<span class="string">&#x27;</span></span></span><br><span class="line"></span><br><span class="line">		[[ $&#123;EVALPIPE[0]&#125; -ne 0 ]] &amp;&amp; display_alert &quot;Updating package lists&quot; &quot;failed&quot; &quot;wrn&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">stage: upgrade base packages from xxx-updates and xxx-backports repository branches</span></span></span><br><span class="line">		display_alert &quot;Upgrading base packages&quot; &quot;Orange Pi&quot; &quot;info&quot;</span><br><span class="line">		eval &#x27;LC_ALL=C LANG=C chroot $SDCARD /bin/bash -e -c &quot;DEBIAN_FRONTEND=noninteractive apt-get -y -q \</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash"><span class="string">apt_extra $apt_extra_progress upgrade&quot;&#x27;</span> \</span></span><br><span class="line"><span class="language-bash">			<span class="variable">$&#123;PROGRESS_LOG_TO_FILE:+&#x27; | tee -a $DEST/<span class="variable">$&#123;LOG_SUBPATH&#125;</span>/debootstrap.log&#x27;&#125;</span> \</span></span><br><span class="line"><span class="language-bash">			<span class="variable">$&#123;OUTPUT_DIALOG:+&#x27; | dialog --backtitle &quot;$backtitle&quot; --progressbox &quot;Upgrading base packages...&quot; $TTY_Y $TTY_X&#x27;&#125;</span> \</span></span><br><span class="line"><span class="language-bash">			<span class="variable">$&#123;OUTPUT_VERYSILENT:+&#x27; &gt;/dev/null 2&gt;/dev/null&#x27;&#125;</span> <span class="string">&#x27;;EVALPIPE=($&#123;PIPESTATUS[@]&#125;)&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">Myy: Dividing the desktop packages installation steps into multiple</span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">ones. We first install the <span class="string">&quot;ADDITIONAL_PACKAGES&quot;</span> <span class="keyword">in</span> order to get</span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">access to software-common-properties installation.</span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">THEN we add the APT sources and install the Desktop packages.</span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">TODO : Find a way to add APT sources WITHOUT software-common-properties</span></span><br><span class="line"></span><br><span class="line">		[[ $&#123;EVALPIPE[0]&#125; -ne 0 ]] &amp;&amp; display_alert &quot;Upgrading base packages&quot; &quot;failed&quot; &quot;wrn&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">stage: install additional packages</span></span><br><span class="line">		display_alert &quot;Installing the main packages for&quot; &quot;Orange Pi&quot; &quot;info&quot;</span><br><span class="line">		eval &#x27;LC_ALL=C LANG=C chroot $SDCARD /bin/bash -e -c &quot;DEBIAN_FRONTEND=noninteractive apt-get -y -q \</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash">apt_extra <span class="variable">$apt_extra_progress</span> --no-install-recommends install <span class="variable">$PACKAGE_MAIN_LIST</span><span class="string">&quot;&#x27; \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			<span class="variable">$&#123;PROGRESS_LOG_TO_FILE:+&#x27; | tee -a $DEST/<span class="variable">$&#123;LOG_SUBPATH&#125;</span>/debootstrap.log&#x27;&#125;</span> \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			<span class="variable">$&#123;OUTPUT_DIALOG:+&#x27; | dialog --backtitle &quot;$backtitle&quot; --progressbox &quot;Installing Orange Pi main packages...&quot; $TTY_Y $TTY_X&#x27;&#125;</span> \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			<span class="variable">$&#123;OUTPUT_VERYSILENT:+&#x27; &gt;/dev/null 2&gt;/dev/null&#x27;&#125;</span> &#x27;;EVALPIPE=(<span class="variable">$&#123;PIPESTATUS[@]&#125;</span>)&#x27;</span></span></span><br><span class="line"></span><br><span class="line">		[[ $&#123;PIPESTATUS[0]&#125; -ne 0 ]] &amp;&amp; exit_with_error &quot;Installation of Orange Pi main packages for $&#123;BRANCH&#125; $&#123;BOARD&#125; $&#123;RELEASE&#125; $&#123;DESKTOP_APPGROUPS_SELECTED&#125; $&#123;DESKTOP_ENVIRONMENT&#125; $&#123;BUILD_MINIMAL&#125; failed&quot;</span><br><span class="line"></span><br><span class="line">		if [[ $BUILD_DESKTOP == &quot;yes&quot; ]]; then</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">FIXME Myy : Are we keeping this only for Desktop users,</span></span></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">or should we extend this to CLI users too ?</span></span></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">There might be some clunky boards that require Debian packages from</span></span></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">specific repos...</span></span></span><br><span class="line">			display_alert &quot;Adding apt sources for Desktop packages&quot;</span><br><span class="line">			add_desktop_package_sources</span><br><span class="line"></span><br><span class="line">			local apt_desktop_install_flags=&quot;&quot;</span><br><span class="line">			if [[ ! -z $&#123;DESKTOP_APT_FLAGS_SELECTED+x&#125; ]]; then</span><br><span class="line">				for flag in $&#123;DESKTOP_APT_FLAGS_SELECTED&#125;; do</span><br><span class="line">					apt_desktop_install_flags+=&quot; --install-$&#123;flag&#125;&quot;</span><br><span class="line">				done</span><br><span class="line">			else</span><br><span class="line">				# Myy : Using the previous default option, if the variable isn&#x27;t defined</span><br><span class="line">				# And ONLY if it&#x27;s not defined !</span><br><span class="line">				apt_desktop_install_flags+=&quot; --no-install-recommends&quot;</span><br><span class="line">			fi</span><br><span class="line"></span><br><span class="line">			display_alert &quot;Installing the desktop packages for&quot; &quot;Orange Pi&quot; &quot;info&quot;</span><br><span class="line">			eval &#x27;LC_ALL=C LANG=C chroot $SDCARD /bin/bash -e -c &quot;DEBIAN_FRONTEND=noninteractive apt-get -y -q \</span><br><span class="line">				$apt_extra $apt_extra_progress install $&#123;apt_desktop_install_flags&#125; $PACKAGE_LIST_DESKTOP&quot;&#x27; \</span><br><span class="line">				$&#123;PROGRESS_LOG_TO_FILE:+&#x27; | tee -a $DEST/$&#123;LOG_SUBPATH&#125;/debootstrap.log&#x27;&#125; \</span><br><span class="line">				$&#123;OUTPUT_DIALOG:+&#x27; | dialog --backtitle &quot;$backtitle&quot; --progressbox &quot;Installing Orange Pi desktop packages...&quot; $TTY_Y $TTY_X&#x27;&#125; \</span><br><span class="line">				$&#123;OUTPUT_VERYSILENT:+&#x27; &gt;/dev/null 2&gt;/dev/null&#x27;&#125; &#x27;;EVALPIPE=($&#123;PIPESTATUS[@]&#125;)&#x27;</span><br><span class="line"></span><br><span class="line">			[[ $&#123;PIPESTATUS[0]&#125; -ne 0 ]] &amp;&amp; exit_with_error &quot;Installation of Orange Pi desktop packages for $&#123;BRANCH&#125; $&#123;BOARD&#125; $&#123;RELEASE&#125; $&#123;DESKTOP_APPGROUPS_SELECTED&#125; $&#123;DESKTOP_ENVIRONMENT&#125; $&#123;BUILD_MINIMAL&#125; failed&quot;</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">Remove packages from packages.uninstall</span></span></span><br><span class="line"></span><br><span class="line">		display_alert &quot;Uninstall packages&quot; &quot;$PACKAGE_LIST_UNINSTALL&quot; &quot;info&quot;</span><br><span class="line">		eval &#x27;LC_ALL=C LANG=C chroot $SDCARD /bin/bash -e -c &quot;DEBIAN_FRONTEND=noninteractive apt-get -y -qq \</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash"><span class="string">apt_extra <span class="variable">$apt_extra_progress</span> purge <span class="variable">$PACKAGE_LIST_UNINSTALL</span>&quot;</span><span class="string">&#x27; \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			$&#123;PROGRESS_LOG_TO_FILE:+&#x27;</span> &gt;&gt; <span class="variable">$DEST</span>/<span class="variable">$&#123;LOG_SUBPATH&#125;</span>/debootstrap.log<span class="string">&#x27;&#125; \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			$&#123;OUTPUT_DIALOG:+&#x27;</span> | dialog --backtitle <span class="string">&quot;<span class="variable">$backtitle</span>&quot;</span> --progressbox <span class="string">&quot;Removing packages.uninstall packages...&quot;</span> <span class="variable">$TTY_Y</span> <span class="variable">$TTY_X</span><span class="string">&#x27;&#125; \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">			$&#123;OUTPUT_VERYSILENT:+&#x27;</span> &gt;/dev/null 2&gt;/dev/null<span class="string">&#x27;&#125; &#x27;</span>;EVALPIPE=(<span class="variable">$&#123;PIPESTATUS[@]&#125;</span>)<span class="string">&#x27;</span></span></span><br><span class="line"></span><br><span class="line">		[[ $&#123;EVALPIPE[0]&#125; -ne 0 ]] &amp;&amp; exit_with_error &quot;Installation of Orange Pi packages failed&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">stage: purge residual packages</span></span></span><br><span class="line">		display_alert &quot;Purging residual packages for&quot; &quot;Orange Pi&quot; &quot;info&quot;</span><br><span class="line">		PURGINGPACKAGES=$(chroot $SDCARD /bin/bash -c &quot;dpkg -l | grep \&quot;^rc\&quot; | awk &#x27;&#123;print \$2&#125;&#x27; | tr \&quot;\n\&quot; \&quot; \&quot;&quot;)</span><br><span class="line">		eval &#x27;LC_ALL=C LANG=C chroot $SDCARD /bin/bash -e -c &quot;DEBIAN_FRONTEND=noninteractive apt-get -y -q \</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash"><span class="string">apt_extra $apt_extra_progress remove --purge $PURGINGPACKAGES&quot;&#x27;</span> \</span></span><br><span class="line"><span class="language-bash">			<span class="variable">$&#123;PROGRESS_LOG_TO_FILE:+&#x27; | tee -a $DEST/<span class="variable">$&#123;LOG_SUBPATH&#125;</span>/debootstrap.log&#x27;&#125;</span> \</span></span><br><span class="line"><span class="language-bash">			<span class="variable">$&#123;OUTPUT_DIALOG:+&#x27; | dialog --backtitle &quot;$backtitle&quot; --progressbox &quot;Purging residual Orange Pi packages...&quot; $TTY_Y $TTY_X&#x27;&#125;</span> \</span></span><br><span class="line"><span class="language-bash">			<span class="variable">$&#123;OUTPUT_VERYSILENT:+&#x27; &gt;/dev/null 2&gt;/dev/null&#x27;&#125;</span> <span class="string">&#x27;;EVALPIPE=($&#123;PIPESTATUS[@]&#125;)&#x27;</span></span></span><br><span class="line"></span><br><span class="line">		[[ $&#123;EVALPIPE[0]&#125; -ne 0 ]] &amp;&amp; exit_with_error &quot;Purging of residual Orange Pi packages failed&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">stage: remove downloaded packages</span></span><br><span class="line">		chroot $SDCARD /bin/bash -c &quot;apt-get -y autoremove; apt-get clean&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">DEBUG: <span class="built_in">print</span> free space</span></span><br><span class="line">		local freespace=$(LC_ALL=C df -h)</span><br><span class="line">		echo $freespace &gt;&gt; $DEST/$&#123;LOG_SUBPATH&#125;/debootstrap.log</span><br><span class="line">		display_alert &quot;Free SD cache&quot; &quot;$(echo -e &quot;$freespace&quot; | grep $SDCARD | awk &#x27;&#123;print $5&#125;&#x27;)&quot; &quot;info&quot;</span><br><span class="line">		display_alert &quot;Mount point&quot; &quot;$(echo -e &quot;$freespace&quot; | grep $MOUNT | head -1 | awk &#x27;&#123;print $5&#125;&#x27;)&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">create list of installed packages <span class="keyword">for</span> debug purposes</span></span><br><span class="line">		chroot $SDCARD /bin/bash -c &quot;dpkg --get-selections&quot; | grep -v deinstall | awk &#x27;&#123;print $1&#125;&#x27; | cut -f1 -d&#x27;:&#x27; &gt; $&#123;cache_fname&#125;.list 2&gt;&amp;1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">creating xapian index that synaptic runs faster</span></span><br><span class="line">		if [[ $BUILD_DESKTOP == yes ]]; then</span><br><span class="line">			display_alert &quot;Recreating Synaptic search index&quot; &quot;Please wait&quot; &quot;info&quot;</span><br><span class="line">			chroot $SDCARD /bin/bash -c &quot;[[ -f /usr/sbin/update-apt-xapian-index ]] &amp;&amp; /usr/sbin/update-apt-xapian-index -u&quot;</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">this is needed <span class="keyword">for</span> the build process later since resolvconf generated file <span class="keyword">in</span> /run is not saved</span></span><br><span class="line">		rm $SDCARD/etc/resolv.conf</span><br><span class="line">		echo &quot;nameserver $NAMESERVER&quot; &gt;&gt; $SDCARD/etc/resolv.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">stage: make rootfs cache archive</span></span><br><span class="line">		display_alert &quot;Ending debootstrap process and preparing cache&quot; &quot;$RELEASE&quot; &quot;info&quot;</span><br><span class="line">		sync</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">the only reason to unmount here is compression progress display</span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">based on rootfs size calculation</span></span><br><span class="line">		umount_chroot &quot;$SDCARD&quot;</span><br><span class="line"></span><br><span class="line">		tar cp --xattrs --directory=$SDCARD/ --exclude=&#x27;./dev/*&#x27; --exclude=&#x27;./proc/*&#x27; --exclude=&#x27;./run/*&#x27; --exclude=&#x27;./tmp/*&#x27; \</span><br><span class="line">			--exclude=&#x27;./sys/*&#x27; --exclude=&#x27;./home/*&#x27; --exclude=&#x27;./root/*&#x27; . | pv -p -b -r -s $(du -sb $SDCARD/ | cut -f1) -N &quot;$display_name&quot; | lz4 -5 -c &gt; $cache_fname</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">sign rootfs cache archive that it can be used <span class="keyword">for</span> web cache once. Internal purposes</span></span><br><span class="line">		if [[ -n &quot;$&#123;GPG_PASS&#125;&quot; &amp;&amp; &quot;$&#123;SUDO_USER&#125;&quot; ]]; then</span><br><span class="line">			[[ -n $&#123;SUDO_USER&#125; ]] &amp;&amp; sudo chown -R $&#123;SUDO_USER&#125;:$&#123;SUDO_USER&#125; &quot;$&#123;DEST&#125;&quot;/images/</span><br><span class="line">			echo &quot;$&#123;GPG_PASS&#125;&quot; | sudo -H -u $&#123;SUDO_USER&#125; bash -c &quot;gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes $&#123;cache_fname&#125;&quot; || exit 1</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">needed <span class="keyword">for</span> backend to keep current only</span></span><br><span class="line">		touch $cache_fname.current</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">used <span class="keyword">for</span> internal purposes. Faster rootfs cache rebuilding</span></span><br><span class="line">	if [[ -n &quot;$ROOT_FS_CREATE_ONLY&quot; ]]; then</span><br><span class="line">		umount --lazy &quot;$SDCARD&quot;</span><br><span class="line">		rm -rf $SDCARD</span><br><span class="line"></span><br><span class="line">		display_alert &quot;Rootfs build done&quot; &quot;@host&quot; &quot;info&quot;</span><br><span class="line">		display_alert &quot;Target directory&quot; &quot;$&#123;EXTER&#125;/cache/rootfs&quot; &quot;info&quot;</span><br><span class="line">		display_alert &quot;File name&quot; &quot;$&#123;cache_name&#125;&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">remove <span class="built_in">exit</span> <span class="built_in">trap</span></span></span><br><span class="line">		trap - INT TERM EXIT</span><br><span class="line">        exit</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	mount_chroot &quot;$SDCARD&quot;</span><br><span class="line">&#125; #############################################################################</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prepare_partitions</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># creates image file, partitions and fs</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">and mounts it to <span class="built_in">local</span> <span class="built_in">dir</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">FS-dependent stuff (boot and root fs partition types) happens here</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="function"><span class="title">prepare_partitions</span></span>() &#123;</span></span><br><span class="line">	display_alert &quot;Preparing image file for rootfs&quot; &quot;$BOARD $RELEASE&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">possible partition combinations</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">/boot: none, ext4, ext2, fat (BOOTFS_TYPE)</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">root: ext4, btrfs, f2fs, nfs (ROOTFS_TYPE)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="built_in">declare</span> makes <span class="built_in">local</span> variables by default <span class="keyword">if</span> used inside a <span class="keyword">function</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">NOTE: mountopts string should always start with comma <span class="keyword">if</span> not empty</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">array copying <span class="keyword">in</span> old bash versions is tricky, so having filesystems as arrays</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">with attributes as keys is not a good idea</span></span><br><span class="line">	declare -A parttype mkopts mkopts_label mkfs mountopts</span><br><span class="line"></span><br><span class="line">	parttype[ext4]=ext4</span><br><span class="line">	parttype[ext2]=ext2</span><br><span class="line">	parttype[fat]=fat16</span><br><span class="line">	parttype[f2fs]=ext4 # not a copy-paste error</span><br><span class="line">	parttype[btrfs]=btrfs</span><br><span class="line">	parttype[xfs]=xfs</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">parttype[nfs] is empty</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">metadata_csum and 64bit may need to be disabled explicitly when migrating to newer supported host OS releases</span></span><br><span class="line">	if [[ $HOSTRELEASE =~ buster|bullseye|bookworm|bionic|focal|jammy|kinetic|sid ]]; then</span><br><span class="line">		mkopts[ext4]=&quot;-q -m 2 -O ^64bit,^metadata_csum&quot;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">mkopts[fat] is empty</span></span><br><span class="line">	mkopts[ext2]=&#x27;-q&#x27;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">mkopts[f2fs] is empty</span></span><br><span class="line">	mkopts[btrfs]=&#x27;-m dup&#x27;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">mkopts[xfs] is empty</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">mkopts[nfs] is empty</span></span><br><span class="line"></span><br><span class="line">	mkopts_label[ext4]=&#x27;-L &#x27;</span><br><span class="line">	mkopts_label[ext2]=&#x27;-L &#x27;</span><br><span class="line">	mkopts_label[fat]=&#x27;-n &#x27;</span><br><span class="line">	mkopts_label[f2fs]=&#x27;-l &#x27;</span><br><span class="line">	mkopts_label[btrfs]=&#x27;-L &#x27;</span><br><span class="line">	mkopts_label[xfs]=&#x27;-L &#x27;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">mkopts_label[nfs] is empty</span></span><br><span class="line"></span><br><span class="line">	mkfs[ext4]=ext4</span><br><span class="line">	mkfs[ext2]=ext2</span><br><span class="line">	mkfs[fat]=vfat</span><br><span class="line">	mkfs[f2fs]=f2fs</span><br><span class="line">	mkfs[btrfs]=btrfs</span><br><span class="line">	mkfs[xfs]=xfs</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">mkfs[nfs] is empty</span></span><br><span class="line"></span><br><span class="line">	mountopts[ext4]=&#x27;,commit=600,errors=remount-ro&#x27;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">mountopts[ext2] is empty</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">mountopts[fat] is empty</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">mountopts[f2fs] is empty</span></span><br><span class="line">	mountopts[btrfs]=&#x27;,commit=600&#x27;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">mountopts[xfs] is empty</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">mountopts[nfs] is empty</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">default BOOTSIZE to use <span class="keyword">if</span> not specified</span></span><br><span class="line">	DEFAULT_BOOTSIZE=1024 # MiB</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">size of UEFI partition. 0 <span class="keyword">for</span> no UEFI. Don<span class="string">&#x27;t mix UEFISIZE&gt;0 and BOOTSIZE&gt;0</span></span></span><br><span class="line">	UEFISIZE=$&#123;UEFISIZE:-0&#125;</span><br><span class="line">	BIOSSIZE=$&#123;BIOSSIZE:-0&#125;</span><br><span class="line">	UEFI_MOUNT_POINT=$&#123;UEFI_MOUNT_POINT:-/boot/efi&#125;</span><br><span class="line">	UEFI_FS_LABEL=&quot;$&#123;UEFI_FS_LABEL:-opi_efi&#125;&quot;</span><br><span class="line">	ROOT_FS_LABEL=&quot;$&#123;ROOT_FS_LABEL:-opi_root&#125;&quot;</span><br><span class="line">	BOOT_FS_LABEL=&quot;$&#123;BOOT_FS_LABEL:-opi_boot&#125;&quot;</span><br><span class="line"></span><br><span class="line">	call_extension_method &quot;pre_prepare_partitions&quot; &quot;prepare_partitions_custom&quot; &lt;&lt; &#x27;PRE_PREPARE_PARTITIONS&#x27;</span><br><span class="line">*allow custom options for mkfs*</span><br><span class="line">Good time to change stuff like mkfs opts, types etc.</span><br><span class="line">PRE_PREPARE_PARTITIONS</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">stage: determine partition configuration</span></span></span><br><span class="line">	local next=1</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Check if we need UEFI partition</span></span></span><br><span class="line">	if [[ $UEFISIZE -gt 0 ]]; then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">Check if we need BIOS partition</span></span></span><br><span class="line">		[[ $BIOSSIZE -gt 0 ]] &amp;&amp; local biospart=$((next++))</span><br><span class="line">		local uefipart=$((next++))</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Check if we need boot partition</span></span></span><br><span class="line">	if [[ -n $BOOTFS_TYPE || $ROOTFS_TYPE != ext4 || $CRYPTROOT_ENABLE == yes ]]; then</span><br><span class="line">		local bootpart=$((next++))</span><br><span class="line">		local bootfs=$&#123;BOOTFS_TYPE:-ext4&#125;</span><br><span class="line">		[[ -z $BOOTSIZE || $BOOTSIZE -le 8 ]] &amp;&amp; BOOTSIZE=$&#123;DEFAULT_BOOTSIZE&#125;</span><br><span class="line">	else</span><br><span class="line">		BOOTSIZE=0</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Check if we need root partition</span></span></span><br><span class="line">	[[ $ROOTFS_TYPE != nfs ]] &amp;&amp;</span><br><span class="line">		local rootpart=$((next++))</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">stage: calculate rootfs size</span></span></span><br><span class="line">	export rootfs_size=$(du -sm $SDCARD/ | cut -f1) # MiB</span><br><span class="line">	display_alert &quot;Current rootfs size&quot; &quot;$rootfs_size MiB&quot; &quot;info&quot;</span><br><span class="line"></span><br><span class="line">	call_extension_method &quot;prepare_image_size&quot; &quot;config_prepare_image_size&quot; &lt;&lt; &#x27;PREPARE_IMAGE_SIZE&#x27;</span><br><span class="line">*allow dynamically determining the size based on the $rootfs_size*</span><br><span class="line">Called after `$&#123;rootfs_size&#125;` is known, but before `$&#123;FIXED_IMAGE_SIZE&#125;` is taken into account.</span><br><span class="line">A good spot to determine `FIXED_IMAGE_SIZE` based on `rootfs_size`.</span><br><span class="line">UEFISIZE can be set to 0 for no UEFI partition, or to a size in MiB to include one.</span><br><span class="line">Last chance to set `USE_HOOK_FOR_PARTITION`=yes and then implement create_partition_table hook_point.</span><br><span class="line">PREPARE_IMAGE_SIZE</span><br><span class="line"></span><br><span class="line">	if [[ -n $FIXED_IMAGE_SIZE &amp;&amp; $FIXED_IMAGE_SIZE =~ ^[0-9]+$ ]]; then</span><br><span class="line">		display_alert &quot;Using user-defined image size&quot; &quot;$FIXED_IMAGE_SIZE MiB&quot; &quot;info&quot;</span><br><span class="line">		local sdsize=$FIXED_IMAGE_SIZE</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">basic sanity check</span></span></span><br><span class="line">		if [[ $ROOTFS_TYPE != nfs &amp;&amp; $sdsize -lt $rootfs_size ]]; then</span><br><span class="line">			exit_with_error &quot;User defined image size is too small&quot; &quot;$sdsize &lt;= $rootfs_size&quot;</span><br><span class="line">		fi</span><br><span class="line">	else</span><br><span class="line">		local imagesize=$(($rootfs_size + $OFFSET + $BOOTSIZE + $UEFISIZE + $EXTRA_ROOTFS_MIB_SIZE)) # MiB</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">Hardcoded overhead +25% is needed for desktop images,</span></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">for CLI it could be lower. Align the size up to 4MiB</span></span></span><br><span class="line">		if [[ $BUILD_DESKTOP == yes ]]; then</span><br><span class="line">			local sdsize=$(bc -l &lt;&lt;&lt; &quot;scale=0; ((($imagesize * 1.35) / 1 + 0) / 4 + 1) * 4&quot;)</span><br><span class="line">		else</span><br><span class="line">			local sdsize=$(bc -l &lt;&lt;&lt; &quot;scale=0; ((($imagesize * 1.30) / 1 + 0) / 4 + 1) * 4&quot;)</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">stage: create blank image</span></span></span><br><span class="line">	display_alert &quot;Creating blank image for rootfs&quot; &quot;$sdsize MiB&quot; &quot;info&quot;</span><br><span class="line">	if [[ $FAST_CREATE_IMAGE == yes ]]; then</span><br><span class="line">		truncate --size=$&#123;sdsize&#125;M $&#123;SDCARD&#125;.raw # sometimes results in fs corruption, revert to previous know to work solution</span><br><span class="line">		sync</span><br><span class="line">	else</span><br><span class="line">		dd if=/dev/zero bs=1M status=none count=$sdsize | pv -p -b -r -s $(($sdsize * 1024 * 1024)) -N &quot;[ .... ] dd&quot; | dd status=none of=$&#123;SDCARD&#125;.raw</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">stage: create partition table</span></span></span><br><span class="line">	display_alert &quot;Creating partitions&quot; &quot;$&#123;bootfs:+/boot: $bootfs &#125;root: $ROOTFS_TYPE&quot; &quot;info&quot;</span><br><span class="line">	if [[ &quot;$&#123;USE_HOOK_FOR_PARTITION&#125;&quot; == &quot;yes&quot; ]]; then</span><br><span class="line">		&#123;</span><br><span class="line">			[[ &quot;$IMAGE_PARTITION_TABLE&quot; == &quot;msdos&quot; ]] &amp;&amp;</span><br><span class="line">				echo &quot;label: dos&quot; ||</span><br><span class="line">				echo &quot;label: $IMAGE_PARTITION_TABLE&quot;</span><br><span class="line">		&#125; | sfdisk $&#123;SDCARD&#125;.raw &gt;&gt; &quot;$&#123;DEST&#125;/$&#123;LOG_SUBPATH&#125;/install.log&quot; 2&gt;&amp;1 ||</span><br><span class="line">			exit_with_error &quot;Create partition table fail. Please check&quot; &quot;$&#123;DEST&#125;/$&#123;LOG_SUBPATH&#125;/install.log&quot;</span><br><span class="line"></span><br><span class="line">		call_extension_method &quot;create_partition_table&quot; &lt;&lt;- &#x27;CREATE_PARTITION_TABLE&#x27;</span><br><span class="line">			*only called when USE_HOOK_FOR_PARTITION=yes to create the complete partition table*</span><br><span class="line">			Finally, we can get our own partition table. You have to partition $&#123;SDCARD&#125;.raw</span><br><span class="line">			yourself. Good luck.</span><br><span class="line">		CREATE_PARTITION_TABLE</span><br><span class="line">	else</span><br><span class="line">		&#123;</span><br><span class="line">			[[ &quot;$IMAGE_PARTITION_TABLE&quot; == &quot;msdos&quot; ]] &amp;&amp;</span><br><span class="line">				echo &quot;label: dos&quot; ||</span><br><span class="line">				echo &quot;label: $IMAGE_PARTITION_TABLE&quot;</span><br><span class="line"></span><br><span class="line">			local next=$OFFSET</span><br><span class="line">			if [[ -n &quot;$biospart&quot; ]]; then</span><br><span class="line">				# gpt: BIOS boot</span><br><span class="line">				local type=&quot;21686148-6449-6E6F-744E-656564454649&quot;</span><br><span class="line">				echo &quot;$biospart : name=\&quot;bios\&quot;, start=$&#123;next&#125;MiB, size=$&#123;BIOSSIZE&#125;MiB, type=$&#123;type&#125;&quot;</span><br><span class="line">				local next=$(($next + $BIOSSIZE))</span><br><span class="line">			fi</span><br><span class="line">			if [[ -n &quot;$uefipart&quot; ]]; then</span><br><span class="line">				# dos: EFI (FAT-12/16/32)</span><br><span class="line">				# gpt: EFI System</span><br><span class="line">				[[ &quot;$IMAGE_PARTITION_TABLE&quot; != &quot;gpt&quot; ]] &amp;&amp;</span><br><span class="line">					local type=&quot;ef&quot; ||</span><br><span class="line">					local type=&quot;C12A7328-F81F-11D2-BA4B-00A0C93EC93B&quot;</span><br><span class="line">				echo &quot;$uefipart : name=\&quot;efi\&quot;, start=$&#123;next&#125;MiB, size=$&#123;UEFISIZE&#125;MiB, type=$&#123;type&#125;&quot;</span><br><span class="line">				local next=$(($next + $UEFISIZE))</span><br><span class="line">			fi</span><br><span class="line">			if [[ -n &quot;$bootpart&quot; ]]; then</span><br><span class="line">				# Linux extended boot</span><br><span class="line">				[[ &quot;$IMAGE_PARTITION_TABLE&quot; != &quot;gpt&quot; ]] &amp;&amp;</span><br><span class="line">					local type=&quot;ea&quot; ||</span><br><span class="line">					local type=&quot;BC13C2FF-59E6-4262-A352-B275FD6F7172&quot;</span><br><span class="line">				if [[ -n &quot;$rootpart&quot; ]]; then</span><br><span class="line">					echo &quot;$bootpart : name=\&quot;bootfs\&quot;, start=$&#123;next&#125;MiB, size=$&#123;BOOTSIZE&#125;MiB, type=$&#123;type&#125;&quot;</span><br><span class="line">					local next=$(($next + $BOOTSIZE))</span><br><span class="line">				else</span><br><span class="line">					# no `size` argument mean &quot;as much as possible&quot;</span><br><span class="line">					echo &quot;$bootpart : name=\&quot;bootfs\&quot;, start=$&#123;next&#125;MiB, type=$&#123;type&#125;&quot;</span><br><span class="line">				fi</span><br><span class="line">			fi</span><br><span class="line">			if [[ -n &quot;$rootpart&quot; ]]; then</span><br><span class="line">				# dos: Linux</span><br><span class="line">				# gpt: Linux filesystem</span><br><span class="line">				[[ &quot;$IMAGE_PARTITION_TABLE&quot; != &quot;gpt&quot; ]] &amp;&amp;</span><br><span class="line">					local type=&quot;83&quot; ||</span><br><span class="line">					local type=&quot;0FC63DAF-8483-4772-8E79-3D69D8477DE4&quot;</span><br><span class="line">				# no `size` argument mean &quot;as much as possible&quot;</span><br><span class="line">				echo &quot;$rootpart : name=\&quot;rootfs\&quot;, start=$&#123;next&#125;MiB, type=$&#123;type&#125;&quot;</span><br><span class="line">			fi</span><br><span class="line">		&#125; | sfdisk $&#123;SDCARD&#125;.raw &gt;&gt; &quot;$&#123;DEST&#125;/$&#123;LOG_SUBPATH&#125;/install.log&quot; 2&gt;&amp;1 ||</span><br><span class="line">			exit_with_error &quot;Partition fail. Please check&quot; &quot;$&#123;DEST&#125;/$&#123;LOG_SUBPATH&#125;/install.log&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	call_extension_method &quot;post_create_partitions&quot; &lt;&lt;- &#x27;POST_CREATE_PARTITIONS&#x27;</span><br><span class="line">		*called after all partitions are created, but not yet formatted*</span><br><span class="line">	POST_CREATE_PARTITIONS</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">stage: mount image</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">lock access to loop devices</span></span></span><br><span class="line">	exec &#123;FD&#125;&gt; /var/lock/orangepi-debootstrap-losetup</span><br><span class="line">	flock -x $FD</span><br><span class="line"></span><br><span class="line">	LOOP=$(losetup -f)</span><br><span class="line">	[[ -z $LOOP ]] &amp;&amp; exit_with_error &quot;Unable to find free loop device&quot;</span><br><span class="line"></span><br><span class="line">	check_loop_device &quot;$LOOP&quot;</span><br><span class="line"></span><br><span class="line">	losetup $LOOP $&#123;SDCARD&#125;.raw</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">loop device was grabbed here, unlock</span></span></span><br><span class="line">	flock -u $FD</span><br><span class="line"></span><br><span class="line">	partprobe $LOOP</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">stage: create fs, mount partitions, create fstab</span></span></span><br><span class="line">	rm -f $SDCARD/etc/fstab</span><br><span class="line">	if [[ -n $rootpart ]]; then</span><br><span class="line">		local rootdevice=&quot;$&#123;LOOP&#125;p$&#123;rootpart&#125;&quot;</span><br><span class="line"></span><br><span class="line">		if [[ $CRYPTROOT_ENABLE == yes ]]; then</span><br><span class="line">			display_alert &quot;Encrypting root partition with LUKS...&quot; &quot;cryptsetup luksFormat $rootdevice&quot; &quot;&quot;</span><br><span class="line">			echo -n $CRYPTROOT_PASSPHRASE | cryptsetup luksFormat $CRYPTROOT_PARAMETERS $rootdevice -</span><br><span class="line">			echo -n $CRYPTROOT_PASSPHRASE | cryptsetup luksOpen $rootdevice $ROOT_MAPPER -</span><br><span class="line">			display_alert &quot;Root partition encryption complete.&quot; &quot;&quot; &quot;ext&quot;</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">TODO: pass /dev/mapper to Docker</span></span></span><br><span class="line">			rootdevice=/dev/mapper/$ROOT_MAPPER # used by `mkfs` and `mount` commands</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		check_loop_device &quot;$rootdevice&quot;</span><br><span class="line">		display_alert &quot;Creating rootfs&quot; &quot;$ROOTFS_TYPE on $rootdevice&quot;</span><br><span class="line">		mkfs.$&#123;mkfs[$ROOTFS_TYPE]&#125; $&#123;mkopts[$ROOTFS_TYPE]&#125; $&#123;mkopts_label[$ROOTFS_TYPE]:+$&#123;mkopts_label[$ROOTFS_TYPE]&#125;&quot;$ROOT_FS_LABEL&quot;&#125; $rootdevice &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span><br><span class="line">		[[ $ROOTFS_TYPE == ext4 ]] &amp;&amp; tune2fs -o journal_data_writeback $rootdevice &gt; /dev/null</span><br><span class="line">		if [[ $ROOTFS_TYPE == btrfs &amp;&amp; $BTRFS_COMPRESSION != none ]]; then</span><br><span class="line">			local fscreateopt=&quot;-o compress-force=$&#123;BTRFS_COMPRESSION&#125;&quot;</span><br><span class="line">		fi</span><br><span class="line">		mount $&#123;fscreateopt&#125; $rootdevice $MOUNT/</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">create fstab (and crypttab) entry</span></span></span><br><span class="line">		if [[ $CRYPTROOT_ENABLE == yes ]]; then</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">map the LUKS container partition via its UUID to be the &#x27;</span>cryptroot<span class="string">&#x27; device</span></span></span><br><span class="line">			echo &quot;$ROOT_MAPPER UUID=$(blkid -s UUID -o value $&#123;LOOP&#125;p$&#123;rootpart&#125;) none luks&quot; &gt;&gt; $SDCARD/etc/crypttab</span><br><span class="line">			local rootfs=$rootdevice # used in fstab</span><br><span class="line">		else</span><br><span class="line">			local rootfs=&quot;UUID=$(blkid -s UUID -o value $rootdevice)&quot;</span><br><span class="line">		fi</span><br><span class="line">		echo &quot;$rootfs / $&#123;mkfs[$ROOTFS_TYPE]&#125; defaults,noatime$&#123;mountopts[$ROOTFS_TYPE]&#125; 0 1&quot; &gt;&gt; $SDCARD/etc/fstab</span><br><span class="line">	else</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">update_initramfs will fail if /lib/modules/ doesn&#x27;</span>t exist</span></span><br><span class="line">		mount --bind --make-private $SDCARD $MOUNT/</span><br><span class="line">		echo &quot;/dev/nfs / nfs defaults 0 0&quot; &gt;&gt; $SDCARD/etc/fstab</span><br><span class="line">	fi</span><br><span class="line">	if [[ -n $bootpart ]]; then</span><br><span class="line">		display_alert &quot;Creating /boot&quot; &quot;$bootfs on $&#123;LOOP&#125;p$&#123;bootpart&#125;&quot;</span><br><span class="line">		check_loop_device &quot;$&#123;LOOP&#125;p$&#123;bootpart&#125;&quot;</span><br><span class="line">		mkfs.$&#123;mkfs[$bootfs]&#125; $&#123;mkopts[$bootfs]&#125; $&#123;mkopts_label[$bootfs]:+$&#123;mkopts_label[$bootfs]&#125;&quot;$BOOT_FS_LABEL&quot;&#125; $&#123;LOOP&#125;p$&#123;bootpart&#125; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span><br><span class="line">		mkdir -p $MOUNT/boot/</span><br><span class="line">		mount $&#123;LOOP&#125;p$&#123;bootpart&#125; $MOUNT/boot/</span><br><span class="line">		echo &quot;UUID=$(blkid -s UUID -o value $&#123;LOOP&#125;p$&#123;bootpart&#125;) /boot $&#123;mkfs[$bootfs]&#125; defaults$&#123;mountopts[$bootfs]&#125; 0 2&quot; &gt;&gt; $SDCARD/etc/fstab</span><br><span class="line">	fi</span><br><span class="line">	if [[ -n $uefipart ]]; then</span><br><span class="line">		display_alert &quot;Creating EFI partition&quot; &quot;FAT32 $&#123;UEFI_MOUNT_POINT&#125; on $&#123;LOOP&#125;p$&#123;uefipart&#125; label $&#123;UEFI_FS_LABEL&#125;&quot;</span><br><span class="line">		check_loop_device &quot;$&#123;LOOP&#125;p$&#123;uefipart&#125;&quot;</span><br><span class="line">		mkfs.fat -F32 -n &quot;$&#123;UEFI_FS_LABEL&#125;&quot; $&#123;LOOP&#125;p$&#123;uefipart&#125; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/debug/install.log 2&gt;&amp;1</span><br><span class="line">		mkdir -p &quot;$&#123;MOUNT&#125;$&#123;UEFI_MOUNT_POINT&#125;&quot;</span><br><span class="line">		mount $&#123;LOOP&#125;p$&#123;uefipart&#125; &quot;$&#123;MOUNT&#125;$&#123;UEFI_MOUNT_POINT&#125;&quot;</span><br><span class="line">		echo &quot;UUID=$(blkid -s UUID -o value $&#123;LOOP&#125;p$&#123;uefipart&#125;) $&#123;UEFI_MOUNT_POINT&#125; vfat defaults 0 2&quot; &gt;&gt; $SDCARD/etc/fstab</span><br><span class="line">	fi</span><br><span class="line">	echo &quot;tmpfs /tmp tmpfs defaults,nosuid 0 0&quot; &gt;&gt; $SDCARD/etc/fstab</span><br><span class="line"></span><br><span class="line">	call_extension_method &quot;format_partitions&quot; &lt;&lt;- &#x27;FORMAT_PARTITIONS&#x27;</span><br><span class="line">		*if you created your own partitions, this would be a good time to format them*</span><br><span class="line">		The loop device is mounted, so $&#123;LOOP&#125;p1 is it&#x27;s first partition etc.</span><br><span class="line">	FORMAT_PARTITIONS</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">stage: adjust boot script or boot environment</span></span><br><span class="line">	if [[ -f $SDCARD/boot/orangepiEnv.txt ]]; then</span><br><span class="line">		if [[ $CRYPTROOT_ENABLE == yes ]]; then</span><br><span class="line">			echo &quot;rootdev=$rootdevice cryptdevice=UUID=$(blkid -s UUID -o value $&#123;LOOP&#125;p$&#123;rootpart&#125;):$ROOT_MAPPER&quot; &gt;&gt; $SDCARD/boot/orangepiEnv.txt</span><br><span class="line">		else</span><br><span class="line">			echo &quot;rootdev=$rootfs&quot; &gt;&gt; $SDCARD/boot/orangepiEnv.txt</span><br><span class="line">		fi</span><br><span class="line">		echo &quot;rootfstype=$ROOTFS_TYPE&quot; &gt;&gt; $SDCARD/boot/orangepiEnv.txt</span><br><span class="line">	elif [[ $rootpart != 1 ]] &amp;&amp; [[ $SRC_EXTLINUX != yes ]]; then</span><br><span class="line">		local bootscript_dst=$&#123;BOOTSCRIPT##*:&#125;</span><br><span class="line">		sed -i &#x27;s/mmcblk0p1/mmcblk0p2/&#x27; $SDCARD/boot/$bootscript_dst</span><br><span class="line">		sed -i -e &quot;s/rootfstype=ext4/rootfstype=$ROOTFS_TYPE/&quot; \</span><br><span class="line">			-e &quot;s/rootfstype \&quot;ext4\&quot;/rootfstype \&quot;$ROOTFS_TYPE\&quot;/&quot; $SDCARD/boot/$bootscript_dst</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="keyword">if</span> we have boot.ini = remove orangepiEnv.txt and add UUID there <span class="keyword">if</span> enabled</span></span><br><span class="line">	if [[ -f $SDCARD/boot/boot.ini ]]; then</span><br><span class="line">		sed -i -e &quot;s/rootfstype \&quot;ext4\&quot;/rootfstype \&quot;$ROOTFS_TYPE\&quot;/&quot; $SDCARD/boot/boot.ini</span><br><span class="line">		if [[ $CRYPTROOT_ENABLE == yes ]]; then</span><br><span class="line">			local rootpart=&quot;UUID=$(blkid -s UUID -o value $&#123;LOOP&#125;p$&#123;rootpart&#125;)&quot;</span><br><span class="line">			sed -i &#x27;s/^setenv rootdev .*/setenv rootdev &quot;\/dev\/mapper\/&#x27;$ROOT_MAPPER&#x27; cryptdevice=&#x27;$rootpart&#x27;:&#x27;$ROOT_MAPPER&#x27;&quot;/&#x27; $SDCARD/boot/boot.ini</span><br><span class="line">		else</span><br><span class="line">			sed -i &#x27;s/^setenv rootdev .*/setenv rootdev &quot;&#x27;$rootfs&#x27;&quot;/&#x27; $SDCARD/boot/boot.ini</span><br><span class="line">		fi</span><br><span class="line">		if [[ $LINUXFAMILY != meson64 ]]; then</span><br><span class="line">			[[ -f $SDCARD/boot/orangepiEnv.txt ]] &amp;&amp; rm $SDCARD/boot/orangepiEnv.txt</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="keyword">if</span> we have a headless device, <span class="built_in">set</span> console to DEFAULT_CONSOLE</span></span><br><span class="line">	if [[ -n $DEFAULT_CONSOLE &amp;&amp; -f $SDCARD/boot/orangepiEnv.txt ]]; then</span><br><span class="line">		if grep -lq &quot;^console=&quot; $SDCARD/boot/orangepiEnv.txt; then</span><br><span class="line">			sed -i &quot;s/^console=.*/console=$DEFAULT_CONSOLE/&quot; $SDCARD/boot/orangepiEnv.txt</span><br><span class="line">		else</span><br><span class="line">			echo &quot;console=$DEFAULT_CONSOLE&quot; &gt;&gt; $SDCARD/boot/orangepiEnv.txt</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">recompile .cmd to .scr <span class="keyword">if</span> boot.cmd exists</span></span><br><span class="line"></span><br><span class="line">	if [[ -f $SDCARD/boot/boot.cmd ]]; then</span><br><span class="line">		if [ -z $BOOTSCRIPT_OUTPUT ]; then BOOTSCRIPT_OUTPUT=boot.scr; fi</span><br><span class="line">		mkimage -C none -A arm -T script -d $SDCARD/boot/boot.cmd $SDCARD/boot/$BOOTSCRIPT_OUTPUT &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">create extlinux config</span></span><br><span class="line">	if [[ -f $SDCARD/boot/extlinux/extlinux.conf ]]; then</span><br><span class="line">		echo &quot;  append root=$rootfs $SRC_CMDLINE $MAIN_CMDLINE&quot; &gt;&gt; $SDCARD/boot/extlinux/extlinux.conf</span><br><span class="line">		[[ -f $SDCARD/boot/orangepiEnv.txt ]] &amp;&amp; rm $SDCARD/boot/orangepiEnv.txt</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">update_initramfs</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># this should be invoked as late as possible for any modifications by</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">customize_image (userpatches) and prepare_partitions to be reflected <span class="keyword">in</span> the</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">final initramfs</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># especially, this needs to be invoked after /etc/crypttab has been created</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">for</span> cryptroot-unlock to work:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://serverfault.com/questions/907254/cryproot-unlock-with-dropbear-timeout-while-waiting-for-askpass</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># since Debian buster, it has to be called within create_image() on the $MOUNT</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">path instead of <span class="variable">$SDCARD</span> (<span class="built_in">which</span> can be a tmpfs and breaks cryptsetup-initramfs).</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">update_initramfs()</span></span><br><span class="line">&#123;</span><br><span class="line">	local chroot_target=$1</span><br><span class="line">	local target_dir=$(</span><br><span class="line">		find $&#123;chroot_target&#125;/lib/modules/ -maxdepth 1 -type d -name &quot;*$&#123;VER&#125;*&quot;</span><br><span class="line">	)</span><br><span class="line">	if [ &quot;$target_dir&quot; != &quot;&quot; ]; then</span><br><span class="line">		update_initramfs_cmd=&quot;update-initramfs -uv -k $(basename $target_dir)&quot;</span><br><span class="line">	else</span><br><span class="line">		exit_with_error &quot;No kernel installed for the version&quot; &quot;$&#123;VER&#125;&quot;</span><br><span class="line">	fi</span><br><span class="line">	display_alert &quot;Updating initramfs...&quot; &quot;$update_initramfs_cmd&quot; &quot;&quot;</span><br><span class="line">	cp /usr/bin/$QEMU_BINARY $chroot_target/usr/bin/</span><br><span class="line">	mount_chroot &quot;$chroot_target/&quot;</span><br><span class="line"></span><br><span class="line">	chroot $chroot_target /bin/bash -c &quot;$update_initramfs_cmd&quot; &gt;&gt; $DEST/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1 || &#123;</span><br><span class="line">		display_alert &quot;Updating initramfs FAILED, see:&quot; &quot;$DEST/$&#123;LOG_SUBPATH&#125;/install.log&quot; &quot;err&quot;</span><br><span class="line">		exit 23</span><br><span class="line">	&#125;</span><br><span class="line">	display_alert &quot;Updated initramfs.&quot; &quot;for details see: $DEST/$&#123;LOG_SUBPATH&#125;/install.log&quot; &quot;info&quot;</span><br><span class="line"></span><br><span class="line">	display_alert &quot;Re-enabling&quot; &quot;initramfs-tools hook for kernel&quot;</span><br><span class="line">	chroot $chroot_target /bin/bash -c &quot;chmod -v +x /etc/kernel/postinst.d/initramfs-tools&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">	umount_chroot &quot;$chroot_target/&quot;</span><br><span class="line">	rm $chroot_target/usr/bin/$QEMU_BINARY</span><br><span class="line"></span><br><span class="line">&#125; #############################################################################</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">create_image</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># finishes creation of image from cached rootfs</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">create_image()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">stage: create file name</span></span><br><span class="line">	if [[ $SELECTED_CONFIGURATION == &quot;cli_standard&quot; ]]; then</span><br><span class="line">		IMAGE_TYPE=server</span><br><span class="line">	elif [[ $SELECTED_CONFIGURATION == &quot;cli_minimal&quot; ]]; then</span><br><span class="line">		IMAGE_TYPE=minimal</span><br><span class="line">	else</span><br><span class="line">		IMAGE_TYPE=desktop</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ $&#123;MEM_TYPE&#125; == &quot;1500MB&quot; ]]; then</span><br><span class="line">		local version=&quot;$&#123;BOARD^&#125;_$&#123;REVISION&#125;_$&#123;DISTRIBUTION,&#125;_$&#123;RELEASE&#125;_$&#123;IMAGE_TYPE&#125;&quot;$&#123;DESKTOP_ENVIRONMENT:+_$DESKTOP_ENVIRONMENT&#125;&quot;_linux$(grab_version &quot;$LINUXSOURCEDIR&quot;)_1.5gb&quot;</span><br><span class="line">	else</span><br><span class="line">		local version=&quot;$&#123;BOARD^&#125;_$&#123;REVISION&#125;_$&#123;DISTRIBUTION,&#125;_$&#123;RELEASE&#125;_$&#123;IMAGE_TYPE&#125;&quot;$&#123;DESKTOP_ENVIRONMENT:+_$DESKTOP_ENVIRONMENT&#125;&quot;_linux$(grab_version &quot;$LINUXSOURCEDIR&quot;)&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ $&#123;RELEASE&#125; == &quot;raspi&quot; ]]; then</span><br><span class="line">		local version=&quot;$&#123;BOARD^&#125;_$&#123;REVISION&#125;_raspios_bullseye_$&#123;IMAGE_TYPE&#125;&quot;$&#123;DESKTOP_ENVIRONMENT:+_$DESKTOP_ENVIRONMENT&#125;&quot;_linux$(grab_version &quot;$LINUXSOURCEDIR&quot;)&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	[[ $ROOTFS_TYPE == nfs ]] &amp;&amp; version=$&#123;version&#125;_nfsboot</span><br><span class="line"></span><br><span class="line">	destimg=$DEST/images/$&#123;version&#125;</span><br><span class="line">	rm -rf $destimg</span><br><span class="line">	mkdir -p $destimg</span><br><span class="line"></span><br><span class="line">	if [[ $ROOTFS_TYPE != nfs ]]; then</span><br><span class="line">		display_alert &quot;Copying files to&quot; &quot;/&quot;</span><br><span class="line">		echo -e &quot;\nCopying files to [/]&quot; &gt;&gt;&quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log</span><br><span class="line">		rsync -aHWXh \</span><br><span class="line">			  --exclude=&quot;/boot/*&quot; \</span><br><span class="line">			  --exclude=&quot;/dev/*&quot; \</span><br><span class="line">			  --exclude=&quot;/proc/*&quot; \</span><br><span class="line">			  --exclude=&quot;/run/*&quot; \</span><br><span class="line">			  --exclude=&quot;/tmp/*&quot; \</span><br><span class="line">			  --exclude=&quot;/sys/*&quot; \</span><br><span class="line">			  --info=progress0,stats1 $SDCARD/ $MOUNT/ &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span><br><span class="line">	else</span><br><span class="line">		display_alert &quot;Creating rootfs archive&quot; &quot;rootfs.tgz&quot; &quot;info&quot;</span><br><span class="line">		tar cp --xattrs --directory=$SDCARD/ --exclude=&#x27;./boot/*&#x27; --exclude=&#x27;./dev/*&#x27; --exclude=&#x27;./proc/*&#x27; --exclude=&#x27;./run/*&#x27; --exclude=&#x27;./tmp/*&#x27; \</span><br><span class="line">			--exclude=&#x27;./sys/*&#x27; . | pv -p -b -r -s $(du -sb $SDCARD/ | cut -f1) -N &quot;rootfs.tgz&quot; | gzip -c &gt; $destimg/$&#123;version&#125;-rootfs.tgz</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">stage: rsync /boot</span></span><br><span class="line">	display_alert &quot;Copying files to&quot; &quot;/boot&quot;</span><br><span class="line">	echo -e &quot;\nCopying files to [/boot]&quot; &gt;&gt;&quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log</span><br><span class="line">	if [[ $(findmnt --target $MOUNT/boot -o FSTYPE -n) == vfat ]]; then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">fat32</span></span><br><span class="line">		rsync -rLtWh \</span><br><span class="line">			  --info=progress0,stats1 \</span><br><span class="line">			  --log-file=&quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log $SDCARD/boot $MOUNT &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span><br><span class="line">	else</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">ext4</span></span><br><span class="line">		rsync -aHWXh \</span><br><span class="line">			  --info=progress0,stats1 \</span><br><span class="line">			  --log-file=&quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log $SDCARD/boot $MOUNT &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	call_extension_method &quot;pre_update_initramfs&quot; &quot;config_pre_update_initramfs&quot; &lt;&lt; &#x27;PRE_UPDATE_INITRAMFS&#x27;</span><br><span class="line">*allow config to hack into the initramfs create process*</span><br><span class="line">Called after rsync has synced both `/root` and `/root` on the target, but before calling `update_initramfs`.</span><br><span class="line">PRE_UPDATE_INITRAMFS</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">stage: create final initramfs</span></span><br><span class="line">	[[ -n $KERNELSOURCE ]] &amp;&amp; &#123;</span><br><span class="line">		update_initramfs $MOUNT</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">DEBUG: <span class="built_in">print</span> free space</span></span><br><span class="line">	local freespace=$(LC_ALL=C df -h)</span><br><span class="line">	echo $freespace &gt;&gt; $DEST/$&#123;LOG_SUBPATH&#125;/debootstrap.log</span><br><span class="line">	display_alert &quot;Free SD cache&quot; &quot;$(echo -e &quot;$freespace&quot; | grep $SDCARD | awk &#x27;&#123;print $5&#125;&#x27;)&quot; &quot;info&quot;</span><br><span class="line">	display_alert &quot;Mount point&quot; &quot;$(echo -e &quot;$freespace&quot; | grep $MOUNT | head -1 | awk &#x27;&#123;print $5&#125;&#x27;)&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">stage: write u-boot</span></span><br><span class="line">	write_uboot $LOOP</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">fix wrong / permissions</span></span><br><span class="line">	chmod 755 $MOUNT</span><br><span class="line"></span><br><span class="line">	call_extension_method &quot;pre_umount_final_image&quot; &quot;config_pre_umount_final_image&quot; &lt;&lt; &#x27;PRE_UMOUNT_FINAL_IMAGE&#x27;</span><br><span class="line">*allow config to hack into the image before the unmount*</span><br><span class="line">Called before unmounting both `/root` and `/boot`.</span><br><span class="line">PRE_UMOUNT_FINAL_IMAGE</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">unmount /boot/efi first, <span class="keyword">then</span> /boot, rootfs third, image file last</span></span><br><span class="line">	sync</span><br><span class="line">	[[ $UEFISIZE != 0 ]] &amp;&amp; umount -l &quot;$&#123;MOUNT&#125;$&#123;UEFI_MOUNT_POINT&#125;&quot;</span><br><span class="line">	[[ $BOOTSIZE != 0 ]] &amp;&amp; umount -l $MOUNT/boot</span><br><span class="line">	[[ $ROOTFS_TYPE != nfs ]] &amp;&amp; umount -l $MOUNT</span><br><span class="line">	[[ $CRYPTROOT_ENABLE == yes ]] &amp;&amp; cryptsetup luksClose $ROOT_MAPPER</span><br><span class="line"></span><br><span class="line">	call_extension_method &quot;post_umount_final_image&quot; &quot;config_post_umount_final_image&quot; &lt;&lt; &#x27;POST_UMOUNT_FINAL_IMAGE&#x27;</span><br><span class="line">*allow config to hack into the image after the unmount*</span><br><span class="line">Called after unmounting both `/root` and `/boot`.</span><br><span class="line">POST_UMOUNT_FINAL_IMAGE</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">to make sure its unmounted</span></span><br><span class="line">	while grep -Eq &#x27;($&#123;MOUNT&#125;|$&#123;DESTIMG&#125;)&#x27; /proc/mounts</span><br><span class="line">	do</span><br><span class="line">		display_alert &quot;Wait for unmount&quot; &quot;$&#123;MOUNT&#125;&quot; &quot;info&quot;</span><br><span class="line">		sleep 5</span><br><span class="line">	done</span><br><span class="line"></span><br><span class="line">	losetup -d $LOOP</span><br><span class="line">	rm -rf --one-file-system $DESTIMG $MOUNT</span><br><span class="line"></span><br><span class="line">	mkdir -p $DESTIMG</span><br><span class="line">	mv $&#123;SDCARD&#125;.raw $DESTIMG/$&#123;version&#125;.img</span><br><span class="line"></span><br><span class="line">	FINALDEST=$&#123;destimg&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">custom post_build_image_modify hook to run before fingerprinting and compression</span></span><br><span class="line">	[[ $(type -t post_build_image_modify) == function ]] &amp;&amp; display_alert &quot;Custom Hook Detected&quot; &quot;post_build_image_modify&quot; &quot;info&quot; &amp;&amp; post_build_image_modify &quot;$&#123;DESTIMG&#125;/$&#123;version&#125;.img&quot;</span><br><span class="line"></span><br><span class="line">	if [[ $BUILD_ALL != yes ]]; then</span><br><span class="line">	</span><br><span class="line">		if [[ $COMPRESS_OUTPUTIMAGE == &quot;&quot; || $COMPRESS_OUTPUTIMAGE == no ]]; then</span><br><span class="line">			COMPRESS_OUTPUTIMAGE=&quot;sha,gpg,img&quot;</span><br><span class="line">		elif [[ $COMPRESS_OUTPUTIMAGE == yes ]]; then</span><br><span class="line">			COMPRESS_OUTPUTIMAGE=&quot;sha,gpg,7z&quot;</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		if [[ $COMPRESS_OUTPUTIMAGE == *gz* ]]; then</span><br><span class="line">			display_alert &quot;Compressing&quot; &quot;$&#123;DESTIMG&#125;/$&#123;version&#125;.img.gz&quot; &quot;info&quot;</span><br><span class="line">			pigz -3 &lt; $DESTIMG/$&#123;version&#125;.img &gt; $DESTIMG/$&#123;version&#125;.img.gz</span><br><span class="line">			compression_type=&quot;.gz&quot;</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		if [[ $COMPRESS_OUTPUTIMAGE == *xz* ]]; then</span><br><span class="line">			display_alert &quot;Compressing&quot; &quot;$&#123;DESTIMG&#125;/$&#123;version&#125;.img.xz&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">compressing consumes a lot of memory we don<span class="string">&#x27;t have. Waiting for previous packing job to finish helps to run a lot more builds in parallel</span></span></span><br><span class="line">			available_cpu=$(grep -c &#x27;processor&#x27; /proc/cpuinfo)</span><br><span class="line">			[[ $&#123;BUILD_ALL&#125; == yes ]] &amp;&amp; available_cpu=$(( $available_cpu * 30 / 100 )) # lets use 20% of resources in case of build-all</span><br><span class="line">			[[ $&#123;available_cpu&#125; -gt 8 ]] &amp;&amp; available_cpu=8 # using more cpu cores for compressing is pointless</span><br><span class="line">			available_mem=$(LC_ALL=c free | grep Mem | awk &#x27;&#123;print $4/$2 * 100.0&#125;&#x27; | awk &#x27;&#123;print int($1)&#125;&#x27;) # in percentage</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">build optimisations when memory drops below 5%</span></span></span><br><span class="line">			if [[ $&#123;BUILD_ALL&#125; == yes &amp;&amp; ( $&#123;available_mem&#125; -lt 15 || $(ps -uax | grep &quot;pixz&quot; | wc -l) -gt 4 )]]; then</span><br><span class="line">				while [[ $(ps -uax | grep &quot;pixz&quot; | wc -l) -gt 2 ]]</span><br><span class="line">					do echo -en &quot;#&quot;</span><br><span class="line">					sleep 20</span><br><span class="line">				done</span><br><span class="line">			fi</span><br><span class="line">			pixz -7 -p $&#123;available_cpu&#125; -f $(expr $&#123;available_cpu&#125; + 2) &lt; $DESTIMG/$&#123;version&#125;.img &gt; $&#123;DESTIMG&#125;/$&#123;version&#125;.img.xz</span><br><span class="line">			compression_type=&quot;.xz&quot;</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		if [[ $COMPRESS_OUTPUTIMAGE == *img* || $COMPRESS_OUTPUTIMAGE == *7z* ]]; then</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">			mv $DESTIMG/$&#123;version&#125;.img $&#123;FINALDEST&#125;/$&#123;version&#125;.img || exit 1</span></span></span><br><span class="line">			compression_type=&quot;&quot;</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		if [[ $COMPRESS_OUTPUTIMAGE == *sha* ]]; then</span><br><span class="line">			cd $&#123;DESTIMG&#125;</span><br><span class="line">			display_alert &quot;SHA256 calculating&quot; &quot;$&#123;version&#125;.img$&#123;compression_type&#125;&quot; &quot;info&quot;</span><br><span class="line">			sha256sum -b $&#123;version&#125;.img$&#123;compression_type&#125; &gt; $&#123;version&#125;.img$&#123;compression_type&#125;.sha</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		if [[ $COMPRESS_OUTPUTIMAGE == *gpg* ]]; then</span><br><span class="line">			cd $&#123;DESTIMG&#125;</span><br><span class="line">			if [[ -n $GPG_PASS ]]; then</span><br><span class="line">				display_alert &quot;GPG signing&quot; &quot;$&#123;version&#125;.img$&#123;compression_type&#125;&quot; &quot;info&quot;</span><br><span class="line">				[[ -n $&#123;SUDO_USER&#125; ]] &amp;&amp; sudo chown -R $&#123;SUDO_USER&#125;:$&#123;SUDO_USER&#125; &quot;$&#123;DESTIMG&#125;&quot;/</span><br><span class="line">				echo &quot;$&#123;GPG_PASS&#125;&quot; | sudo -H -u $&#123;SUDO_USER&#125; bash -c &quot;gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes $&#123;DESTIMG&#125;/$&#123;version&#125;.img$&#123;compression_type&#125;&quot; || exit 1</span><br><span class="line"><span class="meta prompt_">			#</span><span class="language-bash"><span class="string">else</span></span></span><br><span class="line"><span class="meta prompt_">			#</span><span class="language-bash"><span class="string">	display_alert &quot;GPG signing skipped - no GPG_PASS&quot; &quot;$&#123;version&#125;.img&quot; &quot;wrn&quot;</span></span></span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"><span class="string">fingerprint_image &quot;$&#123;DESTIMG&#125;/$&#123;version&#125;.img$&#123;compression_type&#125;.txt&quot; &quot;$&#123;version&#125;&quot;</span></span></span><br><span class="line"></span><br><span class="line">		if [[ $COMPRESS_OUTPUTIMAGE == *7z* ]]; then</span><br><span class="line">			display_alert &quot;Compressing&quot; &quot;$&#123;DESTIMG&#125;/$&#123;version&#125;.7z&quot; &quot;info&quot;</span><br><span class="line">			7za a -t7z -bd -m0=lzma2 -mx=3 -mfb=64 -md=32m -ms=on \</span><br><span class="line"><span class="meta prompt_">			$</span><span class="language-bash"><span class="string">&#123;DESTIMG&#125;/$&#123;version&#125;.7z $&#123;version&#125;.key $&#123;version&#125;.img* &gt;/dev/null 2&gt;&amp;1</span></span></span><br><span class="line">			find $&#123;DESTIMG&#125;/ -type \</span><br><span class="line">			f \( -name &quot;$&#123;version&#125;.img&quot; -o -name &quot;$&#123;version&#125;.img.asc&quot; -o -name &quot;$&#123;version&#125;.img.txt&quot; -o -name &quot;$&#123;version&#125;.img.sha&quot; \) -print0 \</span><br><span class="line"><span class="meta prompt_">			&gt;</span><span class="language-bash"><span class="string">/dev/null 2&gt;&amp;1</span></span></span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">display_alert &quot;Done building&quot; &quot;$&#123;DESTIMG&#125;/$&#123;version&#125;.img&quot; &quot;info&quot;</span></span></span><br><span class="line">	display_alert &quot;Done building&quot; &quot;$&#123;FINALDEST&#125;/$&#123;version&#125;.img&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">call custom post build hook</span></span></span><br><span class="line">	[[ $(type -t post_build_image) == function ]] &amp;&amp; post_build_image &quot;$&#123;DESTIMG&#125;/$&#123;version&#125;.img&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">move artefacts from temporally directory to its final destination</span></span></span><br><span class="line">	[[ -n $compression_type ]] &amp;&amp; rm $DESTIMG/$&#123;version&#125;.img</span><br><span class="line">	mv $DESTIMG/$&#123;version&#125;* $&#123;FINALDEST&#125;</span><br><span class="line">	rm -rf $DESTIMG</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">write image to SD card</span></span></span><br><span class="line">	if [[ $(lsblk &quot;$CARD_DEVICE&quot; 2&gt;/dev/null) &amp;&amp; -f $&#123;FINALDEST&#125;/$&#123;version&#125;.img ]]; then</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">make sha256sum if it does not exists. we need it for comparisson</span></span></span><br><span class="line">		if [[ -f &quot;$&#123;FINALDEST&#125;/$&#123;version&#125;&quot;.img.sha ]]; then</span><br><span class="line">			local ifsha=$(cat $&#123;FINALDEST&#125;/$&#123;version&#125;.img.sha | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">		else</span><br><span class="line">			local ifsha=$(sha256sum -b &quot;$&#123;FINALDEST&#125;/$&#123;version&#125;&quot;.img | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		display_alert &quot;Writing image&quot; &quot;$CARD_DEVICE $&#123;readsha&#125;&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">write to SD card</span></span></span><br><span class="line">		pv -p -b -r -c -N &quot;[ .... ] dd&quot; $&#123;FINALDEST&#125;/$&#123;version&#125;.img | dd of=$CARD_DEVICE bs=1M iflag=fullblock oflag=direct status=none</span><br><span class="line"></span><br><span class="line">		call_extension_method &quot;post_write_sdcard&quot;  &lt;&lt;- &#x27;POST_BUILD_IMAGE&#x27;</span><br><span class="line">		*run after writing img to sdcard*</span><br><span class="line">		After the image is written to `$CARD_DEVICE`, but before verifying it.</span><br><span class="line">		You can still set SKIP_VERIFY=yes to skip verification.</span><br><span class="line">		POST_BUILD_IMAGE</span><br><span class="line"></span><br><span class="line">		if [[ &quot;$&#123;SKIP_VERIFY&#125;&quot; != &quot;yes&quot; ]]; then</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">read and compare</span></span></span><br><span class="line">			display_alert &quot;Verifying. Please wait!&quot;</span><br><span class="line">			local ofsha=$(dd if=$CARD_DEVICE count=$(du -b $&#123;FINALDEST&#125;/$&#123;version&#125;.img | cut -f1) status=none iflag=count_bytes oflag=direct | sha256sum | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">			if [[ $ifsha == $ofsha ]]; then</span><br><span class="line">				display_alert &quot;Writing verified&quot; &quot;$&#123;version&#125;.img&quot; &quot;info&quot;</span><br><span class="line">			else</span><br><span class="line">				display_alert &quot;Writing failed&quot; &quot;$&#123;version&#125;.img&quot; &quot;err&quot;</span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line">	elif [[ `systemd-detect-virt` == &#x27;docker&#x27; &amp;&amp; -n $CARD_DEVICE ]]; then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">display warning when we want to write sd card under Docker</span></span></span><br><span class="line">		display_alert &quot;Can&#x27;t write to $CARD_DEVICE&quot; &quot;Enable docker privileged mode in config-docker.conf&quot; &quot;wrn&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">&#125; #############################################################################</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h1 id="6-distributions-sh分析"><a href="#6-distributions-sh分析" class="headerlink" title="6 distributions.sh分析"></a>6 distributions.sh分析</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Copyright (c) 2013-2021 Igor Pecovnik, igor.pecovnik@gma**.com</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This file is licensed under the terms of the GNU General Public</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">License version 2. This program is licensed <span class="string">&quot;as is&quot;</span> without any</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">warranty of any kind, whether express or implied.</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Functions:</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">install_common</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">install_rclocal</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">install_distribution_specific</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">post_debootstrap_tweaks</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">install_common()</span><br><span class="line">&#123;</span><br><span class="line">	display_alert &quot;Applying common tweaks&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">install rootfs encryption related packages separate to not <span class="built_in">break</span> packages cache</span></span><br><span class="line">	if [[ $CRYPTROOT_ENABLE == yes ]]; then</span><br><span class="line">		display_alert &quot;Installing rootfs encryption related packages&quot; &quot;cryptsetup&quot; &quot;info&quot;</span><br><span class="line">		chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;apt-get -y -qq --no-install-recommends install cryptsetup&quot; \</span><br><span class="line"><span class="meta prompt_">		&gt;</span><span class="language-bash">&gt; <span class="string">&quot;<span class="variable">$&#123;DEST&#125;</span>&quot;</span>/<span class="variable">$&#123;LOG_SUBPATH&#125;</span>/install.log 2&gt;&amp;1</span></span><br><span class="line">		if [[ $CRYPTROOT_SSH_UNLOCK == yes ]]; then</span><br><span class="line">			display_alert &quot;Installing rootfs encryption related packages&quot; &quot;dropbear-initramfs&quot; &quot;info&quot;</span><br><span class="line">			chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;apt-get -y -qq --no-install-recommends install dropbear-initramfs cryptsetup-initramfs&quot; \</span><br><span class="line"><span class="meta prompt_">			&gt;</span><span class="language-bash">&gt; <span class="string">&quot;<span class="variable">$&#123;DEST&#125;</span>&quot;</span>/<span class="variable">$&#123;LOG_SUBPATH&#125;</span>/install.log 2&gt;&amp;1</span></span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">add dummy fstab entry to make mkinitramfs happy</span></span><br><span class="line">	echo &quot;/dev/mmcblk0p1 / $ROOTFS_TYPE defaults 0 1&quot; &gt;&gt; &quot;$&#123;SDCARD&#125;&quot;/etc/fstab</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">required <span class="keyword">for</span> initramfs-tools-core on Stretch since it ignores the / fstab entry</span></span><br><span class="line">	echo &quot;/dev/mmcblk0p2 /usr $ROOTFS_TYPE defaults 0 2&quot; &gt;&gt; &quot;$&#123;SDCARD&#125;&quot;/etc/fstab</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">adjust initramfs dropbear configuration</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">needs to be <span class="keyword">done</span> before kernel installation, <span class="keyword">else</span> it won<span class="string">&#x27;t be in the initrd image</span></span></span><br><span class="line">	if [[ $CRYPTROOT_ENABLE == yes &amp;&amp; $CRYPTROOT_SSH_UNLOCK == yes ]]; then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">Set the port of the dropbear ssh daemon in the initramfs to a different one if configured</span></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">this avoids the typical &#x27;</span>host key changed warning<span class="string">&#x27; - `WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!`</span></span></span><br><span class="line">		[[ -f &quot;$&#123;SDCARD&#125;&quot;/etc/dropbear-initramfs/config ]] &amp;&amp; \</span><br><span class="line">		sed -i &#x27;s/^#DROPBEAR_OPTIONS=/DROPBEAR_OPTIONS=&quot;-p &#x27;&quot;$&#123;CRYPTROOT_SSH_UNLOCK_PORT&#125;&quot;&#x27;&quot;/&#x27; \</span><br><span class="line">		&quot;$&#123;SDCARD&#125;&quot;/etc/dropbear-initramfs/config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">setup dropbear authorized_keys, either provided by userpatches or generated</span></span></span><br><span class="line">		if [[ -f $USERPATCHES_PATH/dropbear_authorized_keys ]]; then</span><br><span class="line">			cp &quot;$USERPATCHES_PATH&quot;/dropbear_authorized_keys &quot;$&#123;SDCARD&#125;&quot;/etc/dropbear-initramfs/authorized_keys</span><br><span class="line">		else</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">generate a default ssh key for login on dropbear in initramfs</span></span></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">this key should be changed by the user on first login</span></span></span><br><span class="line">			display_alert &quot;Generating a new SSH key pair for dropbear (initramfs)&quot; &quot;&quot; &quot;&quot;</span><br><span class="line">			ssh-keygen -t ecdsa -f &quot;$&#123;SDCARD&#125;&quot;/etc/dropbear-initramfs/id_ecdsa \</span><br><span class="line">			-N &#x27;&#x27; -O force-command=cryptroot-unlock -C &#x27;AUTOGENERATED_BY_ARMBIAN_BUILD&#x27;  &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">/usr/share/initramfs-tools/hooks/dropbear will automatically add &#x27;</span>id_ecdsa.pub<span class="string">&#x27; to authorized_keys file</span></span></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">during mkinitramfs of update-initramfs</span></span></span><br><span class="line"><span class="meta prompt_">			#</span><span class="language-bash"><span class="string">cat &quot;$&#123;SDCARD&#125;&quot;/etc/dropbear-initramfs/id_ecdsa.pub &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/dropbear-initramfs/authorized_keys</span></span></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">The version of the Linux kernel</span></span></span><br><span class="line">			CRYPTROOT_SSH_UNLOCK_KEY_NAME=&quot;$&#123;BOARD^&#125;_$&#123;REVISION&#125;_$&#123;DISTRIBUTION,&#125;_$&#123;RELEASE&#125;_$&#123;SELECTED_CONFIGURATION&#125;_linux&quot;$(grab_version &quot;$LINUXSOURCEDIR&quot;)&quot;&quot;.key</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">copy dropbear ssh key to image output dir for convenience</span></span></span><br><span class="line">			cp &quot;$&#123;SDCARD&#125;&quot;/etc/dropbear-initramfs/id_ecdsa &quot;$&#123;DEST&#125;/images/$&#123;CRYPTROOT_SSH_UNLOCK_KEY_NAME&#125;&quot;</span><br><span class="line">			display_alert &quot;SSH private key for dropbear (initramfs) has been copied to:&quot; \</span><br><span class="line">			&quot;$DEST/images/$CRYPTROOT_SSH_UNLOCK_KEY_NAME&quot; &quot;info&quot;</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">create modules file</span></span></span><br><span class="line">	local modules=MODULES_$&#123;BRANCH^^&#125;</span><br><span class="line">	if [[ -n &quot;$&#123;!modules&#125;&quot; ]]; then</span><br><span class="line">		tr &#x27; &#x27; &#x27;\n&#x27; &lt;&lt;&lt; &quot;$&#123;!modules&#125;&quot; &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/modules</span><br><span class="line">	elif [[ -n &quot;$&#123;MODULES&#125;&quot; ]]; then</span><br><span class="line">		tr &#x27; &#x27; &#x27;\n&#x27; &lt;&lt;&lt; &quot;$&#123;MODULES&#125;&quot; &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/modules</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">create blacklist files</span></span></span><br><span class="line">	local blacklist=MODULES_BLACKLIST_$&#123;BRANCH^^&#125;</span><br><span class="line">	if [[ -n &quot;$&#123;!blacklist&#125;&quot; ]]; then</span><br><span class="line">		tr &#x27; &#x27; &#x27;\n&#x27; &lt;&lt;&lt; &quot;$&#123;!blacklist&#125;&quot; | sed -e &#x27;s/^/blacklist /&#x27; &gt; &quot;$&#123;SDCARD&#125;/etc/modprobe.d/blacklist-$&#123;BOARD&#125;.conf&quot;</span><br><span class="line">	elif [[ -n &quot;$&#123;MODULES_BLACKLIST&#125;&quot; ]]; then</span><br><span class="line">		tr &#x27; &#x27; &#x27;\n&#x27; &lt;&lt;&lt; &quot;$&#123;MODULES_BLACKLIST&#125;&quot; | sed -e &#x27;s/^/blacklist /&#x27; &gt; &quot;$&#123;SDCARD&#125;/etc/modprobe.d/blacklist-$&#123;BOARD&#125;.conf&quot;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">configure MIN / MAX speed for cpufrequtils</span></span></span><br><span class="line">	cat &lt;&lt;-EOF &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/default/cpufrequtils</span><br><span class="line">	ENABLE=true</span><br><span class="line">	MIN_SPEED=$CPUMIN</span><br><span class="line">	MAX_SPEED=$CPUMAX</span><br><span class="line">	GOVERNOR=$GOVERNOR</span><br><span class="line">	EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">remove default interfaces file if present</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">before installing board support package</span></span></span><br><span class="line">	rm -f &quot;$&#123;SDCARD&#125;&quot;/etc/network/interfaces</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">disable selinux by default</span></span></span><br><span class="line">	mkdir -p &quot;$&#123;SDCARD&#125;&quot;/selinux</span><br><span class="line">	[[ -f &quot;$&#123;SDCARD&#125;&quot;/etc/selinux/config ]] &amp;&amp; sed &quot;s/^SELINUX=.*/SELINUX=disabled/&quot; -i &quot;$&#123;SDCARD&#125;&quot;/etc/selinux/config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">remove Ubuntu&#x27;</span>s legal text</span></span><br><span class="line">	[[ -f &quot;$&#123;SDCARD&#125;&quot;/etc/legal ]] &amp;&amp; rm &quot;$&#123;SDCARD&#125;&quot;/etc/legal</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Prevent loading paralel printer port drivers <span class="built_in">which</span> we don<span class="string">&#x27;t need here.</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Suppress boot error if kernel modules are absent</span></span></span><br><span class="line">	if [[ -f &quot;$&#123;SDCARD&#125;&quot;/etc/modules-load.d/cups-filters.conf ]]; then</span><br><span class="line">		sed &quot;s/^lp/#lp/&quot; -i &quot;$&#123;SDCARD&#125;&quot;/etc/modules-load.d/cups-filters.conf</span><br><span class="line">		sed &quot;s/^ppdev/#ppdev/&quot; -i &quot;$&#123;SDCARD&#125;&quot;/etc/modules-load.d/cups-filters.conf</span><br><span class="line">		sed &quot;s/^parport_pc/#parport_pc/&quot; -i &quot;$&#123;SDCARD&#125;&quot;/etc/modules-load.d/cups-filters.conf</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">console fix due to Debian bug</span></span></span><br><span class="line">	sed -e &#x27;s/CHARMAP=&quot;.*&quot;/CHARMAP=&quot;&#x27;$CONSOLE_CHAR&#x27;&quot;/g&#x27; -i &quot;$&#123;SDCARD&#125;&quot;/etc/default/console-setup</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">add the /dev/urandom path to the rng config file</span></span></span><br><span class="line">	echo &quot;HRNGDEVICE=/dev/urandom&quot; &gt;&gt; &quot;$&#123;SDCARD&#125;&quot;/etc/default/rng-tools</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">ping needs privileged action to be able to create raw network socket</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">this is working properly but not with (at least) Debian Buster</span></span></span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;chmod u+s /bin/ping&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">change time zone data</span></span></span><br><span class="line">	echo &quot;$&#123;TZDATA&#125;&quot; &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/timezone</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;dpkg-reconfigure -f noninteractive tzdata &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">set root password</span></span></span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;(echo $ROOTPWD;echo $ROOTPWD;) | passwd root &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">enable automated login to console(s)</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">mkdir -p &quot;$&#123;SDCARD&#125;&quot;/etc/systemd/system/getty@.service.d/</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">mkdir -p &quot;$&#123;SDCARD&#125;&quot;/etc/systemd/system/serial-getty@.service.d/</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">cat &lt;&lt;-EOF &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/systemd/system/serial-getty@.service.d/override.conf</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">[Service]</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">ExecStartPre=/bin/sh -c &#x27;</span><span class="built_in">exec</span> /bin/sleep 10<span class="string">&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">ExecStart=</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">ExecStart=-/sbin/agetty --noissue --autologin root %I \$TERM</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">Type=idle</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">EOF</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">cp &quot;$&#123;SDCARD&#125;&quot;/etc/systemd/system/serial-getty@.service.d/override.conf &quot;$&#123;SDCARD&#125;&quot;/etc/systemd/system/getty@.service.d/override.conf</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">force change root password at first login</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;chage -d 0 root&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">change console welcome text</span></span></span><br><span class="line">	echo -e &quot;$&#123;VENDOR&#125; $&#123;REVISION&#125; $&#123;RELEASE^&#125; \\l \n&quot; &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/issue</span><br><span class="line">	echo &quot;$&#123;VENDOR&#125; $&#123;REVISION&#125; $&#123;RELEASE^&#125;&quot; &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/issue.net</span><br><span class="line">	sed -i &quot;s/^PRETTY_NAME=.*/PRETTY_NAME=\&quot;$&#123;VENDOR&#125; $REVISION &quot;$&#123;RELEASE^&#125;&quot;\&quot;/&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/os-release</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">enable few bash aliases enabled in Ubuntu by default to make it even</span></span></span><br><span class="line">	sed &quot;s/#alias ll=&#x27;ls -l&#x27;/alias ll=&#x27;ls -l&#x27;/&quot; -i &quot;$&#123;SDCARD&#125;&quot;/etc/skel/.bashrc</span><br><span class="line">	sed &quot;s/#alias la=&#x27;ls -A&#x27;/alias la=&#x27;ls -A&#x27;/&quot; -i &quot;$&#123;SDCARD&#125;&quot;/etc/skel/.bashrc</span><br><span class="line">	sed &quot;s/#alias l=&#x27;ls -CF&#x27;/alias l=&#x27;ls -CF&#x27;/&quot; -i &quot;$&#123;SDCARD&#125;&quot;/etc/skel/.bashrc</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">root user is already there. Copy bashrc there as well</span></span></span><br><span class="line">	cp &quot;$&#123;SDCARD&#125;&quot;/etc/skel/.bashrc &quot;$&#123;SDCARD&#125;&quot;/root</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">display welcome message at first root login</span></span></span><br><span class="line">	touch &quot;$&#123;SDCARD&#125;&quot;/root/.not_logged_in_yet</span><br><span class="line"></span><br><span class="line">	if [[ $&#123;DESKTOP_AUTOLOGIN&#125; != no ]]; then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">set desktop autologin</span></span></span><br><span class="line">		touch &quot;$&#123;SDCARD&#125;&quot;/root/.desktop_autologin</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">NOTE: this needs to be executed before family_tweaks</span></span></span><br><span class="line">	local bootscript_src=$&#123;BOOTSCRIPT%%:*&#125;</span><br><span class="line">	local bootscript_dst=$&#123;BOOTSCRIPT##*:&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">create extlinux config file</span></span></span><br><span class="line">	if [[ $SRC_EXTLINUX == yes ]]; then</span><br><span class="line">		mkdir -p $SDCARD/boot/extlinux</span><br><span class="line">		cat &lt;&lt;-EOF &gt; &quot;$SDCARD/boot/extlinux/extlinux.conf&quot;</span><br><span class="line">		label $&#123;VENDOR&#125;</span><br><span class="line">		  kernel /boot/$NAME_KERNEL</span><br><span class="line">		  initrd /boot/$NAME_INITRD</span><br><span class="line">	EOF</span><br><span class="line">		if [[ -n $BOOT_FDT_FILE ]]; then</span><br><span class="line">			if [[ $BOOT_FDT_FILE != &quot;none&quot; ]]; then</span><br><span class="line">				echo &quot;  fdt /boot/dtb/$BOOT_FDT_FILE&quot; &gt;&gt; &quot;$SDCARD/boot/extlinux/extlinux.conf&quot;</span><br><span class="line">			fi</span><br><span class="line">		else</span><br><span class="line">			echo &quot;  fdtdir /boot/dtb/&quot; &gt;&gt; &quot;$SDCARD/boot/extlinux/extlinux.conf&quot;</span><br><span class="line">		fi</span><br><span class="line">	else</span><br><span class="line"></span><br><span class="line">		if [[ &quot;$&#123;BOOTCONFIG&#125;&quot; != &quot;none&quot; ]]; then</span><br><span class="line">			if [ -f &quot;$&#123;USERPATCHES_PATH&#125;/bootscripts/$&#123;bootscript_src&#125;&quot; ]; then</span><br><span class="line">				cp &quot;$&#123;USERPATCHES_PATH&#125;/bootscripts/$&#123;bootscript_src&#125;&quot; &quot;$&#123;SDCARD&#125;/boot/$&#123;bootscript_dst&#125;&quot;</span><br><span class="line">			else</span><br><span class="line">				cp &quot;$&#123;EXTER&#125;/config/bootscripts/$&#123;bootscript_src&#125;&quot; &quot;$&#123;SDCARD&#125;/boot/$&#123;bootscript_dst&#125;&quot;</span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		if [[ -n $BOOTENV_FILE ]]; then</span><br><span class="line">			if [[ -f $USERPATCHES_PATH/bootenv/$BOOTENV_FILE ]]; then</span><br><span class="line">				cp &quot;$USERPATCHES_PATH/bootenv/$&#123;BOOTENV_FILE&#125;&quot; &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt</span><br><span class="line">			elif [[ -f $EXTER/config/bootenv/$BOOTENV_FILE ]]; then</span><br><span class="line">				cp &quot;$&#123;EXTER&#125;/config/bootenv/$&#123;BOOTENV_FILE&#125;&quot; &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt</span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">TODO: modify $bootscript_dst or orangepiEnv.txt to make NFS boot universal</span></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">instead of copying sunxi-specific template</span></span></span><br><span class="line">		if [[ $ROOTFS_TYPE == nfs ]]; then</span><br><span class="line">			display_alert &quot;Copying NFS boot script template&quot;</span><br><span class="line">			if [[ -f $USERPATCHES_PATH/nfs-boot.cmd ]]; then</span><br><span class="line">				cp &quot;$USERPATCHES_PATH&quot;/nfs-boot.cmd &quot;$&#123;SDCARD&#125;&quot;/boot/boot.cmd</span><br><span class="line">			else</span><br><span class="line">				cp &quot;$&#123;EXTER&#125;&quot;/config/templates/nfs-boot.cmd.template &quot;$&#123;SDCARD&#125;&quot;/boot/boot.cmd</span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		[[ -n $OVERLAY_PREFIX &amp;&amp; -f &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt &amp;&amp; ($BRANCH =~ current|next || $BOARDFAMILY =~ &quot;rockchip-rk3588&quot;|&quot;rockchip-rk356x&quot;) ]] &amp;&amp; \</span><br><span class="line">			echo &quot;overlay_prefix=$OVERLAY_PREFIX&quot; &gt;&gt; &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt</span><br><span class="line"></span><br><span class="line">		[[ -n $DEFAULT_OVERLAYS &amp;&amp; -f &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt &amp;&amp; ($BRANCH =~ current|next || $BOARDFAMILY =~ &quot;rockchip-rk3588&quot;|&quot;rockchip-rk356x&quot;) ]] &amp;&amp; \</span><br><span class="line">			echo &quot;overlays=$&#123;DEFAULT_OVERLAYS//,/ &#125;&quot; &gt;&gt; &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt</span><br><span class="line"></span><br><span class="line">		[[ -n $BOOT_FDT_FILE &amp;&amp; -f &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt ]] &amp;&amp; \</span><br><span class="line">			echo &quot;fdtfile=$&#123;BOOT_FDT_FILE&#125;&quot; &gt;&gt; &quot;$&#123;SDCARD&#125;/boot/orangepiEnv.txt&quot;</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">initial date for fake-hwclock</span></span></span><br><span class="line">	date -u &#x27;+%Y-%m-%d %H:%M:%S&#x27; &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/fake-hwclock.data</span><br><span class="line"></span><br><span class="line">	echo &quot;$&#123;HOST&#125;&quot; &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/hostname</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">set hostname in hosts file</span></span></span><br><span class="line">	cat &lt;&lt;-EOF &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/hosts</span><br><span class="line">	127.0.0.1   localhost</span><br><span class="line">	127.0.1.1   $HOST</span><br><span class="line">	::1         localhost $HOST ip6-localhost ip6-loopback</span><br><span class="line">	fe00::0     ip6-localnet</span><br><span class="line">	ff00::0     ip6-mcastprefix</span><br><span class="line">	ff02::1     ip6-allnodes</span><br><span class="line">	ff02::2     ip6-allrouters</span><br><span class="line">	EOF</span><br><span class="line"></span><br><span class="line">	cd $SRC</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Prepare and export caching-related params common to all apt calls below, to maximize apt-cacher-ng usage</span></span></span><br><span class="line">	export APT_EXTRA_DIST_PARAMS=&quot;&quot;</span><br><span class="line">	[[ $NO_APT_CACHER != yes ]] &amp;&amp; APT_EXTRA_DIST_PARAMS=&quot;-o Acquire::http::Proxy=\&quot;http://$&#123;APT_PROXY_ADDR:-localhost:3142&#125;\&quot; -o Acquire::http::Proxy::localhost=\&quot;DIRECT\&quot;&quot;</span><br><span class="line"></span><br><span class="line">	display_alert &quot;Cleaning&quot; &quot;package lists&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;apt-get clean&quot;</span><br><span class="line"></span><br><span class="line">	display_alert &quot;Updating&quot; &quot;package lists&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;apt-get $&#123;APT_EXTRA_DIST_PARAMS&#125; update&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">	display_alert &quot;Temporarily disabling&quot; &quot;initramfs-tools hook for kernel&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;chmod -v -x /etc/kernel/postinst.d/initramfs-tools&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">install family packages</span></span></span><br><span class="line">	if [[ -n $&#123;PACKAGE_LIST_FAMILY&#125; ]]; then</span><br><span class="line">		display_alert &quot;Installing PACKAGE_LIST_FAMILY packages&quot; &quot;$&#123;PACKAGE_LIST_FAMILY&#125;&quot;</span><br><span class="line">		chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;DEBIAN_FRONTEND=noninteractive  apt-get $&#123;APT_EXTRA_DIST_PARAMS&#125; -yqq --no-install-recommends install $PACKAGE_LIST_FAMILY&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">install board packages</span></span></span><br><span class="line">	if [[ -n $&#123;PACKAGE_LIST_BOARD&#125; ]]; then</span><br><span class="line">		display_alert &quot;Installing PACKAGE_LIST_BOARD packages&quot; &quot;$&#123;PACKAGE_LIST_BOARD&#125;&quot;</span><br><span class="line">		chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;DEBIAN_FRONTEND=noninteractive  apt-get $&#123;APT_EXTRA_DIST_PARAMS&#125; -yqq --no-install-recommends install $PACKAGE_LIST_BOARD&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log || &#123; display_alert &quot;Failed to install PACKAGE_LIST_BOARD&quot; &quot;$&#123;PACKAGE_LIST_BOARD&#125;&quot; &quot;err&quot;; exit 2; &#125; </span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">remove family packages</span></span></span><br><span class="line">	if [[ -n $&#123;PACKAGE_LIST_FAMILY_REMOVE&#125; ]]; then</span><br><span class="line">		display_alert &quot;Removing PACKAGE_LIST_FAMILY_REMOVE packages&quot; &quot;$&#123;PACKAGE_LIST_FAMILY_REMOVE&#125;&quot;</span><br><span class="line">		chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;DEBIAN_FRONTEND=noninteractive  apt-get $&#123;APT_EXTRA_DIST_PARAMS&#125; -yqq remove --auto-remove $PACKAGE_LIST_FAMILY_REMOVE&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">remove board packages</span></span></span><br><span class="line">	if [[ -n $&#123;PACKAGE_LIST_BOARD_REMOVE&#125; ]]; then</span><br><span class="line">		display_alert &quot;Removing PACKAGE_LIST_BOARD_REMOVE packages&quot; &quot;$&#123;PACKAGE_LIST_BOARD_REMOVE&#125;&quot;</span><br><span class="line">		for PKG_REMOVE in $&#123;PACKAGE_LIST_BOARD_REMOVE&#125;; do</span><br><span class="line">			chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;DEBIAN_FRONTEND=noninteractive apt-get $&#123;APT_EXTRA_DIST_PARAMS&#125; -yqq remove --auto-remove $&#123;PKG_REMOVE&#125;&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log</span><br><span class="line">		done</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">install u-boot</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">@TODO: add install_bootloader() extension method, refactor into u-boot extension</span></span></span><br><span class="line">	[[ &quot;$&#123;BOOTCONFIG&#125;&quot; != &quot;none&quot; ]] &amp;&amp; &#123;</span><br><span class="line">		if [[ &quot;$&#123;REPOSITORY_INSTALL&#125;&quot; != *u-boot* ]]; then</span><br><span class="line">			UBOOT_VER=$(dpkg --info &quot;$&#123;DEB_STORAGE&#125;/u-boot/$&#123;CHOSEN_UBOOT&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot; | grep Descr | awk &#x27;&#123;print $(NF)&#125;&#x27;)</span><br><span class="line">			install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/u-boot/$&#123;CHOSEN_UBOOT&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot;</span><br><span class="line">		else</span><br><span class="line">			UBOOT_VER=$(dpkg --info &quot;$&#123;DEB_ORANGEPI&#125;/u-boot/$&#123;CHOSEN_UBOOT&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot; | grep Descr | awk &#x27;&#123;print $(NF)&#125;&#x27;)</span><br><span class="line">			install_deb_chroot &quot;$&#123;DEB_ORANGEPI&#125;/u-boot/$&#123;CHOSEN_UBOOT&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot; &quot;orangepi&quot;</span><br><span class="line">		fi</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	call_extension_method &quot;pre_install_kernel_debs&quot;  &lt;&lt; &#x27;PRE_INSTALL_KERNEL_DEBS&#x27;</span><br><span class="line">*called before installing the Armbian-built kernel deb packages*</span><br><span class="line">It is not too late to `unset KERNELSOURCE` here and avoid kernel install.</span><br><span class="line">PRE_INSTALL_KERNEL_DEBS</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">install kernel</span></span></span><br><span class="line">	[[ -n $KERNELSOURCE ]] &amp;&amp; &#123;</span><br><span class="line">		if [[ &quot;$&#123;REPOSITORY_INSTALL&#125;&quot; != *kernel* ]]; then</span><br><span class="line">			VER=$(dpkg --info &quot;$&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KERNEL&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot; | awk -F&quot;-&quot; &#x27;/Source:/&#123;print $2&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">			install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KERNEL&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot;</span><br><span class="line">			if [[ -f $&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KERNEL/image/dtb&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb ]]; then</span><br><span class="line">				install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KERNEL/image/dtb&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot;</span><br><span class="line">			fi</span><br><span class="line">			if [[ $INSTALL_HEADERS == yes ]]; then</span><br><span class="line">				install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KERNEL/image/headers&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot;</span><br><span class="line">			else</span><br><span class="line">				cp &quot;$&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KERNEL/image/headers&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot; &quot;$&#123;SDCARD&#125;&quot;/opt/</span><br><span class="line">			fi</span><br><span class="line">		else</span><br><span class="line">			VER=$(dpkg --info &quot;$&#123;DEB_ORANGEPI&#125;/$&#123;CHOSEN_KERNEL&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot; | grep Descr | awk &#x27;&#123;print $(NF)&#125;&#x27;)</span><br><span class="line">			VER=&quot;$&#123;VER/-$LINUXFAMILY/&#125;&quot;</span><br><span class="line"></span><br><span class="line">			install_deb_chroot &quot;$&#123;DEB_ORANGEPI&#125;/$&#123;CHOSEN_KERNEL&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot; &quot;orangepi&quot;</span><br><span class="line"></span><br><span class="line">			if [[ -f $&#123;DEB_ORANGEPI&#125;/$&#123;CHOSEN_KERNEL/image/dtb&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb ]]; then</span><br><span class="line">				install_deb_chroot &quot;$&#123;DEB_ORANGEPI&#125;/$&#123;CHOSEN_KERNEL/image/dtb&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot; &quot;orangepi&quot;</span><br><span class="line">			fi</span><br><span class="line"></span><br><span class="line">			if [[ $INSTALL_HEADERS == yes ]]; then</span><br><span class="line">				install_deb_chroot &quot;$&#123;DEB_ORANGEPI&#125;/$&#123;CHOSEN_KERNEL/image/headers&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot; &quot;orangepi&quot;</span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	call_extension_method &quot;post_install_kernel_debs&quot; &lt;&lt; &#x27;POST_INSTALL_KERNEL_DEBS&#x27;</span><br><span class="line">*allow config to do more with the installed kernel/headers*</span><br><span class="line">Called after packages, u-boot, kernel and headers installed in the chroot, but before the BSP is installed.</span><br><span class="line">If `KERNELSOURCE` is (still?) unset after this, Armbian-built firmware will not be installed.</span><br><span class="line">POST_INSTALL_KERNEL_DEBS</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">install board support packages</span></span></span><br><span class="line">	if [[ &quot;$&#123;REPOSITORY_INSTALL&#125;&quot; != *bsp* ]]; then</span><br><span class="line">		install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/$RELEASE/$&#123;BSP_CLI_PACKAGE_FULLNAME&#125;.deb&quot;</span><br><span class="line">	else</span><br><span class="line">		install_deb_chroot &quot;$&#123;DEB_ORANGEPI&#125;/$RELEASE/$&#123;CHOSEN_ROOTFS&#125;_$&#123;BSP_CLI_PACKAGE_FULLNAME&#125;.deb&quot; &quot;orangepi&quot;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">install orangepi-desktop</span></span></span><br><span class="line">	if [[ &quot;$&#123;REPOSITORY_INSTALL&#125;&quot; != *orangepi-desktop* ]]; then</span><br><span class="line">		if [[ $BUILD_DESKTOP == yes ]]; then</span><br><span class="line">			install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/$&#123;RELEASE&#125;/$&#123;CHOSEN_DESKTOP&#125;_$&#123;REVISION&#125;_all.deb&quot;</span><br><span class="line">			install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/$&#123;RELEASE&#125;/$&#123;BSP_DESKTOP_PACKAGE_FULLNAME&#125;.deb&quot;</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">install display manager and PACKAGE_LIST_DESKTOP_FULL packages if enabled per board</span></span></span><br><span class="line">			desktop_postinstall</span><br><span class="line">		fi</span><br><span class="line">	else</span><br><span class="line">		if [[ $BUILD_DESKTOP == yes ]]; then</span><br><span class="line">			install_deb_chroot &quot;$&#123;CHOSEN_DESKTOP&#125;&quot; &quot;orangepi&quot;</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">install display manager and PACKAGE_LIST_DESKTOP_FULL packages if enabled per board</span></span></span><br><span class="line">			desktop_postinstall</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">install orangepi-firmware</span></span></span><br><span class="line">	if [[ &quot;$&#123;REPOSITORY_INSTALL&#125;&quot; != *orangepi-firmware* ]]; then</span><br><span class="line">		if [[ -f $&#123;DEB_STORAGE&#125;/orangepi-firmware_$&#123;REVISION&#125;_all.deb ]]; then</span><br><span class="line">			install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/orangepi-firmware_$&#123;REVISION&#125;_all.deb&quot;</span><br><span class="line">		fi</span><br><span class="line">	else</span><br><span class="line">		if [[ -f $&#123;DEB_STORAGE&#125;/orangepi-firmware_$&#123;REVISION&#125;_all.deb ]]; then</span><br><span class="line">			install_deb_chroot &quot;$&#123;DEB_ORANGEPI&#125;/orangepi-firmware_$&#123;REVISION&#125;_all.deb&quot; &quot;orangepi&quot;</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">install orangepi-config</span></span></span><br><span class="line">	if [[ &quot;$&#123;PACKAGE_LIST_RM&#125;&quot; != *orangepi-config* ]]; then</span><br><span class="line">		if [[ &quot;$&#123;REPOSITORY_INSTALL&#125;&quot; != *orangepi-config* ]]; then</span><br><span class="line">			if [[ $BUILD_MINIMAL != yes ]]; then</span><br><span class="line">				install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/orangepi-config_$&#123;REVISION&#125;_all.deb&quot;</span><br><span class="line">			fi</span><br><span class="line">		else</span><br><span class="line">			if [[ $BUILD_MINIMAL != yes ]]; then</span><br><span class="line">				install_deb_chroot &quot;$&#123;DEB_ORANGEPI&#125;/orangepi-config_$&#123;REVISION&#125;_all.deb&quot; &quot;orangepi&quot;</span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">install orangepi-zsh</span></span></span><br><span class="line">	if [[ &quot;$&#123;PACKAGE_LIST_RM&#125;&quot; != *orangepi-zsh* ]]; then</span><br><span class="line">		if [[ &quot;$&#123;REPOSITORY_INSTALL&#125;&quot; != *orangepi-zsh* ]]; then</span><br><span class="line">			if [[ $BUILD_MINIMAL != yes ]]; then</span><br><span class="line">				install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/orangepi-zsh_$&#123;REVISION&#125;_all.deb&quot;</span><br><span class="line">			fi</span><br><span class="line">		else</span><br><span class="line">			if [[ $BUILD_MINIMAL != yes ]]; then</span><br><span class="line">				install_deb_chroot &quot;orangepi-zsh&quot; &quot;remote&quot;</span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">install plymouth-theme-orangepi</span></span></span><br><span class="line">	if [[ $PLYMOUTH == yes &amp;&amp; $BUILD_DESKTOP == yes &amp;&amp; $RELEASE != buster ]]; then</span><br><span class="line">		if [[ &quot;$&#123;REPOSITORY_INSTALL&#125;&quot; != *plymouth-theme-orangepi* ]]; then</span><br><span class="line">			install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/orangepi-plymouth-theme_$&#123;REVISION&#125;_all.deb&quot;</span><br><span class="line">		else</span><br><span class="line">			install_deb_chroot &quot;orangepi-plymouth-theme&quot; &quot;remote&quot;</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">install kernel sources</span></span></span><br><span class="line">	if [[ -f $&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KSRC&#125;_$&#123;REVISION&#125;_all.deb &amp;&amp; $INSTALL_KSRC == yes ]]; then</span><br><span class="line">		install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KSRC&#125;_$&#123;REVISION&#125;_all.deb&quot;</span><br><span class="line">	elif [[ $INSTALL_KSRC == yes ]]; then</span><br><span class="line">		display_alert &quot;Please set BUILD_KSRC=yes to generate the kernel source package&quot; &quot;&quot; &quot;wrn&quot;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">install wireguard tools</span></span></span><br><span class="line">	if [[ $WIREGUARD == yes ]]; then</span><br><span class="line">		chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;apt-get -y -qq install wireguard-tools --no-install-recommends&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/debug/install.log 2&gt;&amp;1</span><br><span class="line">	fiinstall_wiringop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">freeze orangepi packages</span></span></span><br><span class="line">	if [[ $BSPFREEZE == yes ]]; then</span><br><span class="line">		display_alert &quot;Freezing Orange Pi packages&quot; &quot;$BOARD&quot; &quot;info&quot;</span><br><span class="line">		chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;apt-mark hold $&#123;CHOSEN_KERNEL&#125; $&#123;CHOSEN_KERNEL/image/headers&#125; \</span><br><span class="line"><span class="meta prompt_">		linux-u-boot-$</span><span class="language-bash"><span class="string">&#123;BOARD&#125;-$&#123;BRANCH&#125; $&#123;CHOSEN_KERNEL/image/dtb&#125;&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span></span></span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">add orangepi user</span></span></span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;adduser --quiet --disabled-password --shell /bin/bash --home /home/$&#123;OPI_USERNAME&#125; --gecos $&#123;OPI_USERNAME&#125; $&#123;OPI_USERNAME&#125;&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;(echo $&#123;OPI_PWD&#125;;echo $&#123;OPI_PWD&#125;;) | passwd &quot;$&#123;OPI_USERNAME&#125;&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">	for additionalgroup in sudo netdev audio video disk tty users games dialout plugdev input bluetooth systemd-journal ssh; do</span><br><span class="line">	        chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;usermod -aG $&#123;additionalgroup&#125; $&#123;OPI_USERNAME&#125; 2&gt;/dev/null&quot;</span><br><span class="line">	done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">fix for gksu in Xenial</span></span></span><br><span class="line">	touch $&#123;SDCARD&#125;/home/$&#123;OPI_USERNAME&#125;/.Xauthority</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;chown $&#123;OPI_USERNAME&#125;:$&#123;OPI_USERNAME&#125; /home/$&#123;OPI_USERNAME&#125;/.Xauthority&quot;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">set up profile sync daemon on desktop systems</span></span></span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;which psd &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">	if [ $? -eq 0 ]; then</span><br><span class="line">		echo -e &quot;$&#123;OPI_USERNAME&#125; ALL=(ALL) NOPASSWD: /usr/bin/psd-overlay-helper&quot; &gt;&gt; $&#123;SDCARD&#125;/etc/sudoers</span><br><span class="line">		touch $&#123;SDCARD&#125;/home/$&#123;OPI_USERNAME&#125;/.activate_psd</span><br><span class="line">		chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;chown $OPI_USERNAME:$OPI_USERNAME /home/$&#123;OPI_USERNAME&#125;/.activate_psd&quot;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">remove deb files</span></span></span><br><span class="line">	rm -f &quot;$&#123;SDCARD&#125;&quot;/root/*.deb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">copy boot splash images</span></span></span><br><span class="line">	cp &quot;$&#123;EXTER&#125;&quot;/packages/blobs/splash/orangepi-u-boot.bmp &quot;$&#123;SDCARD&#125;&quot;/boot/boot.bmp</span><br><span class="line">	cp &quot;$&#123;EXTER&#125;&quot;/packages/blobs/splash/logo.bmp &quot;$&#123;SDCARD&#125;&quot;/boot/logo.bmp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">copy audio.wav and mute.wav</span></span></span><br><span class="line">	cp &quot;$&#123;EXTER&#125;&quot;/packages/blobs/audio_wav/audio.wav &quot;$&#123;SDCARD&#125;&quot;/usr/share/sounds/alsa/</span><br><span class="line">	cp &quot;$&#123;EXTER&#125;&quot;/packages/blobs/audio_wav/mute.wav &quot;$&#123;SDCARD&#125;&quot;/usr/share/sounds/alsa/</span><br><span class="line"></span><br><span class="line">	cp &quot;$&#123;EXTER&#125;&quot;/packages/blobs/test.mp4 &quot;$&#123;SDCARD&#125;&quot;/usr/local/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">copy watchdog test programm</span></span></span><br><span class="line">	cp &quot;$&#123;EXTER&#125;&quot;/packages/blobs/watchdog/watchdog_test_$&#123;ARCH&#125; &quot;$&#123;SDCARD&#125;&quot;/usr/local/bin/watchdog_test</span><br><span class="line"></span><br><span class="line">	[[ -f &quot;$&#123;SDCARD&#125;&quot;/usr/bin/gnome-session ]] &amp;&amp; sed -i &quot;s/user-session.*/user-session=ubuntu-wayland/&quot; $&#123;SDCARD&#125;/etc/lightdm/lightdm.conf.d/22-orangepi-autologin.conf</span><br><span class="line">	[[ -f &quot;$&#123;SDCARD&#125;&quot;/usr/bin/startplasma-x11 ]] &amp;&amp; sed -i &quot;s/user-session.*/user-session=plasma-x11/&quot; $&#123;SDCARD&#125;/etc/lightdm/lightdm.conf.d/22-orangepi-autologin.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">execute $LINUXFAMILY-specific tweaks</span></span></span><br><span class="line">	[[ $(type -t family_tweaks) == function ]] &amp;&amp; family_tweaks</span><br><span class="line"></span><br><span class="line">	call_extension_method &quot;post_family_tweaks&quot; &lt;&lt; &#x27;FAMILY_TWEAKS&#x27;</span><br><span class="line">*customize the tweaks made by $LINUXFAMILY-specific family_tweaks*</span><br><span class="line">It is run after packages are installed in the rootfs, but before enabling additional services.</span><br><span class="line">It allows implementors access to the rootfs (`$&#123;SDCARD&#125;`) in its pristine state after packages are installed.</span><br><span class="line">FAMILY_TWEAKS</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">enable additional services</span></span></span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl --no-reload enable orangepi-firstrun.service &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl --no-reload enable orangepi-firstrun-config.service &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl --no-reload enable orangepi-zram-config.service &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl --no-reload enable orangepi-hardware-optimize.service &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl --no-reload enable orangepi-ramlog.service &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl --no-reload enable orangepi-resize-filesystem.service &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl --no-reload enable orangepi-hardware-monitor.service &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">copy &quot;first run automated config, optional user configured&quot;</span></span></span><br><span class="line"> 	cp $&#123;EXTER&#125;/packages/bsp/orangepi_first_run.txt.template &quot;$&#123;SDCARD&#125;&quot;/boot/orangepi_first_run.txt.template</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string"># switch to beta repository at this stage if building nightly images</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string">[[ $IMAGE_TYPE == nightly ]] \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">	#&amp;&amp; echo &quot;deb http://beta.orangepi.com $RELEASE main $&#123;RELEASE&#125;-utils $&#123;RELEASE&#125;-desktop&quot; \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">	#&gt; &quot;$&#123;SDCARD&#125;&quot;/etc/apt/sources.list.d/orangepi.list</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">Cosmetic fix [FAILED] Failed to start Set console font and keymap at first boot</span></span></span><br><span class="line">	[[ -f &quot;$&#123;SDCARD&#125;&quot;/etc/console-setup/cached_setup_font.sh ]] \</span><br><span class="line">	&amp;&amp; sed -i &quot;s/^printf &#x27;.*/printf &#x27;\\\033\%\%G&#x27;/g&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/console-setup/cached_setup_font.sh</span><br><span class="line">	[[ -f &quot;$&#123;SDCARD&#125;&quot;/etc/console-setup/cached_setup_terminal.sh ]] \</span><br><span class="line">	&amp;&amp; sed -i &quot;s/^printf &#x27;.*/printf &#x27;\\\033\%\%G&#x27;/g&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/console-setup/cached_setup_terminal.sh</span><br><span class="line">	[[ -f &quot;$&#123;SDCARD&#125;&quot;/etc/console-setup/cached_setup_keyboard.sh ]] \</span><br><span class="line">	&amp;&amp; sed -i &quot;s/-u/-x&#x27;/g&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/console-setup/cached_setup_keyboard.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">fix for https://bugs.launchpad.net/ubuntu/+source/blueman/+bug/1542723</span></span></span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;chown root:messagebus /usr/lib/dbus-1.0/dbus-daemon-launch-helper&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;chmod u+s /usr/lib/dbus-1.0/dbus-daemon-launch-helper&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">disable samba NetBIOS over IP name service requests since it hangs when no network is present at boot</span></span></span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl --quiet disable nmbd 2&gt; /dev/null&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">disable low-level kernel messages for non betas</span></span></span><br><span class="line">	if [[ -z $BETA ]]; then</span><br><span class="line">		sed -i &quot;s/^#kernel.printk*/kernel.printk/&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/sysctl.conf</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">disable repeated messages due to xconsole not being installed.</span></span></span><br><span class="line">	[[ -f &quot;$&#123;SDCARD&#125;&quot;/etc/rsyslog.d/50-default.conf ]] &amp;&amp; \</span><br><span class="line">	sed &#x27;/daemon\.\*\;mail.*/,/xconsole/ s/.*/#&amp;/&#x27; -i &quot;$&#123;SDCARD&#125;&quot;/etc/rsyslog.d/50-default.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">disable deprecated parameter</span></span></span><br><span class="line">	sed &#x27;/.*$KLogPermitNonKernelFacility.*/,// s/.*/#&amp;/&#x27; -i &quot;$&#123;SDCARD&#125;&quot;/etc/rsyslog.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">enable getty on multiple serial consoles</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">and adjust the speed if it is defined and different than 115200</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">	# example: SERIALCON=&quot;ttyS0:15000000,ttyGS1&quot;</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">	ifs=$IFS</span></span></span><br><span class="line">	for i in $(echo &quot;$&#123;SERIALCON:-&#x27;ttyS0&#x27;&#125;&quot; | sed &quot;s/,/ /g&quot;)</span><br><span class="line">	do</span><br><span class="line">		IFS=&#x27;:&#x27; read -r -a array &lt;&lt;&lt; &quot;$i&quot;</span><br><span class="line">		[[ &quot;$&#123;array[0]&#125;&quot; == &quot;tty1&quot; ]] &amp;&amp; continue # Don&#x27;t enable tty1 as serial console.</span><br><span class="line">		display_alert &quot;Enabling serial console&quot; &quot;$&#123;array[0]&#125;&quot; &quot;info&quot;</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">add serial console to secure tty list</span></span></span><br><span class="line">		[ -z &quot;$(grep -w &#x27;^$&#123;array[0]&#125;&#x27; &quot;$&#123;SDCARD&#125;&quot;/etc/securetty 2&gt; /dev/null)&quot; ] &amp;&amp; \</span><br><span class="line">		echo &quot;$&#123;array[0]&#125;&quot; &gt;&gt;  &quot;$&#123;SDCARD&#125;&quot;/etc/securetty</span><br><span class="line">		if [[ $&#123;array[1]&#125; != &quot;115200&quot; &amp;&amp; -n $&#123;array[1]&#125; ]]; then</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="string">make a copy, fix speed and enable</span></span></span><br><span class="line">			cp &quot;$&#123;SDCARD&#125;&quot;/lib/systemd/system/serial-getty@.service \</span><br><span class="line">			&quot;$&#123;SDCARD&#125;/lib/systemd/system/serial-getty@$&#123;array[0]&#125;.service&quot;</span><br><span class="line">			sed -i &quot;s/--keep-baud 115200/--keep-baud $&#123;array[1]&#125;,115200/&quot; \</span><br><span class="line">			&quot;$&#123;SDCARD&#125;/lib/systemd/system/serial-getty@$&#123;array[0]&#125;.service&quot;</span><br><span class="line">		fi</span><br><span class="line">		chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl daemon-reload&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span><br><span class="line">		chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl --no-reload enable serial-getty@$&#123;array[0]&#125;.service&quot; \</span><br><span class="line"><span class="meta prompt_">		&gt;</span><span class="language-bash"><span class="string">&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span></span></span><br><span class="line">		if [[ &quot;$&#123;array[0]&#125;&quot; == &quot;ttyGS0&quot; &amp;&amp; $LINUXFAMILY == sun8i &amp;&amp; $BRANCH == legacy ]]; then</span><br><span class="line">			mkdir -p &quot;$&#123;SDCARD&#125;&quot;/etc/systemd/system/serial-getty@ttyGS0.service.d</span><br><span class="line">			cat &lt;&lt;-EOF &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/systemd/system/serial-getty@ttyGS0.service.d/10-switch-role.conf</span><br><span class="line">			[Service]</span><br><span class="line">			ExecStartPre=-/bin/sh -c &quot;echo 2 &gt; /sys/bus/platform/devices/sunxi_usb_udc/otg_role&quot;</span><br><span class="line">			EOF</span><br><span class="line">		fi</span><br><span class="line">	done</span><br><span class="line">	IFS=$ifs</span><br><span class="line"></span><br><span class="line">	[[ $LINUXFAMILY == sun*i ]] &amp;&amp; mkdir -p &quot;$&#123;SDCARD&#125;&quot;/boot/overlay-user</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">to prevent creating swap file on NFS (needs specific kernel options)</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">and f2fs/btrfs (not recommended or needs specific kernel options)</span></span></span><br><span class="line">	[[ $ROOTFS_TYPE != ext4 ]] &amp;&amp; touch &quot;$&#123;SDCARD&#125;&quot;/var/swap</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">install initial asound.state if defined</span></span></span><br><span class="line">	mkdir -p &quot;$&#123;SDCARD&#125;&quot;/var/lib/alsa/</span><br><span class="line">	[[ -n $ASOUND_STATE ]] &amp;&amp; cp &quot;$&#123;EXTER&#125;/packages/blobs/asound.state/$&#123;ASOUND_STATE&#125;&quot; &quot;$&#123;SDCARD&#125;&quot;/var/lib/alsa/asound.state</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">save initial orangepi-release state</span></span></span><br><span class="line">	cp &quot;$&#123;SDCARD&#125;&quot;/etc/orangepi-release &quot;$&#123;SDCARD&#125;&quot;/etc/orangepi-image-release</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">DNS fix. package resolvconf is not available everywhere</span></span></span><br><span class="line">	if [ -d /etc/resolvconf/resolv.conf.d ] &amp;&amp; [ -n &quot;$NAMESERVER&quot; ]; then</span><br><span class="line">		echo &quot;nameserver $NAMESERVER&quot; &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/resolvconf/resolv.conf.d/head</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">permit root login via SSH for the first boot</span></span></span><br><span class="line">	sed -i &#x27;s/#\?PermitRootLogin .*/PermitRootLogin yes/&#x27; &quot;$&#123;SDCARD&#125;&quot;/etc/ssh/sshd_config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="string">enable PubkeyAuthentication</span></span></span><br><span class="line">	sed -i &#x27;s/#\?PubkeyAuthentication .*/PubkeyAuthentication yes/&#x27; &quot;$&#123;SDCARD&#125;&quot;/etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">	if [ -f &quot;$&#123;SDCARD&#125;&quot;/etc/NetworkManager/NetworkManager.conf ]; then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">configure network manager</span></span></span><br><span class="line">		sed &quot;s/managed=\(.*\)/managed=true/g&quot; -i &quot;$&#123;SDCARD&#125;&quot;/etc/NetworkManager/NetworkManager.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">remove network manager defaults to handle eth by default</span></span></span><br><span class="line">		rm -f &quot;$&#123;SDCARD&#125;&quot;/usr/lib/NetworkManager/conf.d/10-globally-managed-devices.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="string">most likely we don&#x27;</span>t need to <span class="built_in">wait</span> <span class="keyword">for</span> nm to get online</span></span><br><span class="line">		chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl disable NetworkManager-wait-online.service&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">Just regular DNS and maintain /etc/resolv.conf as a file</span></span><br><span class="line">		sed &quot;/dns/d&quot; -i &quot;$&#123;SDCARD&#125;&quot;/etc/NetworkManager/NetworkManager.conf</span><br><span class="line">		sed &quot;s/\[main\]/\[main\]\ndns=default\nrc-manager=file/g&quot; -i &quot;$&#123;SDCARD&#125;&quot;/etc/NetworkManager/NetworkManager.conf</span><br><span class="line">		if [[ -n $NM_IGNORE_DEVICES ]]; then</span><br><span class="line">			mkdir -p &quot;$&#123;SDCARD&#125;&quot;/etc/NetworkManager/conf.d/</span><br><span class="line">			cat &lt;&lt;-EOF &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/NetworkManager/conf.d/10-ignore-interfaces.conf</span><br><span class="line">			[keyfile]</span><br><span class="line">			unmanaged-devices=$NM_IGNORE_DEVICES</span><br><span class="line">			EOF</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">	elif [ -d &quot;$&#123;SDCARD&#125;&quot;/etc/systemd/network ]; then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">configure networkd</span></span><br><span class="line">		rm &quot;$&#123;SDCARD&#125;&quot;/etc/resolv.conf</span><br><span class="line">		ln -s /run/systemd/resolve/resolv.conf &quot;$&#123;SDCARD&#125;&quot;/etc/resolv.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash"><span class="built_in">enable</span> services</span></span><br><span class="line">		chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl enable systemd-networkd.service systemd-resolved.service&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">		if  [ -e /etc/systemd/timesyncd.conf ]; then</span><br><span class="line">			chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl enable systemd-timesyncd.service&quot; &gt;&gt; &quot;$&#123;DEST&#125;&quot;/$&#123;LOG_SUBPATH&#125;/install.log 2&gt;&amp;1</span><br><span class="line">		fi</span><br><span class="line">		umask 022</span><br><span class="line">		cat &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/systemd/network/eth0.network &lt;&lt;- __EOF__</span><br><span class="line">		[Match]</span><br><span class="line">		Name=eth0</span><br><span class="line"></span><br><span class="line">		[Network]</span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">MACAddress=</span></span><br><span class="line">		DHCP=ipv4</span><br><span class="line">		LinkLocalAddressing=ipv4</span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">Address=192.168.1.100/24</span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">Gateway=192.168.1.1</span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">DNS=192.168.1.1</span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">Domains=example.com</span></span><br><span class="line">		NTP=0.pool.ntp.org 1.pool.ntp.org</span><br><span class="line">		__EOF__</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">avahi daemon defaults <span class="keyword">if</span> exists</span></span><br><span class="line">	[[ -f &quot;$&#123;SDCARD&#125;&quot;/usr/share/doc/avahi-daemon/examples/sftp-ssh.service ]] &amp;&amp; \</span><br><span class="line">	cp &quot;$&#123;SDCARD&#125;&quot;/usr/share/doc/avahi-daemon/examples/sftp-ssh.service &quot;$&#123;SDCARD&#125;&quot;/etc/avahi/services/</span><br><span class="line">	[[ -f &quot;$&#123;SDCARD&#125;&quot;/usr/share/doc/avahi-daemon/examples/ssh.service ]] &amp;&amp; \</span><br><span class="line">	cp &quot;$&#123;SDCARD&#125;&quot;/usr/share/doc/avahi-daemon/examples/ssh.service &quot;$&#123;SDCARD&#125;&quot;/etc/avahi/services/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">nsswitch settings <span class="keyword">for</span> sane DNS behavior: remove resolve, assure libnss-myhostname support</span></span><br><span class="line">	sed &quot;s/hosts\:.*/hosts:          files mymachines dns myhostname/g&quot; -i &quot;$&#123;SDCARD&#125;&quot;/etc/nsswitch.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">build logo <span class="keyword">in</span> any <span class="keyword">case</span></span></span><br><span class="line">	boot_logo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash"><span class="built_in">disable</span> MOTD <span class="keyword">for</span> first boot - we want as clean 1st run as possible</span></span><br><span class="line">	chmod -x &quot;$&#123;SDCARD&#125;&quot;/etc/update-motd.d/*</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install_rclocal()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	if [[ $BURN_IMAGE == yes ]]; then</span><br><span class="line"></span><br><span class="line">		cat &lt;&lt;-EOF &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/rc.local</span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">!/bin/sh -e</span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">		<span class="comment"># rc.local</span></span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">		<span class="comment"># This script is executed at the end of each multiuser runlevel.</span></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">Make sure that the script will <span class="string">&quot;exit 0&quot;</span> on success or any other</span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">value on error.</span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">		<span class="comment"># In order to enable or disable this script just change the execution</span></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">bits.</span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">		<span class="comment"># By default this script does nothing.</span></span></span><br><span class="line"></span><br><span class="line">		burn_to_emmc</span><br><span class="line"></span><br><span class="line">		exit 0</span><br><span class="line">		EOF</span><br><span class="line"></span><br><span class="line">	else</span><br><span class="line"></span><br><span class="line">		cat &lt;&lt;-EOF &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/rc.local</span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash">!/bin/sh -e</span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">		<span class="comment"># rc.local</span></span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">		<span class="comment"># This script is executed at the end of each multiuser runlevel.</span></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">Make sure that the script will <span class="string">&quot;exit 0&quot;</span> on success or any other</span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">value on error.</span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">		<span class="comment"># In order to enable or disable this script just change the execution</span></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">bits.</span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">		<span class="comment"># By default this script does nothing.</span></span></span><br><span class="line"></span><br><span class="line">		exit 0</span><br><span class="line">		EOF</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line">	chmod +x &quot;$&#123;SDCARD&#125;&quot;/etc/rc.local</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install_distribution_specific()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	display_alert &quot;Applying distribution specific tweaks for&quot; &quot;$RELEASE&quot; &quot;info&quot;</span><br><span class="line"></span><br><span class="line">	case $RELEASE in</span><br><span class="line"></span><br><span class="line">	xenial)</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">remove legal info from Ubuntu</span></span><br><span class="line">			[[ -f &quot;$&#123;SDCARD&#125;&quot;/etc/legal ]] &amp;&amp; rm &quot;$&#123;SDCARD&#125;&quot;/etc/legal</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">ureadahead needs kernel tracing options that AFAIK are present only <span class="keyword">in</span> mainline. <span class="built_in">disable</span></span></span><br><span class="line">			chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c \</span><br><span class="line">			&quot;systemctl --no-reload mask ondemand.service ureadahead.service &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">			chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c \</span><br><span class="line">			&quot;systemctl --no-reload mask setserial.service etc-setserial.service &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line"></span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">	stretch|buster|sid)</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">remove doubled <span class="built_in">uname</span> from motd</span></span><br><span class="line">			[[ -f &quot;$&#123;SDCARD&#125;&quot;/etc/update-motd.d/10-uname ]] &amp;&amp; rm &quot;$&#123;SDCARD&#125;&quot;/etc/update-motd.d/10-uname</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">rc.local is not existing but one might need it</span></span><br><span class="line">			install_rclocal</span><br><span class="line"></span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">	bullseye)</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">remove doubled <span class="built_in">uname</span> from motd</span></span><br><span class="line">			[[ -f &quot;$&#123;SDCARD&#125;&quot;/etc/update-motd.d/10-uname ]] &amp;&amp; rm &quot;$&#123;SDCARD&#125;&quot;/etc/update-motd.d/10-uname</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">rc.local is not existing but one might need it</span></span><br><span class="line">			install_rclocal</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">fix missing versioning</span></span><br><span class="line">			[[ $(grep -L &quot;VERSION_ID=&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/os-release) ]] &amp;&amp; echo &#x27;VERSION_ID=&quot;11&quot;&#x27; &gt;&gt; &quot;$&#123;SDCARD&#125;&quot;/etc/os-release</span><br><span class="line">			[[ $(grep -L &quot;VERSION=&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/os-release) ]] &amp;&amp; echo &#x27;VERSION=&quot;11 (bullseye)&quot;&#x27; &gt;&gt; &quot;$&#123;SDCARD&#125;&quot;/etc/os-release</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		;;</span><br><span class="line">	</span><br><span class="line">	bookworm)</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">remove doubled <span class="built_in">uname</span> from motd</span></span><br><span class="line">			[[ -f &quot;$&#123;SDCARD&#125;&quot;/etc/update-motd.d/10-uname ]] &amp;&amp; rm &quot;$&#123;SDCARD&#125;&quot;/etc/update-motd.d/10-uname</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">rc.local is not existing but one might need it</span></span><br><span class="line">			install_rclocal</span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">fix missing versioning</span></span><br><span class="line">			[[ $(grep -L &quot;VERSION_ID=&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/os-release) ]] &amp;&amp; echo &#x27;VERSION_ID=&quot;12&quot;&#x27; &gt;&gt; &quot;$&#123;SDCARD&#125;&quot;/etc/os-release</span><br><span class="line">			[[ $(grep -L &quot;VERSION=&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/os-release) ]] &amp;&amp; echo &#x27;VERSION=&quot;11 (bookworm)&quot;&#x27; &gt;&gt; &quot;$&#123;SDCARD&#125;&quot;/etc/os-release</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">remove security updates repository since it does not exists yet</span></span><br><span class="line">			sed &#x27;/security/ d&#x27; -i &quot;$&#123;SDCARD&#125;&quot;/etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">	bionic|focal|hirsute|impish|jammy)</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">by using default lz4 initrd compression leads to corruption, go back to proven method</span></span><br><span class="line">			sed -i &quot;s/^COMPRESS=.*/COMPRESS=gzip/&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/initramfs-tools/initramfs.conf</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">cleanup motd services and related files</span></span><br><span class="line">			chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl disable  motd-news.service &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">			chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl disable  motd-news.timer &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line"></span><br><span class="line">			rm -f &quot;$&#123;SDCARD&#125;&quot;/etc/update-motd.d/&#123;10-uname,10-help-text,50-motd-news,80-esm,80-livepatch,90-updates-available,91-release-upgrade,95-hwe-eol&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">remove motd news from motd.ubuntu.com</span></span><br><span class="line">			[[ -f &quot;$&#123;SDCARD&#125;&quot;/etc/default/motd-news ]] &amp;&amp; sed -i &quot;s/^ENABLED=.*/ENABLED=0/&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/default/motd-news</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">rc.local is not existing but one might need it</span></span><br><span class="line">			install_rclocal</span><br><span class="line"></span><br><span class="line">			if [ -d &quot;$&#123;SDCARD&#125;&quot;/etc/NetworkManager ]; then</span><br><span class="line">				local RENDERER=NetworkManager</span><br><span class="line">			else</span><br><span class="line">				local RENDERER=networkd</span><br><span class="line">			fi</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">Basic Netplan config. Let NetworkManager/networkd manage all devices on this system</span></span><br><span class="line">			[[ -d &quot;$&#123;SDCARD&#125;&quot;/etc/netplan ]] &amp;&amp; cat &lt;&lt;-EOF &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/netplan/orangepi-default.yaml</span><br><span class="line">			network:</span><br><span class="line">			  version: 2</span><br><span class="line">			  renderer: $RENDERER</span><br><span class="line">			EOF</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">DNS fix</span></span><br><span class="line">			if [ -n &quot;$NAMESERVER&quot; ]; then</span><br><span class="line">				sed -i &quot;s/#DNS=.*/DNS=$NAMESERVER/g&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/systemd/resolved.conf</span><br><span class="line">			fi</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">Journal service adjustements</span></span><br><span class="line">			sed -i &quot;s/#Storage=.*/Storage=volatile/g&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/systemd/journald.conf</span><br><span class="line">			sed -i &quot;s/#Compress=.*/Compress=yes/g&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/systemd/journald.conf</span><br><span class="line">			sed -i &quot;s/#RateLimitIntervalSec=.*/RateLimitIntervalSec=30s/g&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/systemd/journald.conf</span><br><span class="line">			sed -i &quot;s/#RateLimitBurst=.*/RateLimitBurst=10000/g&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/systemd/journald.conf</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash">Chrony temporal fix https://bugs.launchpad.net/ubuntu/+<span class="built_in">source</span>/chrony/+bug/1878005</span></span><br><span class="line">			sed -i &#x27;/DAEMON_OPTS=/s/&quot;-F -1&quot;/&quot;-F 0&quot;/&#x27; &quot;$&#123;SDCARD&#125;&quot;/etc/default/chrony</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">			# </span><span class="language-bash"><span class="built_in">disable</span> conflicting services</span></span><br><span class="line">			chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl --no-reload mask ondemand.service &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line"></span><br><span class="line">		;;</span><br><span class="line"></span><br><span class="line">	esac</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">use list modules INITRAMFS</span></span><br><span class="line">	if [ -f &quot;$&#123;EXTER&#125;&quot;/config/modules/&quot;$&#123;MODULES_INITRD&#125;&quot; ]; then</span><br><span class="line">		display_alert &quot;Use file list modules INITRAMFS&quot; &quot;$&#123;MODULES_INITRD&#125;&quot;</span><br><span class="line">		sed -i &quot;s/^MODULES=.*/MODULES=list/&quot; &quot;$&#123;SDCARD&#125;&quot;/etc/initramfs-tools/initramfs.conf</span><br><span class="line">		cat &quot;$&#123;EXTER&#125;&quot;/config/modules/&quot;$&#123;MODULES_INITRD&#125;&quot; &gt;&gt; &quot;$&#123;SDCARD&#125;&quot;/etc/initramfs-tools/modules</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">post_debootstrap_tweaks()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">remove service start blockers and QEMU binary</span></span><br><span class="line">	rm -f &quot;$&#123;SDCARD&#125;&quot;/sbin/initctl &quot;$&#123;SDCARD&#125;&quot;/sbin/start-stop-daemon</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;dpkg-divert --quiet --local --rename --remove /sbin/initctl&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;dpkg-divert --quiet --local --rename --remove /sbin/start-stop-daemon&quot;</span><br><span class="line">	rm -f &quot;$&#123;SDCARD&#125;&quot;/usr/sbin/policy-rc.d &quot;$&#123;SDCARD&#125;/usr/bin/$&#123;QEMU_BINARY&#125;&quot;</span><br><span class="line"></span><br><span class="line">	call_extension_method &quot;post_post_debootstrap_tweaks&quot; &quot;config_post_debootstrap_tweaks&quot; &lt;&lt; &#x27;POST_POST_DEBOOTSTRAP_TWEAKS&#x27;</span><br><span class="line">*run after removing diversions and qemu with chroot unmounted*</span><br><span class="line">Last chance to touch the `$&#123;SDCARD&#125;` filesystem before it is copied to the final media.</span><br><span class="line">It is too late to run any chrooted commands, since the supporting filesystems are already unmounted.</span><br><span class="line">POST_POST_DEBOOTSTRAP_TWEAKS</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">on_chroot()</span><br><span class="line">&#123;</span><br><span class="line">	if [ &quot;$SETFCAP&quot; != &quot;1&quot; ]; then</span><br><span class="line">		export CAPSH_ARG=&quot;--drop=cap_setfcap&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	capsh $CAPSH_ARG &quot;--chroot=$&#123;ROOTFS_DIR&#125;/&quot; -- -e &quot;$@&quot;</span><br><span class="line">&#125;</span><br><span class="line">export -f on_chroot</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">disable</span>=SC2119</span></span><br><span class="line">run_sub_stage()</span><br><span class="line">&#123;</span><br><span class="line">	log &quot;Begin $&#123;SUB_STAGE_DIR&#125;&quot;</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">pushd</span> <span class="string">&quot;<span class="variable">$&#123;SUB_STAGE_DIR&#125;</span>&quot;</span> &gt; /dev/null</span></span><br><span class="line">	cd $&#123;SUB_STAGE_DIR&#125;</span><br><span class="line"></span><br><span class="line">	for i in &#123;00..99&#125;; do</span><br><span class="line">		if [ -f &quot;$&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-debconf&quot; ]; then</span><br><span class="line">			display_alert &quot;Begin $&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-debconf&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line">			on_chroot &lt;&lt; EOF</span><br><span class="line">debconf-set-selections &lt;&lt;SELEOF</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="built_in">cat</span> <span class="string">&quot;<span class="variable">$&#123;i&#125;</span>-debconf&quot;</span>)</span></span><br><span class="line">SELEOF</span><br><span class="line">EOF</span><br><span class="line">			display_alert &quot;End $&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-debconf&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line">		fi</span><br><span class="line">		if [ -f &quot;$&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-packages-nr&quot; ]; then</span><br><span class="line">			display_alert &quot;Begin $&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-packages-nr&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line">			PACKAGES=&quot;$(sed -f &quot;$&#123;EXTER&#125;/packages/raspi/scripts/remove-comments.sed&quot; &lt; &quot;$&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-packages-nr&quot;)&quot;</span><br><span class="line">			if [ -n &quot;$PACKAGES&quot; ]; then</span><br><span class="line">				on_chroot &lt;&lt; EOF</span><br><span class="line">apt-get -o Acquire::Retries=3 install --no-install-recommends -y $PACKAGES</span><br><span class="line">EOF</span><br><span class="line">			fi</span><br><span class="line">			display_alert &quot;End $&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-packages-nr&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line">		fi</span><br><span class="line">		if [ -f &quot;$&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-packages&quot; ]; then</span><br><span class="line">			display_alert &quot;Begin $&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-packages&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line">			PACKAGES=&quot;$(sed -f &quot;$&#123;EXTER&#125;/packages/raspi/scripts/remove-comments.sed&quot; &lt; &quot;$&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-packages&quot;)&quot;</span><br><span class="line">			if [ -n &quot;$PACKAGES&quot; ]; then</span><br><span class="line">				on_chroot &lt;&lt; EOF</span><br><span class="line">apt-get -o Acquire::Retries=3 install -y $PACKAGES</span><br><span class="line">EOF</span><br><span class="line">			fi</span><br><span class="line">			display_alert &quot;End $&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-packages&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line">                fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">               <span class="keyword">if</span> [ -d <span class="string">&quot;<span class="variable">$&#123;SUB_STAGE_DIR&#125;</span>/<span class="variable">$&#123;i&#125;</span>-patches&quot;</span> ]; <span class="keyword">then</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       <span class="built_in">log</span> <span class="string">&quot;Begin <span class="variable">$&#123;SUB_STAGE_DIR&#125;</span>/<span class="variable">$&#123;i&#125;</span>-patches&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       <span class="built_in">pushd</span> <span class="string">&quot;<span class="variable">$&#123;STAGE_WORK_DIR&#125;</span>&quot;</span> &gt; /dev/null</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       <span class="comment">#cd $&#123;STAGE_WORK_DIR&#125;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#                        QUILT_PATCHES=&quot;$&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-patches&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       SUB_STAGE_QUILT_PATCH_DIR=<span class="string">&quot;<span class="subst">$(basename <span class="string">&quot;<span class="variable">$SUB_STAGE_DIR</span>&quot;</span>)</span>-pc&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       <span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="variable">$STAGE_WORK_DIR</span>/<span class="variable">$SUB_STAGE_QUILT_PATCH_DIR</span>&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       <span class="built_in">ln</span> -snf <span class="string">&quot;<span class="variable">$STAGE_WORK_DIR</span>/<span class="variable">$SUB_STAGE_QUILT_PATCH_DIR</span>&quot;</span> .pc</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       <span class="built_in">ln</span> -snfv <span class="string">&quot;<span class="variable">$&#123;ROOTFS_DIR&#125;</span>&quot;</span> <span class="variable">$&#123;STAGE_WORK_DIR&#125;</span>/rootfs</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       quilt upgrade</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       <span class="keyword">if</span> [ -e <span class="string">&quot;<span class="variable">$&#123;SUB_STAGE_DIR&#125;</span>/<span class="variable">$&#123;i&#125;</span>-patches/EDIT&quot;</span> ]; <span class="keyword">then</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                               <span class="built_in">echo</span> <span class="string">&quot;Dropping into bash to edit patches...&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                               bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       <span class="keyword">fi</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       RC=0</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       quilt push -a || RC=$?</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$RC</span>&quot;</span> <span class="keyword">in</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                               0|2)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                                       ;;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                               *)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                                       <span class="literal">false</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                                       ;;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       <span class="keyword">esac</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       <span class="comment">#popd &gt; /dev/null</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">			<span class="built_in">cd</span> -</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                       <span class="built_in">log</span> <span class="string">&quot;End <span class="variable">$&#123;SUB_STAGE_DIR&#125;</span>/<span class="variable">$&#123;i&#125;</span>-patches&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">               <span class="keyword">fi</span></span></span><br><span class="line">		if [ -x $&#123;i&#125;-run.sh ]; then</span><br><span class="line">			display_alert &quot;Begin $&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-run.sh&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line">			./$&#123;i&#125;-run.sh</span><br><span class="line">			display_alert &quot;End $&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-run.sh&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line">		fi</span><br><span class="line">		if [ -f $&#123;i&#125;-run-chroot.sh ]; then</span><br><span class="line">			display_alert &quot;Begin $&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-run-chroot.sh&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line">			on_chroot &lt; $&#123;i&#125;-run-chroot.sh</span><br><span class="line">			display_alert &quot;End $&#123;SUB_STAGE_DIR&#125;/$&#123;i&#125;-run-chroot.sh&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line">		fi</span><br><span class="line">	done</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">popd</span> &gt; /dev/null</span></span><br><span class="line">	log &quot;End $&#123;SUB_STAGE_DIR&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run_stage()&#123;</span><br><span class="line">	rm -rf &quot;$&#123;SRC&#125;&quot;/output/raspi</span><br><span class="line">	[[ ! -d &quot;$&#123;SRC&#125;&quot;/output/raspi ]] &amp;&amp; mkdir -p &quot;$&#123;SRC&#125;&quot;/output/raspi</span><br><span class="line"></span><br><span class="line">	STAGE_WORK_DIR=&quot;$&#123;SRC&#125;/output/raspi&quot;</span><br><span class="line"></span><br><span class="line">	if [ ! -f $&#123;STAGE_DIR&#125;/SKIP ]; then</span><br><span class="line">		if [ -x $&#123;STAGE_DIR&#125;/prerun.sh ]; then</span><br><span class="line">			display_alert &quot;Begin $&#123;STAGE_DIR&#125;/prerun.sh&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line">			source $&#123;STAGE_DIR&#125;/prerun.sh</span><br><span class="line">			display_alert &quot;End $&#123;STAGE_DIR&#125;/prerun.sh&quot; &quot;&quot; &quot;info&quot;</span><br><span class="line">		fi</span><br><span class="line"></span><br><span class="line">		for SUB_STAGE_DIR in &quot;$&#123;STAGE_DIR&#125;&quot;/*; do</span><br><span class="line">			if [ -d &quot;$&#123;SUB_STAGE_DIR&#125;&quot; ] &amp;&amp; [ ! -f &quot;$&#123;SUB_STAGE_DIR&#125;/SKIP&quot; ]; then</span><br><span class="line">				run_sub_stage</span><br><span class="line">			fi</span><br><span class="line">		done</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log ()</span><br><span class="line">&#123;</span><br><span class="line">	date +&quot;[%T] $*&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install_opi_specific()</span><br><span class="line">&#123;</span><br><span class="line">	cd $SRC</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">install u-boot</span></span><br><span class="line">	UBOOT_VER=$(dpkg --info &quot;$&#123;InstallingDEB_STORAGE&#125;/u-boot/$&#123;CHOSEN_UBOOT&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot; | grep Descr | awk &#x27;&#123;print $(NF)&#125;&#x27;)</span><br><span class="line">	install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/u-boot/$&#123;CHOSEN_UBOOT&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">install kernel</span></span><br><span class="line">	VER=$(dpkg --info &quot;$&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KERNEL&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot; | awk -F&quot;-&quot; &#x27;/Source:/&#123;print $2&#125;&#x27;)</span><br><span class="line">	install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KERNEL&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot;</span><br><span class="line">	if [[ -f $&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KERNEL/image/dtb&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb ]]; then</span><br><span class="line">		install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KERNEL/image/dtb&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot;</span><br><span class="line">	fi</span><br><span class="line">	if [[ $INSTALL_HEADERS == yes ]]; then</span><br><span class="line">		install_deb_chroot &quot;$&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KERNEL/image/headers&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot;</span><br><span class="line">	else</span><br><span class="line">		cp &quot;$&#123;DEB_STORAGE&#125;/$&#123;CHOSEN_KERNEL/image/headers&#125;_$&#123;REVISION&#125;_$&#123;ARCH&#125;.deb&quot; &quot;$&#123;SDCARD&#125;&quot;/opt/</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	dpkg_install_deb_chroot &quot;$EXTER/packages/raspi/orangepi/debs/raspi-config_20230214_all.deb&quot;</span><br><span class="line"></span><br><span class="line">	case $&#123;BOARDFAMILY&#125; in</span><br><span class="line">		&quot;rockchip-rk356x&quot;)</span><br><span class="line">			rk356x_gpu_vpu_tweaks_for_raspios</span><br><span class="line">	esac</span><br><span class="line"></span><br><span class="line">	[[ ! -d &quot;$&#123;SDCARD&#125;/lib/firmware&quot; ]] &amp;&amp; mkdir -p &quot;$&#123;SDCARD&#125;/lib/firmware&quot;</span><br><span class="line">	cp -rfa $&#123;EXTER&#125;/cache/sources/orangepi-firmware-git/* $&#123;SDCARD&#125;/lib/firmware/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">NOTE: this needs to be executed before family_tweaks</span></span><br><span class="line">	local bootscript_src=$&#123;BOOTSCRIPT%%:*&#125;</span><br><span class="line">	local bootscript_dst=$&#123;BOOTSCRIPT##*:&#125;</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$&#123;BOOTCONFIG&#125;&quot; != &quot;none&quot; ]]; then</span><br><span class="line">		if [ -f &quot;$&#123;USERPATCHES_PATH&#125;/bootscripts/$&#123;bootscript_src&#125;&quot; ]; then</span><br><span class="line">			cp &quot;$&#123;USERPATCHES_PATH&#125;/bootscripts/$&#123;bootscript_src&#125;&quot; &quot;$&#123;SDCARD&#125;/boot/$&#123;bootscript_dst&#125;&quot;</span><br><span class="line">		else</span><br><span class="line">			cp &quot;$&#123;EXTER&#125;/config/bootscripts/$&#123;bootscript_src&#125;&quot; &quot;$&#123;SDCARD&#125;/boot/$&#123;bootscript_dst&#125;&quot;</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ -n $BOOTENV_FILE ]]; then</span><br><span class="line">		if [[ -f $USERPATCHES_PATH/bootenv/$BOOTENV_FILE ]]; then</span><br><span class="line">			cp &quot;$USERPATCHES_PATH/bootenv/$&#123;BOOTENV_FILE&#125;&quot; &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt</span><br><span class="line">		elif [[ -f $EXTER/config/bootenv/$BOOTENV_FILE ]]; then</span><br><span class="line">			cp &quot;$&#123;EXTER&#125;/config/bootenv/$&#123;BOOTENV_FILE&#125;&quot; &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	[[ -n $OVERLAY_PREFIX &amp;&amp; -f &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt &amp;&amp; ($BRANCH =~ current|next || $BOARDFAMILY =~ &quot;rockchip-rk3588&quot;|&quot;rockchip-rk356x&quot;) ]] &amp;&amp; \</span><br><span class="line">		echo &quot;overlay_prefix=$OVERLAY_PREFIX&quot; &gt;&gt; &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt</span><br><span class="line"></span><br><span class="line">	[[ -n $DEFAULT_OVERLAYS &amp;&amp; -f &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt &amp;&amp; ($BRANCH =~ current|next || $BOARDFAMILY =~ &quot;rockchip-rk3588&quot;|&quot;rockchip-rk356x&quot;) ]] &amp;&amp; \</span><br><span class="line">		echo &quot;overlays=$&#123;DEFAULT_OVERLAYS//,/ &#125;&quot; &gt;&gt; &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt</span><br><span class="line"></span><br><span class="line">	[[ -n $BOOT_FDT_FILE &amp;&amp; -f &quot;$&#123;SDCARD&#125;&quot;/boot/orangepiEnv.txt ]] &amp;&amp; \</span><br><span class="line">		echo &quot;fdtfile=$&#123;BOOT_FDT_FILE&#125;&quot; &gt;&gt; &quot;$&#123;SDCARD&#125;/boot/orangepiEnv.txt&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">install initial asound.state <span class="keyword">if</span> defined</span></span><br><span class="line">	mkdir -p &quot;$&#123;SDCARD&#125;&quot;/var/lib/alsa/</span><br><span class="line">	[[ -n $ASOUND_STATE ]] &amp;&amp; cp &quot;$&#123;EXTER&#125;/packages/blobs/asound.state/$&#123;ASOUND_STATE&#125;&quot; &quot;$&#123;SDCARD&#125;&quot;/var/lib/alsa/asound.state</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">create modules file</span></span><br><span class="line">	local modules=MODULES_$&#123;BRANCH^^&#125;</span><br><span class="line">	if [[ -n &quot;$&#123;!modules&#125;&quot; ]]; then</span><br><span class="line">		tr &#x27; &#x27; &#x27;\n&#x27; &lt;&lt;&lt; &quot;$&#123;!modules&#125;&quot; &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/modules</span><br><span class="line">	elif [[ -n &quot;$&#123;MODULES&#125;&quot; ]]; then</span><br><span class="line">		tr &#x27; &#x27; &#x27;\n&#x27; &lt;&lt;&lt; &quot;$&#123;MODULES&#125;&quot; &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/modules</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">create blacklist files</span></span><br><span class="line">	local blacklist=MODULES_BLACKLIST_$&#123;BRANCH^^&#125;</span><br><span class="line">	if [[ -n &quot;$&#123;!blacklist&#125;&quot; ]]; then</span><br><span class="line">		tr &#x27; &#x27; &#x27;\n&#x27; &lt;&lt;&lt; &quot;$&#123;!blacklist&#125;&quot; | sed -e &#x27;s/^/blacklist /&#x27; &gt; &quot;$&#123;SDCARD&#125;/etc/modprobe.d/blacklist-$&#123;BOARD&#125;.conf&quot;</span><br><span class="line">	elif [[ -n &quot;$&#123;MODULES_BLACKLIST&#125;&quot; ]]; then</span><br><span class="line">		tr &#x27; &#x27; &#x27;\n&#x27; &lt;&lt;&lt; &quot;$&#123;MODULES_BLACKLIST&#125;&quot; | sed -e &#x27;s/^/blacklist /&#x27; &gt; &quot;$&#123;SDCARD&#125;/etc/modprobe.d/blacklist-$&#123;BOARD&#125;.conf&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	cat &lt;&lt;-EOF &gt; &quot;$&#123;SDCARD&#125;&quot;/etc/orangepi-release</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">PLEASE DO NOT EDIT THIS FILE</span></span><br><span class="line">	BOARD=$&#123;BOARD&#125;</span><br><span class="line">	BOARD_NAME=&quot;$BOARD_NAME&quot;</span><br><span class="line">	BOARDFAMILY=$&#123;BOARDFAMILY&#125;</span><br><span class="line">	BUILD_REPOSITORY_URL=$&#123;BUILD_REPOSITORY_URL&#125;</span><br><span class="line">	BUILD_REPOSITORY_COMMIT=$&#123;BUILD_REPOSITORY_COMMIT&#125;</span><br><span class="line">	DISTRIBUTION_CODENAME=$&#123;RELEASE&#125;</span><br><span class="line">	DISTRIBUTION_STATUS=$&#123;DISTRIBUTION_STATUS&#125;</span><br><span class="line">	VERSION=$&#123;REVISION&#125;</span><br><span class="line">	LINUXFAMILY=$&#123;LINUXFAMILY&#125;</span><br><span class="line">	ARCH=$&#123;ARCHITECTURE&#125;</span><br><span class="line">	IMAGE_TYPE=$IMAGE_TYPE</span><br><span class="line">	BOARD_TYPE=$BOARD_TYPE</span><br><span class="line">	INITRD_ARCH=$&#123;INITRD_ARCH&#125;</span><br><span class="line">	KERNEL_IMAGE_TYPE=$&#123;KERNEL_IMAGE_TYPE&#125;</span><br><span class="line">	BRANCH=$&#123;BRANCH&#125;</span><br><span class="line">	EOF</span><br><span class="line"></span><br><span class="line">	install -d &quot;$&#123;SDCARD&#125;/etc/initramfs/post-update.d/&quot;</span><br><span class="line">	install -m 755 &quot;$&#123;EXTER&#125;/packages/bsp/common/etc/initramfs/post-update.d/99-uboot&quot; &quot;$&#123;SDCARD&#125;/etc/initramfs/post-update.d/&quot;</span><br><span class="line"></span><br><span class="line">	install -m 755 &quot;$&#123;EXTER&#125;/packages/raspi/orangepi/common/files/hciattach_opi&quot; &quot;$&#123;SDCARD&#125;/usr/bin/&quot;</span><br><span class="line">	install -m 755 &quot;$&#123;EXTER&#125;/packages/raspi/orangepi/common/files/brcm_patchram_plus&quot; &quot;$&#123;SDCARD&#125;/usr/bin/&quot;</span><br><span class="line"></span><br><span class="line">	install -d &quot;$&#123;SDCARD&#125;/usr/lib/orangepi/&quot;</span><br><span class="line">	install -m 755 &quot;$&#123;EXTER&#125;/packages/raspi/orangepi/common/files/orangepi-hardware-optimization&quot; &quot;$&#123;SDCARD&#125;/usr/lib/orangepi/&quot;</span><br><span class="line">	install -m 755 &quot;$&#123;EXTER&#125;/packages/raspi/orangepi/common/files/orangepi-hardware-optimize.service&quot; &quot;$&#123;SDCARD&#125;/usr/lib/systemd/system/&quot;</span><br><span class="line">	chroot &quot;$&#123;SDCARD&#125;&quot; /bin/bash -c &quot;systemctl --no-reload enable orangepi-hardware-optimize.service &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line"></span><br><span class="line">	install_wiringop</span><br><span class="line"></span><br><span class="line">	rm $SDCARD/root/*.deb &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install_raspi_specific()</span><br><span class="line">&#123;</span><br><span class="line">	export TARGET_HOSTNAME=$&#123;TARGET_HOSTNAME:-raspberrypi&#125;</span><br><span class="line">	export FIRST_USER_NAME=$&#123;FIRST_USER_NAME:-pi&#125;</span><br><span class="line">	export FIRST_USER_PASS</span><br><span class="line">	export DISABLE_FIRST_BOOT_USER_RENAME=$&#123;DISABLE_FIRST_BOOT_USER_RENAME:-0&#125;</span><br><span class="line">	export WPA_ESSID</span><br><span class="line">	export WPA_PASSWORD</span><br><span class="line">	export WPA_COUNTRY</span><br><span class="line">	export ENABLE_SSH=&quot;$&#123;ENABLE_SSH:-0&#125;&quot;</span><br><span class="line">	export PUBKEY_ONLY_SSH=&quot;$&#123;PUBKEY_ONLY_SSH:-0&#125;&quot;</span><br><span class="line"></span><br><span class="line">	export LOCALE_DEFAULT=&quot;$&#123;LOCALE_DEFAULT:-en_GB.UTF-8&#125;&quot;</span><br><span class="line"></span><br><span class="line">	export KEYBOARD_KEYMAP=&quot;$&#123;KEYBOARD_KEYMAP:-gb&#125;&quot;</span><br><span class="line">	export KEYBOARD_LAYOUT=&quot;$&#123;KEYBOARD_LAYOUT:-English (UK)&#125;&quot;</span><br><span class="line"></span><br><span class="line">	export TIMEZONE_DEFAULT=&quot;$&#123;TIMEZONE_DEFAULT:-Europe/London&#125;&quot;</span><br><span class="line"></span><br><span class="line">	export PUBKEY_SSH_FIRST_USER</span><br><span class="line"></span><br><span class="line">	export APT_PROXY</span><br><span class="line"></span><br><span class="line">	export STAGE</span><br><span class="line">	export STAGE_DIR</span><br><span class="line">	export STAGE_WORK_DIR</span><br><span class="line">	export PREV_STAGE</span><br><span class="line">	export PREV_STAGE_DIR</span><br><span class="line">	export ROOTFS_DIR=$&#123;SDCARD&#125;</span><br><span class="line">	export PREV_ROOTFS_DIR</span><br><span class="line">	export IMG_SUFFIX</span><br><span class="line">	export NOOBS_NAME</span><br><span class="line">	export NOOBS_DESCRIPTION</span><br><span class="line">	export EXPORT_DIR</span><br><span class="line">	export EXPORT_ROOTFS_DIR</span><br><span class="line"></span><br><span class="line">	export QUILT_PATCHES</span><br><span class="line">	export QUILT_NO_DIFF_INDEX=1</span><br><span class="line">	export QUILT_NO_DIFF_TIMESTAMPS=1</span><br><span class="line">	export QUILT_REFRESH_ARGS=&quot;-p ab&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">check username is valid</span></span><br><span class="line">	if [[ ! &quot;$FIRST_USER_NAME&quot; =~ ^[a-z][-a-z0-9_]*$ ]]; then</span><br><span class="line">		echo &quot;Invalid FIRST_USER_NAME: $FIRST_USER_NAME&quot;</span><br><span class="line">		exit 1</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$DISABLE_FIRST_BOOT_USER_RENAME&quot; == &quot;1&quot; ]] &amp;&amp; [ -z &quot;$&#123;FIRST_USER_PASS&#125;&quot; ]; then</span><br><span class="line">		echo &quot;To disable user rename on first boot, FIRST_USER_PASS needs to be set&quot;</span><br><span class="line">		echo &quot;Not setting FIRST_USER_PASS makes your system vulnerable and open to cyberattacks&quot;</span><br><span class="line">		exit 1</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$DISABLE_FIRST_BOOT_USER_RENAME&quot; == &quot;1&quot; ]]; then</span><br><span class="line">		echo &quot;User rename on the first boot is disabled&quot;</span><br><span class="line">		echo &quot;Be advised of the security risks linked to shipping a device with default username/password set.&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ -n &quot;$&#123;APT_PROXY&#125;&quot; ]] &amp;&amp; ! curl --silent &quot;$&#123;APT_PROXY&#125;&quot; &gt;/dev/null ; then</span><br><span class="line">		echo &quot;Could not reach APT_PROXY server: $&#123;APT_PROXY&#125;&quot;</span><br><span class="line">		exit 1</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ -n &quot;$&#123;WPA_PASSWORD&#125;&quot; &amp;&amp; $&#123;#WPA_PASSWORD&#125; -lt 8 || $&#123;#WPA_PASSWORD&#125; -gt 63  ]] ; then</span><br><span class="line">		echo &quot;WPA_PASSWORD&quot; must be between 8 and 63 characters</span><br><span class="line">		exit 1</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [[ &quot;$&#123;PUBKEY_ONLY_SSH&#125;&quot; = &quot;1&quot; &amp;&amp; -z &quot;$&#123;PUBKEY_SSH_FIRST_USER&#125;&quot; ]]; then</span><br><span class="line">		echo &quot;Must set &#x27;PUBKEY_SSH_FIRST_USER&#x27; to a valid SSH public key if using PUBKEY_ONLY_SSH&quot;</span><br><span class="line">		exit 1</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	RASPI_DIR=&quot;$&#123;EXTER&#125;/packages/raspi&quot;</span><br><span class="line"></span><br><span class="line">	if [[ $&#123;BUILD_DESKTOP&#125; == &quot;yes&quot; ]]; then</span><br><span class="line">		rm -r $&#123;RASPI_DIR&#125;/stage3/SKIP $&#123;RASPI_DIR&#125;/stage4/SKIP $&#123;RASPI_DIR&#125;/stage5/SKIP 2&gt;/dev/null</span><br><span class="line">		touch $&#123;RASPI_DIR&#125;/stage5/SKIP</span><br><span class="line">	else</span><br><span class="line">		rm -r $&#123;RASPI_DIR&#125;/stage1/SKIP $&#123;RASPI_DIR&#125;/stage2/SKIP 2&gt;/dev/null</span><br><span class="line">		touch $&#123;RASPI_DIR&#125;/stage3/SKIP $&#123;RASPI_DIR&#125;/stage4/SKIP $&#123;RASPI_DIR&#125;/stage5/SKIP</span><br><span class="line">		export FIRST_USER_PASS=&quot;pi&quot;</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	STAGE_LIST=$&#123;RASPI_DIR&#125;/stage*</span><br><span class="line"></span><br><span class="line">	for STAGE_DIR in $STAGE_LIST; do</span><br><span class="line">		STAGE_DIR=$(realpath &quot;$&#123;STAGE_DIR&#125;&quot;)</span><br><span class="line">		run_stage</span><br><span class="line">	done</span><br><span class="line"></span><br><span class="line">	STAGE_DIR=$&#123;RASPI_DIR&#125;/export-image</span><br><span class="line">	run_stage</span><br><span class="line"></span><br><span class="line">	rm -rf $&#123;SDCARD&#125;/boot/*</span><br><span class="line">	rm -rf $&#123;SDCARD&#125;/lib/firmware</span><br><span class="line">	rm -rf $&#123;SDCARD&#125;/lib/modules/*</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="7-整理的包"><a href="#7-整理的包" class="headerlink" title="7 整理的包"></a>7 整理的包</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">camera-engine-rkaiq_arm64.deb</span><br><span class="line">librga2_2.2.0-1_arm64.deb</span><br><span class="line">librga-dev_2.2.0-1_arm64.deb</span><br><span class="line">librockchip-mpp1_1.5.0-1_arm64.deb</span><br><span class="line">librockchip-mpp-dev_1.5.0-1_arm64.deb</span><br><span class="line">librockchip-vpu0_1.5.0-1_arm64.deb</span><br><span class="line">rockchip-mpp-demos_1.5.0-1_arm64.deb</span><br><span class="line">libmali-valhall-g610-g6p0-x11_1.9-1_arm64.deb</span><br><span class="line">gstreamer1.0-rockchip1_1.14-4_arm64.deb</span><br><span class="line">libgstreamer1.0-0_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">libgstreamer1.0-dev_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">gir1.2-gstreamer-1.0_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">gstreamer1.0-tools_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">libgstreamer-gl1.0-0_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">gir1.2-gst-plugins-base-1.0_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">gstreamer1.0-alsa_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">gstreamer1.0-plugins-base_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">gstreamer1.0-plugins-base-apps_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">gstreamer1.0-x_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">gstreamer1.0-gl_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">libgstreamer-plugins-base1.0-0_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">libgstreamer-plugins-base1.0-dev_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">gstreamer1.0-plugins-good_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">gstreamer1.0-pulseaudio_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">gstreamer1.0-gtk3_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">gstreamer1.0-qt5_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">libgstreamer-plugins-good1.0-0_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">libgstreamer-plugins-good1.0-dev_1.16.3-0ubuntu1.1_arm64.deb</span><br><span class="line">libdvbv5-0_1.18.0-2build1_arm64.deb</span><br><span class="line">dvb-tools_1.18.0-2build1_arm64.deb</span><br><span class="line">ir-keytable_1.18.0-2build1_arm64.deb</span><br><span class="line">libdvbv5-dev_1.18.0-2build1_arm64.deb</span><br><span class="line">libdvbv5-doc_1.18.0-2build1_all.deb</span><br><span class="line">libv4l-0_1.18.0-2build1_arm64.deb</span><br><span class="line">libv4l2rds0_1.18.0-2build1_arm64.deb</span><br><span class="line">libv4lconvert0_1.18.0-2build1_arm64.deb</span><br><span class="line">libv4l-dev_1.18.0-2build1_arm64.deb</span><br><span class="line">libv4l-rkmpp_1.4.0-1_arm64.deb</span><br><span class="line">v4l-utils_1.18.0-2build1_arm64.deb</span><br><span class="line">qv4l2_1.18.0-2build1_arm64.deb</span><br><span class="line">xserver-xorg-core_1.20.13-1ubuntu1~20.04.2_arm64.deb</span><br><span class="line">chromium-x11_91.0.4472.164_arm64.deb</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>香橙派构建脚本分析</category>
      </categories>
      <tags>
        <tag>瑞芯微脚本分析</tag>
      </tags>
  </entry>
  <entry>
    <title>9-1 在家学习记录</title>
    <url>/2023/09/18/9-1-%E5%9C%A8%E5%AE%B6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在Linux内核中，GPIO（通用输入&#x2F;输出）子系统存在两个版本，分别是新版本和旧版本。新版本的接口是基于描述符（descriptor-based）的，而旧版本的接口是基于整数（integer-based）的。为了保持兼容性，旧版本的接口仍然得到支持，但是在本期课程中我们建议使用新的接口。</p>
<p>新的GPIO子系统接口与设备树（Device Tree）结合使用。设备树是一种描述硬件设备信息的数据结构，它提供了一种统一的方式来描述系统中的硬件设备和资源。因此，如果没有设备树，就无法使用新的GPIO接口。</p>
<p>对于新旧GPIO子系统接口的区分，可以根据函数名的前缀进行判断。</p>
<ol>
<li>新的GPIO子系统接口：前缀为”gpiod_”<br>新的GPIO子系统接口的函数名以”gpiod_”作为前缀，例如”gpiod_set_value”。这些接口是基于描述符（descriptor-based）的。</li>
<li>旧的GPIO子系统接口：前缀为”gpio_”<br>旧的GPIO子系统接口的函数名以”gpio_”作为前缀，例如”gpio_set_value”。这些接口是基于整数（integer-based）的。</li>
</ol>
<p>对于新的GPIO子系统接口，它们的定义可以在<code>include/linux/gpio/consumer.h</code>头文件中找到。在新的GPIO子系统接口中，涉及到了一个名为<code>struct gpio_desc</code>的结构体，该结构体用于描述GPIO设备的属性和状态。</p>
<p>通过使用新的GPIO子系统接口，可以更加灵活地配置和控制GPIO设备，提供了更好的可扩展性和可移植性。</p>
<p>&#x2F;deiver&#x2F;gpio&#x2F;gpiolib.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpio_desc</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">gpio_device</span> <span class="title">gdev</span>;</span>    <span class="comment">// GPIO设备结构体</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> flags;        <span class="comment">// 标志位，用于表示不同的属性</span></span><br><span class="line">    <span class="comment">/* 标志位符号对应的位号 */</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> FLAG_REQUESTED 0        <span class="comment">// GPIO已请求</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> FLAG_IS_OUT 1           <span class="comment">// GPIO用作输出</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> FLAG_EXPORT 2           <span class="comment">// 受sysfs_lock保护的导出标志 </span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> FLAG_SYSFS 3            <span class="comment">// 通过/sys/class/gpio/control导出的标志</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> FLAG_ACTIVE_LOW 6       <span class="comment">// GPIO值为低电平时激活</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> FLAG_OPEN_DRAIN 7       <span class="comment">// GPIO为开漏类型</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> FLAG_OPEN_SOURCE 8      <span class="comment">// GPIO为开源类型</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> FLAG_USED_AS_IRQ 9      <span class="comment">// GPIO连接到中断请求（IRQ）</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> FLAG_IS_HOGGED 11       <span class="comment">// GPIO被独占占用</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> FLAG_TRANSITORY 12      <span class="comment">// GPIO在休眠或复位时可能失去值</span></span></span><br><span class="line">    <span class="comment">/* 连接标签 */</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *label;            <span class="comment">// GPIO的名称</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *name;             <span class="comment">// GPIO的名称</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpio_device</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> id;                             <span class="comment">// GPIO设备ID</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span>;</span>                 <span class="comment">// 对应的设备结构体指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> <span class="title">chrdev</span>;</span>                 <span class="comment">// 字符设备结构体</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">mockdev</span>;</span>             <span class="comment">// 模拟设备结构体指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">module</span> *<span class="title">owner</span>;</span>               <span class="comment">// 拥有该GPIO设备的内核模块指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">gpio_chip</span> *<span class="title">chip</span>;</span>             <span class="comment">// 对应的GPIO芯片结构体指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">gpio_desc</span> *<span class="title">descs</span>;</span>            <span class="comment">// GPIO描述符数组指针</span></span><br><span class="line">    <span class="type">int</span> base;                           <span class="comment">// GPIO编号的起始值</span></span><br><span class="line">    u16 ngpio;                          <span class="comment">// GPIO的数量</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *label;                  <span class="comment">// GPIO设备的标签</span></span><br><span class="line">    <span class="type">void</span> *data;                         <span class="comment">// 与GPIO设备相关的数据指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">list</span>;</span>              <span class="comment">// 用于将GPIO设备结构体连接到链表中</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_PINCTRL</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 如果启用了CONFIG_PINCTRL选项，GPIO控制器可以选择描述它们在SoC中服务的实际引脚范围。</span></span><br><span class="line"><span class="comment">     * 此信息将由pinctrl子系统用于配置相应的GPIO引脚。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">pin_ranges</span>;</span>        <span class="comment">// 描述GPIO控制器引脚范围的链表</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpio_chip</span> &#123;</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *label;                              <span class="comment">// GPIO芯片标签</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">gpio_device</span> <span class="title">gpiodev</span>;</span>                      <span class="comment">// GPIO设备</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">parent</span>;</span>                           <span class="comment">// 父设备指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">module</span> *<span class="title">owner</span>;</span>                            <span class="comment">// 拥有者模块指针</span></span><br><span class="line">    <span class="type">int</span> (*request)(<span class="keyword">struct</span> gpio_chip *chip, <span class="type">unsigned</span> offset);                 <span class="comment">// 请求GPIO</span></span><br><span class="line">    <span class="type">void</span> (*<span class="built_in">free</span>)(<span class="keyword">struct</span> gpio_chip *chip, <span class="type">unsigned</span> offset);                    <span class="comment">// 释放GPIO</span></span><br><span class="line">    <span class="type">int</span> (*get_direction)(<span class="keyword">struct</span> gpio_chip *chip, <span class="type">unsigned</span> offset);           <span class="comment">// 获取GPIO方向</span></span><br><span class="line">    <span class="type">int</span> (*direction_input)(<span class="keyword">struct</span> gpio_chip *chip, <span class="type">unsigned</span> offset);         <span class="comment">// 设置GPIO为输入</span></span><br><span class="line">    <span class="type">int</span> (*direction_output)(<span class="keyword">struct</span> gpio_chip *chip, <span class="type">unsigned</span> offset, <span class="type">int</span> value); <span class="comment">// 设置GPIO为输出</span></span><br><span class="line">    <span class="type">int</span> (*get)(<span class="keyword">struct</span> gpio_chip chip, <span class="type">unsigned</span> offset);                      <span class="comment">// 获取GPIO值</span></span><br><span class="line">    <span class="type">int</span> (*get_multiple)(<span class="keyword">struct</span> gpio_chip chip, <span class="type">unsigned</span> <span class="type">long</span> *mask, <span class="type">unsigned</span> <span class="type">long</span> *bits); <span class="comment">// 获取多个GPIO的值</span></span><br><span class="line">    <span class="type">void</span> (*<span class="built_in">set</span>)(<span class="keyword">struct</span> gpio_chip chip, <span class="type">unsigned</span> offset, <span class="type">int</span> value);          <span class="comment">// 设置GPIO值</span></span><br><span class="line">    <span class="type">void</span> (*set_multiple)(<span class="keyword">struct</span> gpio_chip chip, <span class="type">unsigned</span> <span class="type">long</span> mask, <span class="type">unsigned</span> <span class="type">long</span> *bits); <span class="comment">// 设置多个GPIO的值</span></span><br><span class="line">    <span class="type">int</span> (*set_config)(<span class="keyword">struct</span> gpio_chip *chip, <span class="type">unsigned</span> offset, <span class="type">unsigned</span> <span class="type">long</span> config); <span class="comment">// 设置GPIO配置 </span></span><br><span class="line">    <span class="type">int</span> (*to_irq)(<span class="keyword">struct</span> gpio_chip chip, <span class="type">unsigned</span> offset);                    <span class="comment">// 将GPIO转换为中断</span></span><br><span class="line">    <span class="type">void</span> (*dbg_show)(<span class="keyword">struct</span> seq_file *s, <span class="keyword">struct</span> gpio_chip chip);              <span class="comment">// 在调试信息中显示GPIO</span></span><br><span class="line">    <span class="type">int</span> base;                                     <span class="comment">// GPIO编号的基准值</span></span><br><span class="line">    u16 ngpio;                                    <span class="comment">// GPIO的数量</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *<span class="type">const</span> *names;                     <span class="comment">// GPIO的名称数组</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>





<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> gpio_desc *<span class="title function_">gpiod_get</span><span class="params">(<span class="keyword">struct</span> device *dev, <span class="type">const</span> <span class="type">char</span> *con_id, <span class="keyword">enum</span> gpiod_flags flags)</span>;</span><br><span class="line"><span class="keyword">struct</span> gpio_desc *<span class="title function_">gpiod_get_index</span><span class="params">(<span class="keyword">struct</span> device *dev, <span class="type">const</span> <span class="type">char</span> *con_id, <span class="type">unsigned</span> <span class="type">int</span> idx, <span class="keyword">enum</span> gpiod_flags flags)</span>;</span><br><span class="line"><span class="keyword">struct</span> gpio_desc *<span class="title function_">gpiod_get_optional</span><span class="params">(<span class="keyword">struct</span> device *dev, <span class="type">const</span> <span class="type">char</span> *con_id, <span class="keyword">enum</span> gpiod_flags flags)</span>;</span><br><span class="line"><span class="keyword">struct</span> gpio_desc *<span class="title function_">gpiod_get_index_optional</span><span class="params">(<span class="keyword">struct</span> device *dev, <span class="type">const</span> <span class="type">char</span> *con_id, <span class="type">unsigned</span> <span class="type">int</span> index, <span class="keyword">enum</span> gpiod_flags flags)</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>在家学习记录</category>
      </categories>
      <tags>
        <tag>在家学习记录</tag>
      </tags>
  </entry>
  <entry>
    <title>0-15 ubuntu22构建</title>
    <url>/2023/09/22/0-15%20ubuntu22%E6%9E%84%E5%BB%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最终定位的内容如下所示：xfce ubuntu22</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">MV packages</span></span><br><span class="line">cp ../packages $&#123;chroot_dir&#125; -r </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Mount the temporary API filesystems</span></span><br><span class="line">mkdir -p $&#123;chroot_dir&#125;/&#123;proc,sys,run,dev,dev/pts&#125;</span><br><span class="line">mount -t proc /proc $&#123;chroot_dir&#125;/proc</span><br><span class="line">mount -t sysfs /sys $&#123;chroot_dir&#125;/sys</span><br><span class="line">mount -o bind /dev $&#123;chroot_dir&#125;/dev</span><br><span class="line">mount -o bind /dev/pts $&#123;chroot_dir&#125;/dev/pts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF | chroot $&#123;chroot_dir&#125; /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">RKAIQ</span></span><br><span class="line">dpkg -i /packages/rkaiq/camera-engine-rkaiq_rk3588_arm64.deb</span><br><span class="line">cp -f /packages/rkaiq/rkaiq_3A_server /usr/bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">RGA</span></span><br><span class="line">dpkg -i /packages/rga2/librga-dev_2.2.0-1_arm64.deb</span><br><span class="line">dpkg -i /packages/rga2/librga2_2.2.0-1_arm64.deb</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF | chroot $&#123;chroot_dir&#125; /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Download some softwares</span></span><br><span class="line">apt-get -y install libaacs0 libavdevice58 libavfilter7 libavformat58 libbdplus0 libblas3 libbluray2  \</span><br><span class="line">libcdio-cdda2 libcdio-paranoia2 libgfortran5 liblapack3 liblua5.2-0 libmujs1 libmysofa1 \</span><br><span class="line">libnorm1 libpgm-5.3-0 libplacebo192 libpocketsphinx3 libpostproc55 librabbitmq4 librubberband2 \</span><br><span class="line">libsixel1 libsphinxbase3 libssh-gcrypt-4 libswscale5 libudfread0 libva-wayland2 libvidstab1.1 \</span><br><span class="line">libvulkan1  libzimg2 libzmq5 mesa-vulkan-drivers pocketsphinx-en-us \</span><br><span class="line">bzip2 libblkid-dev libdpkg-perl libdw-dev libelf-dev libffi-dev libfile-fcntllock-perl \</span><br><span class="line">libglib2.0-dev libglib2.0-dev-bin liblzma-dev libmount-dev libpcre16-3 libpcre2-32-0 \</span><br><span class="line">libpcre2-dev libpcre2-posix3 libpcre3-dev libpcre32-3 libpcrecpp0v5 libselinux1-dev  \</span><br><span class="line">libsepol-dev  libunwind-dev pkg-config python3-distutils python3-lib2to3 uuid-dev zlib1g-dev  \</span><br><span class="line">gir1.2-gudev-1.0 libdrm-dev libdrm-etnaviv1 libdrm-freedreno1 libdrm-tegra0 libgudev-1.0-dev  \</span><br><span class="line">liborc-0.4-dev liborc-0.4-dev-bin libpciaccess-dev libpciaccess0 libudev-dev libwayland-bin \</span><br><span class="line">libwayland-dev libx11-xcb-dev   bubblewrap gdal-data ibverbs-providers libaec0 libarmadillo10 libarpack2  \</span><br><span class="line">libavcodec-dev libavformat-dev  libavutil-dev libblosc1 libcfitsio9 libcharls2 libdc1394-dev libdeflate-dev \</span><br><span class="line">libevent-pthreads-2.1-7 libexif-dev libexif-doc libexif12 libfabric1 libfreexl1 libfyba0  \</span><br><span class="line">libgdal30 libgdcm-dev libgdcm3.0 libgeos-c1v5 libgeos3.10.2 libgeotiff5 libgif7 libgl2ps1.4 \</span><br><span class="line">libglew2.2 libgphoto2-6 libgphoto2-dev libgphoto2-l10n libgphoto2-port12 libharfbuzz-icu0 \</span><br><span class="line">libhdf4-0-alt libhdf5-103-1 libhdf5-hl-100 libhwloc-plugins libhwloc15 libibverbs1 libilmbase-dev libjbig-dev libjpeg-dev  \</span><br><span class="line">libjpeg-turbo8-dev libjpeg8-dev libjsoncpp25 libkmlbase1 libkmldom1 libkmlengine1 liblept5 libminizip1   \</span><br><span class="line">libmysqlclient21 libnetcdf19 libodbc2 libodbcinst2 libogdi4.1 libopencv-calib3d-dev libopencv-calib3d4.5d  \</span><br><span class="line">libopencv-contrib-dev libopencv-contrib4.5d libopencv-core-dev libopencv-core4.5d libopencv-dev \</span><br><span class="line">libopencv-dnn-dev libopencv-dnn4.5d libopencv-features2d-dev libopencv-features2d4.5d \</span><br><span class="line">libopencv-flann-dev libopencv-flann4.5d libopencv-highgui-dev libopencv-highgui4.5d libopencv-imgcodecs-dev \</span><br><span class="line">libopencv-imgcodecs4.5d libopencv-imgproc-dev libopencv-imgproc4.5d libopencv-ml-dev libopencv-ml4.5d  \</span><br><span class="line">libopencv-objdetect-dev libopencv-objdetect4.5d libopencv-photo-dev libopencv-photo4.5d libopencv-shape-dev \</span><br><span class="line">libopencv-shape4.5d libopencv-stitching-dev  libopencv-stitching4.5d libopencv-superres-dev libopencv-superres4.5d \</span><br><span class="line">libopencv-video-dev libopencv-video4.5d libopencv-videoio-dev libopencv-videoio4.5d libopencv-videostab-dev \</span><br><span class="line">libopencv-videostab4.5d libopencv-viz-dev libopencv-viz4.5d libopencv4.5-java libopencv4.5d-jni libopenexr-dev \</span><br><span class="line">libopenmpi3 libpmix2 libpng-dev libpng-tools libpoppler118 libpq5 libproj22 libprotobuf23 libqhull-r8.0 libraw1394-dev \</span><br><span class="line">libraw1394-tools librdmacm1 librttopo1 libsocket++1 libspatialite7 libsuperlu5 libswresample-dev libswscale-dev libsz2 \</span><br><span class="line">libtbb-dev libtbb12 libtbb2 libtbbmalloc2 libtesseract4 libtiff-dev libtiffxx5 libtk8.6 libucx0 liburiparser1 libvtk9.1 \</span><br><span class="line">libwoff1 libwpe-1.0-1 libwpebackend-fdo-1.0-1 libwpewebkit-1.0-3 libxerces-c3.2 libxft2 libxnvctrl0 mysql-common  \</span><br><span class="line">opencv-data proj-bin proj-data  unixodbc-common xdg-dbus-proxy libqt5opengl5 libcanberra0 libpipewire-0.3-0  \</span><br><span class="line">libpipewire-0.3-common libpipewire-0.3-modules libspa-0.2-modules libtdb1 pipewire pipewire-bin  \</span><br><span class="line">pipewire-media-session rtkit sound-theme-freedesktop pip qt5-image-formats-plugins qtwayland5 blueman \</span><br><span class="line">libegl-dev libgbm-dev libgl-dev libgles-dev libgles1 libgles2 libglx-dev</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF | chroot $&#123;chroot_dir&#125; /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Video Gstreamer</span></span><br><span class="line">apt-get -y install gstreamer1.0-plugins-bad gstreamer1.0-plugins-base gstreamer1.0-plugins-ugly gstreamer1.0-tools gstreamer1.0-alsa \</span><br><span class="line">gstreamer1.0-plugins-base-apps qtmultimedia5-examples gstreamer1.0-x libxv1 libgstreamer-gl1.0-0 \</span><br><span class="line">gstreamer1.0-pulseaudio gstreamer1.0-qt5 libqt5x11extras5 libgstreamer-plugins-good1.0-dev</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mpp</span></span><br><span class="line">dpkg -i /packages/mpp/librockchip-mpp1_1.5.0-1.2_arm64.deb</span><br><span class="line">dpkg -i /packages/mpp/librockchip-mpp-dev_1.5.0-1.2_arm64.deb</span><br><span class="line">dpkg -i /packages/mpp/librockchip-vpu0_1.5.0-1.2_arm64.deb</span><br><span class="line">dpkg -i /packages/mpp/rockchip-mpp-demos_1.5.0-1.2_arm64.deb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gst-rkmpp</span></span><br><span class="line">dpkg -i /packages/gst-rkmpp/gstreamer1.0-rockchip1_1.14-4_arm64.deb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">gstreamer</span></span><br><span class="line">dpkg -i /packages/gstreamer/gir1.2-gstreamer-1.0_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gstreamer/gstreamer1.0-tools_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gstreamer/libgstreamer1.0-0_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gstreamer/libgstreamer1.0-dev_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gst-plugins-base1.0</span></span><br><span class="line">dpkg -i /packages/gst-plugins-base1.0/gir1.2-gst-plugins-base-1.0_1.20.3-1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-base1.0/gstreamer1.0-alsa_1.20.3-1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-base1.0/gstreamer1.0-gl_1.20.3-1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-base1.0/gstreamer1.0-plugins-base_1.20.3-1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-base1.0/gstreamer1.0-plugins-base-apps_1.20.3-1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-base1.0/gstreamer1.0-x_1.20.3-1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-base1.0/libgstreamer-gl1.0-0_1.20.3-1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-base1.0/libgstreamer-plugins-base1.0-0_1.20.3-1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-base1.0/libgstreamer-plugins-base1.0-dev_1.20.3-1_arm64.deb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gst-plugins-bad1.0</span></span><br><span class="line">dpkg -i /packages/gst-plugins-bad1.0/libgstreamer-plugins-bad1.0-0_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-bad1.0/gir1.2-gst-plugins-bad-1.0_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-bad1.0/libgstreamer-opencv1.0-0_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-bad1.0/gstreamer1.0-opencv_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-bad1.0/gstreamer1.0-plugins-bad_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-bad1.0/gstreamer1.0-plugins-bad-apps_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-bad1.0/gstreamer1.0-wpe_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-bad1.0/libgstreamer-plugins-bad1.0-dev_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gst-plugins-good1.0</span></span><br><span class="line">dpkg -i /packages/gst-plugins-good1.0/gstreamer1.0-gtk3_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-good1.0/gstreamer1.0-plugins-good_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-good1.0/gstreamer1.0-pulseaudio_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-good1.0/gstreamer1.0-qt5_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-good1.0/libgstreamer-plugins-good1.0-0_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-good1.0/libgstreamer-plugins-good1.0-dev_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">apt --fix-broken -y install</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Camera</span></span><br><span class="line">dpkg -i /packages/libv4l/libdvbv5-0_1.22.1-2build1_arm64.deb</span><br><span class="line">dpkg -i /packages/libv4l/dvb-tools_1.22.1-2build1_arm64.deb</span><br><span class="line">dpkg -i /packages/libv4l/ir-keytable_1.22.1-2build1_arm64.deb</span><br><span class="line">dpkg -i /packages/libv4l/libdvbv5-dev_1.22.1-2build1_arm64.deb</span><br><span class="line">dpkg -i /packages/libv4l/libdvbv5-doc_1.22.1-2build1_all.deb</span><br><span class="line">dpkg -i /packages/libv4l/libv4l-0_1.22.1-2build1_arm64.deb</span><br><span class="line">dpkg -i /packages/libv4l/libv4l2rds0_1.22.1-2build1_arm64.deb</span><br><span class="line">dpkg -i /packages/libv4l/libv4lconvert0_1.22.1-2build1_arm64.deb</span><br><span class="line">dpkg -i /packages/libv4l/libv4l-dev_1.22.1-2build1_arm64.deb</span><br><span class="line">dpkg -i /packages/libv4l/libv4l-rkmpp_1.5.1-1.1_arm64.deb</span><br><span class="line">dpkg -i /packages/libv4l/v4l-utils_1.22.1-2build1_arm64.deb</span><br><span class="line">dpkg -i /packages/libv4l/qv4l2_1.22.1-2build1_arm64.deb</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF | chroot $&#123;chroot_dir&#125; /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Install Desktop</span></span><br><span class="line">apt-get install -y xubuntu-core libbrotli-dev libfontenc-dev libfreetype-dev libfreetype6-dev libpixman-1-dev libxcvt-dev libxfont-dev libxkbfile-dev mesa-common-dev</span><br><span class="line">apt-get remove -y gdm3 ubuntu-session</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">xserver</span></span><br><span class="line">dpkg -i /packages/xserver/xserver-xorg-core_21.1.3-2ubuntu2_arm64.deb</span><br><span class="line">dpkg -i /packages/xserver/xserver-common_21.1.3-2ubuntu2_all.deb</span><br><span class="line">dpkg -i /packages/xserver/xserver-xorg-dev_21.1.3-2ubuntu2_arm64.deb</span><br><span class="line">dpkg -i /packages/xserver/xserver-xorg-legacy_21.1.3-2ubuntu2_arm64.deb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">DRM</span></span><br><span class="line">dpkg -i /packages/libdrm/libkms1_2.4.110-1ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/libdrm-cursor/libdrm-cursor_1.4.0-1_arm64.deb</span><br><span class="line">dpkg -i /packages/libdrm-cursor/libdrm-cursor-dev_1.4.0-1_arm64.deb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">GPU</span></span><br><span class="line">dpkg -i /packages/libmali/libmali-valhall-g610-g6p0-x11_1.9-1_arm64.deb</span><br><span class="line">cp /packages/libmali/mali_csffw.bin /lib/firmware/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ffmpeg</span></span><br><span class="line">dpkg -i /packages/ffmpeg/libavutil56_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libavutil-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libpostproc55_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libpostproc-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libswresample3_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libswresample-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libswscale5_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libswscale-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libavcodec58_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libavcodec-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libavformat58_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libavformat-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libavfilter7_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libavfilter-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libavdevice58_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libavdevice-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/ffmpeg_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mpv</span></span><br><span class="line">rm /etc/mpv/mpv.conf</span><br><span class="line">dpkg -i /packages/mpv/libmpv1_0.34.1-1ubuntu3_arm64.deb</span><br><span class="line">dpkg -i /packages/mpv/libmpv-dev_0.34.1-1ubuntu3_arm64.deb</span><br><span class="line">dpkg -i /packages/mpv/mpv_0.34.1-1ubuntu3_arm64.deb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">chromium</span></span><br><span class="line">dpkg -i /packages/chromium-x11/chromium-codecs-ffmpeg-extra_110.0.5481.4-debian11~bullseye~rkmpp20230130+1_arm64.deb</span><br><span class="line">dpkg -i /packages/chromium-x11/chromium-browser_110.0.5481.4-debian11~bullseye~rkmpp20230130+1_arm64.deb</span><br><span class="line">mkdir -p /etc/chromium-browser/</span><br><span class="line">cp /packages/chromium-x11/default /etc/chromium-browser/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">parpare</span></span><br><span class="line">sed -i &#x27;5aexport LD_PRELOAD=libdrm-cursor.so.1&#x27; /usr/bin/X</span><br><span class="line">ln -rsf /usr/lib/*/libv4l2.so /usr/lib/</span><br><span class="line">cd /usr/lib/aarch64-linux-gnu/dri/</span><br><span class="line">cp kms_swrast_dri.so swrast_dri.so rockchip_dri.so /</span><br><span class="line">rm /usr/lib/aarch64-linux-gnu/dri/*.so</span><br><span class="line">mv /*.so /usr/lib/aarch64-linux-gnu/dri/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">GPU <span class="built_in">test</span></span></span><br><span class="line">dpkg -i /packages/glmark2/libjpeg62-turbo_1.5.1-2_arm64.deb</span><br><span class="line">dpkg -i /packages/glmark2/glmark2*deb</span><br><span class="line"></span><br><span class="line">apt --fix-broken -y install</span><br><span class="line">apt-mark hold xserver-common xserver-xorg-core xserver-xorg-legacy</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">opencv-python</span></span><br><span class="line">pip install opencv-python -i https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">clean deb</span></span><br><span class="line">rm -rf /packages</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Clean package cache</span></span><br><span class="line">apt-get -y autoremove &amp;&amp; apt-get -y clean &amp;&amp; apt-get -y autoclean</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF | chroot $&#123;chroot_dir&#125; /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">usb</span></span><br><span class="line">echo &quot;dash dash/sh boolean false&quot; | debconf-set-selections</span><br><span class="line">dpkg-reconfigure dash</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF | chroot $&#123;chroot_dir&#125; /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">enable</span> lightdm</span></span><br><span class="line">echo &quot;/usr/sbin/lightdm&quot; &gt; /etc/X11/default-display-manager</span><br><span class="line">DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true dpkg-reconfigure lightdm</span><br><span class="line">echo set shared/default-x-display-manager lightdm | debconf-communicate</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Swapfile</span></span><br><span class="line">cat &lt;&lt; EOF | chroot $&#123;chroot_dir&#125; /bin/bash</span><br><span class="line">set -eE</span><br><span class="line">trap &#x27;echo Error: in $0 on line $LINENO&#x27; ERR</span><br><span class="line"></span><br><span class="line">dd if=/dev/zero of=/tmp/swapfile bs=1024 count=2097152</span><br><span class="line">chmod 600 /tmp/swapfile</span><br><span class="line">mkswap /tmp/swapfile</span><br><span class="line">mv /tmp/swapfile /swapfile</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">lightmd/gdm</span></span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/gdm3/custom.conf $&#123;chroot_dir&#125;/etc/gdm3/custom.conf</span><br><span class="line">mkdir $&#123;chroot_dir&#125;/etc/lightdm/ -p</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/lightdm/lightdm.conf $&#123;chroot_dir&#125;/etc/lightdm/lightdm.conf</span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/share/lightdm/lightdm.conf.d/60-xubuntu.conf $&#123;chroot_dir&#125;/usr/share/lightdm/lightdm.conf.d/</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/profile.d/x11.sh $&#123;chroot_dir&#125;/etc/profile.d/x11.sh</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/profile.d/qtwebengine.sh $&#123;chroot_dir&#125;/etc/profile.d/qtwebengine.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">no <span class="built_in">sleep</span></span></span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/xdg/xdg-xubuntu/xfce4/xfconf/xfce-perchannel-xml/xfce4-power-manager.xml $&#123;chroot_dir&#125;/etc/xdg/xdg-xubuntu/xfce4/xfconf/xfce-perchannel-xml/xfce4-power-manager.xml</span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/bin/screan-sleep.sh $&#123;chroot_dir&#125;/usr/bin/</span><br><span class="line">cp -r $&#123;overlay_dir&#125;/etc/systemd/system/sysinit.target.wants/screan-sleep.service  $&#123;chroot_dir&#125;/etc/systemd/system/sysinit.target.wants/</span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/lib/systemd/system/screan-sleep.service $&#123;chroot_dir&#125;/usr/lib/systemd/system/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rfkilL</span></span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/polkit-1/localauthority.conf.d/02-allow-colord.conf  $&#123;chroot_dir&#125;/etc/polkit-1/localauthority.conf.d</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Set gstreamer environment variables</span></span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/profile.d/gst.sh $&#123;chroot_dir&#125;/etc/profile.d/gst.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Set cogl to use gles2</span></span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/profile.d/cogl.sh $&#123;chroot_dir&#125;/etc/profile.d/cogl.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Set qt to use wayland</span></span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/profile.d/qt.sh $&#123;chroot_dir&#125;/etc/profile.d/qt.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Config file <span class="keyword">for</span> mpv</span></span><br><span class="line">mkdir $&#123;chroot_dir&#125;/etc/mpv/ -p</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/mpv/mpv.conf $&#123;chroot_dir&#125;/etc/mpv/mpv.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">iqfiles(ov5695 ov13850)</span></span><br><span class="line">mkdir $&#123;chroot_dir&#125;/etc/iqfiles/ -p</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/iqfiles/* $&#123;chroot_dir&#125;/etc/iqfiles/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Config file <span class="keyword">for</span> xorg</span></span><br><span class="line">mkdir -p $&#123;chroot_dir&#125;/etc/X11/</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/X11/* $&#123;chroot_dir&#125;/etc/X11/ -r</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Networking interfaces</span></span><br><span class="line">mkdir -p $&#123;chroot_dir&#125;/etc/NetworkManager/</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/NetworkManager/NetworkManager.conf $&#123;chroot_dir&#125;/etc/NetworkManager/NetworkManager.conf</span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/lib/NetworkManager/conf.d/10-globally-managed-devices.conf $&#123;chroot_dir&#125;/usr/lib/NetworkManager/conf.d/10-globally-managed-devices.conf</span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/lib/NetworkManager/conf.d/10-override-wifi-random-mac-disable.conf $&#123;chroot_dir&#125;/usr/lib/NetworkManager/conf.d/10-override-wifi-random-mac-disable.conf</span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/lib/NetworkManager/conf.d/20-override-wifi-powersave-disable.conf $&#123;chroot_dir&#125;/usr/lib/NetworkManager/conf.d/20-override-wifi-powersave-disable.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Set chromium inital prefrences</span></span><br><span class="line">mkdir -p $&#123;chroot_dir&#125;/usr/lib/chromium-browser</span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/lib/chromium-browser/initial_preferences $&#123;chroot_dir&#125;/usr/lib/chromium-browser/initial_preferences</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Set chromium default launch args</span></span><br><span class="line">mkdir -p $&#123;chroot_dir&#125;/etc/chromium-browser</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/chromium-browser/default $&#123;chroot_dir&#125;/etc/chromium-browser/default</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Have plymouth use the framebuffer</span></span><br><span class="line">mkdir -p $&#123;chroot_dir&#125;/etc/initramfs-tools/conf-hooks.d</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/initramfs-tools/conf-hooks.d/plymouth $&#123;chroot_dir&#125;/etc/initramfs-tools/conf-hooks.d/plymouth</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Update initramfs</span></span><br><span class="line">chroot $&#123;chroot_dir&#125; /bin/bash -c &quot;update-initramfs -u&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">adbd usb</span></span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/bin/adbd $&#123;chroot_dir&#125;/usr/bin/</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/profile.d/usbdevice.sh $&#123;chroot_dir&#125;/etc/profile.d/</span><br><span class="line">cp -r $&#123;overlay_dir&#125;/etc/systemd/system/sysinit.target.wants/usbdevice.service  $&#123;chroot_dir&#125;/etc/systemd/system/sysinit.target.wants/</span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/bin/usbdevice $&#123;chroot_dir&#125;/usr/bin/</span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/lib/systemd/system/usbdevice.service $&#123;chroot_dir&#125;/usr/lib/systemd/system/</span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/lib/udev/rules.d/61-usbdevice.rules $&#123;chroot_dir&#125;/usr/lib/udev/rules.d/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Config file <span class="keyword">for</span> xorg</span></span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/X11/xorg.conf.d/* $&#123;chroot_dir&#125;/etc/X11/xorg.conf.d/</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/X11/Xsession.d/* $&#123;chroot_dir&#125;/etc/X11/Xsession.d/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> Set cpu governor to performance</span></span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/lib/systemd/system/cpu-governor-performance.service $&#123;chroot_dir&#125;/usr/lib/systemd/system/cpu-governor-performance.service</span><br><span class="line">chroot $&#123;chroot_dir&#125; /bin/bash -c &quot;systemctl enable cpu-governor-performance&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Set gpu governor to performance</span></span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/lib/systemd/system/gpu-governor-performance.service $&#123;chroot_dir&#125;/usr/lib/systemd/system/gpu-governor-performance.service</span><br><span class="line">chroot $&#123;chroot_dir&#125; /bin/bash -c &quot;systemctl enable gpu-governor-performance&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">async</span></span><br><span class="line">mkdir -p $&#123;chroot_dir&#125;/usr/local/bin/</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/init.d/S10atomic_commit.sh  $&#123;chroot_dir&#125;/etc/init.d/</span><br><span class="line">mkdir -p $&#123;chroot_dir&#125;/etc/systemd/system/multi-user.target.wants/</span><br><span class="line">cp -r $&#123;overlay_dir&#125;/etc/systemd/system/multi-user.target.wants/async.service $&#123;chroot_dir&#125;/etc/systemd/system/multi-user.target.wants/</span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/local/bin/modetest $&#123;chroot_dir&#125;/usr/local/bin/</span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/lib/systemd/system/async.service $&#123;chroot_dir&#125;/usr/lib/systemd/system/async.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">drm</span></span><br><span class="line">mkdir -p $&#123;chroot_dir&#125;/etc/udev/rules.d</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/udev/rules.d/60-drm.rules $&#123;chroot_dir&#125;/etc/udev/rules.d/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pulse</span></span><br><span class="line">cp -r $&#123;overlay_dir&#125;/etc/pulse $&#123;chroot_dir&#125;/etc/pulse</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/udev/rules.d/88-rockchip-camera.rules $&#123;chroot_dir&#125;/etc/udev/rules.d/</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/udev/rules.d/90-pulseaudio-rockchip.rules $&#123;chroot_dir&#125;/etc/udev/rules.d/</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/udev/rules.d/99-rockchip-permissions.rules $&#123;chroot_dir&#125;/etc/udev/rules.d/</span><br><span class="line">cp -r $&#123;overlay_dir&#125;/usr/share/alsa $&#123;chroot_dir&#125;/usr/share/</span><br><span class="line">cp -r $&#123;overlay_dir&#125;/usr/share/pulseaudio $&#123;chroot_dir&#125;/usr/share/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">user <span class="built_in">local</span> bin apt ros docker qt</span></span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/local/bin/*  $&#123;chroot_dir&#125;/usr/local/bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etc/udev/rules.d</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">qt clean display</span></span><br><span class="line">cat &lt;&lt; EOF | chroot $&#123;chroot_dir&#125; /bin/bash</span><br><span class="line">cd /usr/lib/aarch64-linux-gnu/dri/</span><br><span class="line">cp rockchip_dri.so /</span><br><span class="line">rm /usr/lib/aarch64-linux-gnu/dri/*.so</span><br><span class="line">mv /*.so /usr/lib/aarch64-linux-gnu/dri/</span><br><span class="line">rm /etc/profile.d/qt.sh</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Umount the temporary API filesystems</span></span><br><span class="line">umount -lf $&#123;chroot_dir&#125;/dev/pts 2&gt; /dev/null || true</span><br><span class="line">umount -lf $&#123;chroot_dir&#125;/* 2&gt; /dev/null || true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Tar the entire rootfs</span></span><br><span class="line">cd $&#123;chroot_dir&#125; &amp;&amp; XZ_OPT=&quot;-3 -T0&quot; tar -cpJf ../ubuntu-22.04.2-preinstalled-desktop-arm64.rootfs.tar.xz . &amp;&amp; cd ..</span><br></pre></td></tr></table></figure>







<p>gonme ubuntu22</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">MV packages</span></span><br><span class="line">cp ../packages $&#123;chroot_dir&#125; -r </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Mount the temporary API filesystems</span></span><br><span class="line">mkdir -p $&#123;chroot_dir&#125;/&#123;proc,sys,run,dev,dev/pts&#125;</span><br><span class="line">mount -t proc /proc $&#123;chroot_dir&#125;/proc</span><br><span class="line">mount -t sysfs /sys $&#123;chroot_dir&#125;/sys</span><br><span class="line">mount -o bind /dev $&#123;chroot_dir&#125;/dev</span><br><span class="line">mount -o bind /dev/pts $&#123;chroot_dir&#125;/dev/pts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF | chroot $&#123;chroot_dir&#125; /bin/bash</span><br><span class="line">[[ -f /etc/profile.d/x11.sh ]] &amp;&amp; rm/etc/profile.d/x11.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">RKAIQ</span></span><br><span class="line">dpkg -i /packages/rkaiq/camera-engine-rkaiq_rk3588_arm64.deb</span><br><span class="line">cp -f /packages/rkaiq/rkaiq_3A_server /usr/bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">RGA</span></span><br><span class="line">dpkg -i /packages/rga2/librga2_2.2.0-1+git220920.c1d5c71~jammy_arm64.deb</span><br><span class="line">dpkg -i /packages/rga2/librga-dev_2.2.0-1+git220920.c1d5c71~jammy_arm64.deb</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF | chroot $&#123;chroot_dir&#125; /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Download some softwares</span></span><br><span class="line">apt-get -y install libaacs0 libavdevice58 libavfilter7 libavformat58 libbdplus0 libblas3 libbluray2  \</span><br><span class="line">libcdio-cdda2 libcdio-paranoia2 libgfortran5 liblapack3 liblua5.2-0 libmujs1 libmysofa1 \</span><br><span class="line">libnorm1 libpgm-5.3-0 libplacebo192 libpocketsphinx3 libpostproc55 librabbitmq4 librubberband2 \</span><br><span class="line">libsixel1 libsphinxbase3 libssh-gcrypt-4 libswscale5 libudfread0 libva-wayland2 libvidstab1.1 \</span><br><span class="line">libvulkan1  libzimg2 libzmq5 mesa-vulkan-drivers pocketsphinx-en-us \</span><br><span class="line">bzip2 libblkid-dev libdpkg-perl libdw-dev libelf-dev libffi-dev libfile-fcntllock-perl \</span><br><span class="line">libglib2.0-dev libglib2.0-dev-bin liblzma-dev libmount-dev libpcre16-3 libpcre2-32-0 \</span><br><span class="line">libpcre2-dev libpcre2-posix3 libpcre3-dev libpcre32-3 libpcrecpp0v5 libselinux1-dev  \</span><br><span class="line">libsepol-dev  libunwind-dev pkg-config python3-distutils python3-lib2to3 uuid-dev zlib1g-dev  \</span><br><span class="line">gir1.2-gudev-1.0 libdrm-dev libdrm-etnaviv1 libdrm-freedreno1 libdrm-tegra0 libgudev-1.0-dev  \</span><br><span class="line">liborc-0.4-dev liborc-0.4-dev-bin libpciaccess-dev libpciaccess0 libudev-dev libwayland-bin \</span><br><span class="line">libwayland-dev libx11-xcb-dev   bubblewrap gdal-data ibverbs-providers libaec0 libarmadillo10 libarpack2  \</span><br><span class="line">libavcodec-dev libavformat-dev  libavutil-dev libblosc1 libcfitsio9 libcharls2 libdc1394-dev libdeflate-dev \</span><br><span class="line">libevent-pthreads-2.1-7 libexif-dev libexif-doc libexif12 libfabric1 libfreexl1 libfyba0  \</span><br><span class="line">libgdal30 libgdcm-dev libgdcm3.0 libgeos-c1v5 libgeos3.10.2 libgeotiff5 libgif7 libgl2ps1.4 \</span><br><span class="line">libglew2.2 libgphoto2-6 libgphoto2-dev libgphoto2-l10n libgphoto2-port12 libharfbuzz-icu0 \</span><br><span class="line">libhdf4-0-alt libhdf5-103-1 libhdf5-hl-100 libhwloc-plugins libhwloc15 libibverbs1 libilmbase-dev libjbig-dev libjpeg-dev  \</span><br><span class="line">libjpeg-turbo8-dev libjpeg8-dev libjsoncpp25 libkmlbase1 libkmldom1 libkmlengine1 liblept5 libminizip1   \</span><br><span class="line">libmysqlclient21 libnetcdf19 libodbc2 libodbcinst2 libogdi4.1 libopencv-calib3d-dev libopencv-calib3d4.5d  \</span><br><span class="line">libopencv-contrib-dev libopencv-contrib4.5d libopencv-core-dev libopencv-core4.5d libopencv-dev \</span><br><span class="line">libopencv-dnn-dev libopencv-dnn4.5d libopencv-features2d-dev libopencv-features2d4.5d \</span><br><span class="line">libopencv-flann-dev libopencv-flann4.5d libopencv-highgui-dev libopencv-highgui4.5d libopencv-imgcodecs-dev \</span><br><span class="line">libopencv-imgcodecs4.5d libopencv-imgproc-dev libopencv-imgproc4.5d libopencv-ml-dev libopencv-ml4.5d  \</span><br><span class="line">libopencv-objdetect-dev libopencv-objdetect4.5d libopencv-photo-dev libopencv-photo4.5d libopencv-shape-dev \</span><br><span class="line">libopencv-shape4.5d libopencv-stitching-dev  libopencv-stitching4.5d libopencv-superres-dev libopencv-superres4.5d \</span><br><span class="line">libopencv-video-dev libopencv-video4.5d libopencv-videoio-dev libopencv-videoio4.5d libopencv-videostab-dev \</span><br><span class="line">libopencv-videostab4.5d libopencv-viz-dev libopencv-viz4.5d libopencv4.5-java libopencv4.5d-jni libopenexr-dev \</span><br><span class="line">libopenmpi3 libpmix2 libpng-dev libpng-tools libpoppler118 libpq5 libproj22 libprotobuf23 libqhull-r8.0 libraw1394-dev \</span><br><span class="line">libraw1394-tools librdmacm1 librttopo1 libsocket++1 libspatialite7 libsuperlu5 libswresample-dev libswscale-dev libsz2 \</span><br><span class="line">libtbb-dev libtbb12 libtbb2 libtbbmalloc2 libtesseract4 libtiff-dev libtiffxx5 libtk8.6 libucx0 liburiparser1 libvtk9.1 \</span><br><span class="line">libwoff1 libwpe-1.0-1 libwpebackend-fdo-1.0-1 libwpewebkit-1.0-3 libxerces-c3.2 libxft2 libxnvctrl0 mysql-common  \</span><br><span class="line">opencv-data proj-bin proj-data  unixodbc-common xdg-dbus-proxy libqt5opengl5 libcanberra0 libpipewire-0.3-0  \</span><br><span class="line">libpipewire-0.3-common libpipewire-0.3-modules libspa-0.2-modules libtdb1 pipewire pipewire-bin \</span><br><span class="line">pipewire-media-session rtkit sound-theme-freedesktop pip qt5-image-formats-plugins qtwayland5 blueman \</span><br><span class="line">libegl-dev libgbm-dev libgl-dev libgles-dev libgles1 libgles2 libglx-dev \</span><br><span class="line">libauthen-sasl-perl libclone-perl libdata-dump-perl libencode-locale-perl libfile-basedir-perl \</span><br><span class="line">libauthen-sasl-perl libclone-perl libdata-dump-perl libfont-afm-perl libgtkd-3-0 \</span><br><span class="line">libhtml-form-perl libhtml-format-perl libhtml-parser-perl libhtml-tagset-perl libhtml-tree-perl \</span><br><span class="line">libhttp-cookies-perl libhttp-daemon-perl libhttp-date-perl libhttp-message-perl libhttp-negotiate-perl \</span><br><span class="line">libio-html-perl libio-socket-ssl-perl libio-stringy-perl libipc-system-simple-perl libllvm11 \</span><br><span class="line">liblwp-mediatypes-perl liblwp-protocol-https-perl libmailtools-perl libnet-dbus-perl libnet-http-perl \</span><br><span class="line">libnet-smtp-ssl-perl libnet-ssleay-perl libphobos2-ldc-shared98 libtie-ixhash-perl libtimedate-perl \</span><br><span class="line">libtry-tiny-perl liburi-perl libvted-3-0 libwww-perl libwww-robotrules-perl libx11-protocol-perl \</span><br><span class="line">libxml-parser-perl libxml-twig-perl libxml-xpathengine-perl libxxf86dga1 perl-openssl-defaults tilix \</span><br><span class="line">tilix-common x11-utils xdg-utils libglvnd-core-dev libglvnd-dev libopengl-dev \</span><br><span class="line">libcec6 libcrossguid0 libfmt8 libfstrcmp0 libimagequant0 libiso9660-11 libkissfft-float131 liblirc-client0 \</span><br><span class="line">libmicrohttpd12 libp8-platform2 libraqm0 libraspberrypi0 libshairplay0 libtinyxml2.6.2v5 \</span><br><span class="line">libwayland-client++0 libwayland-cursor++0 libwayland-egl++0 mailcap mime-support python3-olefile \</span><br><span class="line">python3-pil python3-pycryptodome libjs-iscroll mesa-utils mesa-utils-bin</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF | chroot $&#123;chroot_dir&#125; /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Video Gstreamer</span></span><br><span class="line">apt-get -y install gstreamer1.0-plugins-bad gstreamer1.0-plugins-base gstreamer1.0-plugins-ugly gstreamer1.0-tools gstreamer1.0-alsa \</span><br><span class="line">gstreamer1.0-plugins-base-apps qtmultimedia5-examples gstreamer1.0-x libxv1 libgstreamer-gl1.0-0 \</span><br><span class="line">gstreamer1.0-pulseaudio gstreamer1.0-qt5 libqt5x11extras5 libgstreamer-plugins-good1.0-dev</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mpp</span></span><br><span class="line">dpkg -i /packages/mpp/librockchip-mpp1_1.5.0-1.2_arm64.deb</span><br><span class="line">dpkg -i /packages/mpp/librockchip-mpp-dev_1.5.0-1.2_arm64.deb</span><br><span class="line">dpkg -i /packages/mpp/librockchip-vpu0_1.5.0-1.2_arm64.deb</span><br><span class="line">dpkg -i /packages/mpp/rockchip-mpp-demos_1.5.0-1.2_arm64.deb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gst-rkmpp</span></span><br><span class="line">dpkg -i /packages/gst-rkmpp/gstreamer1.0-rockchip1_1.14-4_arm64.deb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">gstreamer</span></span><br><span class="line">dpkg -i /packages/gstreamer/gir1.2-gstreamer-1.0_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gstreamer/gstreamer1.0-tools_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gstreamer/libgstreamer1.0-0_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gstreamer/libgstreamer1.0-dev_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gst-plugins-base1.0</span></span><br><span class="line">dpkg -i /packages/gst-plugins-base1.0/gir1.2-gst-plugins-base-1.0_1.20.3-1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-base1.0/gstreamer1.0-alsa_1.20.3-1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-base1.0/gstreamer1.0-gl_1.20.3-1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-base1.0/gstreamer1.0-plugins-base_1.20.3-1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-base1.0/gstreamer1.0-plugins-base-apps_1.20.3-1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-base1.0/gstreamer1.0-x_1.20.3-1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-base1.0/libgstreamer-gl1.0-0_1.20.3-1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-base1.0/libgstreamer-plugins-base1.0-0_1.20.3-1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-base1.0/libgstreamer-plugins-base1.0-dev_1.20.3-1_arm64.deb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gst-plugins-bad1.0</span></span><br><span class="line">dpkg -i /packages/gst-plugins-bad1.0/libgstreamer-plugins-bad1.0-0_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-bad1.0/gir1.2-gst-plugins-bad-1.0_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-bad1.0/libgstreamer-opencv1.0-0_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-bad1.0/gstreamer1.0-opencv_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-bad1.0/gstreamer1.0-plugins-bad_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-bad1.0/gstreamer1.0-plugins-bad-apps_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-bad1.0/gstreamer1.0-wpe_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-bad1.0/libgstreamer-plugins-bad1.0-dev_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gst-plugins-good1.0</span></span><br><span class="line">dpkg -i /packages/gst-plugins-good1.0/gstreamer1.0-gtk3_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-good1.0/gstreamer1.0-plugins-good_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-good1.0/gstreamer1.0-pulseaudio_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-good1.0/gstreamer1.0-qt5_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-good1.0/libgstreamer-plugins-good1.0-0_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">dpkg -i /packages/gst-plugins-good1.0/libgstreamer-plugins-good1.0-dev_1.20.3-0ubuntu1_arm64.deb</span><br><span class="line">apt --fix-broken -y install</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Camera</span></span><br><span class="line">dpkg -i /packages/libv4l/libdvbv5-0_1.22.1-2build1_arm64.deb</span><br><span class="line">dpkg -i /packages/libv4l/dvb-tools_1.22.1-2build1_arm64.deb</span><br><span class="line">dpkg -i /packages/libv4l/ir-keytable_1.22.1-2build1_arm64.deb</span><br><span class="line">dpkg -i /packages/libv4l/libdvbv5-dev_1.22.1-2build1_arm64.deb</span><br><span class="line">dpkg -i /packages/libv4l/libdvbv5-doc_1.22.1-2build1_all.deb</span><br><span class="line">dpkg -i /packages/libv4l/libv4l-0_1.22.1-2build1_arm64.deb</span><br><span class="line">dpkg -i /packages/libv4l/libv4l2rds0_1.22.1-2build1_arm64.deb</span><br><span class="line">dpkg -i /packages/libv4l/libv4lconvert0_1.22.1-2build1_arm64.deb</span><br><span class="line">dpkg -i /packages/libv4l/libv4l-dev_1.22.1-2build1_arm64.deb</span><br><span class="line">dpkg -i /packages/libv4l/libv4l-rkmpp_1.5.1-1.1_arm64.deb</span><br><span class="line">dpkg -i /packages/libv4l/v4l-utils_1.22.1-2build1_arm64.deb</span><br><span class="line">dpkg -i /packages/libv4l/qv4l2_1.22.1-2build1_arm64.deb</span><br><span class="line">dpkg -i /packages/libv4l/libv4l-rkmpp_1.5.1-1.1_arm64.deb</span><br><span class="line">dpkg -i /packages/libv4l/rockchip-multimedia-config_1.0.0-2+jammy_all.deb</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF | chroot $&#123;chroot_dir&#125; /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Install Desktop</span></span><br><span class="line">apt-get -y install ubuntu-desktop dbus-x11 xterm pulseaudio pavucontrol qtwayland5 \</span><br><span class="line">gstreamer1.0-plugins-bad gstreamer1.0-plugins-base gstreamer1.0-plugins-good mpv \</span><br><span class="line">gstreamer1.0-tools gstreamer1.0-rockchip1 chromium-browser mali-g610-firmware malirun \</span><br><span class="line">rockchip-multimedia-config librist4 librist-dev rist-tools dvb-tools ir-keytable \</span><br><span class="line">libdvbv5-0 libdvbv5-dev libdvbv5-doc libv4l-0 libv4l2rds0 libv4lconvert0 libv4l-dev \</span><br><span class="line">libv4l-rkmpp qv4l2 v4l-utils librockchip-mpp1 librockchip-mpp-dev librockchip-vpu0 \</span><br><span class="line">rockchip-mpp-demos librga2 librga-dev libegl-mesa0 libegl1-mesa-dev libgbm-dev \</span><br><span class="line">libgl1-mesa-dev libgles2-mesa-dev libglx-mesa0 mesa-common-dev mesa-vulkan-drivers \</span><br><span class="line">mesa-utils libwidevinecdm libcanberra-pulselibbrotli-dev libfontenc-dev libfreetype-dev \</span><br><span class="line">libfreetype6-dev libpixman-1-dev libxcvt-dev libxfont-dev libxkbfile-dev mesa-common-dev</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">chromium</span></span><br><span class="line">dpkg -i /packages/chromium/chromium-codecs-ffmpeg-extra_110.0.5481.4-0ubuntu1~jammy~rkmpp20230130_arm64.deb</span><br><span class="line">dpkg -i /packages/chromium/chromium-browser_110.0.5481.4-0ubuntu1~jammy~rkmpp20230130_arm64.deb</span><br><span class="line">dpkg -i /packages/chromium/chromium-browser-l10n_110.0.5481.4-0ubuntu1~jammy~rkmpp20230130_all.deb</span><br><span class="line">dpkg -i /packages/chromium/chromium-chromedriver_110.0.5481.4-0ubuntu1~jammy~rkmpp20230130_arm64.deb</span><br><span class="line">apt --fix-broken -y install</span><br><span class="line">mkdir -p /etc/chromium-browser/</span><br><span class="line">cp /packages/chromium-x11/default /etc/chromium-browser/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">GPU</span></span><br><span class="line">apt-get remove -y libgl1-amber-dri:arm64</span><br><span class="line">dpkg -i /packages/mesa/mali-g610-firmware_1.0.0-1_all.deb</span><br><span class="line">dpkg -i /packages/mesa/libgbm1_23.0~panfork~csf~git221210.120202c6757~j+3_arm64.deb</span><br><span class="line">dpkg -i /packages/mesa/libgbm-dev_23.0~panfork~csf~git221210.120202c6757~j+3_arm64.deb</span><br><span class="line">dpkg -i /packages/mesa/libglapi-mesa_23.0~panfork~csf~git221210.120202c6757~j+3_arm64.deb</span><br><span class="line">dpkg -i /packages/mesa/libgl1-mesa-dri_23.0~panfork~csf~git221210.120202c6757~j+3_arm64.deb</span><br><span class="line">dpkg -i /packages/mesa/libegl-mesa0_23.0~panfork~csf~git221210.120202c6757~j+3_arm64.deb</span><br><span class="line">dpkg -i /packages/mesa/libglx-mesa0_23.0~panfork~csf~git221210.120202c6757~j+3_arm64.deb</span><br><span class="line">cp /packages/libmali/mali_csffw.bin /lib/firmware/</span><br><span class="line">echo &quot;PAN_MESA_DEBUG=gofaster&quot; &gt;&gt; /etc/environment</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ffmpeg</span></span><br><span class="line">dpkg -i /packages/ffmpeg/libavutil56_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libavutil-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libpostproc55_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libpostproc-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libswresample3_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libswresample-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libswscale5_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libswscale-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libavcodec58_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libavcodec-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libavformat58_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libavformat-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libavfilter7_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libavfilter-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libavdevice58_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/libavdevice-dev_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line">dpkg -i /packages/ffmpeg/ffmpeg_4.4.2-0ubuntu0.22.04.1_arm64.deb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mpv</span></span><br><span class="line">rm /etc/mpv/mpv.conf</span><br><span class="line">dpkg -i /packages/mpv/libmpv1_0.34.1-1ubuntu3_arm64.deb</span><br><span class="line">dpkg -i /packages/mpv/libmpv-dev_0.34.1-1ubuntu3_arm64.deb</span><br><span class="line">dpkg -i /packages/mpv/mpv_0.34.1-1ubuntu3_arm64.deb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kodi</span></span><br><span class="line">dpkg -i /packages/kodi/kodi-bin_19.4+dfsg1-2+gles2_arm64.deb</span><br><span class="line">dpkg -i /packages/kodi/kodi-data_19.4+dfsg1-2+gles2_all.deb</span><br><span class="line">dpkg -i /packages/kodi/kodi_19.4+dfsg1-2+gles2_arm64.deb</span><br><span class="line"><span class="meta prompt_">		</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">parpare</span></span><br><span class="line">ln -rsf /usr/lib/*/libv4l2.so /usr/lib/</span><br><span class="line">[ -e /usr/lib/aarch64-linux-gnu/ ] &amp;&amp; ln -Tsf lib /usr/lib64</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">GPU <span class="built_in">test</span></span></span><br><span class="line">dpkg -i /packages/glmark2/libjpeg62-turbo_1.5.1-2_arm64.deb</span><br><span class="line">dpkg -i /packages/glmark2/glmark2*deb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">opencv-python</span></span><br><span class="line">pip install opencv-python -i https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">clean deb</span></span><br><span class="line">rm -rf /packages</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Clean package cache</span></span><br><span class="line">apt-get -y autoremove &amp;&amp; apt-get -y clean &amp;&amp; apt-get -y autoclean</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF | chroot $&#123;chroot_dir&#125; /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">usb</span></span><br><span class="line">echo &quot;dash dash/sh boolean false&quot; | debconf-set-selections</span><br><span class="line">dpkg-reconfigure dash</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Swapfile</span></span><br><span class="line">cat &lt;&lt; EOF | chroot $&#123;chroot_dir&#125; /bin/bash</span><br><span class="line">set -eE</span><br><span class="line">trap &#x27;echo Error: in $0 on line $LINENO&#x27; ERR</span><br><span class="line"></span><br><span class="line">dd if=/dev/zero of=/tmp/swapfile bs=1024 count=2097152</span><br><span class="line">chmod 600 /tmp/swapfile</span><br><span class="line">mkswap /tmp/swapfile</span><br><span class="line">mv /tmp/swapfile /swapfile</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gdm</span></span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/lib/scripts/gdm-hack.sh $&#123;chroot_dir&#125;/usr/lib/scripts/gdm-hack.sh</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/udev/rules.d/99-gdm-hack.rules $&#123;chroot_dir&#125;/etc/udev/rules.d/99-gdm-hack.rules</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Enable wayland session</span></span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/gdm3/custom.conf $&#123;chroot_dir&#125;/etc/gdm3/custom.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">no <span class="built_in">sleep</span></span></span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/bin/screan-sleep.sh $&#123;chroot_dir&#125;/usr/bin/</span><br><span class="line">cp -r $&#123;overlay_dir&#125;/etc/systemd/system/sysinit.target.wants/screan-sleep.service  $&#123;chroot_dir&#125;/etc/systemd/system/sysinit.target.wants/</span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/lib/systemd/system/screan-sleep.service $&#123;chroot_dir&#125;/usr/lib/systemd/system/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Config file <span class="keyword">for</span> xorg</span></span><br><span class="line">mkdir -p $&#123;chroot_dir&#125;/etc/X11/xorg.conf.d</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/X11/xorg.conf.d/20-modesetting.conf $&#123;chroot_dir&#125;/etc/X11/xorg.conf.d/20-modesetting.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rfkilL</span></span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/polkit-1/localauthority.conf.d/02-allow-colord.conf  $&#123;chroot_dir&#125;/etc/polkit-1/localauthority.conf.d</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Set gstreamer environment variables</span></span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/profile.d/gst.sh $&#123;chroot_dir&#125;/etc/profile.d/gst.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Set cogl to use gles2</span></span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/profile.d/cogl.sh $&#123;chroot_dir&#125;/etc/profile.d/cogl.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Set qt to use wayland</span></span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/profile.d/qt.sh $&#123;chroot_dir&#125;/etc/profile.d/qt.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Config file <span class="keyword">for</span> mpv</span></span><br><span class="line">mkdir $&#123;chroot_dir&#125;/etc/mpv/ -p</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/mpv/mpv.conf $&#123;chroot_dir&#125;/etc/mpv/mpv.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">iqfiles(ov5695 ov13850)</span></span><br><span class="line">mkdir $&#123;chroot_dir&#125;/etc/iqfiles/ -p</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/iqfiles/* $&#123;chroot_dir&#125;/etc/iqfiles/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Networking interfaces</span></span><br><span class="line">mkdir -p $&#123;chroot_dir&#125;/etc/NetworkManager/</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/NetworkManager/NetworkManager.conf $&#123;chroot_dir&#125;/etc/NetworkManager/NetworkManager.conf</span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/lib/NetworkManager/conf.d/10-globally-managed-devices.conf $&#123;chroot_dir&#125;/usr/lib/NetworkManager/conf.d/10-globally-managed-devices.conf</span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/lib/NetworkManager/conf.d/10-override-wifi-random-mac-disable.conf $&#123;chroot_dir&#125;/usr/lib/NetworkManager/conf.d/10-override-wifi-random-mac-disable.conf</span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/lib/NetworkManager/conf.d/20-override-wifi-powersave-disable.conf $&#123;chroot_dir&#125;/usr/lib/NetworkManager/conf.d/20-override-wifi-powersave-disable.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Set chromium inital prefrences</span></span><br><span class="line">mkdir -p $&#123;chroot_dir&#125;/usr/lib/chromium-browser</span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/lib/chromium-browser/initial_preferences $&#123;chroot_dir&#125;/usr/lib/chromium-browser/initial_preferences</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Set chromium default launch args</span></span><br><span class="line">mkdir -p $&#123;chroot_dir&#125;/etc/chromium-browser</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/chromium-browser/default $&#123;chroot_dir&#125;/etc/chromium-browser/default</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Have plymouth use the framebuffer</span></span><br><span class="line">mkdir -p $&#123;chroot_dir&#125;/etc/initramfs-tools/conf-hooks.d</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/initramfs-tools/conf-hooks.d/plymouth $&#123;chroot_dir&#125;/etc/initramfs-tools/conf-hooks.d/plymouth</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Update initramfs</span></span><br><span class="line">chroot $&#123;chroot_dir&#125; /bin/bash -c &quot;update-initramfs -u&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">adbd usb</span></span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/bin/adbd $&#123;chroot_dir&#125;/usr/bin/</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/profile.d/usbdevice.sh $&#123;chroot_dir&#125;/etc/profile.d/</span><br><span class="line">cp -r $&#123;overlay_dir&#125;/etc/systemd/system/sysinit.target.wants/usbdevice.service  $&#123;chroot_dir&#125;/etc/systemd/system/sysinit.target.wants/</span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/bin/usbdevice $&#123;chroot_dir&#125;/usr/bin/</span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/lib/systemd/system/usbdevice.service $&#123;chroot_dir&#125;/usr/lib/systemd/system/</span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/lib/udev/rules.d/61-usbdevice.rules $&#123;chroot_dir&#125;/usr/lib/udev/rules.d/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> Set cpu governor to performance</span></span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/lib/systemd/system/cpu-governor-performance.service $&#123;chroot_dir&#125;/usr/lib/systemd/system/cpu-governor-performance.service</span><br><span class="line">chroot $&#123;chroot_dir&#125; /bin/bash -c &quot;systemctl enable cpu-governor-performance&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Set gpu governor to performance</span></span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/lib/systemd/system/gpu-governor-performance.service $&#123;chroot_dir&#125;/usr/lib/systemd/system/gpu-governor-performance.service</span><br><span class="line">chroot $&#123;chroot_dir&#125; /bin/bash -c &quot;systemctl enable gpu-governor-performance&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">async</span></span><br><span class="line">mkdir -p $&#123;chroot_dir&#125;/usr/local/bin/</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/init.d/S10atomic_commit.sh  $&#123;chroot_dir&#125;/etc/init.d/</span><br><span class="line">mkdir -p $&#123;chroot_dir&#125;/etc/systemd/system/multi-user.target.wants/</span><br><span class="line">cp -r $&#123;overlay_dir&#125;/etc/systemd/system/multi-user.target.wants/async.service $&#123;chroot_dir&#125;/etc/systemd/system/multi-user.target.wants/</span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/local/bin/modetest $&#123;chroot_dir&#125;/usr/local/bin/</span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/lib/systemd/system/async.service $&#123;chroot_dir&#125;/usr/lib/systemd/system/async.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">drm</span></span><br><span class="line">mkdir -p $&#123;chroot_dir&#125;/etc/udev/rules.d</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/udev/rules.d/60-drm.rules $&#123;chroot_dir&#125;/etc/udev/rules.d/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pulse</span></span><br><span class="line">cp -r $&#123;overlay_dir&#125;/etc/pulse $&#123;chroot_dir&#125;/etc/pulse</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/udev/rules.d/88-rockchip-camera.rules $&#123;chroot_dir&#125;/etc/udev/rules.d/</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/udev/rules.d/90-pulseaudio-rockchip.rules $&#123;chroot_dir&#125;/etc/udev/rules.d/</span><br><span class="line">cp $&#123;overlay_dir&#125;/etc/udev/rules.d/99-rockchip-permissions.rules $&#123;chroot_dir&#125;/etc/udev/rules.d/</span><br><span class="line">cp -r $&#123;overlay_dir&#125;/usr/share/alsa $&#123;chroot_dir&#125;/usr/share/</span><br><span class="line">cp -r $&#123;overlay_dir&#125;/usr/share/pulseaudio $&#123;chroot_dir&#125;/usr/share/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">user <span class="built_in">local</span> bin apt ros docker qt</span></span><br><span class="line">cp $&#123;overlay_dir&#125;/usr/local/bin/*  $&#123;chroot_dir&#125;/usr/local/bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etc/udev/rules.d</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">qt clean display</span></span><br><span class="line">cat &lt;&lt; EOF | chroot $&#123;chroot_dir&#125; /bin/bash</span><br><span class="line">cd /usr/lib/aarch64-linux-gnu/dri/</span><br><span class="line">cp rockchip_dri.so /</span><br><span class="line">rm /usr/lib/aarch64-linux-gnu/dri/*.so</span><br><span class="line">mv /*.so /usr/lib/aarch64-linux-gnu/dri/</span><br><span class="line">rm /etc/profile.d/qt.sh</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Umount the temporary API filesystems</span></span><br><span class="line">umount -lf $&#123;chroot_dir&#125;/dev/pts 2&gt; /dev/null || true</span><br><span class="line">umount -lf $&#123;chroot_dir&#125;/* 2&gt; /dev/null || true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Tar the entire rootfs</span></span><br><span class="line">cd $&#123;chroot_dir&#125; &amp;&amp; XZ_OPT=&quot;-3 -T0&quot; tar -cpJf ../ubuntu-22.04.2-preinstalled-desktop-arm64.rootfs.tar.xz . &amp;&amp; cd ..</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>香橙派构建脚本分析</category>
      </categories>
      <tags>
        <tag>瑞芯微脚本分析</tag>
      </tags>
  </entry>
  <entry>
    <title>1-1 git的学习</title>
    <url>/2023/09/22/1-1-git%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>s</p>
<p>github名称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1361382269@qq.com</span><br></pre></td></tr></table></figure>



<p>github 令牌</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">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</span><br></pre></td></tr></table></figure>





<p>添加信任表，否咋会报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --add safe.directory &quot;*&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309242211841.png" alt="image-20230924221131815"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git lfs track &quot;*.deb&quot;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .gitattributes</span><br></pre></td></tr></table></figure>





<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -M main</span><br><span class="line">git remote add origin https://github.com/chai0705/rk3588_ubuntu20_xfce.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>0-16 openwrt进阶</title>
    <url>/2023/09/26/0-16-openwrt%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="http://opensource.rock-chips.com/wiki_Main_Page">http://opensource.rock-chips.com/wiki_Main_Page</a></p>
<h1 id="1-瑞芯微官方wiki"><a href="#1-瑞芯微官方wiki" class="headerlink" title="1.瑞芯微官方wiki"></a>1.瑞芯微官方wiki</h1><p>瑞芯微的wiki，目前支持的硬件如下所示：<br><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230926204922178.png" alt="image-20230926204922178"></p>
<p>关于3588的还没有出来，但其实都是一样的，这里不管。</p>
<p>uboot的 wiki</p>
<p><a href="http://opensource.rock-chips.com/wiki_U-Boot">http://opensource.rock-chips.com/wiki_U-Boot</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+----------------+----------+-------------+---------+</span><br><span class="line">| Boot   | Terminology #1 | Actual   | Rockchip    | Image   |</span><br><span class="line">| stage  |                | program  |  Image      | Location|</span><br><span class="line">| number |                | name     |   Name      | (sector)|</span><br><span class="line">+--------+----------------+----------+-------------+---------+</span><br><span class="line">| 1      |  Primary       | ROM code | BootRom     |         |</span><br><span class="line">|        |  Program       |          |             |         |</span><br><span class="line">|        |  Loader        |          |             |         |</span><br><span class="line">|        |                |          |             |         |</span><br><span class="line">| 2      |  Secondary     | U-Boot   |idbloader.img| 0x40    | pre-loader</span><br><span class="line">|        |  Program       | TPL/SPL  |             |         |</span><br><span class="line">|        |  Loader (SPL)  |          |             |         |</span><br><span class="line">|        |                |          |             |         |</span><br><span class="line">| 3      |  -             | U-Boot   | u-boot.itb  | 0x4000  | including u-boot and atf</span><br><span class="line">|        |                |          | uboot.img   |         | only used with miniloader</span><br><span class="line">|        |                |          |             |         |</span><br><span class="line">|        |                | ATF/TEE  | trust.img   | 0x6000  | only used with miniloader</span><br><span class="line">|        |                |          |             |         |</span><br><span class="line">| 4      |  -             | kernel   | boot.img    | 0x8000  |</span><br><span class="line">|        |                |          |             |         |</span><br><span class="line">| 5      |  -             | rootfs   | rootfs.img  | 0x40000 |</span><br><span class="line">+--------+----------------+----------+-------------+---------+</span><br></pre></td></tr></table></figure>

<p>当我们谈论从 eMMC&#x2F;SD&#x2F;U 盘&#x2F;网络启动时，它们涉及到不同的概念：</p>
<p>第一阶段（Stage 1）始终在引导 ROM 中，它加载第二阶段（Stage 2），并可能加载第三阶段（当启用 SPL_BACK_TO_BROM 选项时）。<br>从 SPI 闪存启动意味着第二阶段（SPL 和 U-Boot）的固件位于 SPI 闪存中，而第四阶段（Stage 4）和第五阶段（Stage 5）位于其他地方；<br>从 eMMC 启动意味着所有固件（包括第二阶段、第三阶段、第四阶段和第五阶段）都存储在 eMMC 中；<br>从 SD 卡启动意味着所有固件（包括第二阶段、第三阶段、第四阶段和第五阶段）都存储在 SD 卡中；<br>从 U 盘启动意味着第四阶段和第五阶段的固件（不包括 SPL 和 U-Boot）存储在 U 盘中，可选地只包含第五阶段；<br>从网络&#x2F;TFTP启动意味着第四阶段和第五阶段的固件（不包括 SPL 和 U-Boot）存储在网络上。</p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309262100985.jpeg" alt="Rockchip bootflow.jpg"></p>
<h1 id="2-uboot官方"><a href="#2-uboot官方" class="headerlink" title="2. uboot官方"></a>2. uboot官方</h1><p><a href="https://u-boot.readthedocs.io/en/latest/board/rockchip/index.html">https://u-boot.readthedocs.io/en/latest/board/rockchip/index.html</a></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309262106742.png" alt="image-20230926210621659"></p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309262106001.png" alt="image-20230926210654968"></p>
<p>sudo apt-get install python-pyelftools python3-pyelftools -y</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export ARCH=arm64</span><br><span class="line">export BL31=../rkbin/bin/rk35/rk3588_bl31_v1.33.elf</span><br><span class="line">export ROCKCHIP_TPL=../rkbin/bin/rk35/rk3588_ddr_lp4_2112MHz_lp5_2736MHz_v1.09.bin</span><br><span class="line">make rk3588_defconfig</span><br><span class="line">make CROSS_COMPILE=aarch64-linux-gnu-</span><br><span class="line"></span><br><span class="line">./make.sh CROSS_COMPILE=aarch64-linux-gnu- rk3588</span><br></pre></td></tr></table></figure>





<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/openwrt/openwrt.git</span><br><span class="line"> git branch -a</span><br><span class="line"> git checkout openwrt-23.05</span><br><span class="line"> make menuconfig </span><br><span class="line"> make V=99 download</span><br><span class="line"> make V=99 -j32</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/orangepi-xunlong/u-boot-orangepi.git</span><br><span class="line">git checkout v2017.09-rk3588</span><br><span class="line">export arch=arm64</span><br><span class="line">make orangepi_5b_defconfig</span><br><span class="line">make CROSS_COMPILE=&quot;aarch64-linux-gnu-&quot; -j32</span><br></pre></td></tr></table></figure>

<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309262153640.png" alt="image-20230926215328624"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/chai0705/3588-uboot.git</span><br><span class="line">git branch -a</span><br><span class="line">make rockchip_linux_defconfig ARCH=arm64</span><br><span class="line">make CROSS_COMPILE=&quot;aarch64-linux-gnu-&quot; -j32</span><br></pre></td></tr></table></figure>

<p>make ARCH&#x3D;arm64 CROSS_COMPILE&#x3D;”aarch64-linux-gnu-“  rk3588-evb7-lp4-v10-linux.img  -j32  </p>
<p><img src="https://chai-1301855619.cos.ap-beijing.myqcloud.com/202309262231481.png" alt="image-20230926223144462"></p>
<p> “ddrbin_tool” 的工具，可用于修改和生成DDR（双数据率）二进制文件。该工具具有两个功能：</p>
<p>功能1：从ddrbin_param.txt修改DDR二进制文件</p>
<ol>
<li><p>根据您的要求修改 “ddrbin_param.txt” 文件。该文件包含DDR频率、UART（通用异步收发器）信息等参数。如果您希望保持某些项目的默认值，请在文件中将其留空。</p>
</li>
<li><p>使用以下参数运行 “ddrbin_tool”：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./ddrbin_tool ddrbin_param.txt px30_ddr_333MHz_v1.13.bin</span><br><span class="line">将 &quot;ddrbin_param.txt&quot; 替换为您修改后的参数文件的名称，将 &quot;px30_ddr_333MHz_v1.13.bin&quot; 替换为您要修改的DDR二进制文件的名称。</span><br></pre></td></tr></table></figure></li>
</ol>
<p>功能2：将DDR二进制文件配置获取到gen_param.txt文件中<br>如果您想获取DDR二进制文件的配置，可以使用 “-g” 标志运行该工具，并指定要保存配置的输出文件。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./ddrbin_tool -g gen_param.txt px30_ddr_333MHz_v1.15.bin</span><br></pre></td></tr></table></figure>

<p>该命令将生成一个名为 “gen_param.txt” 的文件，其中包含 “px30_ddr_333MHz_v1.15.bin” DDR二进制文件的配置详细信息。</p>
<p>在我们开发板上使用的就是这个方法。</p>
]]></content>
      <categories>
        <category>瑞芯微固件分析http://opensource.rock-chips.com/wiki_Main_Page</category>
      </categories>
      <tags>
        <tag>瑞芯微脚本分析</tag>
      </tags>
  </entry>
</search>
